// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingServiceClient is the client API for TradingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingServiceClient interface {
	// Submit a signed transaction (v2)
	SubmitTransactionV2(ctx context.Context, in *SubmitTransactionV2Request, opts ...grpc.CallOption) (*SubmitTransactionV2Response, error)
	// Propagate a chain event
	PropagateChainEvent(ctx context.Context, in *PropagateChainEventRequest, opts ...grpc.CallOption) (*PropagateChainEventResponse, error)
	// Get Statistics on Vega
	Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error)
	// Get the height of the last tendermint block
	LastBlockHeight(ctx context.Context, in *LastBlockHeightRequest, opts ...grpc.CallOption) (*LastBlockHeightResponse, error)
	// Get Time
	GetVegaTime(ctx context.Context, in *GetVegaTimeRequest, opts ...grpc.CallOption) (*GetVegaTimeResponse, error)
	// Subscribe to a stream of events from the core
	ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (TradingService_ObserveEventBusClient, error)
}

type tradingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingServiceClient(cc grpc.ClientConnInterface) TradingServiceClient {
	return &tradingServiceClient{cc}
}

func (c *tradingServiceClient) SubmitTransactionV2(ctx context.Context, in *SubmitTransactionV2Request, opts ...grpc.CallOption) (*SubmitTransactionV2Response, error) {
	out := new(SubmitTransactionV2Response)
	err := c.cc.Invoke(ctx, "/api.v1.TradingService/SubmitTransactionV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) PropagateChainEvent(ctx context.Context, in *PropagateChainEventRequest, opts ...grpc.CallOption) (*PropagateChainEventResponse, error) {
	out := new(PropagateChainEventResponse)
	err := c.cc.Invoke(ctx, "/api.v1.TradingService/PropagateChainEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	out := new(StatisticsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.TradingService/Statistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) LastBlockHeight(ctx context.Context, in *LastBlockHeightRequest, opts ...grpc.CallOption) (*LastBlockHeightResponse, error) {
	out := new(LastBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/api.v1.TradingService/LastBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetVegaTime(ctx context.Context, in *GetVegaTimeRequest, opts ...grpc.CallOption) (*GetVegaTimeResponse, error) {
	out := new(GetVegaTimeResponse)
	err := c.cc.Invoke(ctx, "/api.v1.TradingService/GetVegaTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (TradingService_ObserveEventBusClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingService_ServiceDesc.Streams[0], "/api.v1.TradingService/ObserveEventBus", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingServiceObserveEventBusClient{stream}
	return x, nil
}

type TradingService_ObserveEventBusClient interface {
	Send(*ObserveEventBusRequest) error
	Recv() (*ObserveEventBusResponse, error)
	grpc.ClientStream
}

type tradingServiceObserveEventBusClient struct {
	grpc.ClientStream
}

func (x *tradingServiceObserveEventBusClient) Send(m *ObserveEventBusRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tradingServiceObserveEventBusClient) Recv() (*ObserveEventBusResponse, error) {
	m := new(ObserveEventBusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TradingServiceServer is the server API for TradingService service.
// All implementations must embed UnimplementedTradingServiceServer
// for forward compatibility
type TradingServiceServer interface {
	// Submit a signed transaction (v2)
	SubmitTransactionV2(context.Context, *SubmitTransactionV2Request) (*SubmitTransactionV2Response, error)
	// Propagate a chain event
	PropagateChainEvent(context.Context, *PropagateChainEventRequest) (*PropagateChainEventResponse, error)
	// Get Statistics on Vega
	Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error)
	// Get the height of the last tendermint block
	LastBlockHeight(context.Context, *LastBlockHeightRequest) (*LastBlockHeightResponse, error)
	// Get Time
	GetVegaTime(context.Context, *GetVegaTimeRequest) (*GetVegaTimeResponse, error)
	// Subscribe to a stream of events from the core
	ObserveEventBus(TradingService_ObserveEventBusServer) error
	mustEmbedUnimplementedTradingServiceServer()
}

// UnimplementedTradingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradingServiceServer struct {
}

func (UnimplementedTradingServiceServer) SubmitTransactionV2(context.Context, *SubmitTransactionV2Request) (*SubmitTransactionV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransactionV2 not implemented")
}
func (UnimplementedTradingServiceServer) PropagateChainEvent(context.Context, *PropagateChainEventRequest) (*PropagateChainEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagateChainEvent not implemented")
}
func (UnimplementedTradingServiceServer) Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistics not implemented")
}
func (UnimplementedTradingServiceServer) LastBlockHeight(context.Context, *LastBlockHeightRequest) (*LastBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlockHeight not implemented")
}
func (UnimplementedTradingServiceServer) GetVegaTime(context.Context, *GetVegaTimeRequest) (*GetVegaTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVegaTime not implemented")
}
func (UnimplementedTradingServiceServer) ObserveEventBus(TradingService_ObserveEventBusServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveEventBus not implemented")
}
func (UnimplementedTradingServiceServer) mustEmbedUnimplementedTradingServiceServer() {}

// UnsafeTradingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingServiceServer will
// result in compilation errors.
type UnsafeTradingServiceServer interface {
	mustEmbedUnimplementedTradingServiceServer()
}

func RegisterTradingServiceServer(s grpc.ServiceRegistrar, srv TradingServiceServer) {
	s.RegisterService(&TradingService_ServiceDesc, srv)
}

func _TradingService_SubmitTransactionV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).SubmitTransactionV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TradingService/SubmitTransactionV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).SubmitTransactionV2(ctx, req.(*SubmitTransactionV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_PropagateChainEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropagateChainEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).PropagateChainEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TradingService/PropagateChainEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).PropagateChainEvent(ctx, req.(*PropagateChainEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TradingService/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).Statistics(ctx, req.(*StatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_LastBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).LastBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TradingService/LastBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).LastBlockHeight(ctx, req.(*LastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetVegaTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVegaTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetVegaTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TradingService/GetVegaTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetVegaTime(ctx, req.(*GetVegaTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_ObserveEventBus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradingServiceServer).ObserveEventBus(&tradingServiceObserveEventBusServer{stream})
}

type TradingService_ObserveEventBusServer interface {
	Send(*ObserveEventBusResponse) error
	Recv() (*ObserveEventBusRequest, error)
	grpc.ServerStream
}

type tradingServiceObserveEventBusServer struct {
	grpc.ServerStream
}

func (x *tradingServiceObserveEventBusServer) Send(m *ObserveEventBusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tradingServiceObserveEventBusServer) Recv() (*ObserveEventBusRequest, error) {
	m := new(ObserveEventBusRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TradingService_ServiceDesc is the grpc.ServiceDesc for TradingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.TradingService",
	HandlerType: (*TradingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransactionV2",
			Handler:    _TradingService_SubmitTransactionV2_Handler,
		},
		{
			MethodName: "PropagateChainEvent",
			Handler:    _TradingService_PropagateChainEvent_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _TradingService_Statistics_Handler,
		},
		{
			MethodName: "LastBlockHeight",
			Handler:    _TradingService_LastBlockHeight_Handler,
		},
		{
			MethodName: "GetVegaTime",
			Handler:    _TradingService_GetVegaTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveEventBus",
			Handler:       _TradingService_ObserveEventBus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/trading.proto",
}
