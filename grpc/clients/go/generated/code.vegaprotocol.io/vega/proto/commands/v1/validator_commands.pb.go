// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: commands/v1/validator_commands.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	proto1 "github.com/vegaprotocol/api/grpc/clients/go/generated/code.vegaprotocol.io/vega/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The kind of the signature created by a node, for example, allow-listing a new asset, withdrawal etc
type NodeSignatureKind int32

const (
	// Represents an unspecified or missing value from the input
	NodeSignatureKind_NODE_SIGNATURE_KIND_UNSPECIFIED NodeSignatureKind = 0
	// Represents a signature for a new asset allow-listing
	NodeSignatureKind_NODE_SIGNATURE_KIND_ASSET_NEW NodeSignatureKind = 1
	// Represents a signature for an asset withdrawal
	NodeSignatureKind_NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL NodeSignatureKind = 2
)

// Enum value maps for NodeSignatureKind.
var (
	NodeSignatureKind_name = map[int32]string{
		0: "NODE_SIGNATURE_KIND_UNSPECIFIED",
		1: "NODE_SIGNATURE_KIND_ASSET_NEW",
		2: "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL",
	}
	NodeSignatureKind_value = map[string]int32{
		"NODE_SIGNATURE_KIND_UNSPECIFIED":      0,
		"NODE_SIGNATURE_KIND_ASSET_NEW":        1,
		"NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL": 2,
	}
)

func (x NodeSignatureKind) Enum() *NodeSignatureKind {
	p := new(NodeSignatureKind)
	*p = x
	return p
}

func (x NodeSignatureKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeSignatureKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commands_v1_validator_commands_proto_enumTypes[0].Descriptor()
}

func (NodeSignatureKind) Type() protoreflect.EnumType {
	return &file_commands_v1_validator_commands_proto_enumTypes[0]
}

func (x NodeSignatureKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeSignatureKind.Descriptor instead.
func (NodeSignatureKind) EnumDescriptor() ([]byte, []int) {
	return file_commands_v1_validator_commands_proto_rawDescGZIP(), []int{0}
}

// Used to Register a node as a validator during network start-up
type NodeRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vega public key, required field
	VegaPubKey string `protobuf:"bytes,1,opt,name=vega_pub_key,json=vegaPubKey,proto3" json:"vega_pub_key,omitempty"`
	// Ethereum public key, required field
	EthereumAddress string `protobuf:"bytes,2,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	// Public key for the blockchain, required field
	ChainPubKey string `protobuf:"bytes,3,opt,name=chain_pub_key,json=chainPubKey,proto3" json:"chain_pub_key,omitempty"`
	// URL with more info on the node
	InfoUrl string `protobuf:"bytes,4,opt,name=info_url,json=infoUrl,proto3" json:"info_url,omitempty"`
	// Country code (ISO 3166-1 alpha-2) for the location of the node
	Country string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *NodeRegistration) Reset() {
	*x = NodeRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_v1_validator_commands_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegistration) ProtoMessage() {}

func (x *NodeRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_commands_v1_validator_commands_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegistration.ProtoReflect.Descriptor instead.
func (*NodeRegistration) Descriptor() ([]byte, []int) {
	return file_commands_v1_validator_commands_proto_rawDescGZIP(), []int{0}
}

func (x *NodeRegistration) GetVegaPubKey() string {
	if x != nil {
		return x.VegaPubKey
	}
	return ""
}

func (x *NodeRegistration) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *NodeRegistration) GetChainPubKey() string {
	if x != nil {
		return x.ChainPubKey
	}
	return ""
}

func (x *NodeRegistration) GetInfoUrl() string {
	if x != nil {
		return x.InfoUrl
	}
	return ""
}

func (x *NodeRegistration) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// Used when a node votes for validating a given resource exists or is valid,
// for example, an ERC20 deposit is valid and exists on ethereum
type NodeVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public key, required field
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// Reference, required field
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *NodeVote) Reset() {
	*x = NodeVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_v1_validator_commands_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeVote) ProtoMessage() {}

func (x *NodeVote) ProtoReflect() protoreflect.Message {
	mi := &file_commands_v1_validator_commands_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeVote.ProtoReflect.Descriptor instead.
func (*NodeVote) Descriptor() ([]byte, []int) {
	return file_commands_v1_validator_commands_proto_rawDescGZIP(), []int{1}
}

func (x *NodeVote) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *NodeVote) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network
type NodeSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the resource being signed
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The signature
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	// The kind of resource being signed
	Kind NodeSignatureKind `protobuf:"varint,3,opt,name=kind,proto3,enum=vega.commands.v1.NodeSignatureKind" json:"kind,omitempty"`
}

func (x *NodeSignature) Reset() {
	*x = NodeSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_v1_validator_commands_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSignature) ProtoMessage() {}

func (x *NodeSignature) ProtoReflect() protoreflect.Message {
	mi := &file_commands_v1_validator_commands_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSignature.ProtoReflect.Descriptor instead.
func (*NodeSignature) Descriptor() ([]byte, []int) {
	return file_commands_v1_validator_commands_proto_rawDescGZIP(), []int{2}
}

func (x *NodeSignature) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeSignature) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *NodeSignature) GetKind() NodeSignatureKind {
	if x != nil {
		return x.Kind
	}
	return NodeSignatureKind_NODE_SIGNATURE_KIND_UNSPECIFIED
}

// An event forwarded to the Vega network to provide information on events happening on other networks
type ChainEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the transaction in which the events happened, usually a hash
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Arbitrary one-time integer used to prevent replay attacks
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The event
	//
	// Types that are assignable to Event:
	//	*ChainEvent_Builtin
	//	*ChainEvent_Erc20
	//	*ChainEvent_Btc
	//	*ChainEvent_Validator
	//	*ChainEvent_StakingEvent
	Event isChainEvent_Event `protobuf_oneof:"event"`
}

func (x *ChainEvent) Reset() {
	*x = ChainEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_v1_validator_commands_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainEvent) ProtoMessage() {}

func (x *ChainEvent) ProtoReflect() protoreflect.Message {
	mi := &file_commands_v1_validator_commands_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainEvent.ProtoReflect.Descriptor instead.
func (*ChainEvent) Descriptor() ([]byte, []int) {
	return file_commands_v1_validator_commands_proto_rawDescGZIP(), []int{3}
}

func (x *ChainEvent) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *ChainEvent) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (m *ChainEvent) GetEvent() isChainEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ChainEvent) GetBuiltin() *proto1.BuiltinAssetEvent {
	if x, ok := x.GetEvent().(*ChainEvent_Builtin); ok {
		return x.Builtin
	}
	return nil
}

func (x *ChainEvent) GetErc20() *proto1.ERC20Event {
	if x, ok := x.GetEvent().(*ChainEvent_Erc20); ok {
		return x.Erc20
	}
	return nil
}

func (x *ChainEvent) GetBtc() *proto1.BTCEvent {
	if x, ok := x.GetEvent().(*ChainEvent_Btc); ok {
		return x.Btc
	}
	return nil
}

func (x *ChainEvent) GetValidator() *proto1.ValidatorEvent {
	if x, ok := x.GetEvent().(*ChainEvent_Validator); ok {
		return x.Validator
	}
	return nil
}

func (x *ChainEvent) GetStakingEvent() *proto1.StakingEvent {
	if x, ok := x.GetEvent().(*ChainEvent_StakingEvent); ok {
		return x.StakingEvent
	}
	return nil
}

type isChainEvent_Event interface {
	isChainEvent_Event()
}

type ChainEvent_Builtin struct {
	// Built-in asset event
	Builtin *proto1.BuiltinAssetEvent `protobuf:"bytes,1001,opt,name=builtin,proto3,oneof"`
}

type ChainEvent_Erc20 struct {
	// Ethereum ERC20 event
	Erc20 *proto1.ERC20Event `protobuf:"bytes,1002,opt,name=erc20,proto3,oneof"`
}

type ChainEvent_Btc struct {
	// Bitcoin BTC event
	Btc *proto1.BTCEvent `protobuf:"bytes,1003,opt,name=btc,proto3,oneof"`
}

type ChainEvent_Validator struct {
	// Validator event
	Validator *proto1.ValidatorEvent `protobuf:"bytes,1004,opt,name=validator,proto3,oneof"`
}

type ChainEvent_StakingEvent struct {
	// Ethereum Staking event
	StakingEvent *proto1.StakingEvent `protobuf:"bytes,1005,opt,name=staking_event,json=stakingEvent,proto3,oneof"`
}

func (*ChainEvent_Builtin) isChainEvent_Event() {}

func (*ChainEvent_Erc20) isChainEvent_Event() {}

func (*ChainEvent_Btc) isChainEvent_Event() {}

func (*ChainEvent_Validator) isChainEvent_Event() {}

func (*ChainEvent_StakingEvent) isChainEvent_Event() {}

var File_commands_v1_validator_commands_proto protoreflect.FileDescriptor

var file_commands_v1_validator_commands_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77,
	0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0c, 0x76, 0x65, 0x67,
	0x61, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0a, 0x76, 0x65, 0x67, 0x61, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x69, 0x6e,
	0x66, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x51, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x56,
	0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x6a, 0x0a, 0x0d, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x37, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xb9, 0x02, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0xe9, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x63, 0x32, 0x30, 0x18,
	0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x63, 0x32,
	0x30, 0x12, 0x23, 0x0a, 0x03, 0x62, 0x74, 0x63, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x54, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x62, 0x74, 0x63, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xed,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2a, 0x85, 0x01, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01,
	0x12, 0x28, 0x0a, 0x24, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x02, 0x42, 0x4f, 0x0a, 0x20, 0x69, 0x6f,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x5a, 0x2b,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_commands_v1_validator_commands_proto_rawDescOnce sync.Once
	file_commands_v1_validator_commands_proto_rawDescData = file_commands_v1_validator_commands_proto_rawDesc
)

func file_commands_v1_validator_commands_proto_rawDescGZIP() []byte {
	file_commands_v1_validator_commands_proto_rawDescOnce.Do(func() {
		file_commands_v1_validator_commands_proto_rawDescData = protoimpl.X.CompressGZIP(file_commands_v1_validator_commands_proto_rawDescData)
	})
	return file_commands_v1_validator_commands_proto_rawDescData
}

var file_commands_v1_validator_commands_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_commands_v1_validator_commands_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_commands_v1_validator_commands_proto_goTypes = []interface{}{
	(NodeSignatureKind)(0),           // 0: vega.commands.v1.NodeSignatureKind
	(*NodeRegistration)(nil),         // 1: vega.commands.v1.NodeRegistration
	(*NodeVote)(nil),                 // 2: vega.commands.v1.NodeVote
	(*NodeSignature)(nil),            // 3: vega.commands.v1.NodeSignature
	(*ChainEvent)(nil),               // 4: vega.commands.v1.ChainEvent
	(*proto1.BuiltinAssetEvent)(nil), // 5: vega.BuiltinAssetEvent
	(*proto1.ERC20Event)(nil),        // 6: vega.ERC20Event
	(*proto1.BTCEvent)(nil),          // 7: vega.BTCEvent
	(*proto1.ValidatorEvent)(nil),    // 8: vega.ValidatorEvent
	(*proto1.StakingEvent)(nil),      // 9: vega.StakingEvent
}
var file_commands_v1_validator_commands_proto_depIdxs = []int32{
	0, // 0: vega.commands.v1.NodeSignature.kind:type_name -> vega.commands.v1.NodeSignatureKind
	5, // 1: vega.commands.v1.ChainEvent.builtin:type_name -> vega.BuiltinAssetEvent
	6, // 2: vega.commands.v1.ChainEvent.erc20:type_name -> vega.ERC20Event
	7, // 3: vega.commands.v1.ChainEvent.btc:type_name -> vega.BTCEvent
	8, // 4: vega.commands.v1.ChainEvent.validator:type_name -> vega.ValidatorEvent
	9, // 5: vega.commands.v1.ChainEvent.staking_event:type_name -> vega.StakingEvent
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_commands_v1_validator_commands_proto_init() }
func file_commands_v1_validator_commands_proto_init() {
	if File_commands_v1_validator_commands_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commands_v1_validator_commands_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_v1_validator_commands_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_v1_validator_commands_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_v1_validator_commands_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_commands_v1_validator_commands_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ChainEvent_Builtin)(nil),
		(*ChainEvent_Erc20)(nil),
		(*ChainEvent_Btc)(nil),
		(*ChainEvent_Validator)(nil),
		(*ChainEvent_StakingEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commands_v1_validator_commands_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commands_v1_validator_commands_proto_goTypes,
		DependencyIndexes: file_commands_v1_validator_commands_proto_depIdxs,
		EnumInfos:         file_commands_v1_validator_commands_proto_enumTypes,
		MessageInfos:      file_commands_v1_validator_commands_proto_msgTypes,
	}.Build()
	File_commands_v1_validator_commands_proto = out.File
	file_commands_v1_validator_commands_proto_rawDesc = nil
	file_commands_v1_validator_commands_proto_goTypes = nil
	file_commands_v1_validator_commands_proto_depIdxs = nil
}
