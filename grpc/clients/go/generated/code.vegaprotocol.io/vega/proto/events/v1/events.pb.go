// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: events/v1/events.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/vegaprotocol/api/grpc/clients/go/generated/code.vegaprotocol.io/vega/proto"
	v1 "github.com/vegaprotocol/api/grpc/clients/go/generated/code.vegaprotocol.io/vega/proto/commands/v1"
	v11 "github.com/vegaprotocol/api/grpc/clients/go/generated/code.vegaprotocol.io/vega/proto/oracles/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// An (event) bus event type is used to specify a type of event
// It has 2 styles of event:
// Single values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item
// Group values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items
type BusEventType int32

const (
	// Default value, always invalid
	BusEventType_BUS_EVENT_TYPE_UNSPECIFIED BusEventType = 0
	// Events of ALL event types, used when filtering stream from event bus
	BusEventType_BUS_EVENT_TYPE_ALL BusEventType = 1
	// Event for blockchain time updates
	BusEventType_BUS_EVENT_TYPE_TIME_UPDATE BusEventType = 2
	// Event for when a transfer happens internally, contains the transfer information
	BusEventType_BUS_EVENT_TYPE_TRANSFER_RESPONSES BusEventType = 3
	// Event indicating position resolution has occurred
	BusEventType_BUS_EVENT_TYPE_POSITION_RESOLUTION BusEventType = 4
	// Event for order updates, both new and existing orders
	BusEventType_BUS_EVENT_TYPE_ORDER BusEventType = 5
	// Event for account updates
	BusEventType_BUS_EVENT_TYPE_ACCOUNT BusEventType = 6
	// Event for party updates
	BusEventType_BUS_EVENT_TYPE_PARTY BusEventType = 7
	// Event indicating a new trade has occurred
	BusEventType_BUS_EVENT_TYPE_TRADE BusEventType = 8
	// Event indicating margin levels have changed for a party
	BusEventType_BUS_EVENT_TYPE_MARGIN_LEVELS BusEventType = 9
	// Event for proposal updates (for governance)
	BusEventType_BUS_EVENT_TYPE_PROPOSAL BusEventType = 10
	// Event indicating a new vote has occurred (for governance)
	BusEventType_BUS_EVENT_TYPE_VOTE BusEventType = 11
	// Event for market data updates
	BusEventType_BUS_EVENT_TYPE_MARKET_DATA BusEventType = 12
	// Event for a new signature for a Vega node
	BusEventType_BUS_EVENT_TYPE_NODE_SIGNATURE BusEventType = 13
	// Event indicating loss socialisation occurred for a party
	BusEventType_BUS_EVENT_TYPE_LOSS_SOCIALIZATION BusEventType = 14
	// Event for when a position is being settled
	BusEventType_BUS_EVENT_TYPE_SETTLE_POSITION BusEventType = 15
	// Event for when a position is distressed
	BusEventType_BUS_EVENT_TYPE_SETTLE_DISTRESSED BusEventType = 16
	// Event indicating a new market was created
	BusEventType_BUS_EVENT_TYPE_MARKET_CREATED BusEventType = 17
	// Event for when an asset is added to Vega
	BusEventType_BUS_EVENT_TYPE_ASSET BusEventType = 18
	// Event indicating a market tick event
	BusEventType_BUS_EVENT_TYPE_MARKET_TICK BusEventType = 19
	// Event for when a withdrawal occurs
	BusEventType_BUS_EVENT_TYPE_WITHDRAWAL BusEventType = 20
	// Event for when a deposit occurs
	BusEventType_BUS_EVENT_TYPE_DEPOSIT BusEventType = 21
	// Event indicating a change in auction state, for example starting or ending an auction
	BusEventType_BUS_EVENT_TYPE_AUCTION BusEventType = 22
	// Event indicating a risk factor has been updated
	BusEventType_BUS_EVENT_TYPE_RISK_FACTOR BusEventType = 23
	// Event indicating a network parameter has been added or updated
	BusEventType_BUS_EVENT_TYPE_NETWORK_PARAMETER BusEventType = 24
	// Event indicating a liquidity provision has been created or updated
	BusEventType_BUS_EVENT_TYPE_LIQUIDITY_PROVISION BusEventType = 25
	// Event indicating a new market was created
	BusEventType_BUS_EVENT_TYPE_MARKET_UPDATED BusEventType = 26
	// Event indicating an oracle spec has been created or updated
	BusEventType_BUS_EVENT_TYPE_ORACLE_SPEC BusEventType = 27
	// Event indicating that an oracle data has been broadcast
	BusEventType_BUS_EVENT_TYPE_ORACLE_DATA BusEventType = 28
	// Event indicating that an delegation balance of a party to a node for current epoch has changed
	BusEventType_BUS_EVENT_TYPE_DELEGATION_BALANCE BusEventType = 29
	// Event indicating that an delegation balance of a party to a node for next epoch has changed
	BusEventType_BUS_EVENT_TYPE_PENDING_DELEGATION_BALANCE BusEventType = 30
	// Event indicating the start or end of an epoch
	BusEventType_BUS_EVENT_TYPE_EPOCH_UPDATE BusEventType = 31
	// Event indicating that validator node has been updated
	BusEventType_BUS_EVENT_TYPE_VALIDATOR_UPDATE BusEventType = 32
	// Event indicating a new staking event have been processed by the network
	BusEventType_BUS_EVENT_TYPE_STAKE_LINKING BusEventType = 33
	// Event indicating the payout of a reward has been initiated
	BusEventType_BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT BusEventType = 34
	// Event indicating a new checkpoint was created
	BusEventType_BUS_EVENT_TYPE_CHECKPOINT BusEventType = 35
	// Event indicating a market related event, for example when a market opens
	BusEventType_BUS_EVENT_TYPE_MARKET BusEventType = 101
	// Event used to report failed transactions back to a user, this is excluded from the ALL type
	BusEventType_BUS_EVENT_TYPE_TX_ERROR BusEventType = 201
)

// Enum value maps for BusEventType.
var (
	BusEventType_name = map[int32]string{
		0:   "BUS_EVENT_TYPE_UNSPECIFIED",
		1:   "BUS_EVENT_TYPE_ALL",
		2:   "BUS_EVENT_TYPE_TIME_UPDATE",
		3:   "BUS_EVENT_TYPE_TRANSFER_RESPONSES",
		4:   "BUS_EVENT_TYPE_POSITION_RESOLUTION",
		5:   "BUS_EVENT_TYPE_ORDER",
		6:   "BUS_EVENT_TYPE_ACCOUNT",
		7:   "BUS_EVENT_TYPE_PARTY",
		8:   "BUS_EVENT_TYPE_TRADE",
		9:   "BUS_EVENT_TYPE_MARGIN_LEVELS",
		10:  "BUS_EVENT_TYPE_PROPOSAL",
		11:  "BUS_EVENT_TYPE_VOTE",
		12:  "BUS_EVENT_TYPE_MARKET_DATA",
		13:  "BUS_EVENT_TYPE_NODE_SIGNATURE",
		14:  "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
		15:  "BUS_EVENT_TYPE_SETTLE_POSITION",
		16:  "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
		17:  "BUS_EVENT_TYPE_MARKET_CREATED",
		18:  "BUS_EVENT_TYPE_ASSET",
		19:  "BUS_EVENT_TYPE_MARKET_TICK",
		20:  "BUS_EVENT_TYPE_WITHDRAWAL",
		21:  "BUS_EVENT_TYPE_DEPOSIT",
		22:  "BUS_EVENT_TYPE_AUCTION",
		23:  "BUS_EVENT_TYPE_RISK_FACTOR",
		24:  "BUS_EVENT_TYPE_NETWORK_PARAMETER",
		25:  "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
		26:  "BUS_EVENT_TYPE_MARKET_UPDATED",
		27:  "BUS_EVENT_TYPE_ORACLE_SPEC",
		28:  "BUS_EVENT_TYPE_ORACLE_DATA",
		29:  "BUS_EVENT_TYPE_DELEGATION_BALANCE",
		30:  "BUS_EVENT_TYPE_PENDING_DELEGATION_BALANCE",
		31:  "BUS_EVENT_TYPE_EPOCH_UPDATE",
		32:  "BUS_EVENT_TYPE_VALIDATOR_UPDATE",
		33:  "BUS_EVENT_TYPE_STAKE_LINKING",
		34:  "BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT",
		35:  "BUS_EVENT_TYPE_CHECKPOINT",
		101: "BUS_EVENT_TYPE_MARKET",
		201: "BUS_EVENT_TYPE_TX_ERROR",
	}
	BusEventType_value = map[string]int32{
		"BUS_EVENT_TYPE_UNSPECIFIED":                0,
		"BUS_EVENT_TYPE_ALL":                        1,
		"BUS_EVENT_TYPE_TIME_UPDATE":                2,
		"BUS_EVENT_TYPE_TRANSFER_RESPONSES":         3,
		"BUS_EVENT_TYPE_POSITION_RESOLUTION":        4,
		"BUS_EVENT_TYPE_ORDER":                      5,
		"BUS_EVENT_TYPE_ACCOUNT":                    6,
		"BUS_EVENT_TYPE_PARTY":                      7,
		"BUS_EVENT_TYPE_TRADE":                      8,
		"BUS_EVENT_TYPE_MARGIN_LEVELS":              9,
		"BUS_EVENT_TYPE_PROPOSAL":                   10,
		"BUS_EVENT_TYPE_VOTE":                       11,
		"BUS_EVENT_TYPE_MARKET_DATA":                12,
		"BUS_EVENT_TYPE_NODE_SIGNATURE":             13,
		"BUS_EVENT_TYPE_LOSS_SOCIALIZATION":         14,
		"BUS_EVENT_TYPE_SETTLE_POSITION":            15,
		"BUS_EVENT_TYPE_SETTLE_DISTRESSED":          16,
		"BUS_EVENT_TYPE_MARKET_CREATED":             17,
		"BUS_EVENT_TYPE_ASSET":                      18,
		"BUS_EVENT_TYPE_MARKET_TICK":                19,
		"BUS_EVENT_TYPE_WITHDRAWAL":                 20,
		"BUS_EVENT_TYPE_DEPOSIT":                    21,
		"BUS_EVENT_TYPE_AUCTION":                    22,
		"BUS_EVENT_TYPE_RISK_FACTOR":                23,
		"BUS_EVENT_TYPE_NETWORK_PARAMETER":          24,
		"BUS_EVENT_TYPE_LIQUIDITY_PROVISION":        25,
		"BUS_EVENT_TYPE_MARKET_UPDATED":             26,
		"BUS_EVENT_TYPE_ORACLE_SPEC":                27,
		"BUS_EVENT_TYPE_ORACLE_DATA":                28,
		"BUS_EVENT_TYPE_DELEGATION_BALANCE":         29,
		"BUS_EVENT_TYPE_PENDING_DELEGATION_BALANCE": 30,
		"BUS_EVENT_TYPE_EPOCH_UPDATE":               31,
		"BUS_EVENT_TYPE_VALIDATOR_UPDATE":           32,
		"BUS_EVENT_TYPE_STAKE_LINKING":              33,
		"BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT":        34,
		"BUS_EVENT_TYPE_CHECKPOINT":                 35,
		"BUS_EVENT_TYPE_MARKET":                     101,
		"BUS_EVENT_TYPE_TX_ERROR":                   201,
	}
)

func (x BusEventType) Enum() *BusEventType {
	p := new(BusEventType)
	*p = x
	return p
}

func (x BusEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_events_v1_events_proto_enumTypes[0].Descriptor()
}

func (BusEventType) Type() protoreflect.EnumType {
	return &file_events_v1_events_proto_enumTypes[0]
}

func (x BusEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusEventType.Descriptor instead.
func (BusEventType) EnumDescriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{0}
}

type StakeLinking_Type int32

const (
	// Default value
	StakeLinking_TYPE_UNSPECIFIED StakeLinking_Type = 0
	// Indicate of a stake deposit instruction
	StakeLinking_TYPE_LINK StakeLinking_Type = 1
	// Indicate of a stake remove instruction
	StakeLinking_TYPE_UNLINK StakeLinking_Type = 2
)

// Enum value maps for StakeLinking_Type.
var (
	StakeLinking_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_LINK",
		2: "TYPE_UNLINK",
	}
	StakeLinking_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_LINK":        1,
		"TYPE_UNLINK":      2,
	}
)

func (x StakeLinking_Type) Enum() *StakeLinking_Type {
	p := new(StakeLinking_Type)
	*p = x
	return p
}

func (x StakeLinking_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StakeLinking_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_events_v1_events_proto_enumTypes[1].Descriptor()
}

func (StakeLinking_Type) Type() protoreflect.EnumType {
	return &file_events_v1_events_proto_enumTypes[1]
}

func (x StakeLinking_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StakeLinking_Type.Descriptor instead.
func (StakeLinking_Type) EnumDescriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{0, 0}
}

type StakeLinking_Status int32

const (
	// Default value
	StakeLinking_STATUS_UNSPECIFIED StakeLinking_Status = 0
	// Indicate an event waiting for confirmation from the vega network
	StakeLinking_STATUS_PENDING StakeLinking_Status = 1
	// Indicate of an event accepted by the vega network
	StakeLinking_STATUS_ACCEPTED StakeLinking_Status = 2
	// Indaicate of an event rejected by the vega network
	StakeLinking_STATUS_REJECTED StakeLinking_Status = 3
)

// Enum value maps for StakeLinking_Status.
var (
	StakeLinking_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PENDING",
		2: "STATUS_ACCEPTED",
		3: "STATUS_REJECTED",
	}
	StakeLinking_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_PENDING":     1,
		"STATUS_ACCEPTED":    2,
		"STATUS_REJECTED":    3,
	}
)

func (x StakeLinking_Status) Enum() *StakeLinking_Status {
	p := new(StakeLinking_Status)
	*p = x
	return p
}

func (x StakeLinking_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StakeLinking_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_events_v1_events_proto_enumTypes[2].Descriptor()
}

func (StakeLinking_Status) Type() protoreflect.EnumType {
	return &file_events_v1_events_proto_enumTypes[2]
}

func (x StakeLinking_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StakeLinking_Status.Descriptor instead.
func (StakeLinking_Status) EnumDescriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{0, 1}
}

// StakeLinking - an event notifying of stake being deposited or removed for a given party
// These events are emitted for every Staking deposit or removed accepted by the network
type StakeLinking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The internal ID for this staking event
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of event
	Type StakeLinking_Type `protobuf:"varint,2,opt,name=type,proto3,enum=vega.events.v1.StakeLinking_Type" json:"type,omitempty"`
	// The timestamps at which the event was emitted by ethereum
	Ts int64 `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	// The party to whom the event is directed at.
	Party string `protobuf:"bytes,4,opt,name=party,proto3" json:"party,omitempty"`
	// The amount of stake deposited or removed
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// The status of the event
	Status StakeLinking_Status `protobuf:"varint,6,opt,name=status,proto3,enum=vega.events.v1.StakeLinking_Status" json:"status,omitempty"`
	// The time at which the vega network finalized the state of the event
	FinalizedAt int64 `protobuf:"varint,7,opt,name=finalized_at,json=finalizedAt,proto3" json:"finalized_at,omitempty"`
	// The hash of the transaction from which the events happen
	TxHash string `protobuf:"bytes,8,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *StakeLinking) Reset() {
	*x = StakeLinking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeLinking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeLinking) ProtoMessage() {}

func (x *StakeLinking) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeLinking.ProtoReflect.Descriptor instead.
func (*StakeLinking) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *StakeLinking) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StakeLinking) GetType() StakeLinking_Type {
	if x != nil {
		return x.Type
	}
	return StakeLinking_TYPE_UNSPECIFIED
}

func (x *StakeLinking) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *StakeLinking) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *StakeLinking) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakeLinking) GetStatus() StakeLinking_Status {
	if x != nil {
		return x.Status
	}
	return StakeLinking_STATUS_UNSPECIFIED
}

func (x *StakeLinking) GetFinalizedAt() int64 {
	if x != nil {
		return x.FinalizedAt
	}
	return 0
}

func (x *StakeLinking) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type CheckpointEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	BlockHash   string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *CheckpointEvent) Reset() {
	*x = CheckpointEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointEvent) ProtoMessage() {}

func (x *CheckpointEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointEvent.ProtoReflect.Descriptor instead.
func (*CheckpointEvent) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *CheckpointEvent) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CheckpointEvent) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *CheckpointEvent) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type RewardPayoutEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party                string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	EpochSeq             string `protobuf:"bytes,2,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	Asset                string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount               string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	PercentOfTotalReward string `protobuf:"bytes,5,opt,name=percent_of_total_reward,json=percentOfTotalReward,proto3" json:"percent_of_total_reward,omitempty"`
	Timestamp            int64  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RewardPayoutEvent) Reset() {
	*x = RewardPayoutEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardPayoutEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardPayoutEvent) ProtoMessage() {}

func (x *RewardPayoutEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardPayoutEvent.ProtoReflect.Descriptor instead.
func (*RewardPayoutEvent) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *RewardPayoutEvent) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *RewardPayoutEvent) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

func (x *RewardPayoutEvent) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *RewardPayoutEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RewardPayoutEvent) GetPercentOfTotalReward() string {
	if x != nil {
		return x.PercentOfTotalReward
	}
	return ""
}

func (x *RewardPayoutEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

//DelegationBalanceEvent - updates on the delegation balance of a party to a node in the current epoch in effect
type DelegationBalanceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party    string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	NodeId   string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Amount   uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	EpochSeq string `protobuf:"bytes,4,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
}

func (x *DelegationBalanceEvent) Reset() {
	*x = DelegationBalanceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationBalanceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationBalanceEvent) ProtoMessage() {}

func (x *DelegationBalanceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationBalanceEvent.ProtoReflect.Descriptor instead.
func (*DelegationBalanceEvent) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *DelegationBalanceEvent) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *DelegationBalanceEvent) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *DelegationBalanceEvent) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DelegationBalanceEvent) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

//PendingDelegationBalanceEvent - updates on the delegation/undelegation balance of a party to a node for the next epoch
type PendingDelegationBalanceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party              string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	NodeId             string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	DelegationAmount   uint64 `protobuf:"varint,3,opt,name=delegation_amount,json=delegationAmount,proto3" json:"delegation_amount,omitempty"`
	UndelegationAmount uint64 `protobuf:"varint,4,opt,name=undelegation_amount,json=undelegationAmount,proto3" json:"undelegation_amount,omitempty"`
	EpochSeq           string `protobuf:"bytes,5,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
}

func (x *PendingDelegationBalanceEvent) Reset() {
	*x = PendingDelegationBalanceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingDelegationBalanceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingDelegationBalanceEvent) ProtoMessage() {}

func (x *PendingDelegationBalanceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingDelegationBalanceEvent.ProtoReflect.Descriptor instead.
func (*PendingDelegationBalanceEvent) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *PendingDelegationBalanceEvent) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PendingDelegationBalanceEvent) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PendingDelegationBalanceEvent) GetDelegationAmount() uint64 {
	if x != nil {
		return x.DelegationAmount
	}
	return 0
}

func (x *PendingDelegationBalanceEvent) GetUndelegationAmount() uint64 {
	if x != nil {
		return x.UndelegationAmount
	}
	return 0
}

func (x *PendingDelegationBalanceEvent) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

// MarketEvent - the common denominator for all market events
// interface has a method to return a string for logging
type MarketEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Payload is a unique information string
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MarketEvent) Reset() {
	*x = MarketEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketEvent) ProtoMessage() {}

func (x *MarketEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketEvent.ProtoReflect.Descriptor instead.
func (*MarketEvent) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *MarketEvent) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketEvent) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type TxErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique party identifier for the related party
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// An error message describing what went wrong
	ErrMsg string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	// The transaction that failed
	//
	// Types that are assignable to Transaction:
	//	*TxErrorEvent_OrderSubmission
	//	*TxErrorEvent_OrderAmendment
	//	*TxErrorEvent_OrderCancellation
	//	*TxErrorEvent_Proposal
	//	*TxErrorEvent_VoteSubmission
	//	*TxErrorEvent_LiquidityProvisionSubmission
	//	*TxErrorEvent_WithdrawSubmission
	Transaction isTxErrorEvent_Transaction `protobuf_oneof:"transaction"`
}

func (x *TxErrorEvent) Reset() {
	*x = TxErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxErrorEvent) ProtoMessage() {}

func (x *TxErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxErrorEvent.ProtoReflect.Descriptor instead.
func (*TxErrorEvent) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *TxErrorEvent) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *TxErrorEvent) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (m *TxErrorEvent) GetTransaction() isTxErrorEvent_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *TxErrorEvent) GetOrderSubmission() *v1.OrderSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_OrderSubmission); ok {
		return x.OrderSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetOrderAmendment() *v1.OrderAmendment {
	if x, ok := x.GetTransaction().(*TxErrorEvent_OrderAmendment); ok {
		return x.OrderAmendment
	}
	return nil
}

func (x *TxErrorEvent) GetOrderCancellation() *v1.OrderCancellation {
	if x, ok := x.GetTransaction().(*TxErrorEvent_OrderCancellation); ok {
		return x.OrderCancellation
	}
	return nil
}

func (x *TxErrorEvent) GetProposal() *v1.ProposalSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (x *TxErrorEvent) GetVoteSubmission() *v1.VoteSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_VoteSubmission); ok {
		return x.VoteSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetLiquidityProvisionSubmission() *v1.LiquidityProvisionSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_LiquidityProvisionSubmission); ok {
		return x.LiquidityProvisionSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetWithdrawSubmission() *v1.WithdrawSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_WithdrawSubmission); ok {
		return x.WithdrawSubmission
	}
	return nil
}

type isTxErrorEvent_Transaction interface {
	isTxErrorEvent_Transaction()
}

type TxErrorEvent_OrderSubmission struct {
	OrderSubmission *v1.OrderSubmission `protobuf:"bytes,101,opt,name=order_submission,json=orderSubmission,proto3,oneof"`
}

type TxErrorEvent_OrderAmendment struct {
	OrderAmendment *v1.OrderAmendment `protobuf:"bytes,102,opt,name=order_amendment,json=orderAmendment,proto3,oneof"`
}

type TxErrorEvent_OrderCancellation struct {
	OrderCancellation *v1.OrderCancellation `protobuf:"bytes,103,opt,name=order_cancellation,json=orderCancellation,proto3,oneof"`
}

type TxErrorEvent_Proposal struct {
	Proposal *v1.ProposalSubmission `protobuf:"bytes,104,opt,name=proposal,proto3,oneof"`
}

type TxErrorEvent_VoteSubmission struct {
	VoteSubmission *v1.VoteSubmission `protobuf:"bytes,105,opt,name=vote_submission,json=voteSubmission,proto3,oneof"`
}

type TxErrorEvent_LiquidityProvisionSubmission struct {
	LiquidityProvisionSubmission *v1.LiquidityProvisionSubmission `protobuf:"bytes,106,opt,name=liquidity_provision_submission,json=liquidityProvisionSubmission,proto3,oneof"`
}

type TxErrorEvent_WithdrawSubmission struct {
	WithdrawSubmission *v1.WithdrawSubmission `protobuf:"bytes,107,opt,name=withdraw_submission,json=withdrawSubmission,proto3,oneof"`
}

func (*TxErrorEvent_OrderSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_OrderAmendment) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_OrderCancellation) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_Proposal) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_VoteSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_LiquidityProvisionSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_WithdrawSubmission) isTxErrorEvent_Transaction() {}

// A time update event contains the latest time update from Vega blockchain
type TimeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp containing latest update from Vega blockchain aka Vega-time
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TimeUpdate) Reset() {
	*x = TimeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeUpdate) ProtoMessage() {}

func (x *TimeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeUpdate.ProtoReflect.Descriptor instead.
func (*TimeUpdate) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{7}
}

func (x *TimeUpdate) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Epoch details
type EpochEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence number that increases by one each epoch
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// What time did this epoch start
	StartTime int64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// What time should this epoch end
	ExpireTime int64 `protobuf:"varint,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// What time did it actually end
	EndTime int64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *EpochEvent) Reset() {
	*x = EpochEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochEvent) ProtoMessage() {}

func (x *EpochEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochEvent.ProtoReflect.Descriptor instead.
func (*EpochEvent) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{8}
}

func (x *EpochEvent) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *EpochEvent) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EpochEvent) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *EpochEvent) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// A transfer responses event contains a collection of transfer information
type TransferResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more entries containing internal transfer information
	Responses []*proto1.TransferResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *TransferResponses) Reset() {
	*x = TransferResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponses) ProtoMessage() {}

func (x *TransferResponses) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponses.ProtoReflect.Descriptor instead.
func (*TransferResponses) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{9}
}

func (x *TransferResponses) GetResponses() []*proto1.TransferResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

// A position resolution event contains information on distressed trades
type PositionResolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Number of distressed traders
	Distressed int64 `protobuf:"varint,2,opt,name=distressed,proto3" json:"distressed,omitempty"`
	// Number of close outs
	Closed int64 `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	// Mark price, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	MarkPrice uint64 `protobuf:"varint,4,opt,name=mark_price,json=markPrice,proto3" json:"mark_price,omitempty"`
}

func (x *PositionResolution) Reset() {
	*x = PositionResolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionResolution) ProtoMessage() {}

func (x *PositionResolution) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionResolution.ProtoReflect.Descriptor instead.
func (*PositionResolution) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{10}
}

func (x *PositionResolution) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *PositionResolution) GetDistressed() int64 {
	if x != nil {
		return x.Distressed
	}
	return 0
}

func (x *PositionResolution) GetClosed() int64 {
	if x != nil {
		return x.Closed
	}
	return 0
}

func (x *PositionResolution) GetMarkPrice() uint64 {
	if x != nil {
		return x.MarkPrice
	}
	return 0
}

// A loss socialization event contains details on the amount of wins unable to be distributed
type LossSocialization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier (public key) for the event
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Amount distributed
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *LossSocialization) Reset() {
	*x = LossSocialization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LossSocialization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LossSocialization) ProtoMessage() {}

func (x *LossSocialization) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LossSocialization.ProtoReflect.Descriptor instead.
func (*LossSocialization) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{11}
}

func (x *LossSocialization) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LossSocialization) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *LossSocialization) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// A trade settlement is part of the settle position event
type TradeSettlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of trade settlement
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Price of settlement as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *TradeSettlement) Reset() {
	*x = TradeSettlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeSettlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSettlement) ProtoMessage() {}

func (x *TradeSettlement) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSettlement.ProtoReflect.Descriptor instead.
func (*TradeSettlement) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{12}
}

func (x *TradeSettlement) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TradeSettlement) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// A settle position event contains position settlement information for a party
type SettlePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier (public key) for the event
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Price of settlement as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	// A collection of 1 or more trade settlements
	TradeSettlements []*TradeSettlement `protobuf:"bytes,4,rep,name=trade_settlements,json=tradeSettlements,proto3" json:"trade_settlements,omitempty"`
}

func (x *SettlePosition) Reset() {
	*x = SettlePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlePosition) ProtoMessage() {}

func (x *SettlePosition) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlePosition.ProtoReflect.Descriptor instead.
func (*SettlePosition) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{13}
}

func (x *SettlePosition) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SettlePosition) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *SettlePosition) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SettlePosition) GetTradeSettlements() []*TradeSettlement {
	if x != nil {
		return x.TradeSettlements
	}
	return nil
}

// A settle distressed event contains information on distressed trading parties who are closed out
type SettleDistressed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier (public key) for the event
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Margin value as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Margin uint64 `protobuf:"varint,3,opt,name=margin,proto3" json:"margin,omitempty"`
	// Price as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price uint64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *SettleDistressed) Reset() {
	*x = SettleDistressed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleDistressed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleDistressed) ProtoMessage() {}

func (x *SettleDistressed) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleDistressed.ProtoReflect.Descriptor instead.
func (*SettleDistressed) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{14}
}

func (x *SettleDistressed) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SettleDistressed) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *SettleDistressed) GetMargin() uint64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *SettleDistressed) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// A market ticket event contains the time value for when a particular market was last processed on Vega
type MarketTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp containing latest update from Vega blockchain aka Vega-time
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *MarketTick) Reset() {
	*x = MarketTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTick) ProtoMessage() {}

func (x *MarketTick) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTick.ProtoReflect.Descriptor instead.
func (*MarketTick) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{15}
}

func (x *MarketTick) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarketTick) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// An auction event indicating a change in auction state, for example starting or ending an auction
type AuctionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// True if the event indicates an auction opening and False otherwise
	OpeningAuction bool `protobuf:"varint,2,opt,name=opening_auction,json=openingAuction,proto3" json:"opening_auction,omitempty"`
	// True if the event indicates leaving auction mode and False otherwise
	Leave bool `protobuf:"varint,3,opt,name=leave,proto3" json:"leave,omitempty"`
	// Timestamp containing the start time for an auction
	Start int64 `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	// Timestamp containing the end time for an auction
	End int64 `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	// the reason this market is/was in auction
	Trigger proto1.AuctionTrigger `protobuf:"varint,6,opt,name=trigger,proto3,enum=vega.AuctionTrigger" json:"trigger,omitempty"`
	// If an auction was ongoing, but was extended for whatever reason, this field will
	// be set to the trigger type indicating which component extended the auction
	ExtensionTrigger proto1.AuctionTrigger `protobuf:"varint,7,opt,name=extension_trigger,json=extensionTrigger,proto3,enum=vega.AuctionTrigger" json:"extension_trigger,omitempty"`
}

func (x *AuctionEvent) Reset() {
	*x = AuctionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionEvent) ProtoMessage() {}

func (x *AuctionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionEvent.ProtoReflect.Descriptor instead.
func (*AuctionEvent) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{16}
}

func (x *AuctionEvent) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *AuctionEvent) GetOpeningAuction() bool {
	if x != nil {
		return x.OpeningAuction
	}
	return false
}

func (x *AuctionEvent) GetLeave() bool {
	if x != nil {
		return x.Leave
	}
	return false
}

func (x *AuctionEvent) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *AuctionEvent) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *AuctionEvent) GetTrigger() proto1.AuctionTrigger {
	if x != nil {
		return x.Trigger
	}
	return proto1.AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

func (x *AuctionEvent) GetExtensionTrigger() proto1.AuctionTrigger {
	if x != nil {
		return x.ExtensionTrigger
	}
	return proto1.AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

// A validator update event contains information about validator node
type ValidatorUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vega public key of validator node
	VegaPubKey string `protobuf:"bytes,1,opt,name=vega_pub_key,json=vegaPubKey,proto3" json:"vega_pub_key,omitempty"`
	// Ethereum public key of validator node
	EthereumAddress string `protobuf:"bytes,2,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	// Public key of Tendermint
	TmPubKey string `protobuf:"bytes,3,opt,name=tm_pub_key,json=tmPubKey,proto3" json:"tm_pub_key,omitempty"`
	// URL with more info on the node
	InfoUrl string `protobuf:"bytes,4,opt,name=info_url,json=infoUrl,proto3" json:"info_url,omitempty"`
	// Country code (ISO 3166-1 alpha-2) for the location of the node
	Country string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *ValidatorUpdate) Reset() {
	*x = ValidatorUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorUpdate) ProtoMessage() {}

func (x *ValidatorUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorUpdate.ProtoReflect.Descriptor instead.
func (*ValidatorUpdate) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{17}
}

func (x *ValidatorUpdate) GetVegaPubKey() string {
	if x != nil {
		return x.VegaPubKey
	}
	return ""
}

func (x *ValidatorUpdate) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *ValidatorUpdate) GetTmPubKey() string {
	if x != nil {
		return x.TmPubKey
	}
	return ""
}

func (x *ValidatorUpdate) GetInfoUrl() string {
	if x != nil {
		return x.InfoUrl
	}
	return ""
}

func (x *ValidatorUpdate) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// A bus event is a container for event bus events emitted by Vega
type BusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique event identifier for the message
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The batch (or block) of transactions that the events relate to
	Block string `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	// The type of bus event (one of the list below)
	Type BusEventType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.events.v1.BusEventType" json:"type,omitempty"`
	// Types that are assignable to Event:
	//	*BusEvent_TimeUpdate
	//	*BusEvent_TransferResponses
	//	*BusEvent_PositionResolution
	//	*BusEvent_Order
	//	*BusEvent_Account
	//	*BusEvent_Party
	//	*BusEvent_Trade
	//	*BusEvent_MarginLevels
	//	*BusEvent_Proposal
	//	*BusEvent_Vote
	//	*BusEvent_MarketData
	//	*BusEvent_NodeSignature
	//	*BusEvent_LossSocialization
	//	*BusEvent_SettlePosition
	//	*BusEvent_SettleDistressed
	//	*BusEvent_MarketCreated
	//	*BusEvent_Asset
	//	*BusEvent_MarketTick
	//	*BusEvent_Withdrawal
	//	*BusEvent_Deposit
	//	*BusEvent_Auction
	//	*BusEvent_RiskFactor
	//	*BusEvent_NetworkParameter
	//	*BusEvent_LiquidityProvision
	//	*BusEvent_MarketUpdated
	//	*BusEvent_OracleSpec
	//	*BusEvent_OracleData
	//	*BusEvent_DelegationBalance
	//	*BusEvent_PendingDelegationBalance
	//	*BusEvent_EpochEvent
	//	*BusEvent_ValidatorUpdate
	//	*BusEvent_StakeLinking
	//	*BusEvent_RewardPayout
	//	*BusEvent_Checkpoint
	//	*BusEvent_Market
	//	*BusEvent_TxErrEvent
	Event isBusEvent_Event `protobuf_oneof:"event"`
}

func (x *BusEvent) Reset() {
	*x = BusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_v1_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusEvent) ProtoMessage() {}

func (x *BusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_v1_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusEvent.ProtoReflect.Descriptor instead.
func (*BusEvent) Descriptor() ([]byte, []int) {
	return file_events_v1_events_proto_rawDescGZIP(), []int{18}
}

func (x *BusEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BusEvent) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *BusEvent) GetType() BusEventType {
	if x != nil {
		return x.Type
	}
	return BusEventType_BUS_EVENT_TYPE_UNSPECIFIED
}

func (m *BusEvent) GetEvent() isBusEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *BusEvent) GetTimeUpdate() *TimeUpdate {
	if x, ok := x.GetEvent().(*BusEvent_TimeUpdate); ok {
		return x.TimeUpdate
	}
	return nil
}

func (x *BusEvent) GetTransferResponses() *TransferResponses {
	if x, ok := x.GetEvent().(*BusEvent_TransferResponses); ok {
		return x.TransferResponses
	}
	return nil
}

func (x *BusEvent) GetPositionResolution() *PositionResolution {
	if x, ok := x.GetEvent().(*BusEvent_PositionResolution); ok {
		return x.PositionResolution
	}
	return nil
}

func (x *BusEvent) GetOrder() *proto1.Order {
	if x, ok := x.GetEvent().(*BusEvent_Order); ok {
		return x.Order
	}
	return nil
}

func (x *BusEvent) GetAccount() *proto1.Account {
	if x, ok := x.GetEvent().(*BusEvent_Account); ok {
		return x.Account
	}
	return nil
}

func (x *BusEvent) GetParty() *proto1.Party {
	if x, ok := x.GetEvent().(*BusEvent_Party); ok {
		return x.Party
	}
	return nil
}

func (x *BusEvent) GetTrade() *proto1.Trade {
	if x, ok := x.GetEvent().(*BusEvent_Trade); ok {
		return x.Trade
	}
	return nil
}

func (x *BusEvent) GetMarginLevels() *proto1.MarginLevels {
	if x, ok := x.GetEvent().(*BusEvent_MarginLevels); ok {
		return x.MarginLevels
	}
	return nil
}

func (x *BusEvent) GetProposal() *proto1.Proposal {
	if x, ok := x.GetEvent().(*BusEvent_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (x *BusEvent) GetVote() *proto1.Vote {
	if x, ok := x.GetEvent().(*BusEvent_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *BusEvent) GetMarketData() *proto1.MarketData {
	if x, ok := x.GetEvent().(*BusEvent_MarketData); ok {
		return x.MarketData
	}
	return nil
}

func (x *BusEvent) GetNodeSignature() *v1.NodeSignature {
	if x, ok := x.GetEvent().(*BusEvent_NodeSignature); ok {
		return x.NodeSignature
	}
	return nil
}

func (x *BusEvent) GetLossSocialization() *LossSocialization {
	if x, ok := x.GetEvent().(*BusEvent_LossSocialization); ok {
		return x.LossSocialization
	}
	return nil
}

func (x *BusEvent) GetSettlePosition() *SettlePosition {
	if x, ok := x.GetEvent().(*BusEvent_SettlePosition); ok {
		return x.SettlePosition
	}
	return nil
}

func (x *BusEvent) GetSettleDistressed() *SettleDistressed {
	if x, ok := x.GetEvent().(*BusEvent_SettleDistressed); ok {
		return x.SettleDistressed
	}
	return nil
}

func (x *BusEvent) GetMarketCreated() *proto1.Market {
	if x, ok := x.GetEvent().(*BusEvent_MarketCreated); ok {
		return x.MarketCreated
	}
	return nil
}

func (x *BusEvent) GetAsset() *proto1.Asset {
	if x, ok := x.GetEvent().(*BusEvent_Asset); ok {
		return x.Asset
	}
	return nil
}

func (x *BusEvent) GetMarketTick() *MarketTick {
	if x, ok := x.GetEvent().(*BusEvent_MarketTick); ok {
		return x.MarketTick
	}
	return nil
}

func (x *BusEvent) GetWithdrawal() *proto1.Withdrawal {
	if x, ok := x.GetEvent().(*BusEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

func (x *BusEvent) GetDeposit() *proto1.Deposit {
	if x, ok := x.GetEvent().(*BusEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *BusEvent) GetAuction() *AuctionEvent {
	if x, ok := x.GetEvent().(*BusEvent_Auction); ok {
		return x.Auction
	}
	return nil
}

func (x *BusEvent) GetRiskFactor() *proto1.RiskFactor {
	if x, ok := x.GetEvent().(*BusEvent_RiskFactor); ok {
		return x.RiskFactor
	}
	return nil
}

func (x *BusEvent) GetNetworkParameter() *proto1.NetworkParameter {
	if x, ok := x.GetEvent().(*BusEvent_NetworkParameter); ok {
		return x.NetworkParameter
	}
	return nil
}

func (x *BusEvent) GetLiquidityProvision() *proto1.LiquidityProvision {
	if x, ok := x.GetEvent().(*BusEvent_LiquidityProvision); ok {
		return x.LiquidityProvision
	}
	return nil
}

func (x *BusEvent) GetMarketUpdated() *proto1.Market {
	if x, ok := x.GetEvent().(*BusEvent_MarketUpdated); ok {
		return x.MarketUpdated
	}
	return nil
}

func (x *BusEvent) GetOracleSpec() *v11.OracleSpec {
	if x, ok := x.GetEvent().(*BusEvent_OracleSpec); ok {
		return x.OracleSpec
	}
	return nil
}

func (x *BusEvent) GetOracleData() *v11.OracleData {
	if x, ok := x.GetEvent().(*BusEvent_OracleData); ok {
		return x.OracleData
	}
	return nil
}

func (x *BusEvent) GetDelegationBalance() *DelegationBalanceEvent {
	if x, ok := x.GetEvent().(*BusEvent_DelegationBalance); ok {
		return x.DelegationBalance
	}
	return nil
}

func (x *BusEvent) GetPendingDelegationBalance() *PendingDelegationBalanceEvent {
	if x, ok := x.GetEvent().(*BusEvent_PendingDelegationBalance); ok {
		return x.PendingDelegationBalance
	}
	return nil
}

func (x *BusEvent) GetEpochEvent() *EpochEvent {
	if x, ok := x.GetEvent().(*BusEvent_EpochEvent); ok {
		return x.EpochEvent
	}
	return nil
}

func (x *BusEvent) GetValidatorUpdate() *ValidatorUpdate {
	if x, ok := x.GetEvent().(*BusEvent_ValidatorUpdate); ok {
		return x.ValidatorUpdate
	}
	return nil
}

func (x *BusEvent) GetStakeLinking() *StakeLinking {
	if x, ok := x.GetEvent().(*BusEvent_StakeLinking); ok {
		return x.StakeLinking
	}
	return nil
}

func (x *BusEvent) GetRewardPayout() *RewardPayoutEvent {
	if x, ok := x.GetEvent().(*BusEvent_RewardPayout); ok {
		return x.RewardPayout
	}
	return nil
}

func (x *BusEvent) GetCheckpoint() *CheckpointEvent {
	if x, ok := x.GetEvent().(*BusEvent_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *BusEvent) GetMarket() *MarketEvent {
	if x, ok := x.GetEvent().(*BusEvent_Market); ok {
		return x.Market
	}
	return nil
}

func (x *BusEvent) GetTxErrEvent() *TxErrorEvent {
	if x, ok := x.GetEvent().(*BusEvent_TxErrEvent); ok {
		return x.TxErrEvent
	}
	return nil
}

type isBusEvent_Event interface {
	isBusEvent_Event()
}

type BusEvent_TimeUpdate struct {
	// Time update events - See [TimeUpdate](#vega.TimeUpdate)
	TimeUpdate *TimeUpdate `protobuf:"bytes,101,opt,name=time_update,json=timeUpdate,proto3,oneof"`
}

type BusEvent_TransferResponses struct {
	// Transfer responses update events - See [TransferResponses](#vega.TransferResponses)
	TransferResponses *TransferResponses `protobuf:"bytes,102,opt,name=transfer_responses,json=transferResponses,proto3,oneof"`
}

type BusEvent_PositionResolution struct {
	// Position resolution events - See [PositionResolution](#vega.PositionResolution)
	PositionResolution *PositionResolution `protobuf:"bytes,103,opt,name=position_resolution,json=positionResolution,proto3,oneof"`
}

type BusEvent_Order struct {
	// Order events
	Order *proto1.Order `protobuf:"bytes,104,opt,name=order,proto3,oneof"`
}

type BusEvent_Account struct {
	// Account events
	Account *proto1.Account `protobuf:"bytes,105,opt,name=account,proto3,oneof"`
}

type BusEvent_Party struct {
	// Party events
	Party *proto1.Party `protobuf:"bytes,106,opt,name=party,proto3,oneof"`
}

type BusEvent_Trade struct {
	// Trade events
	Trade *proto1.Trade `protobuf:"bytes,107,opt,name=trade,proto3,oneof"`
}

type BusEvent_MarginLevels struct {
	// Margin level update events
	MarginLevels *proto1.MarginLevels `protobuf:"bytes,108,opt,name=margin_levels,json=marginLevels,proto3,oneof"`
}

type BusEvent_Proposal struct {
	// Proposal events (for governance)
	Proposal *proto1.Proposal `protobuf:"bytes,109,opt,name=proposal,proto3,oneof"`
}

type BusEvent_Vote struct {
	// Vote events (for governance)
	Vote *proto1.Vote `protobuf:"bytes,110,opt,name=vote,proto3,oneof"`
}

type BusEvent_MarketData struct {
	// Market data events
	MarketData *proto1.MarketData `protobuf:"bytes,111,opt,name=market_data,json=marketData,proto3,oneof"`
}

type BusEvent_NodeSignature struct {
	// Node signature events
	NodeSignature *v1.NodeSignature `protobuf:"bytes,112,opt,name=node_signature,json=nodeSignature,proto3,oneof"`
}

type BusEvent_LossSocialization struct {
	// Loss socialization events - See [LossSocialization](#vega.LossSocialization)
	LossSocialization *LossSocialization `protobuf:"bytes,113,opt,name=loss_socialization,json=lossSocialization,proto3,oneof"`
}

type BusEvent_SettlePosition struct {
	// Position settlement events - See [SettlePosition](#vega.SettlePosition)
	SettlePosition *SettlePosition `protobuf:"bytes,114,opt,name=settle_position,json=settlePosition,proto3,oneof"`
}

type BusEvent_SettleDistressed struct {
	// Position distressed events - See [SettleDistressed](#vega.SettleDistressed)
	SettleDistressed *SettleDistressed `protobuf:"bytes,115,opt,name=settle_distressed,json=settleDistressed,proto3,oneof"`
}

type BusEvent_MarketCreated struct {
	// Market created events
	MarketCreated *proto1.Market `protobuf:"bytes,116,opt,name=market_created,json=marketCreated,proto3,oneof"`
}

type BusEvent_Asset struct {
	// Asset events
	Asset *proto1.Asset `protobuf:"bytes,117,opt,name=asset,proto3,oneof"`
}

type BusEvent_MarketTick struct {
	// Market tick events - See [MarketTick](#vega.MarketTick)
	MarketTick *MarketTick `protobuf:"bytes,118,opt,name=market_tick,json=marketTick,proto3,oneof"`
}

type BusEvent_Withdrawal struct {
	// Withdrawal events
	Withdrawal *proto1.Withdrawal `protobuf:"bytes,119,opt,name=withdrawal,proto3,oneof"`
}

type BusEvent_Deposit struct {
	// Deposit events
	Deposit *proto1.Deposit `protobuf:"bytes,120,opt,name=deposit,proto3,oneof"`
}

type BusEvent_Auction struct {
	// Auction events - See [AuctionEvent](#vega.AuctionEvent)
	Auction *AuctionEvent `protobuf:"bytes,121,opt,name=auction,proto3,oneof"`
}

type BusEvent_RiskFactor struct {
	// Risk factor events
	RiskFactor *proto1.RiskFactor `protobuf:"bytes,122,opt,name=risk_factor,json=riskFactor,proto3,oneof"`
}

type BusEvent_NetworkParameter struct {
	// Network parameter events
	NetworkParameter *proto1.NetworkParameter `protobuf:"bytes,123,opt,name=network_parameter,json=networkParameter,proto3,oneof"`
}

type BusEvent_LiquidityProvision struct {
	// LiquidityProvision  events
	LiquidityProvision *proto1.LiquidityProvision `protobuf:"bytes,124,opt,name=liquidity_provision,json=liquidityProvision,proto3,oneof"`
}

type BusEvent_MarketUpdated struct {
	// Market created events
	MarketUpdated *proto1.Market `protobuf:"bytes,125,opt,name=market_updated,json=marketUpdated,proto3,oneof"`
}

type BusEvent_OracleSpec struct {
	// OracleSpec events
	OracleSpec *v11.OracleSpec `protobuf:"bytes,126,opt,name=oracle_spec,json=oracleSpec,proto3,oneof"`
}

type BusEvent_OracleData struct {
	// OracleData events
	OracleData *v11.OracleData `protobuf:"bytes,127,opt,name=oracle_data,json=oracleData,proto3,oneof"`
}

type BusEvent_DelegationBalance struct {
	// Delegation balance events
	DelegationBalance *DelegationBalanceEvent `protobuf:"bytes,129,opt,name=delegation_balance,json=delegationBalance,proto3,oneof"`
}

type BusEvent_PendingDelegationBalance struct {
	// Pending delegation balance events
	PendingDelegationBalance *PendingDelegationBalanceEvent `protobuf:"bytes,130,opt,name=pending_delegation_balance,json=pendingDelegationBalance,proto3,oneof"`
}

type BusEvent_EpochEvent struct {
	// Epoch update events - See [Epoch](#vega.Epoch)
	EpochEvent *EpochEvent `protobuf:"bytes,131,opt,name=epoch_event,json=epochEvent,proto3,oneof"`
}

type BusEvent_ValidatorUpdate struct {
	// Validator update events
	ValidatorUpdate *ValidatorUpdate `protobuf:"bytes,132,opt,name=validator_update,json=validatorUpdate,proto3,oneof"`
}

type BusEvent_StakeLinking struct {
	// Staking event
	StakeLinking *StakeLinking `protobuf:"bytes,133,opt,name=stake_linking,json=stakeLinking,proto3,oneof"`
}

type BusEvent_RewardPayout struct {
	// Reward payout event
	RewardPayout *RewardPayoutEvent `protobuf:"bytes,134,opt,name=reward_payout,json=rewardPayout,proto3,oneof"`
}

type BusEvent_Checkpoint struct {
	// Checkpoint was created
	Checkpoint *CheckpointEvent `protobuf:"bytes,135,opt,name=checkpoint,proto3,oneof"`
}

type BusEvent_Market struct {
	// Market tick events - See [MarketEvent](#vega.MarketEvent)
	Market *MarketEvent `protobuf:"bytes,1001,opt,name=market,proto3,oneof"`
}

type BusEvent_TxErrEvent struct {
	// Transaction error events, not included in the ALL event type
	TxErrEvent *TxErrorEvent `protobuf:"bytes,2001,opt,name=tx_err_event,json=txErrEvent,proto3,oneof"`
}

func (*BusEvent_TimeUpdate) isBusEvent_Event() {}

func (*BusEvent_TransferResponses) isBusEvent_Event() {}

func (*BusEvent_PositionResolution) isBusEvent_Event() {}

func (*BusEvent_Order) isBusEvent_Event() {}

func (*BusEvent_Account) isBusEvent_Event() {}

func (*BusEvent_Party) isBusEvent_Event() {}

func (*BusEvent_Trade) isBusEvent_Event() {}

func (*BusEvent_MarginLevels) isBusEvent_Event() {}

func (*BusEvent_Proposal) isBusEvent_Event() {}

func (*BusEvent_Vote) isBusEvent_Event() {}

func (*BusEvent_MarketData) isBusEvent_Event() {}

func (*BusEvent_NodeSignature) isBusEvent_Event() {}

func (*BusEvent_LossSocialization) isBusEvent_Event() {}

func (*BusEvent_SettlePosition) isBusEvent_Event() {}

func (*BusEvent_SettleDistressed) isBusEvent_Event() {}

func (*BusEvent_MarketCreated) isBusEvent_Event() {}

func (*BusEvent_Asset) isBusEvent_Event() {}

func (*BusEvent_MarketTick) isBusEvent_Event() {}

func (*BusEvent_Withdrawal) isBusEvent_Event() {}

func (*BusEvent_Deposit) isBusEvent_Event() {}

func (*BusEvent_Auction) isBusEvent_Event() {}

func (*BusEvent_RiskFactor) isBusEvent_Event() {}

func (*BusEvent_NetworkParameter) isBusEvent_Event() {}

func (*BusEvent_LiquidityProvision) isBusEvent_Event() {}

func (*BusEvent_MarketUpdated) isBusEvent_Event() {}

func (*BusEvent_OracleSpec) isBusEvent_Event() {}

func (*BusEvent_OracleData) isBusEvent_Event() {}

func (*BusEvent_DelegationBalance) isBusEvent_Event() {}

func (*BusEvent_PendingDelegationBalance) isBusEvent_Event() {}

func (*BusEvent_EpochEvent) isBusEvent_Event() {}

func (*BusEvent_ValidatorUpdate) isBusEvent_Event() {}

func (*BusEvent_StakeLinking) isBusEvent_Event() {}

func (*BusEvent_RewardPayout) isBusEvent_Event() {}

func (*BusEvent_Checkpoint) isBusEvent_Event() {}

func (*BusEvent_Market) isBusEvent_Event() {}

func (*BusEvent_TxErrEvent) isBusEvent_Event() {}

var File_events_v1_events_proto protoreflect.FileDescriptor

var file_events_v1_events_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x03, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x3c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02,
	0x22, 0x5e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x22, 0x67, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x53, 0x65, 0x71, 0x22, 0xc9, 0x01, 0x0a, 0x1d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x22,
	0x44, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa6, 0x05, 0x0a, 0x0c, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x4e, 0x0a, 0x10, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e,
	0x64, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x4b, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e,
	0x76, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x76,
	0x0a, 0x1e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a,
	0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x79, 0x0a, 0x0a, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x22, 0x88, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x4c,
	0x6f, 0x73, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x3b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xac, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4c,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x0c, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x2e, 0x0a,
	0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x10,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x67, 0x61,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6d, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6d, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0xbc, 0x12, 0x0a, 0x08, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x13,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12, 0x39, 0x0a,
	0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a,
	0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x6c, 0x6f, 0x73, 0x73, 0x5f,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x6f, 0x73, 0x73, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x79, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x45, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x7c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x1a, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x18, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x85, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x65, 0x72,
	0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x78, 0x45, 0x72, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2a, 0xee, 0x09, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x53, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x42,
	0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x42,
	0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x53, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x53, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x41, 0x4c, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x1e, 0x0a,
	0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0c, 0x12, 0x21, 0x0a,
	0x1d, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x0d,
	0x12, 0x25, 0x0a, 0x21, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x55, 0x53, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x42,
	0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10,
	0x10, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x12, 0x12, 0x1e,
	0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x10, 0x13, 0x12, 0x1d,
	0x0a, 0x19, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x14, 0x12, 0x1a, 0x0a,
	0x16, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x53,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x10, 0x17, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x42,
	0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49,
	0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x19, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x10, 0x1b, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x1c, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x1d, 0x12, 0x2d, 0x0a,
	0x29, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x1e, 0x12, 0x1f, 0x0a, 0x1b,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x50, 0x4f, 0x43, 0x48, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x1f, 0x12, 0x23, 0x0a,
	0x1f, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x20, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x21, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41,
	0x59, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x22, 0x12, 0x1d, 0x0a, 0x19,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x42,
	0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x10, 0x65, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xc9, 0x01, 0x42, 0x4b, 0x0a, 0x1e, 0x69, 0x6f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x5a, 0x29, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67,
	0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_events_v1_events_proto_rawDescOnce sync.Once
	file_events_v1_events_proto_rawDescData = file_events_v1_events_proto_rawDesc
)

func file_events_v1_events_proto_rawDescGZIP() []byte {
	file_events_v1_events_proto_rawDescOnce.Do(func() {
		file_events_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_events_v1_events_proto_rawDescData)
	})
	return file_events_v1_events_proto_rawDescData
}

var file_events_v1_events_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_events_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_events_v1_events_proto_goTypes = []interface{}{
	(BusEventType)(0),                       // 0: vega.events.v1.BusEventType
	(StakeLinking_Type)(0),                  // 1: vega.events.v1.StakeLinking.Type
	(StakeLinking_Status)(0),                // 2: vega.events.v1.StakeLinking.Status
	(*StakeLinking)(nil),                    // 3: vega.events.v1.StakeLinking
	(*CheckpointEvent)(nil),                 // 4: vega.events.v1.CheckpointEvent
	(*RewardPayoutEvent)(nil),               // 5: vega.events.v1.RewardPayoutEvent
	(*DelegationBalanceEvent)(nil),          // 6: vega.events.v1.DelegationBalanceEvent
	(*PendingDelegationBalanceEvent)(nil),   // 7: vega.events.v1.PendingDelegationBalanceEvent
	(*MarketEvent)(nil),                     // 8: vega.events.v1.MarketEvent
	(*TxErrorEvent)(nil),                    // 9: vega.events.v1.TxErrorEvent
	(*TimeUpdate)(nil),                      // 10: vega.events.v1.TimeUpdate
	(*EpochEvent)(nil),                      // 11: vega.events.v1.EpochEvent
	(*TransferResponses)(nil),               // 12: vega.events.v1.TransferResponses
	(*PositionResolution)(nil),              // 13: vega.events.v1.PositionResolution
	(*LossSocialization)(nil),               // 14: vega.events.v1.LossSocialization
	(*TradeSettlement)(nil),                 // 15: vega.events.v1.TradeSettlement
	(*SettlePosition)(nil),                  // 16: vega.events.v1.SettlePosition
	(*SettleDistressed)(nil),                // 17: vega.events.v1.SettleDistressed
	(*MarketTick)(nil),                      // 18: vega.events.v1.MarketTick
	(*AuctionEvent)(nil),                    // 19: vega.events.v1.AuctionEvent
	(*ValidatorUpdate)(nil),                 // 20: vega.events.v1.ValidatorUpdate
	(*BusEvent)(nil),                        // 21: vega.events.v1.BusEvent
	(*v1.OrderSubmission)(nil),              // 22: vega.commands.v1.OrderSubmission
	(*v1.OrderAmendment)(nil),               // 23: vega.commands.v1.OrderAmendment
	(*v1.OrderCancellation)(nil),            // 24: vega.commands.v1.OrderCancellation
	(*v1.ProposalSubmission)(nil),           // 25: vega.commands.v1.ProposalSubmission
	(*v1.VoteSubmission)(nil),               // 26: vega.commands.v1.VoteSubmission
	(*v1.LiquidityProvisionSubmission)(nil), // 27: vega.commands.v1.LiquidityProvisionSubmission
	(*v1.WithdrawSubmission)(nil),           // 28: vega.commands.v1.WithdrawSubmission
	(*proto1.TransferResponse)(nil),         // 29: vega.TransferResponse
	(proto1.AuctionTrigger)(0),              // 30: vega.AuctionTrigger
	(*proto1.Order)(nil),                    // 31: vega.Order
	(*proto1.Account)(nil),                  // 32: vega.Account
	(*proto1.Party)(nil),                    // 33: vega.Party
	(*proto1.Trade)(nil),                    // 34: vega.Trade
	(*proto1.MarginLevels)(nil),             // 35: vega.MarginLevels
	(*proto1.Proposal)(nil),                 // 36: vega.Proposal
	(*proto1.Vote)(nil),                     // 37: vega.Vote
	(*proto1.MarketData)(nil),               // 38: vega.MarketData
	(*v1.NodeSignature)(nil),                // 39: vega.commands.v1.NodeSignature
	(*proto1.Market)(nil),                   // 40: vega.Market
	(*proto1.Asset)(nil),                    // 41: vega.Asset
	(*proto1.Withdrawal)(nil),               // 42: vega.Withdrawal
	(*proto1.Deposit)(nil),                  // 43: vega.Deposit
	(*proto1.RiskFactor)(nil),               // 44: vega.RiskFactor
	(*proto1.NetworkParameter)(nil),         // 45: vega.NetworkParameter
	(*proto1.LiquidityProvision)(nil),       // 46: vega.LiquidityProvision
	(*v11.OracleSpec)(nil),                  // 47: oracles.v1.OracleSpec
	(*v11.OracleData)(nil),                  // 48: oracles.v1.OracleData
}
var file_events_v1_events_proto_depIdxs = []int32{
	1,  // 0: vega.events.v1.StakeLinking.type:type_name -> vega.events.v1.StakeLinking.Type
	2,  // 1: vega.events.v1.StakeLinking.status:type_name -> vega.events.v1.StakeLinking.Status
	22, // 2: vega.events.v1.TxErrorEvent.order_submission:type_name -> vega.commands.v1.OrderSubmission
	23, // 3: vega.events.v1.TxErrorEvent.order_amendment:type_name -> vega.commands.v1.OrderAmendment
	24, // 4: vega.events.v1.TxErrorEvent.order_cancellation:type_name -> vega.commands.v1.OrderCancellation
	25, // 5: vega.events.v1.TxErrorEvent.proposal:type_name -> vega.commands.v1.ProposalSubmission
	26, // 6: vega.events.v1.TxErrorEvent.vote_submission:type_name -> vega.commands.v1.VoteSubmission
	27, // 7: vega.events.v1.TxErrorEvent.liquidity_provision_submission:type_name -> vega.commands.v1.LiquidityProvisionSubmission
	28, // 8: vega.events.v1.TxErrorEvent.withdraw_submission:type_name -> vega.commands.v1.WithdrawSubmission
	29, // 9: vega.events.v1.TransferResponses.responses:type_name -> vega.TransferResponse
	15, // 10: vega.events.v1.SettlePosition.trade_settlements:type_name -> vega.events.v1.TradeSettlement
	30, // 11: vega.events.v1.AuctionEvent.trigger:type_name -> vega.AuctionTrigger
	30, // 12: vega.events.v1.AuctionEvent.extension_trigger:type_name -> vega.AuctionTrigger
	0,  // 13: vega.events.v1.BusEvent.type:type_name -> vega.events.v1.BusEventType
	10, // 14: vega.events.v1.BusEvent.time_update:type_name -> vega.events.v1.TimeUpdate
	12, // 15: vega.events.v1.BusEvent.transfer_responses:type_name -> vega.events.v1.TransferResponses
	13, // 16: vega.events.v1.BusEvent.position_resolution:type_name -> vega.events.v1.PositionResolution
	31, // 17: vega.events.v1.BusEvent.order:type_name -> vega.Order
	32, // 18: vega.events.v1.BusEvent.account:type_name -> vega.Account
	33, // 19: vega.events.v1.BusEvent.party:type_name -> vega.Party
	34, // 20: vega.events.v1.BusEvent.trade:type_name -> vega.Trade
	35, // 21: vega.events.v1.BusEvent.margin_levels:type_name -> vega.MarginLevels
	36, // 22: vega.events.v1.BusEvent.proposal:type_name -> vega.Proposal
	37, // 23: vega.events.v1.BusEvent.vote:type_name -> vega.Vote
	38, // 24: vega.events.v1.BusEvent.market_data:type_name -> vega.MarketData
	39, // 25: vega.events.v1.BusEvent.node_signature:type_name -> vega.commands.v1.NodeSignature
	14, // 26: vega.events.v1.BusEvent.loss_socialization:type_name -> vega.events.v1.LossSocialization
	16, // 27: vega.events.v1.BusEvent.settle_position:type_name -> vega.events.v1.SettlePosition
	17, // 28: vega.events.v1.BusEvent.settle_distressed:type_name -> vega.events.v1.SettleDistressed
	40, // 29: vega.events.v1.BusEvent.market_created:type_name -> vega.Market
	41, // 30: vega.events.v1.BusEvent.asset:type_name -> vega.Asset
	18, // 31: vega.events.v1.BusEvent.market_tick:type_name -> vega.events.v1.MarketTick
	42, // 32: vega.events.v1.BusEvent.withdrawal:type_name -> vega.Withdrawal
	43, // 33: vega.events.v1.BusEvent.deposit:type_name -> vega.Deposit
	19, // 34: vega.events.v1.BusEvent.auction:type_name -> vega.events.v1.AuctionEvent
	44, // 35: vega.events.v1.BusEvent.risk_factor:type_name -> vega.RiskFactor
	45, // 36: vega.events.v1.BusEvent.network_parameter:type_name -> vega.NetworkParameter
	46, // 37: vega.events.v1.BusEvent.liquidity_provision:type_name -> vega.LiquidityProvision
	40, // 38: vega.events.v1.BusEvent.market_updated:type_name -> vega.Market
	47, // 39: vega.events.v1.BusEvent.oracle_spec:type_name -> oracles.v1.OracleSpec
	48, // 40: vega.events.v1.BusEvent.oracle_data:type_name -> oracles.v1.OracleData
	6,  // 41: vega.events.v1.BusEvent.delegation_balance:type_name -> vega.events.v1.DelegationBalanceEvent
	7,  // 42: vega.events.v1.BusEvent.pending_delegation_balance:type_name -> vega.events.v1.PendingDelegationBalanceEvent
	11, // 43: vega.events.v1.BusEvent.epoch_event:type_name -> vega.events.v1.EpochEvent
	20, // 44: vega.events.v1.BusEvent.validator_update:type_name -> vega.events.v1.ValidatorUpdate
	3,  // 45: vega.events.v1.BusEvent.stake_linking:type_name -> vega.events.v1.StakeLinking
	5,  // 46: vega.events.v1.BusEvent.reward_payout:type_name -> vega.events.v1.RewardPayoutEvent
	4,  // 47: vega.events.v1.BusEvent.checkpoint:type_name -> vega.events.v1.CheckpointEvent
	8,  // 48: vega.events.v1.BusEvent.market:type_name -> vega.events.v1.MarketEvent
	9,  // 49: vega.events.v1.BusEvent.tx_err_event:type_name -> vega.events.v1.TxErrorEvent
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_events_v1_events_proto_init() }
func file_events_v1_events_proto_init() {
	if File_events_v1_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_events_v1_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeLinking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardPayoutEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationBalanceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingDelegationBalanceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionResolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LossSocialization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeSettlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleDistressed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_v1_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_events_v1_events_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*TxErrorEvent_OrderSubmission)(nil),
		(*TxErrorEvent_OrderAmendment)(nil),
		(*TxErrorEvent_OrderCancellation)(nil),
		(*TxErrorEvent_Proposal)(nil),
		(*TxErrorEvent_VoteSubmission)(nil),
		(*TxErrorEvent_LiquidityProvisionSubmission)(nil),
		(*TxErrorEvent_WithdrawSubmission)(nil),
	}
	file_events_v1_events_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*BusEvent_TimeUpdate)(nil),
		(*BusEvent_TransferResponses)(nil),
		(*BusEvent_PositionResolution)(nil),
		(*BusEvent_Order)(nil),
		(*BusEvent_Account)(nil),
		(*BusEvent_Party)(nil),
		(*BusEvent_Trade)(nil),
		(*BusEvent_MarginLevels)(nil),
		(*BusEvent_Proposal)(nil),
		(*BusEvent_Vote)(nil),
		(*BusEvent_MarketData)(nil),
		(*BusEvent_NodeSignature)(nil),
		(*BusEvent_LossSocialization)(nil),
		(*BusEvent_SettlePosition)(nil),
		(*BusEvent_SettleDistressed)(nil),
		(*BusEvent_MarketCreated)(nil),
		(*BusEvent_Asset)(nil),
		(*BusEvent_MarketTick)(nil),
		(*BusEvent_Withdrawal)(nil),
		(*BusEvent_Deposit)(nil),
		(*BusEvent_Auction)(nil),
		(*BusEvent_RiskFactor)(nil),
		(*BusEvent_NetworkParameter)(nil),
		(*BusEvent_LiquidityProvision)(nil),
		(*BusEvent_MarketUpdated)(nil),
		(*BusEvent_OracleSpec)(nil),
		(*BusEvent_OracleData)(nil),
		(*BusEvent_DelegationBalance)(nil),
		(*BusEvent_PendingDelegationBalance)(nil),
		(*BusEvent_EpochEvent)(nil),
		(*BusEvent_ValidatorUpdate)(nil),
		(*BusEvent_StakeLinking)(nil),
		(*BusEvent_RewardPayout)(nil),
		(*BusEvent_Checkpoint)(nil),
		(*BusEvent_Market)(nil),
		(*BusEvent_TxErrEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_events_v1_events_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_events_v1_events_proto_goTypes,
		DependencyIndexes: file_events_v1_events_proto_depIdxs,
		EnumInfos:         file_events_v1_events_proto_enumTypes,
		MessageInfos:      file_events_v1_events_proto_msgTypes,
	}.Build()
	File_events_v1_events_proto = out.File
	file_events_v1_events_proto_rawDesc = nil
	file_events_v1_events_proto_goTypes = nil
	file_events_v1_events_proto_depIdxs = nil
}
