// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events/v1/events.proto

#include "events/v1/events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_oracles_2fv1_2fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OracleData_oracles_2fv1_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_oracles_2fv1_2fspec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OracleSpec_oracles_2fv1_2fspec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_assets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Asset_assets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deposit_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvision_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarginLevels_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Market_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MarketData_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParameter_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Party_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proposal_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RiskFactor_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trade_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransferResponse_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vote_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Withdrawal_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fvalidator_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuctionEvent_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckpointEvent_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegationBalanceEvent_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EpochEvent_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LossSocialization_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketEvent_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketTick_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionResolution_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardPayoutEvent_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettleDistressed_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SettlePosition_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StakeLinking_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeUpdate_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeSettlement_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferResponses_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TxErrorEvent_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorScoreEvent_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorUpdate_events_2fv1_2fevents_2eproto;
namespace vega {
namespace events {
namespace v1 {
class StakeLinkingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StakeLinking> _instance;
} _StakeLinking_default_instance_;
class CheckpointEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckpointEvent> _instance;
} _CheckpointEvent_default_instance_;
class RewardPayoutEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardPayoutEvent> _instance;
} _RewardPayoutEvent_default_instance_;
class ValidatorScoreEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatorScoreEvent> _instance;
} _ValidatorScoreEvent_default_instance_;
class DelegationBalanceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegationBalanceEvent> _instance;
} _DelegationBalanceEvent_default_instance_;
class PendingDelegationBalanceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingDelegationBalanceEvent> _instance;
} _PendingDelegationBalanceEvent_default_instance_;
class MarketEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketEvent> _instance;
} _MarketEvent_default_instance_;
class TxErrorEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TxErrorEvent> _instance;
} _TxErrorEvent_default_instance_;
class TimeUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeUpdate> _instance;
} _TimeUpdate_default_instance_;
class EpochEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EpochEvent> _instance;
} _EpochEvent_default_instance_;
class TransferResponsesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferResponses> _instance;
} _TransferResponses_default_instance_;
class PositionResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionResolution> _instance;
} _PositionResolution_default_instance_;
class LossSocializationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LossSocialization> _instance;
} _LossSocialization_default_instance_;
class TradeSettlementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeSettlement> _instance;
} _TradeSettlement_default_instance_;
class SettlePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettlePosition> _instance;
} _SettlePosition_default_instance_;
class SettleDistressedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettleDistressed> _instance;
} _SettleDistressed_default_instance_;
class MarketTickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketTick> _instance;
} _MarketTick_default_instance_;
class AuctionEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuctionEvent> _instance;
} _AuctionEvent_default_instance_;
class ValidatorUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatorUpdate> _instance;
} _ValidatorUpdate_default_instance_;
class BusEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BusEvent> _instance;
} _BusEvent_default_instance_;
}  // namespace v1
}  // namespace events
}  // namespace vega
static void InitDefaultsscc_info_AuctionEvent_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_AuctionEvent_default_instance_;
    new (ptr) ::vega::events::v1::AuctionEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuctionEvent_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuctionEvent_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_BusEvent_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_BusEvent_default_instance_;
    new (ptr) ::vega::events::v1::BusEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<35> scc_info_BusEvent_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 35, 0, InitDefaultsscc_info_BusEvent_events_2fv1_2fevents_2eproto}, {
      &scc_info_TimeUpdate_events_2fv1_2fevents_2eproto.base,
      &scc_info_TransferResponses_events_2fv1_2fevents_2eproto.base,
      &scc_info_PositionResolution_events_2fv1_2fevents_2eproto.base,
      &scc_info_Order_vega_2eproto.base,
      &scc_info_Account_vega_2eproto.base,
      &scc_info_Party_vega_2eproto.base,
      &scc_info_Trade_vega_2eproto.base,
      &scc_info_MarginLevels_vega_2eproto.base,
      &scc_info_Proposal_governance_2eproto.base,
      &scc_info_Vote_governance_2eproto.base,
      &scc_info_MarketData_vega_2eproto.base,
      &scc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto.base,
      &scc_info_LossSocialization_events_2fv1_2fevents_2eproto.base,
      &scc_info_SettlePosition_events_2fv1_2fevents_2eproto.base,
      &scc_info_SettleDistressed_events_2fv1_2fevents_2eproto.base,
      &scc_info_Market_markets_2eproto.base,
      &scc_info_Asset_assets_2eproto.base,
      &scc_info_MarketTick_events_2fv1_2fevents_2eproto.base,
      &scc_info_Withdrawal_vega_2eproto.base,
      &scc_info_Deposit_vega_2eproto.base,
      &scc_info_AuctionEvent_events_2fv1_2fevents_2eproto.base,
      &scc_info_RiskFactor_vega_2eproto.base,
      &scc_info_NetworkParameter_vega_2eproto.base,
      &scc_info_LiquidityProvision_vega_2eproto.base,
      &scc_info_OracleSpec_oracles_2fv1_2fspec_2eproto.base,
      &scc_info_OracleData_oracles_2fv1_2fdata_2eproto.base,
      &scc_info_DelegationBalanceEvent_events_2fv1_2fevents_2eproto.base,
      &scc_info_ValidatorScoreEvent_events_2fv1_2fevents_2eproto.base,
      &scc_info_EpochEvent_events_2fv1_2fevents_2eproto.base,
      &scc_info_ValidatorUpdate_events_2fv1_2fevents_2eproto.base,
      &scc_info_StakeLinking_events_2fv1_2fevents_2eproto.base,
      &scc_info_RewardPayoutEvent_events_2fv1_2fevents_2eproto.base,
      &scc_info_CheckpointEvent_events_2fv1_2fevents_2eproto.base,
      &scc_info_MarketEvent_events_2fv1_2fevents_2eproto.base,
      &scc_info_TxErrorEvent_events_2fv1_2fevents_2eproto.base,}};

static void InitDefaultsscc_info_CheckpointEvent_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_CheckpointEvent_default_instance_;
    new (ptr) ::vega::events::v1::CheckpointEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckpointEvent_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckpointEvent_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_DelegationBalanceEvent_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_DelegationBalanceEvent_default_instance_;
    new (ptr) ::vega::events::v1::DelegationBalanceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegationBalanceEvent_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelegationBalanceEvent_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_EpochEvent_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_EpochEvent_default_instance_;
    new (ptr) ::vega::events::v1::EpochEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EpochEvent_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EpochEvent_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_LossSocialization_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_LossSocialization_default_instance_;
    new (ptr) ::vega::events::v1::LossSocialization();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LossSocialization_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LossSocialization_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_MarketEvent_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_MarketEvent_default_instance_;
    new (ptr) ::vega::events::v1::MarketEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketEvent_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketEvent_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_MarketTick_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_MarketTick_default_instance_;
    new (ptr) ::vega::events::v1::MarketTick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketTick_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketTick_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_PendingDelegationBalanceEvent_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_PendingDelegationBalanceEvent_default_instance_;
    new (ptr) ::vega::events::v1::PendingDelegationBalanceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingDelegationBalanceEvent_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PendingDelegationBalanceEvent_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_PositionResolution_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_PositionResolution_default_instance_;
    new (ptr) ::vega::events::v1::PositionResolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionResolution_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionResolution_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_RewardPayoutEvent_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_RewardPayoutEvent_default_instance_;
    new (ptr) ::vega::events::v1::RewardPayoutEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardPayoutEvent_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RewardPayoutEvent_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_SettleDistressed_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_SettleDistressed_default_instance_;
    new (ptr) ::vega::events::v1::SettleDistressed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettleDistressed_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SettleDistressed_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_SettlePosition_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_SettlePosition_default_instance_;
    new (ptr) ::vega::events::v1::SettlePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SettlePosition_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SettlePosition_events_2fv1_2fevents_2eproto}, {
      &scc_info_TradeSettlement_events_2fv1_2fevents_2eproto.base,}};

static void InitDefaultsscc_info_StakeLinking_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_StakeLinking_default_instance_;
    new (ptr) ::vega::events::v1::StakeLinking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StakeLinking_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StakeLinking_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_TimeUpdate_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_TimeUpdate_default_instance_;
    new (ptr) ::vega::events::v1::TimeUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeUpdate_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeUpdate_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_TradeSettlement_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_TradeSettlement_default_instance_;
    new (ptr) ::vega::events::v1::TradeSettlement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeSettlement_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradeSettlement_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_TransferResponses_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_TransferResponses_default_instance_;
    new (ptr) ::vega::events::v1::TransferResponses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferResponses_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferResponses_events_2fv1_2fevents_2eproto}, {
      &scc_info_TransferResponse_vega_2eproto.base,}};

static void InitDefaultsscc_info_TxErrorEvent_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_TxErrorEvent_default_instance_;
    new (ptr) ::vega::events::v1::TxErrorEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TxErrorEvent_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_TxErrorEvent_events_2fv1_2fevents_2eproto}, {
      &scc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_ValidatorScoreEvent_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_ValidatorScoreEvent_default_instance_;
    new (ptr) ::vega::events::v1::ValidatorScoreEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorScoreEvent_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidatorScoreEvent_events_2fv1_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_ValidatorUpdate_events_2fv1_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::events::v1::_ValidatorUpdate_default_instance_;
    new (ptr) ::vega::events::v1::ValidatorUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorUpdate_events_2fv1_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidatorUpdate_events_2fv1_2fevents_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_events_2fv1_2fevents_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_events_2fv1_2fevents_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_events_2fv1_2fevents_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_events_2fv1_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::StakeLinking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::StakeLinking, id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::StakeLinking, type_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::StakeLinking, ts_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::StakeLinking, party_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::StakeLinking, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::StakeLinking, status_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::StakeLinking, finalized_at_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::StakeLinking, tx_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::CheckpointEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::CheckpointEvent, hash_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::CheckpointEvent, block_hash_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::CheckpointEvent, block_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::RewardPayoutEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::RewardPayoutEvent, party_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::RewardPayoutEvent, epoch_seq_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::RewardPayoutEvent, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::RewardPayoutEvent, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::RewardPayoutEvent, percent_of_total_reward_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::RewardPayoutEvent, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorScoreEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorScoreEvent, node_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorScoreEvent, epoch_seq_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorScoreEvent, validator_score_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorScoreEvent, normalised_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::DelegationBalanceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::DelegationBalanceEvent, party_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::DelegationBalanceEvent, node_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::DelegationBalanceEvent, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::DelegationBalanceEvent, epoch_seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PendingDelegationBalanceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PendingDelegationBalanceEvent, party_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PendingDelegationBalanceEvent, node_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PendingDelegationBalanceEvent, delegation_amount_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PendingDelegationBalanceEvent, undelegation_amount_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PendingDelegationBalanceEvent, epoch_seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::MarketEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::MarketEvent, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::MarketEvent, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TxErrorEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TxErrorEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TxErrorEvent, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TxErrorEvent, err_msg_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TxErrorEvent, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TimeUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TimeUpdate, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::EpochEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::EpochEvent, seq_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::EpochEvent, start_time_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::EpochEvent, expire_time_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::EpochEvent, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TransferResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TransferResponses, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PositionResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PositionResolution, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PositionResolution, distressed_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PositionResolution, closed_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::PositionResolution, mark_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::LossSocialization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::LossSocialization, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::LossSocialization, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::LossSocialization, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TradeSettlement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TradeSettlement, size_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::TradeSettlement, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::SettlePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::SettlePosition, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::SettlePosition, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::SettlePosition, price_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::SettlePosition, trade_settlements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::SettleDistressed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::SettleDistressed, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::SettleDistressed, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::SettleDistressed, margin_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::SettleDistressed, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::MarketTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::MarketTick, id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::MarketTick, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::AuctionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::AuctionEvent, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::AuctionEvent, opening_auction_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::AuctionEvent, leave_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::AuctionEvent, start_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::AuctionEvent, end_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::AuctionEvent, trigger_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::AuctionEvent, extension_trigger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorUpdate, vega_pub_key_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorUpdate, ethereum_address_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorUpdate, tm_pub_key_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorUpdate, info_url_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::ValidatorUpdate, country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::BusEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::BusEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::BusEvent, id_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::BusEvent, block_),
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::BusEvent, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::events::v1::BusEvent, event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::events::v1::StakeLinking)},
  { 13, -1, sizeof(::vega::events::v1::CheckpointEvent)},
  { 21, -1, sizeof(::vega::events::v1::RewardPayoutEvent)},
  { 32, -1, sizeof(::vega::events::v1::ValidatorScoreEvent)},
  { 41, -1, sizeof(::vega::events::v1::DelegationBalanceEvent)},
  { 50, -1, sizeof(::vega::events::v1::PendingDelegationBalanceEvent)},
  { 60, -1, sizeof(::vega::events::v1::MarketEvent)},
  { 67, -1, sizeof(::vega::events::v1::TxErrorEvent)},
  { 82, -1, sizeof(::vega::events::v1::TimeUpdate)},
  { 88, -1, sizeof(::vega::events::v1::EpochEvent)},
  { 97, -1, sizeof(::vega::events::v1::TransferResponses)},
  { 103, -1, sizeof(::vega::events::v1::PositionResolution)},
  { 112, -1, sizeof(::vega::events::v1::LossSocialization)},
  { 120, -1, sizeof(::vega::events::v1::TradeSettlement)},
  { 127, -1, sizeof(::vega::events::v1::SettlePosition)},
  { 136, -1, sizeof(::vega::events::v1::SettleDistressed)},
  { 145, -1, sizeof(::vega::events::v1::MarketTick)},
  { 152, -1, sizeof(::vega::events::v1::AuctionEvent)},
  { 164, -1, sizeof(::vega::events::v1::ValidatorUpdate)},
  { 174, -1, sizeof(::vega::events::v1::BusEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_StakeLinking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_CheckpointEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_RewardPayoutEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_ValidatorScoreEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_DelegationBalanceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_PendingDelegationBalanceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_MarketEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_TxErrorEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_TimeUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_EpochEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_TransferResponses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_PositionResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_LossSocialization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_TradeSettlement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_SettlePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_SettleDistressed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_MarketTick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_AuctionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_ValidatorUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::events::v1::_BusEvent_default_instance_),
};

const char descriptor_table_protodef_events_2fv1_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026events/v1/events.proto\022\016vega.events.v1"
  "\032\rmarkets.proto\032\014assets.proto\032\020governanc"
  "e.proto\032\nvega.proto\032\025oracles/v1/spec.pro"
  "to\032\025oracles/v1/data.proto\032\032commands/v1/c"
  "ommands.proto\032$commands/v1/validator_com"
  "mands.proto\"\252\003\n\014StakeLinking\022\016\n\002id\030\001 \001(\t"
  "R\002id\0225\n\004type\030\002 \001(\0162!.vega.events.v1.Stak"
  "eLinking.TypeR\004type\022\016\n\002ts\030\003 \001(\003R\002ts\022\024\n\005p"
  "arty\030\004 \001(\tR\005party\022\026\n\006amount\030\005 \001(\tR\006amoun"
  "t\022;\n\006status\030\006 \001(\0162#.vega.events.v1.Stake"
  "Linking.StatusR\006status\022!\n\014finalized_at\030\007"
  " \001(\003R\013finalizedAt\022\027\n\007tx_hash\030\010 \001(\tR\006txHa"
  "sh\"<\n\004Type\022\024\n\020TYPE_UNSPECIFIED\020\000\022\r\n\tTYPE"
  "_LINK\020\001\022\017\n\013TYPE_UNLINK\020\002\"^\n\006Status\022\026\n\022ST"
  "ATUS_UNSPECIFIED\020\000\022\022\n\016STATUS_PENDING\020\001\022\023"
  "\n\017STATUS_ACCEPTED\020\002\022\023\n\017STATUS_REJECTED\020\003"
  "\"g\n\017CheckpointEvent\022\022\n\004hash\030\001 \001(\tR\004hash\022"
  "\035\n\nblock_hash\030\002 \001(\tR\tblockHash\022!\n\014block_"
  "height\030\003 \001(\004R\013blockHeight\"\311\001\n\021RewardPayo"
  "utEvent\022\024\n\005party\030\001 \001(\tR\005party\022\033\n\tepoch_s"
  "eq\030\002 \001(\tR\010epochSeq\022\024\n\005asset\030\003 \001(\tR\005asset"
  "\022\026\n\006amount\030\004 \001(\tR\006amount\0225\n\027percent_of_t"
  "otal_reward\030\005 \001(\tR\024percentOfTotalReward\022"
  "\034\n\ttimestamp\030\006 \001(\003R\ttimestamp\"\237\001\n\023Valida"
  "torScoreEvent\022\027\n\007node_id\030\001 \001(\tR\006nodeId\022\033"
  "\n\tepoch_seq\030\002 \001(\tR\010epochSeq\022\'\n\017validator"
  "_score\030\003 \001(\tR\016validatorScore\022)\n\020normalis"
  "ed_score\030\004 \001(\tR\017normalisedScore\"|\n\026Deleg"
  "ationBalanceEvent\022\024\n\005party\030\001 \001(\tR\005party\022"
  "\027\n\007node_id\030\002 \001(\tR\006nodeId\022\026\n\006amount\030\003 \001(\004"
  "R\006amount\022\033\n\tepoch_seq\030\004 \001(\tR\010epochSeq\"\311\001"
  "\n\035PendingDelegationBalanceEvent\022\024\n\005party"
  "\030\001 \001(\tR\005party\022\027\n\007node_id\030\002 \001(\tR\006nodeId\022+"
  "\n\021delegation_amount\030\003 \001(\004R\020delegationAmo"
  "unt\022/\n\023undelegation_amount\030\004 \001(\004R\022undele"
  "gationAmount\022\033\n\tepoch_seq\030\005 \001(\tR\010epochSe"
  "q\"D\n\013MarketEvent\022\033\n\tmarket_id\030\001 \001(\tR\010mar"
  "ketId\022\030\n\007payload\030\002 \001(\tR\007payload\"\246\005\n\014TxEr"
  "rorEvent\022\031\n\010party_id\030\001 \001(\tR\007partyId\022\027\n\007e"
  "rr_msg\030\002 \001(\tR\006errMsg\022N\n\020order_submission"
  "\030e \001(\0132!.vega.commands.v1.OrderSubmissio"
  "nH\000R\017orderSubmission\022K\n\017order_amendment\030"
  "f \001(\0132 .vega.commands.v1.OrderAmendmentH"
  "\000R\016orderAmendment\022T\n\022order_cancellation\030"
  "g \001(\0132#.vega.commands.v1.OrderCancellati"
  "onH\000R\021orderCancellation\022B\n\010proposal\030h \001("
  "\0132$.vega.commands.v1.ProposalSubmissionH"
  "\000R\010proposal\022K\n\017vote_submission\030i \001(\0132 .v"
  "ega.commands.v1.VoteSubmissionH\000R\016voteSu"
  "bmission\022v\n\036liquidity_provision_submissi"
  "on\030j \001(\0132..vega.commands.v1.LiquidityPro"
  "visionSubmissionH\000R\034liquidityProvisionSu"
  "bmission\022W\n\023withdraw_submission\030k \001(\0132$."
  "vega.commands.v1.WithdrawSubmissionH\000R\022w"
  "ithdrawSubmissionB\r\n\013transaction\"*\n\nTime"
  "Update\022\034\n\ttimestamp\030\001 \001(\003R\ttimestamp\"y\n\n"
  "EpochEvent\022\020\n\003seq\030\001 \001(\004R\003seq\022\035\n\nstart_ti"
  "me\030\002 \001(\003R\tstartTime\022\037\n\013expire_time\030\003 \001(\003"
  "R\nexpireTime\022\031\n\010end_time\030\004 \001(\003R\007endTime\""
  "I\n\021TransferResponses\0224\n\tresponses\030\001 \003(\0132"
  "\026.vega.TransferResponseR\tresponses\"\210\001\n\022P"
  "ositionResolution\022\033\n\tmarket_id\030\001 \001(\tR\010ma"
  "rketId\022\036\n\ndistressed\030\002 \001(\003R\ndistressed\022\026"
  "\n\006closed\030\003 \001(\003R\006closed\022\035\n\nmark_price\030\004 \001"
  "(\004R\tmarkPrice\"c\n\021LossSocialization\022\033\n\tma"
  "rket_id\030\001 \001(\tR\010marketId\022\031\n\010party_id\030\002 \001("
  "\tR\007partyId\022\026\n\006amount\030\003 \001(\003R\006amount\";\n\017Tr"
  "adeSettlement\022\022\n\004size\030\001 \001(\003R\004size\022\024\n\005pri"
  "ce\030\002 \001(\004R\005price\"\254\001\n\016SettlePosition\022\033\n\tma"
  "rket_id\030\001 \001(\tR\010marketId\022\031\n\010party_id\030\002 \001("
  "\tR\007partyId\022\024\n\005price\030\003 \001(\004R\005price\022L\n\021trad"
  "e_settlements\030\004 \003(\0132\037.vega.events.v1.Tra"
  "deSettlementR\020tradeSettlements\"x\n\020Settle"
  "Distressed\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022"
  "\031\n\010party_id\030\002 \001(\tR\007partyId\022\026\n\006margin\030\003 \001"
  "(\004R\006margin\022\024\n\005price\030\004 \001(\004R\005price\"0\n\nMark"
  "etTick\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004time\030\002 \001(\003R\004ti"
  "me\"\205\002\n\014AuctionEvent\022\033\n\tmarket_id\030\001 \001(\tR\010"
  "marketId\022\'\n\017opening_auction\030\002 \001(\010R\016openi"
  "ngAuction\022\024\n\005leave\030\003 \001(\010R\005leave\022\024\n\005start"
  "\030\004 \001(\003R\005start\022\020\n\003end\030\005 \001(\003R\003end\022.\n\007trigg"
  "er\030\006 \001(\0162\024.vega.AuctionTriggerR\007trigger\022"
  "A\n\021extension_trigger\030\007 \001(\0162\024.vega.Auctio"
  "nTriggerR\020extensionTrigger\"\261\001\n\017Validator"
  "Update\022 \n\014vega_pub_key\030\001 \001(\tR\nvegaPubKey"
  "\022)\n\020ethereum_address\030\002 \001(\tR\017ethereumAddr"
  "ess\022\034\n\ntm_pub_key\030\003 \001(\tR\010tmPubKey\022\031\n\010inf"
  "o_url\030\004 \001(\tR\007infoUrl\022\030\n\007country\030\005 \001(\tR\007c"
  "ountry\"\235\022\n\010BusEvent\022\016\n\002id\030\001 \001(\tR\002id\022\024\n\005b"
  "lock\030\002 \001(\tR\005block\0220\n\004type\030\003 \001(\0162\034.vega.e"
  "vents.v1.BusEventTypeR\004type\022=\n\013time_upda"
  "te\030e \001(\0132\032.vega.events.v1.TimeUpdateH\000R\n"
  "timeUpdate\022R\n\022transfer_responses\030f \001(\0132!"
  ".vega.events.v1.TransferResponsesH\000R\021tra"
  "nsferResponses\022U\n\023position_resolution\030g "
  "\001(\0132\".vega.events.v1.PositionResolutionH"
  "\000R\022positionResolution\022#\n\005order\030h \001(\0132\013.v"
  "ega.OrderH\000R\005order\022)\n\007account\030i \001(\0132\r.ve"
  "ga.AccountH\000R\007account\022#\n\005party\030j \001(\0132\013.v"
  "ega.PartyH\000R\005party\022#\n\005trade\030k \001(\0132\013.vega"
  ".TradeH\000R\005trade\0229\n\rmargin_levels\030l \001(\0132\022"
  ".vega.MarginLevelsH\000R\014marginLevels\022,\n\010pr"
  "oposal\030m \001(\0132\016.vega.ProposalH\000R\010proposal"
  "\022 \n\004vote\030n \001(\0132\n.vega.VoteH\000R\004vote\0223\n\013ma"
  "rket_data\030o \001(\0132\020.vega.MarketDataH\000R\nmar"
  "ketData\022H\n\016node_signature\030p \001(\0132\037.vega.c"
  "ommands.v1.NodeSignatureH\000R\rnodeSignatur"
  "e\022R\n\022loss_socialization\030q \001(\0132!.vega.eve"
  "nts.v1.LossSocializationH\000R\021lossSocializ"
  "ation\022I\n\017settle_position\030r \001(\0132\036.vega.ev"
  "ents.v1.SettlePositionH\000R\016settlePosition"
  "\022O\n\021settle_distressed\030s \001(\0132 .vega.event"
  "s.v1.SettleDistressedH\000R\020settleDistresse"
  "d\0225\n\016market_created\030t \001(\0132\014.vega.MarketH"
  "\000R\rmarketCreated\022#\n\005asset\030u \001(\0132\013.vega.A"
  "ssetH\000R\005asset\022=\n\013market_tick\030v \001(\0132\032.veg"
  "a.events.v1.MarketTickH\000R\nmarketTick\0222\n\n"
  "withdrawal\030w \001(\0132\020.vega.WithdrawalH\000R\nwi"
  "thdrawal\022)\n\007deposit\030x \001(\0132\r.vega.Deposit"
  "H\000R\007deposit\0228\n\007auction\030y \001(\0132\034.vega.even"
  "ts.v1.AuctionEventH\000R\007auction\0223\n\013risk_fa"
  "ctor\030z \001(\0132\020.vega.RiskFactorH\000R\nriskFact"
  "or\022E\n\021network_parameter\030{ \001(\0132\026.vega.Net"
  "workParameterH\000R\020networkParameter\022K\n\023liq"
  "uidity_provision\030| \001(\0132\030.vega.LiquidityP"
  "rovisionH\000R\022liquidityProvision\0225\n\016market"
  "_updated\030} \001(\0132\014.vega.MarketH\000R\rmarketUp"
  "dated\0229\n\013oracle_spec\030~ \001(\0132\026.oracles.v1."
  "OracleSpecH\000R\noracleSpec\0229\n\013oracle_data\030"
  "\177 \001(\0132\026.oracles.v1.OracleDataH\000R\noracleD"
  "ata\022X\n\022delegation_balance\030\201\001 \001(\0132&.vega."
  "events.v1.DelegationBalanceEventH\000R\021dele"
  "gationBalance\022O\n\017validator_score\030\202\001 \001(\0132"
  "#.vega.events.v1.ValidatorScoreEventH\000R\016"
  "validatorScore\022>\n\013epoch_event\030\203\001 \001(\0132\032.v"
  "ega.events.v1.EpochEventH\000R\nepochEvent\022M"
  "\n\020validator_update\030\204\001 \001(\0132\037.vega.events."
  "v1.ValidatorUpdateH\000R\017validatorUpdate\022D\n"
  "\rstake_linking\030\205\001 \001(\0132\034.vega.events.v1.S"
  "takeLinkingH\000R\014stakeLinking\022I\n\rreward_pa"
  "yout\030\206\001 \001(\0132!.vega.events.v1.RewardPayou"
  "tEventH\000R\014rewardPayout\022B\n\ncheckpoint\030\207\001 "
  "\001(\0132\037.vega.events.v1.CheckpointEventH\000R\n"
  "checkpoint\0226\n\006market\030\351\007 \001(\0132\033.vega.event"
  "s.v1.MarketEventH\000R\006market\022A\n\014tx_err_eve"
  "nt\030\321\017 \001(\0132\034.vega.events.v1.TxErrorEventH"
  "\000R\ntxErrEventB\007\n\005event*\343\t\n\014BusEventType\022"
  "\036\n\032BUS_EVENT_TYPE_UNSPECIFIED\020\000\022\026\n\022BUS_E"
  "VENT_TYPE_ALL\020\001\022\036\n\032BUS_EVENT_TYPE_TIME_U"
  "PDATE\020\002\022%\n!BUS_EVENT_TYPE_TRANSFER_RESPO"
  "NSES\020\003\022&\n\"BUS_EVENT_TYPE_POSITION_RESOLU"
  "TION\020\004\022\030\n\024BUS_EVENT_TYPE_ORDER\020\005\022\032\n\026BUS_"
  "EVENT_TYPE_ACCOUNT\020\006\022\030\n\024BUS_EVENT_TYPE_P"
  "ARTY\020\007\022\030\n\024BUS_EVENT_TYPE_TRADE\020\010\022 \n\034BUS_"
  "EVENT_TYPE_MARGIN_LEVELS\020\t\022\033\n\027BUS_EVENT_"
  "TYPE_PROPOSAL\020\n\022\027\n\023BUS_EVENT_TYPE_VOTE\020\013"
  "\022\036\n\032BUS_EVENT_TYPE_MARKET_DATA\020\014\022!\n\035BUS_"
  "EVENT_TYPE_NODE_SIGNATURE\020\r\022%\n!BUS_EVENT"
  "_TYPE_LOSS_SOCIALIZATION\020\016\022\"\n\036BUS_EVENT_"
  "TYPE_SETTLE_POSITION\020\017\022$\n BUS_EVENT_TYPE"
  "_SETTLE_DISTRESSED\020\020\022!\n\035BUS_EVENT_TYPE_M"
  "ARKET_CREATED\020\021\022\030\n\024BUS_EVENT_TYPE_ASSET\020"
  "\022\022\036\n\032BUS_EVENT_TYPE_MARKET_TICK\020\023\022\035\n\031BUS"
  "_EVENT_TYPE_WITHDRAWAL\020\024\022\032\n\026BUS_EVENT_TY"
  "PE_DEPOSIT\020\025\022\032\n\026BUS_EVENT_TYPE_AUCTION\020\026"
  "\022\036\n\032BUS_EVENT_TYPE_RISK_FACTOR\020\027\022$\n BUS_"
  "EVENT_TYPE_NETWORK_PARAMETER\020\030\022&\n\"BUS_EV"
  "ENT_TYPE_LIQUIDITY_PROVISION\020\031\022!\n\035BUS_EV"
  "ENT_TYPE_MARKET_UPDATED\020\032\022\036\n\032BUS_EVENT_T"
  "YPE_ORACLE_SPEC\020\033\022\036\n\032BUS_EVENT_TYPE_ORAC"
  "LE_DATA\020\034\022%\n!BUS_EVENT_TYPE_DELEGATION_B"
  "ALANCE\020\035\022\"\n\036BUS_EVENT_TYPE_VALIDATOR_SCO"
  "RE\020\036\022\037\n\033BUS_EVENT_TYPE_EPOCH_UPDATE\020\037\022#\n"
  "\037BUS_EVENT_TYPE_VALIDATOR_UPDATE\020 \022 \n\034BU"
  "S_EVENT_TYPE_STAKE_LINKING\020!\022&\n\"BUS_EVEN"
  "T_TYPE_REWARD_PAYOUT_EVENT\020\"\022\035\n\031BUS_EVEN"
  "T_TYPE_CHECKPOINT\020#\022\031\n\025BUS_EVENT_TYPE_MA"
  "RKET\020e\022\034\n\027BUS_EVENT_TYPE_TX_ERROR\020\311\001BK\n\036"
  "io.vegaprotocol.vega.events.v1Z)code.veg"
  "aprotocol.io/vega/proto/events/v1b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_events_2fv1_2fevents_2eproto_deps[8] = {
  &::descriptor_table_assets_2eproto,
  &::descriptor_table_commands_2fv1_2fcommands_2eproto,
  &::descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto,
  &::descriptor_table_governance_2eproto,
  &::descriptor_table_markets_2eproto,
  &::descriptor_table_oracles_2fv1_2fdata_2eproto,
  &::descriptor_table_oracles_2fv1_2fspec_2eproto,
  &::descriptor_table_vega_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_events_2fv1_2fevents_2eproto_sccs[20] = {
  &scc_info_AuctionEvent_events_2fv1_2fevents_2eproto.base,
  &scc_info_BusEvent_events_2fv1_2fevents_2eproto.base,
  &scc_info_CheckpointEvent_events_2fv1_2fevents_2eproto.base,
  &scc_info_DelegationBalanceEvent_events_2fv1_2fevents_2eproto.base,
  &scc_info_EpochEvent_events_2fv1_2fevents_2eproto.base,
  &scc_info_LossSocialization_events_2fv1_2fevents_2eproto.base,
  &scc_info_MarketEvent_events_2fv1_2fevents_2eproto.base,
  &scc_info_MarketTick_events_2fv1_2fevents_2eproto.base,
  &scc_info_PendingDelegationBalanceEvent_events_2fv1_2fevents_2eproto.base,
  &scc_info_PositionResolution_events_2fv1_2fevents_2eproto.base,
  &scc_info_RewardPayoutEvent_events_2fv1_2fevents_2eproto.base,
  &scc_info_SettleDistressed_events_2fv1_2fevents_2eproto.base,
  &scc_info_SettlePosition_events_2fv1_2fevents_2eproto.base,
  &scc_info_StakeLinking_events_2fv1_2fevents_2eproto.base,
  &scc_info_TimeUpdate_events_2fv1_2fevents_2eproto.base,
  &scc_info_TradeSettlement_events_2fv1_2fevents_2eproto.base,
  &scc_info_TransferResponses_events_2fv1_2fevents_2eproto.base,
  &scc_info_TxErrorEvent_events_2fv1_2fevents_2eproto.base,
  &scc_info_ValidatorScoreEvent_events_2fv1_2fevents_2eproto.base,
  &scc_info_ValidatorUpdate_events_2fv1_2fevents_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_events_2fv1_2fevents_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_events_2fv1_2fevents_2eproto = {
  false, false, descriptor_table_protodef_events_2fv1_2fevents_2eproto, "events/v1/events.proto", 7201,
  &descriptor_table_events_2fv1_2fevents_2eproto_once, descriptor_table_events_2fv1_2fevents_2eproto_sccs, descriptor_table_events_2fv1_2fevents_2eproto_deps, 20, 8,
  schemas, file_default_instances, TableStruct_events_2fv1_2fevents_2eproto::offsets,
  file_level_metadata_events_2fv1_2fevents_2eproto, 20, file_level_enum_descriptors_events_2fv1_2fevents_2eproto, file_level_service_descriptors_events_2fv1_2fevents_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_events_2fv1_2fevents_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_events_2fv1_2fevents_2eproto)), true);
namespace vega {
namespace events {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StakeLinking_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_events_2fv1_2fevents_2eproto);
  return file_level_enum_descriptors_events_2fv1_2fevents_2eproto[0];
}
bool StakeLinking_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StakeLinking_Type StakeLinking::TYPE_UNSPECIFIED;
constexpr StakeLinking_Type StakeLinking::TYPE_LINK;
constexpr StakeLinking_Type StakeLinking::TYPE_UNLINK;
constexpr StakeLinking_Type StakeLinking::Type_MIN;
constexpr StakeLinking_Type StakeLinking::Type_MAX;
constexpr int StakeLinking::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StakeLinking_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_events_2fv1_2fevents_2eproto);
  return file_level_enum_descriptors_events_2fv1_2fevents_2eproto[1];
}
bool StakeLinking_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StakeLinking_Status StakeLinking::STATUS_UNSPECIFIED;
constexpr StakeLinking_Status StakeLinking::STATUS_PENDING;
constexpr StakeLinking_Status StakeLinking::STATUS_ACCEPTED;
constexpr StakeLinking_Status StakeLinking::STATUS_REJECTED;
constexpr StakeLinking_Status StakeLinking::Status_MIN;
constexpr StakeLinking_Status StakeLinking::Status_MAX;
constexpr int StakeLinking::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BusEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_events_2fv1_2fevents_2eproto);
  return file_level_enum_descriptors_events_2fv1_2fevents_2eproto[2];
}
bool BusEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 101:
    case 201:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StakeLinking::_Internal {
 public:
};

StakeLinking::StakeLinking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.StakeLinking)
}
StakeLinking::StakeLinking(const StakeLinking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_hash(),
      GetArena());
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&finalized_at_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(finalized_at_));
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.StakeLinking)
}

void StakeLinking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StakeLinking_events_2fv1_2fevents_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&finalized_at_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(finalized_at_));
}

StakeLinking::~StakeLinking() {
  // @@protoc_insertion_point(destructor:vega.events.v1.StakeLinking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StakeLinking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StakeLinking::ArenaDtor(void* object) {
  StakeLinking* _this = reinterpret_cast< StakeLinking* >(object);
  (void)_this;
}
void StakeLinking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StakeLinking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StakeLinking& StakeLinking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StakeLinking_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void StakeLinking::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.StakeLinking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  party_.ClearToEmpty();
  amount_.ClearToEmpty();
  tx_hash_.ClearToEmpty();
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finalized_at_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(finalized_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StakeLinking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.StakeLinking.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.StakeLinking.Type type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::events::v1::StakeLinking_Type>(val));
        } else goto handle_unusual;
        continue;
      // int64 ts = 3 [json_name = "ts"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party = 4 [json_name = "party"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.StakeLinking.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 5 [json_name = "amount"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.StakeLinking.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.StakeLinking.Status status = 6 [json_name = "status"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::events::v1::StakeLinking_Status>(val));
        } else goto handle_unusual;
        continue;
      // int64 finalized_at = 7 [json_name = "finalizedAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          finalized_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tx_hash = 8 [json_name = "txHash"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.StakeLinking.tx_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StakeLinking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.StakeLinking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.StakeLinking.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .vega.events.v1.StakeLinking.Type type = 2 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int64 ts = 3 [json_name = "ts"];
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ts(), target);
  }

  // string party = 4 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.StakeLinking.party");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_party(), target);
  }

  // string amount = 5 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.StakeLinking.amount");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_amount(), target);
  }

  // .vega.events.v1.StakeLinking.Status status = 6 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // int64 finalized_at = 7 [json_name = "finalizedAt"];
  if (this->finalized_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_finalized_at(), target);
  }

  // string tx_hash = 8 [json_name = "txHash"];
  if (this->tx_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_hash().data(), static_cast<int>(this->_internal_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.StakeLinking.tx_hash");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tx_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.StakeLinking)
  return target;
}

size_t StakeLinking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.StakeLinking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string party = 4 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string amount = 5 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string tx_hash = 8 [json_name = "txHash"];
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_hash());
  }

  // int64 ts = 3 [json_name = "ts"];
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // .vega.events.v1.StakeLinking.Type type = 2 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .vega.events.v1.StakeLinking.Status status = 6 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int64 finalized_at = 7 [json_name = "finalizedAt"];
  if (this->finalized_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_finalized_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StakeLinking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.StakeLinking)
  GOOGLE_DCHECK_NE(&from, this);
  const StakeLinking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StakeLinking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.StakeLinking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.StakeLinking)
    MergeFrom(*source);
  }
}

void StakeLinking::MergeFrom(const StakeLinking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.StakeLinking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.finalized_at() != 0) {
    _internal_set_finalized_at(from._internal_finalized_at());
  }
}

void StakeLinking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.StakeLinking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StakeLinking::CopyFrom(const StakeLinking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.StakeLinking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StakeLinking::IsInitialized() const {
  return true;
}

void StakeLinking::InternalSwap(StakeLinking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StakeLinking, finalized_at_)
      + sizeof(StakeLinking::finalized_at_)
      - PROTOBUF_FIELD_OFFSET(StakeLinking, ts_)>(
          reinterpret_cast<char*>(&ts_),
          reinterpret_cast<char*>(&other->ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StakeLinking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CheckpointEvent::_Internal {
 public:
};

CheckpointEvent::CheckpointEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.CheckpointEvent)
}
CheckpointEvent::CheckpointEvent(const CheckpointEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(),
      GetArena());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(),
      GetArena());
  }
  block_height_ = from.block_height_;
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.CheckpointEvent)
}

void CheckpointEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckpointEvent_events_2fv1_2fevents_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_height_ = PROTOBUF_ULONGLONG(0);
}

CheckpointEvent::~CheckpointEvent() {
  // @@protoc_insertion_point(destructor:vega.events.v1.CheckpointEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckpointEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckpointEvent::ArenaDtor(void* object) {
  CheckpointEvent* _this = reinterpret_cast< CheckpointEvent* >(object);
  (void)_this;
}
void CheckpointEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckpointEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckpointEvent& CheckpointEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckpointEvent_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void CheckpointEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.CheckpointEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  block_hash_.ClearToEmpty();
  block_height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckpointEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.CheckpointEvent.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string block_hash = 2 [json_name = "blockHash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.CheckpointEvent.block_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_height = 3 [json_name = "blockHeight"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckpointEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.CheckpointEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1 [json_name = "hash"];
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.CheckpointEvent.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // string block_hash = 2 [json_name = "blockHash"];
  if (this->block_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_hash().data(), static_cast<int>(this->_internal_block_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.CheckpointEvent.block_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_block_hash(), target);
  }

  // uint64 block_height = 3 [json_name = "blockHeight"];
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_block_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.CheckpointEvent)
  return target;
}

size_t CheckpointEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.CheckpointEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1 [json_name = "hash"];
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string block_hash = 2 [json_name = "blockHash"];
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_hash());
  }

  // uint64 block_height = 3 [json_name = "blockHeight"];
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckpointEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.CheckpointEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckpointEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckpointEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.CheckpointEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.CheckpointEvent)
    MergeFrom(*source);
  }
}

void CheckpointEvent::MergeFrom(const CheckpointEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.CheckpointEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
}

void CheckpointEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.CheckpointEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckpointEvent::CopyFrom(const CheckpointEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.CheckpointEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointEvent::IsInitialized() const {
  return true;
}

void CheckpointEvent::InternalSwap(CheckpointEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(block_height_, other->block_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckpointEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RewardPayoutEvent::_Internal {
 public:
};

RewardPayoutEvent::RewardPayoutEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.RewardPayoutEvent)
}
RewardPayoutEvent::RewardPayoutEvent(const RewardPayoutEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  epoch_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_epoch_seq().empty()) {
    epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_epoch_seq(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  percent_of_total_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_percent_of_total_reward().empty()) {
    percent_of_total_reward_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_percent_of_total_reward(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.RewardPayoutEvent)
}

void RewardPayoutEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardPayoutEvent_events_2fv1_2fevents_2eproto.base);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epoch_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  percent_of_total_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

RewardPayoutEvent::~RewardPayoutEvent() {
  // @@protoc_insertion_point(destructor:vega.events.v1.RewardPayoutEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewardPayoutEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epoch_seq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  percent_of_total_reward_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewardPayoutEvent::ArenaDtor(void* object) {
  RewardPayoutEvent* _this = reinterpret_cast< RewardPayoutEvent* >(object);
  (void)_this;
}
void RewardPayoutEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardPayoutEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardPayoutEvent& RewardPayoutEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardPayoutEvent_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void RewardPayoutEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.RewardPayoutEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_.ClearToEmpty();
  epoch_seq_.ClearToEmpty();
  asset_.ClearToEmpty();
  amount_.ClearToEmpty();
  percent_of_total_reward_.ClearToEmpty();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardPayoutEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.RewardPayoutEvent.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string epoch_seq = 2 [json_name = "epochSeq"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_epoch_seq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.RewardPayoutEvent.epoch_seq"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 3 [json_name = "asset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.RewardPayoutEvent.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 4 [json_name = "amount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.RewardPayoutEvent.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string percent_of_total_reward = 5 [json_name = "percentOfTotalReward"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_percent_of_total_reward();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.RewardPayoutEvent.percent_of_total_reward"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 6 [json_name = "timestamp"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardPayoutEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.RewardPayoutEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.RewardPayoutEvent.party");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party(), target);
  }

  // string epoch_seq = 2 [json_name = "epochSeq"];
  if (this->epoch_seq().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_epoch_seq().data(), static_cast<int>(this->_internal_epoch_seq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.RewardPayoutEvent.epoch_seq");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_epoch_seq(), target);
  }

  // string asset = 3 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.RewardPayoutEvent.asset");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asset(), target);
  }

  // string amount = 4 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.RewardPayoutEvent.amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_amount(), target);
  }

  // string percent_of_total_reward = 5 [json_name = "percentOfTotalReward"];
  if (this->percent_of_total_reward().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_percent_of_total_reward().data(), static_cast<int>(this->_internal_percent_of_total_reward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.RewardPayoutEvent.percent_of_total_reward");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_percent_of_total_reward(), target);
  }

  // int64 timestamp = 6 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.RewardPayoutEvent)
  return target;
}

size_t RewardPayoutEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.RewardPayoutEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string epoch_seq = 2 [json_name = "epochSeq"];
  if (this->epoch_seq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_epoch_seq());
  }

  // string asset = 3 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string amount = 4 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string percent_of_total_reward = 5 [json_name = "percentOfTotalReward"];
  if (this->percent_of_total_reward().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_percent_of_total_reward());
  }

  // int64 timestamp = 6 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardPayoutEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.RewardPayoutEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardPayoutEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardPayoutEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.RewardPayoutEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.RewardPayoutEvent)
    MergeFrom(*source);
  }
}

void RewardPayoutEvent::MergeFrom(const RewardPayoutEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.RewardPayoutEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
  if (from.epoch_seq().size() > 0) {
    _internal_set_epoch_seq(from._internal_epoch_seq());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.percent_of_total_reward().size() > 0) {
    _internal_set_percent_of_total_reward(from._internal_percent_of_total_reward());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void RewardPayoutEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.RewardPayoutEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardPayoutEvent::CopyFrom(const RewardPayoutEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.RewardPayoutEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardPayoutEvent::IsInitialized() const {
  return true;
}

void RewardPayoutEvent::InternalSwap(RewardPayoutEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  epoch_seq_.Swap(&other->epoch_seq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  percent_of_total_reward_.Swap(&other->percent_of_total_reward_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardPayoutEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatorScoreEvent::_Internal {
 public:
};

ValidatorScoreEvent::ValidatorScoreEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.ValidatorScoreEvent)
}
ValidatorScoreEvent::ValidatorScoreEvent(const ValidatorScoreEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(),
      GetArena());
  }
  epoch_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_epoch_seq().empty()) {
    epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_epoch_seq(),
      GetArena());
  }
  validator_score_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_score().empty()) {
    validator_score_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_score(),
      GetArena());
  }
  normalised_score_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_normalised_score().empty()) {
    normalised_score_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_normalised_score(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.ValidatorScoreEvent)
}

void ValidatorScoreEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatorScoreEvent_events_2fv1_2fevents_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epoch_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_score_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  normalised_score_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ValidatorScoreEvent::~ValidatorScoreEvent() {
  // @@protoc_insertion_point(destructor:vega.events.v1.ValidatorScoreEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatorScoreEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epoch_seq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_score_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  normalised_score_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidatorScoreEvent::ArenaDtor(void* object) {
  ValidatorScoreEvent* _this = reinterpret_cast< ValidatorScoreEvent* >(object);
  (void)_this;
}
void ValidatorScoreEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorScoreEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorScoreEvent& ValidatorScoreEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatorScoreEvent_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void ValidatorScoreEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.ValidatorScoreEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  epoch_seq_.ClearToEmpty();
  validator_score_.ClearToEmpty();
  normalised_score_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorScoreEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1 [json_name = "nodeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.ValidatorScoreEvent.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string epoch_seq = 2 [json_name = "epochSeq"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_epoch_seq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.ValidatorScoreEvent.epoch_seq"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_score = 3 [json_name = "validatorScore"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_validator_score();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.ValidatorScoreEvent.validator_score"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string normalised_score = 4 [json_name = "normalisedScore"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_normalised_score();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.ValidatorScoreEvent.normalised_score"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorScoreEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.ValidatorScoreEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1 [json_name = "nodeId"];
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.ValidatorScoreEvent.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // string epoch_seq = 2 [json_name = "epochSeq"];
  if (this->epoch_seq().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_epoch_seq().data(), static_cast<int>(this->_internal_epoch_seq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.ValidatorScoreEvent.epoch_seq");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_epoch_seq(), target);
  }

  // string validator_score = 3 [json_name = "validatorScore"];
  if (this->validator_score().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_score().data(), static_cast<int>(this->_internal_validator_score().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.ValidatorScoreEvent.validator_score");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_validator_score(), target);
  }

  // string normalised_score = 4 [json_name = "normalisedScore"];
  if (this->normalised_score().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_normalised_score().data(), static_cast<int>(this->_internal_normalised_score().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.ValidatorScoreEvent.normalised_score");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_normalised_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.ValidatorScoreEvent)
  return target;
}

size_t ValidatorScoreEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.ValidatorScoreEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1 [json_name = "nodeId"];
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string epoch_seq = 2 [json_name = "epochSeq"];
  if (this->epoch_seq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_epoch_seq());
  }

  // string validator_score = 3 [json_name = "validatorScore"];
  if (this->validator_score().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_score());
  }

  // string normalised_score = 4 [json_name = "normalisedScore"];
  if (this->normalised_score().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_normalised_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorScoreEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.ValidatorScoreEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorScoreEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatorScoreEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.ValidatorScoreEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.ValidatorScoreEvent)
    MergeFrom(*source);
  }
}

void ValidatorScoreEvent::MergeFrom(const ValidatorScoreEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.ValidatorScoreEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.epoch_seq().size() > 0) {
    _internal_set_epoch_seq(from._internal_epoch_seq());
  }
  if (from.validator_score().size() > 0) {
    _internal_set_validator_score(from._internal_validator_score());
  }
  if (from.normalised_score().size() > 0) {
    _internal_set_normalised_score(from._internal_normalised_score());
  }
}

void ValidatorScoreEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.ValidatorScoreEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorScoreEvent::CopyFrom(const ValidatorScoreEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.ValidatorScoreEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorScoreEvent::IsInitialized() const {
  return true;
}

void ValidatorScoreEvent::InternalSwap(ValidatorScoreEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  epoch_seq_.Swap(&other->epoch_seq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_score_.Swap(&other->validator_score_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  normalised_score_.Swap(&other->normalised_score_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorScoreEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DelegationBalanceEvent::_Internal {
 public:
};

DelegationBalanceEvent::DelegationBalanceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.DelegationBalanceEvent)
}
DelegationBalanceEvent::DelegationBalanceEvent(const DelegationBalanceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(),
      GetArena());
  }
  epoch_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_epoch_seq().empty()) {
    epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_epoch_seq(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.DelegationBalanceEvent)
}

void DelegationBalanceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegationBalanceEvent_events_2fv1_2fevents_2eproto.base);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epoch_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

DelegationBalanceEvent::~DelegationBalanceEvent() {
  // @@protoc_insertion_point(destructor:vega.events.v1.DelegationBalanceEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegationBalanceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epoch_seq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegationBalanceEvent::ArenaDtor(void* object) {
  DelegationBalanceEvent* _this = reinterpret_cast< DelegationBalanceEvent* >(object);
  (void)_this;
}
void DelegationBalanceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegationBalanceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegationBalanceEvent& DelegationBalanceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegationBalanceEvent_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void DelegationBalanceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.DelegationBalanceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_.ClearToEmpty();
  node_id_.ClearToEmpty();
  epoch_seq_.ClearToEmpty();
  amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegationBalanceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.DelegationBalanceEvent.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2 [json_name = "nodeId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.DelegationBalanceEvent.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string epoch_seq = 4 [json_name = "epochSeq"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_epoch_seq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.DelegationBalanceEvent.epoch_seq"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegationBalanceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.DelegationBalanceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.DelegationBalanceEvent.party");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party(), target);
  }

  // string node_id = 2 [json_name = "nodeId"];
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.DelegationBalanceEvent.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // string epoch_seq = 4 [json_name = "epochSeq"];
  if (this->epoch_seq().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_epoch_seq().data(), static_cast<int>(this->_internal_epoch_seq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.DelegationBalanceEvent.epoch_seq");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_epoch_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.DelegationBalanceEvent)
  return target;
}

size_t DelegationBalanceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.DelegationBalanceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string node_id = 2 [json_name = "nodeId"];
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string epoch_seq = 4 [json_name = "epochSeq"];
  if (this->epoch_seq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_epoch_seq());
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegationBalanceEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.DelegationBalanceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegationBalanceEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegationBalanceEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.DelegationBalanceEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.DelegationBalanceEvent)
    MergeFrom(*source);
  }
}

void DelegationBalanceEvent::MergeFrom(const DelegationBalanceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.DelegationBalanceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.epoch_seq().size() > 0) {
    _internal_set_epoch_seq(from._internal_epoch_seq());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void DelegationBalanceEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.DelegationBalanceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegationBalanceEvent::CopyFrom(const DelegationBalanceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.DelegationBalanceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegationBalanceEvent::IsInitialized() const {
  return true;
}

void DelegationBalanceEvent::InternalSwap(DelegationBalanceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  epoch_seq_.Swap(&other->epoch_seq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegationBalanceEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PendingDelegationBalanceEvent::_Internal {
 public:
};

PendingDelegationBalanceEvent::PendingDelegationBalanceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.PendingDelegationBalanceEvent)
}
PendingDelegationBalanceEvent::PendingDelegationBalanceEvent(const PendingDelegationBalanceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(),
      GetArena());
  }
  epoch_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_epoch_seq().empty()) {
    epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_epoch_seq(),
      GetArena());
  }
  ::memcpy(&delegation_amount_, &from.delegation_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&undelegation_amount_) -
    reinterpret_cast<char*>(&delegation_amount_)) + sizeof(undelegation_amount_));
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.PendingDelegationBalanceEvent)
}

void PendingDelegationBalanceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingDelegationBalanceEvent_events_2fv1_2fevents_2eproto.base);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epoch_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&delegation_amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&undelegation_amount_) -
      reinterpret_cast<char*>(&delegation_amount_)) + sizeof(undelegation_amount_));
}

PendingDelegationBalanceEvent::~PendingDelegationBalanceEvent() {
  // @@protoc_insertion_point(destructor:vega.events.v1.PendingDelegationBalanceEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PendingDelegationBalanceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epoch_seq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PendingDelegationBalanceEvent::ArenaDtor(void* object) {
  PendingDelegationBalanceEvent* _this = reinterpret_cast< PendingDelegationBalanceEvent* >(object);
  (void)_this;
}
void PendingDelegationBalanceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PendingDelegationBalanceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingDelegationBalanceEvent& PendingDelegationBalanceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingDelegationBalanceEvent_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void PendingDelegationBalanceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.PendingDelegationBalanceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_.ClearToEmpty();
  node_id_.ClearToEmpty();
  epoch_seq_.ClearToEmpty();
  ::memset(&delegation_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&undelegation_amount_) -
      reinterpret_cast<char*>(&delegation_amount_)) + sizeof(undelegation_amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingDelegationBalanceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.PendingDelegationBalanceEvent.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2 [json_name = "nodeId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.PendingDelegationBalanceEvent.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 delegation_amount = 3 [json_name = "delegationAmount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delegation_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 undelegation_amount = 4 [json_name = "undelegationAmount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          undelegation_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string epoch_seq = 5 [json_name = "epochSeq"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_epoch_seq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.PendingDelegationBalanceEvent.epoch_seq"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingDelegationBalanceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.PendingDelegationBalanceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.PendingDelegationBalanceEvent.party");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party(), target);
  }

  // string node_id = 2 [json_name = "nodeId"];
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.PendingDelegationBalanceEvent.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // uint64 delegation_amount = 3 [json_name = "delegationAmount"];
  if (this->delegation_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_delegation_amount(), target);
  }

  // uint64 undelegation_amount = 4 [json_name = "undelegationAmount"];
  if (this->undelegation_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_undelegation_amount(), target);
  }

  // string epoch_seq = 5 [json_name = "epochSeq"];
  if (this->epoch_seq().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_epoch_seq().data(), static_cast<int>(this->_internal_epoch_seq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.PendingDelegationBalanceEvent.epoch_seq");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_epoch_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.PendingDelegationBalanceEvent)
  return target;
}

size_t PendingDelegationBalanceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.PendingDelegationBalanceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string node_id = 2 [json_name = "nodeId"];
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string epoch_seq = 5 [json_name = "epochSeq"];
  if (this->epoch_seq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_epoch_seq());
  }

  // uint64 delegation_amount = 3 [json_name = "delegationAmount"];
  if (this->delegation_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_delegation_amount());
  }

  // uint64 undelegation_amount = 4 [json_name = "undelegationAmount"];
  if (this->undelegation_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_undelegation_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingDelegationBalanceEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.PendingDelegationBalanceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingDelegationBalanceEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingDelegationBalanceEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.PendingDelegationBalanceEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.PendingDelegationBalanceEvent)
    MergeFrom(*source);
  }
}

void PendingDelegationBalanceEvent::MergeFrom(const PendingDelegationBalanceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.PendingDelegationBalanceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.epoch_seq().size() > 0) {
    _internal_set_epoch_seq(from._internal_epoch_seq());
  }
  if (from.delegation_amount() != 0) {
    _internal_set_delegation_amount(from._internal_delegation_amount());
  }
  if (from.undelegation_amount() != 0) {
    _internal_set_undelegation_amount(from._internal_undelegation_amount());
  }
}

void PendingDelegationBalanceEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.PendingDelegationBalanceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingDelegationBalanceEvent::CopyFrom(const PendingDelegationBalanceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.PendingDelegationBalanceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingDelegationBalanceEvent::IsInitialized() const {
  return true;
}

void PendingDelegationBalanceEvent::InternalSwap(PendingDelegationBalanceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  epoch_seq_.Swap(&other->epoch_seq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PendingDelegationBalanceEvent, undelegation_amount_)
      + sizeof(PendingDelegationBalanceEvent::undelegation_amount_)
      - PROTOBUF_FIELD_OFFSET(PendingDelegationBalanceEvent, delegation_amount_)>(
          reinterpret_cast<char*>(&delegation_amount_),
          reinterpret_cast<char*>(&other->delegation_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingDelegationBalanceEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketEvent::_Internal {
 public:
};

MarketEvent::MarketEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.MarketEvent)
}
MarketEvent::MarketEvent(const MarketEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.MarketEvent)
}

void MarketEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketEvent_events_2fv1_2fevents_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketEvent::~MarketEvent() {
  // @@protoc_insertion_point(destructor:vega.events.v1.MarketEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketEvent::ArenaDtor(void* object) {
  MarketEvent* _this = reinterpret_cast< MarketEvent* >(object);
  (void)_this;
}
void MarketEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketEvent& MarketEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketEvent_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void MarketEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.MarketEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.MarketEvent.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payload = 2 [json_name = "payload"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.MarketEvent.payload"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.MarketEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.MarketEvent.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string payload = 2 [json_name = "payload"];
  if (this->payload().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.MarketEvent.payload");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.MarketEvent)
  return target;
}

size_t MarketEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.MarketEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string payload = 2 [json_name = "payload"];
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.MarketEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.MarketEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.MarketEvent)
    MergeFrom(*source);
  }
}

void MarketEvent::MergeFrom(const MarketEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.MarketEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
}

void MarketEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.MarketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketEvent::CopyFrom(const MarketEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.MarketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketEvent::IsInitialized() const {
  return true;
}

void MarketEvent::InternalSwap(MarketEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TxErrorEvent::_Internal {
 public:
  static const ::vega::commands::v1::OrderSubmission& order_submission(const TxErrorEvent* msg);
  static const ::vega::commands::v1::OrderAmendment& order_amendment(const TxErrorEvent* msg);
  static const ::vega::commands::v1::OrderCancellation& order_cancellation(const TxErrorEvent* msg);
  static const ::vega::commands::v1::ProposalSubmission& proposal(const TxErrorEvent* msg);
  static const ::vega::commands::v1::VoteSubmission& vote_submission(const TxErrorEvent* msg);
  static const ::vega::commands::v1::LiquidityProvisionSubmission& liquidity_provision_submission(const TxErrorEvent* msg);
  static const ::vega::commands::v1::WithdrawSubmission& withdraw_submission(const TxErrorEvent* msg);
};

const ::vega::commands::v1::OrderSubmission&
TxErrorEvent::_Internal::order_submission(const TxErrorEvent* msg) {
  return *msg->transaction_.order_submission_;
}
const ::vega::commands::v1::OrderAmendment&
TxErrorEvent::_Internal::order_amendment(const TxErrorEvent* msg) {
  return *msg->transaction_.order_amendment_;
}
const ::vega::commands::v1::OrderCancellation&
TxErrorEvent::_Internal::order_cancellation(const TxErrorEvent* msg) {
  return *msg->transaction_.order_cancellation_;
}
const ::vega::commands::v1::ProposalSubmission&
TxErrorEvent::_Internal::proposal(const TxErrorEvent* msg) {
  return *msg->transaction_.proposal_;
}
const ::vega::commands::v1::VoteSubmission&
TxErrorEvent::_Internal::vote_submission(const TxErrorEvent* msg) {
  return *msg->transaction_.vote_submission_;
}
const ::vega::commands::v1::LiquidityProvisionSubmission&
TxErrorEvent::_Internal::liquidity_provision_submission(const TxErrorEvent* msg) {
  return *msg->transaction_.liquidity_provision_submission_;
}
const ::vega::commands::v1::WithdrawSubmission&
TxErrorEvent::_Internal::withdraw_submission(const TxErrorEvent* msg) {
  return *msg->transaction_.withdraw_submission_;
}
void TxErrorEvent::set_allocated_order_submission(::vega::commands::v1::OrderSubmission* order_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction();
  if (order_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_submission)->GetArena();
    if (message_arena != submessage_arena) {
      order_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_submission, submessage_arena);
    }
    set_has_order_submission();
    transaction_.order_submission_ = order_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.TxErrorEvent.order_submission)
}
void TxErrorEvent::clear_order_submission() {
  if (_internal_has_order_submission()) {
    if (GetArena() == nullptr) {
      delete transaction_.order_submission_;
    }
    clear_has_transaction();
  }
}
void TxErrorEvent::set_allocated_order_amendment(::vega::commands::v1::OrderAmendment* order_amendment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction();
  if (order_amendment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_amendment)->GetArena();
    if (message_arena != submessage_arena) {
      order_amendment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_amendment, submessage_arena);
    }
    set_has_order_amendment();
    transaction_.order_amendment_ = order_amendment;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.TxErrorEvent.order_amendment)
}
void TxErrorEvent::clear_order_amendment() {
  if (_internal_has_order_amendment()) {
    if (GetArena() == nullptr) {
      delete transaction_.order_amendment_;
    }
    clear_has_transaction();
  }
}
void TxErrorEvent::set_allocated_order_cancellation(::vega::commands::v1::OrderCancellation* order_cancellation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction();
  if (order_cancellation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_cancellation)->GetArena();
    if (message_arena != submessage_arena) {
      order_cancellation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_cancellation, submessage_arena);
    }
    set_has_order_cancellation();
    transaction_.order_cancellation_ = order_cancellation;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.TxErrorEvent.order_cancellation)
}
void TxErrorEvent::clear_order_cancellation() {
  if (_internal_has_order_cancellation()) {
    if (GetArena() == nullptr) {
      delete transaction_.order_cancellation_;
    }
    clear_has_transaction();
  }
}
void TxErrorEvent::set_allocated_proposal(::vega::commands::v1::ProposalSubmission* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction();
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal)->GetArena();
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    set_has_proposal();
    transaction_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.TxErrorEvent.proposal)
}
void TxErrorEvent::clear_proposal() {
  if (_internal_has_proposal()) {
    if (GetArena() == nullptr) {
      delete transaction_.proposal_;
    }
    clear_has_transaction();
  }
}
void TxErrorEvent::set_allocated_vote_submission(::vega::commands::v1::VoteSubmission* vote_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction();
  if (vote_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_submission)->GetArena();
    if (message_arena != submessage_arena) {
      vote_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_submission, submessage_arena);
    }
    set_has_vote_submission();
    transaction_.vote_submission_ = vote_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.TxErrorEvent.vote_submission)
}
void TxErrorEvent::clear_vote_submission() {
  if (_internal_has_vote_submission()) {
    if (GetArena() == nullptr) {
      delete transaction_.vote_submission_;
    }
    clear_has_transaction();
  }
}
void TxErrorEvent::set_allocated_liquidity_provision_submission(::vega::commands::v1::LiquidityProvisionSubmission* liquidity_provision_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction();
  if (liquidity_provision_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liquidity_provision_submission)->GetArena();
    if (message_arena != submessage_arena) {
      liquidity_provision_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquidity_provision_submission, submessage_arena);
    }
    set_has_liquidity_provision_submission();
    transaction_.liquidity_provision_submission_ = liquidity_provision_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.TxErrorEvent.liquidity_provision_submission)
}
void TxErrorEvent::clear_liquidity_provision_submission() {
  if (_internal_has_liquidity_provision_submission()) {
    if (GetArena() == nullptr) {
      delete transaction_.liquidity_provision_submission_;
    }
    clear_has_transaction();
  }
}
void TxErrorEvent::set_allocated_withdraw_submission(::vega::commands::v1::WithdrawSubmission* withdraw_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction();
  if (withdraw_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdraw_submission)->GetArena();
    if (message_arena != submessage_arena) {
      withdraw_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_submission, submessage_arena);
    }
    set_has_withdraw_submission();
    transaction_.withdraw_submission_ = withdraw_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.TxErrorEvent.withdraw_submission)
}
void TxErrorEvent::clear_withdraw_submission() {
  if (_internal_has_withdraw_submission()) {
    if (GetArena() == nullptr) {
      delete transaction_.withdraw_submission_;
    }
    clear_has_transaction();
  }
}
TxErrorEvent::TxErrorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.TxErrorEvent)
}
TxErrorEvent::TxErrorEvent(const TxErrorEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  err_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_err_msg().empty()) {
    err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_msg(),
      GetArena());
  }
  clear_has_transaction();
  switch (from.transaction_case()) {
    case kOrderSubmission: {
      _internal_mutable_order_submission()->::vega::commands::v1::OrderSubmission::MergeFrom(from._internal_order_submission());
      break;
    }
    case kOrderAmendment: {
      _internal_mutable_order_amendment()->::vega::commands::v1::OrderAmendment::MergeFrom(from._internal_order_amendment());
      break;
    }
    case kOrderCancellation: {
      _internal_mutable_order_cancellation()->::vega::commands::v1::OrderCancellation::MergeFrom(from._internal_order_cancellation());
      break;
    }
    case kProposal: {
      _internal_mutable_proposal()->::vega::commands::v1::ProposalSubmission::MergeFrom(from._internal_proposal());
      break;
    }
    case kVoteSubmission: {
      _internal_mutable_vote_submission()->::vega::commands::v1::VoteSubmission::MergeFrom(from._internal_vote_submission());
      break;
    }
    case kLiquidityProvisionSubmission: {
      _internal_mutable_liquidity_provision_submission()->::vega::commands::v1::LiquidityProvisionSubmission::MergeFrom(from._internal_liquidity_provision_submission());
      break;
    }
    case kWithdrawSubmission: {
      _internal_mutable_withdraw_submission()->::vega::commands::v1::WithdrawSubmission::MergeFrom(from._internal_withdraw_submission());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.TxErrorEvent)
}

void TxErrorEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TxErrorEvent_events_2fv1_2fevents_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction();
}

TxErrorEvent::~TxErrorEvent() {
  // @@protoc_insertion_point(destructor:vega.events.v1.TxErrorEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TxErrorEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_transaction()) {
    clear_transaction();
  }
}

void TxErrorEvent::ArenaDtor(void* object) {
  TxErrorEvent* _this = reinterpret_cast< TxErrorEvent* >(object);
  (void)_this;
}
void TxErrorEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxErrorEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxErrorEvent& TxErrorEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TxErrorEvent_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void TxErrorEvent::clear_transaction() {
// @@protoc_insertion_point(one_of_clear_start:vega.events.v1.TxErrorEvent)
  switch (transaction_case()) {
    case kOrderSubmission: {
      if (GetArena() == nullptr) {
        delete transaction_.order_submission_;
      }
      break;
    }
    case kOrderAmendment: {
      if (GetArena() == nullptr) {
        delete transaction_.order_amendment_;
      }
      break;
    }
    case kOrderCancellation: {
      if (GetArena() == nullptr) {
        delete transaction_.order_cancellation_;
      }
      break;
    }
    case kProposal: {
      if (GetArena() == nullptr) {
        delete transaction_.proposal_;
      }
      break;
    }
    case kVoteSubmission: {
      if (GetArena() == nullptr) {
        delete transaction_.vote_submission_;
      }
      break;
    }
    case kLiquidityProvisionSubmission: {
      if (GetArena() == nullptr) {
        delete transaction_.liquidity_provision_submission_;
      }
      break;
    }
    case kWithdrawSubmission: {
      if (GetArena() == nullptr) {
        delete transaction_.withdraw_submission_;
      }
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_NOT_SET;
}


void TxErrorEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.TxErrorEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  err_msg_.ClearToEmpty();
  clear_transaction();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxErrorEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.TxErrorEvent.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string err_msg = 2 [json_name = "errMsg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_err_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.TxErrorEvent.err_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.OrderSubmission order_submission = 101 [json_name = "orderSubmission"];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.OrderAmendment order_amendment = 102 [json_name = "orderAmendment"];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_amendment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.OrderCancellation order_cancellation = 103 [json_name = "orderCancellation"];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_cancellation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.ProposalSubmission proposal = 104 [json_name = "proposal"];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.VoteSubmission vote_submission = 105 [json_name = "voteSubmission"];
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 106 [json_name = "liquidityProvisionSubmission"];
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidity_provision_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.WithdrawSubmission withdraw_submission = 107 [json_name = "withdrawSubmission"];
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxErrorEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.TxErrorEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.TxErrorEvent.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string err_msg = 2 [json_name = "errMsg"];
  if (this->err_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_msg().data(), static_cast<int>(this->_internal_err_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.TxErrorEvent.err_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_msg(), target);
  }

  // .vega.commands.v1.OrderSubmission order_submission = 101 [json_name = "orderSubmission"];
  if (_internal_has_order_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::order_submission(this), target, stream);
  }

  // .vega.commands.v1.OrderAmendment order_amendment = 102 [json_name = "orderAmendment"];
  if (_internal_has_order_amendment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::order_amendment(this), target, stream);
  }

  // .vega.commands.v1.OrderCancellation order_cancellation = 103 [json_name = "orderCancellation"];
  if (_internal_has_order_cancellation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::order_cancellation(this), target, stream);
  }

  // .vega.commands.v1.ProposalSubmission proposal = 104 [json_name = "proposal"];
  if (_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::proposal(this), target, stream);
  }

  // .vega.commands.v1.VoteSubmission vote_submission = 105 [json_name = "voteSubmission"];
  if (_internal_has_vote_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::vote_submission(this), target, stream);
  }

  // .vega.commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 106 [json_name = "liquidityProvisionSubmission"];
  if (_internal_has_liquidity_provision_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::liquidity_provision_submission(this), target, stream);
  }

  // .vega.commands.v1.WithdrawSubmission withdraw_submission = 107 [json_name = "withdrawSubmission"];
  if (_internal_has_withdraw_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::withdraw_submission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.TxErrorEvent)
  return target;
}

size_t TxErrorEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.TxErrorEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string err_msg = 2 [json_name = "errMsg"];
  if (this->err_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_msg());
  }

  switch (transaction_case()) {
    // .vega.commands.v1.OrderSubmission order_submission = 101 [json_name = "orderSubmission"];
    case kOrderSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.order_submission_);
      break;
    }
    // .vega.commands.v1.OrderAmendment order_amendment = 102 [json_name = "orderAmendment"];
    case kOrderAmendment: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.order_amendment_);
      break;
    }
    // .vega.commands.v1.OrderCancellation order_cancellation = 103 [json_name = "orderCancellation"];
    case kOrderCancellation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.order_cancellation_);
      break;
    }
    // .vega.commands.v1.ProposalSubmission proposal = 104 [json_name = "proposal"];
    case kProposal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.proposal_);
      break;
    }
    // .vega.commands.v1.VoteSubmission vote_submission = 105 [json_name = "voteSubmission"];
    case kVoteSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.vote_submission_);
      break;
    }
    // .vega.commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 106 [json_name = "liquidityProvisionSubmission"];
    case kLiquidityProvisionSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.liquidity_provision_submission_);
      break;
    }
    // .vega.commands.v1.WithdrawSubmission withdraw_submission = 107 [json_name = "withdrawSubmission"];
    case kWithdrawSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.withdraw_submission_);
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxErrorEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.TxErrorEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TxErrorEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxErrorEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.TxErrorEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.TxErrorEvent)
    MergeFrom(*source);
  }
}

void TxErrorEvent::MergeFrom(const TxErrorEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.TxErrorEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.err_msg().size() > 0) {
    _internal_set_err_msg(from._internal_err_msg());
  }
  switch (from.transaction_case()) {
    case kOrderSubmission: {
      _internal_mutable_order_submission()->::vega::commands::v1::OrderSubmission::MergeFrom(from._internal_order_submission());
      break;
    }
    case kOrderAmendment: {
      _internal_mutable_order_amendment()->::vega::commands::v1::OrderAmendment::MergeFrom(from._internal_order_amendment());
      break;
    }
    case kOrderCancellation: {
      _internal_mutable_order_cancellation()->::vega::commands::v1::OrderCancellation::MergeFrom(from._internal_order_cancellation());
      break;
    }
    case kProposal: {
      _internal_mutable_proposal()->::vega::commands::v1::ProposalSubmission::MergeFrom(from._internal_proposal());
      break;
    }
    case kVoteSubmission: {
      _internal_mutable_vote_submission()->::vega::commands::v1::VoteSubmission::MergeFrom(from._internal_vote_submission());
      break;
    }
    case kLiquidityProvisionSubmission: {
      _internal_mutable_liquidity_provision_submission()->::vega::commands::v1::LiquidityProvisionSubmission::MergeFrom(from._internal_liquidity_provision_submission());
      break;
    }
    case kWithdrawSubmission: {
      _internal_mutable_withdraw_submission()->::vega::commands::v1::WithdrawSubmission::MergeFrom(from._internal_withdraw_submission());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
}

void TxErrorEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.TxErrorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxErrorEvent::CopyFrom(const TxErrorEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.TxErrorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxErrorEvent::IsInitialized() const {
  return true;
}

void TxErrorEvent::InternalSwap(TxErrorEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  err_msg_.Swap(&other->err_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(transaction_, other->transaction_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxErrorEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeUpdate::_Internal {
 public:
};

TimeUpdate::TimeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.TimeUpdate)
}
TimeUpdate::TimeUpdate(const TimeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.TimeUpdate)
}

void TimeUpdate::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

TimeUpdate::~TimeUpdate() {
  // @@protoc_insertion_point(destructor:vega.events.v1.TimeUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimeUpdate::ArenaDtor(void* object) {
  TimeUpdate* _this = reinterpret_cast< TimeUpdate* >(object);
  (void)_this;
}
void TimeUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeUpdate& TimeUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeUpdate_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void TimeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.TimeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1 [json_name = "timestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.TimeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.TimeUpdate)
  return target;
}

size_t TimeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.TimeUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.TimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.TimeUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.TimeUpdate)
    MergeFrom(*source);
  }
}

void TimeUpdate::MergeFrom(const TimeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.TimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void TimeUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.TimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeUpdate::CopyFrom(const TimeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.TimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeUpdate::IsInitialized() const {
  return true;
}

void TimeUpdate::InternalSwap(TimeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EpochEvent::_Internal {
 public:
};

EpochEvent::EpochEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.EpochEvent)
}
EpochEvent::EpochEvent(const EpochEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.EpochEvent)
}

void EpochEvent::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(end_time_));
}

EpochEvent::~EpochEvent() {
  // @@protoc_insertion_point(destructor:vega.events.v1.EpochEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EpochEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EpochEvent::ArenaDtor(void* object) {
  EpochEvent* _this = reinterpret_cast< EpochEvent* >(object);
  (void)_this;
}
void EpochEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EpochEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpochEvent& EpochEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EpochEvent_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void EpochEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.EpochEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 seq = 1 [json_name = "seq"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start_time = 2 [json_name = "startTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire_time = 3 [json_name = "expireTime"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 4 [json_name = "endTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EpochEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.EpochEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq = 1 [json_name = "seq"];
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq(), target);
  }

  // int64 start_time = 2 [json_name = "startTime"];
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_start_time(), target);
  }

  // int64 expire_time = 3 [json_name = "expireTime"];
  if (this->expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_expire_time(), target);
  }

  // int64 end_time = 4 [json_name = "endTime"];
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.EpochEvent)
  return target;
}

size_t EpochEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.EpochEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seq = 1 [json_name = "seq"];
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  // int64 start_time = 2 [json_name = "startTime"];
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_time());
  }

  // int64 expire_time = 3 [json_name = "expireTime"];
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expire_time());
  }

  // int64 end_time = 4 [json_name = "endTime"];
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.EpochEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EpochEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.EpochEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.EpochEvent)
    MergeFrom(*source);
  }
}

void EpochEvent::MergeFrom(const EpochEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.EpochEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
}

void EpochEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.EpochEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochEvent::CopyFrom(const EpochEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.EpochEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochEvent::IsInitialized() const {
  return true;
}

void EpochEvent::InternalSwap(EpochEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EpochEvent, end_time_)
      + sizeof(EpochEvent::end_time_)
      - PROTOBUF_FIELD_OFFSET(EpochEvent, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferResponses::_Internal {
 public:
};

void TransferResponses::clear_responses() {
  responses_.Clear();
}
TransferResponses::TransferResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.TransferResponses)
}
TransferResponses::TransferResponses(const TransferResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.TransferResponses)
}

void TransferResponses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferResponses_events_2fv1_2fevents_2eproto.base);
}

TransferResponses::~TransferResponses() {
  // @@protoc_insertion_point(destructor:vega.events.v1.TransferResponses)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransferResponses::ArenaDtor(void* object) {
  TransferResponses* _this = reinterpret_cast< TransferResponses* >(object);
  (void)_this;
}
void TransferResponses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferResponses& TransferResponses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferResponses_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void TransferResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.TransferResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.TransferResponse responses = 1 [json_name = "responses"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferResponses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.TransferResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.TransferResponse responses = 1 [json_name = "responses"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.TransferResponses)
  return target;
}

size_t TransferResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.TransferResponses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.TransferResponse responses = 1 [json_name = "responses"];
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferResponses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.TransferResponses)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferResponses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferResponses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.TransferResponses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.TransferResponses)
    MergeFrom(*source);
  }
}

void TransferResponses::MergeFrom(const TransferResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.TransferResponses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
}

void TransferResponses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.TransferResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferResponses::CopyFrom(const TransferResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.TransferResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferResponses::IsInitialized() const {
  return true;
}

void TransferResponses::InternalSwap(TransferResponses* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferResponses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionResolution::_Internal {
 public:
};

PositionResolution::PositionResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.PositionResolution)
}
PositionResolution::PositionResolution(const PositionResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  ::memcpy(&distressed_, &from.distressed_,
    static_cast<size_t>(reinterpret_cast<char*>(&mark_price_) -
    reinterpret_cast<char*>(&distressed_)) + sizeof(mark_price_));
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.PositionResolution)
}

void PositionResolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionResolution_events_2fv1_2fevents_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&distressed_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mark_price_) -
      reinterpret_cast<char*>(&distressed_)) + sizeof(mark_price_));
}

PositionResolution::~PositionResolution() {
  // @@protoc_insertion_point(destructor:vega.events.v1.PositionResolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PositionResolution::ArenaDtor(void* object) {
  PositionResolution* _this = reinterpret_cast< PositionResolution* >(object);
  (void)_this;
}
void PositionResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionResolution& PositionResolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionResolution_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void PositionResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.PositionResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  ::memset(&distressed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mark_price_) -
      reinterpret_cast<char*>(&distressed_)) + sizeof(mark_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.PositionResolution.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 distressed = 2 [json_name = "distressed"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          distressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 closed = 3 [json_name = "closed"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 mark_price = 4 [json_name = "markPrice"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mark_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionResolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.PositionResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.PositionResolution.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // int64 distressed = 2 [json_name = "distressed"];
  if (this->distressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_distressed(), target);
  }

  // int64 closed = 3 [json_name = "closed"];
  if (this->closed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_closed(), target);
  }

  // uint64 mark_price = 4 [json_name = "markPrice"];
  if (this->mark_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_mark_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.PositionResolution)
  return target;
}

size_t PositionResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.PositionResolution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // int64 distressed = 2 [json_name = "distressed"];
  if (this->distressed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_distressed());
  }

  // int64 closed = 3 [json_name = "closed"];
  if (this->closed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_closed());
  }

  // uint64 mark_price = 4 [json_name = "markPrice"];
  if (this->mark_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mark_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionResolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.PositionResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionResolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.PositionResolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.PositionResolution)
    MergeFrom(*source);
  }
}

void PositionResolution::MergeFrom(const PositionResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.PositionResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.distressed() != 0) {
    _internal_set_distressed(from._internal_distressed());
  }
  if (from.closed() != 0) {
    _internal_set_closed(from._internal_closed());
  }
  if (from.mark_price() != 0) {
    _internal_set_mark_price(from._internal_mark_price());
  }
}

void PositionResolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.PositionResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionResolution::CopyFrom(const PositionResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.PositionResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionResolution::IsInitialized() const {
  return true;
}

void PositionResolution::InternalSwap(PositionResolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionResolution, mark_price_)
      + sizeof(PositionResolution::mark_price_)
      - PROTOBUF_FIELD_OFFSET(PositionResolution, distressed_)>(
          reinterpret_cast<char*>(&distressed_),
          reinterpret_cast<char*>(&other->distressed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionResolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LossSocialization::_Internal {
 public:
};

LossSocialization::LossSocialization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.LossSocialization)
}
LossSocialization::LossSocialization(const LossSocialization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.LossSocialization)
}

void LossSocialization::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LossSocialization_events_2fv1_2fevents_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

LossSocialization::~LossSocialization() {
  // @@protoc_insertion_point(destructor:vega.events.v1.LossSocialization)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LossSocialization::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LossSocialization::ArenaDtor(void* object) {
  LossSocialization* _this = reinterpret_cast< LossSocialization* >(object);
  (void)_this;
}
void LossSocialization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LossSocialization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LossSocialization& LossSocialization::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LossSocialization_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void LossSocialization::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.LossSocialization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LossSocialization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.LossSocialization.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.LossSocialization.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LossSocialization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.LossSocialization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.LossSocialization.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.LossSocialization.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // int64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.LossSocialization)
  return target;
}

size_t LossSocialization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.LossSocialization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // int64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossSocialization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.LossSocialization)
  GOOGLE_DCHECK_NE(&from, this);
  const LossSocialization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LossSocialization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.LossSocialization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.LossSocialization)
    MergeFrom(*source);
  }
}

void LossSocialization::MergeFrom(const LossSocialization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.LossSocialization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void LossSocialization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.LossSocialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossSocialization::CopyFrom(const LossSocialization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.LossSocialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossSocialization::IsInitialized() const {
  return true;
}

void LossSocialization::InternalSwap(LossSocialization* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LossSocialization::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradeSettlement::_Internal {
 public:
};

TradeSettlement::TradeSettlement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.TradeSettlement)
}
TradeSettlement::TradeSettlement(const TradeSettlement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&size_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.TradeSettlement)
}

void TradeSettlement::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&size_)) + sizeof(price_));
}

TradeSettlement::~TradeSettlement() {
  // @@protoc_insertion_point(destructor:vega.events.v1.TradeSettlement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeSettlement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradeSettlement::ArenaDtor(void* object) {
  TradeSettlement* _this = reinterpret_cast< TradeSettlement* >(object);
  (void)_this;
}
void TradeSettlement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeSettlement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeSettlement& TradeSettlement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeSettlement_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void TradeSettlement::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.TradeSettlement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&size_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeSettlement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 size = 1 [json_name = "size"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 2 [json_name = "price"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeSettlement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.TradeSettlement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1 [json_name = "size"];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_size(), target);
  }

  // uint64 price = 2 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.TradeSettlement)
  return target;
}

size_t TradeSettlement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.TradeSettlement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 size = 1 [json_name = "size"];
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // uint64 price = 2 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeSettlement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.TradeSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeSettlement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeSettlement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.TradeSettlement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.TradeSettlement)
    MergeFrom(*source);
  }
}

void TradeSettlement::MergeFrom(const TradeSettlement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.TradeSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void TradeSettlement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.TradeSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeSettlement::CopyFrom(const TradeSettlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.TradeSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeSettlement::IsInitialized() const {
  return true;
}

void TradeSettlement::InternalSwap(TradeSettlement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeSettlement, price_)
      + sizeof(TradeSettlement::price_)
      - PROTOBUF_FIELD_OFFSET(TradeSettlement, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeSettlement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SettlePosition::_Internal {
 public:
};

SettlePosition::SettlePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trade_settlements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.SettlePosition)
}
SettlePosition::SettlePosition(const SettlePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trade_settlements_(from.trade_settlements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  price_ = from.price_;
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.SettlePosition)
}

void SettlePosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SettlePosition_events_2fv1_2fevents_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_ = PROTOBUF_ULONGLONG(0);
}

SettlePosition::~SettlePosition() {
  // @@protoc_insertion_point(destructor:vega.events.v1.SettlePosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SettlePosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SettlePosition::ArenaDtor(void* object) {
  SettlePosition* _this = reinterpret_cast< SettlePosition* >(object);
  (void)_this;
}
void SettlePosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SettlePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettlePosition& SettlePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettlePosition_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void SettlePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.SettlePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_settlements_.Clear();
  market_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  price_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettlePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.SettlePosition.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.SettlePosition.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 3 [json_name = "price"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.events.v1.TradeSettlement trade_settlements = 4 [json_name = "tradeSettlements"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trade_settlements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettlePosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.SettlePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.SettlePosition.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.SettlePosition.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // uint64 price = 3 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_price(), target);
  }

  // repeated .vega.events.v1.TradeSettlement trade_settlements = 4 [json_name = "tradeSettlements"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trade_settlements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_trade_settlements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.SettlePosition)
  return target;
}

size_t SettlePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.SettlePosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.events.v1.TradeSettlement trade_settlements = 4 [json_name = "tradeSettlements"];
  total_size += 1UL * this->_internal_trade_settlements_size();
  for (const auto& msg : this->trade_settlements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // uint64 price = 3 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettlePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.SettlePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SettlePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettlePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.SettlePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.SettlePosition)
    MergeFrom(*source);
  }
}

void SettlePosition::MergeFrom(const SettlePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.SettlePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trade_settlements_.MergeFrom(from.trade_settlements_);
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void SettlePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.SettlePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettlePosition::CopyFrom(const SettlePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.SettlePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettlePosition::IsInitialized() const {
  return true;
}

void SettlePosition::InternalSwap(SettlePosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trade_settlements_.InternalSwap(&other->trade_settlements_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(price_, other->price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettlePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SettleDistressed::_Internal {
 public:
};

SettleDistressed::SettleDistressed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.SettleDistressed)
}
SettleDistressed::SettleDistressed(const SettleDistressed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  ::memcpy(&margin_, &from.margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&margin_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.SettleDistressed)
}

void SettleDistressed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SettleDistressed_events_2fv1_2fevents_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&margin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&margin_)) + sizeof(price_));
}

SettleDistressed::~SettleDistressed() {
  // @@protoc_insertion_point(destructor:vega.events.v1.SettleDistressed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SettleDistressed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SettleDistressed::ArenaDtor(void* object) {
  SettleDistressed* _this = reinterpret_cast< SettleDistressed* >(object);
  (void)_this;
}
void SettleDistressed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SettleDistressed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettleDistressed& SettleDistressed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettleDistressed_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void SettleDistressed::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.SettleDistressed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  ::memset(&margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&margin_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettleDistressed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.SettleDistressed.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.SettleDistressed.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 margin = 3 [json_name = "margin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 4 [json_name = "price"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettleDistressed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.SettleDistressed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.SettleDistressed.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.SettleDistressed.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // uint64 margin = 3 [json_name = "margin"];
  if (this->margin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_margin(), target);
  }

  // uint64 price = 4 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.SettleDistressed)
  return target;
}

size_t SettleDistressed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.SettleDistressed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // uint64 margin = 3 [json_name = "margin"];
  if (this->margin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_margin());
  }

  // uint64 price = 4 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettleDistressed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.SettleDistressed)
  GOOGLE_DCHECK_NE(&from, this);
  const SettleDistressed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettleDistressed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.SettleDistressed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.SettleDistressed)
    MergeFrom(*source);
  }
}

void SettleDistressed::MergeFrom(const SettleDistressed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.SettleDistressed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.margin() != 0) {
    _internal_set_margin(from._internal_margin());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void SettleDistressed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.SettleDistressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettleDistressed::CopyFrom(const SettleDistressed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.SettleDistressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettleDistressed::IsInitialized() const {
  return true;
}

void SettleDistressed::InternalSwap(SettleDistressed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SettleDistressed, price_)
      + sizeof(SettleDistressed::price_)
      - PROTOBUF_FIELD_OFFSET(SettleDistressed, margin_)>(
          reinterpret_cast<char*>(&margin_),
          reinterpret_cast<char*>(&other->margin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SettleDistressed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketTick::_Internal {
 public:
};

MarketTick::MarketTick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.MarketTick)
}
MarketTick::MarketTick(const MarketTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.MarketTick)
}

void MarketTick::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketTick_events_2fv1_2fevents_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_LONGLONG(0);
}

MarketTick::~MarketTick() {
  // @@protoc_insertion_point(destructor:vega.events.v1.MarketTick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketTick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketTick::ArenaDtor(void* object) {
  MarketTick* _this = reinterpret_cast< MarketTick* >(object);
  (void)_this;
}
void MarketTick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketTick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketTick& MarketTick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketTick_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void MarketTick::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.MarketTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketTick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.MarketTick.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2 [json_name = "time"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketTick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.MarketTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.MarketTick.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 time = 2 [json_name = "time"];
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.MarketTick)
  return target;
}

size_t MarketTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.MarketTick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int64 time = 2 [json_name = "time"];
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketTick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.MarketTick)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketTick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketTick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.MarketTick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.MarketTick)
    MergeFrom(*source);
  }
}

void MarketTick::MergeFrom(const MarketTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.MarketTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void MarketTick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.MarketTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketTick::CopyFrom(const MarketTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.MarketTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketTick::IsInitialized() const {
  return true;
}

void MarketTick::InternalSwap(MarketTick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketTick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuctionEvent::_Internal {
 public:
};

AuctionEvent::AuctionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.AuctionEvent)
}
AuctionEvent::AuctionEvent(const AuctionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  ::memcpy(&opening_auction_, &from.opening_auction_,
    static_cast<size_t>(reinterpret_cast<char*>(&extension_trigger_) -
    reinterpret_cast<char*>(&opening_auction_)) + sizeof(extension_trigger_));
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.AuctionEvent)
}

void AuctionEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuctionEvent_events_2fv1_2fevents_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&opening_auction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&extension_trigger_) -
      reinterpret_cast<char*>(&opening_auction_)) + sizeof(extension_trigger_));
}

AuctionEvent::~AuctionEvent() {
  // @@protoc_insertion_point(destructor:vega.events.v1.AuctionEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuctionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuctionEvent::ArenaDtor(void* object) {
  AuctionEvent* _this = reinterpret_cast< AuctionEvent* >(object);
  (void)_this;
}
void AuctionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuctionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuctionEvent& AuctionEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuctionEvent_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void AuctionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.AuctionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  ::memset(&opening_auction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extension_trigger_) -
      reinterpret_cast<char*>(&opening_auction_)) + sizeof(extension_trigger_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuctionEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.AuctionEvent.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool opening_auction = 2 [json_name = "openingAuction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          opening_auction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool leave = 3 [json_name = "leave"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          leave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start = 4 [json_name = "start"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end = 5 [json_name = "end"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.AuctionTrigger trigger = 6 [json_name = "trigger"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trigger(static_cast<::vega::AuctionTrigger>(val));
        } else goto handle_unusual;
        continue;
      // .vega.AuctionTrigger extension_trigger = 7 [json_name = "extensionTrigger"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_extension_trigger(static_cast<::vega::AuctionTrigger>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuctionEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.AuctionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.AuctionEvent.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // bool opening_auction = 2 [json_name = "openingAuction"];
  if (this->opening_auction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_opening_auction(), target);
  }

  // bool leave = 3 [json_name = "leave"];
  if (this->leave() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_leave(), target);
  }

  // int64 start = 4 [json_name = "start"];
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_start(), target);
  }

  // int64 end = 5 [json_name = "end"];
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_end(), target);
  }

  // .vega.AuctionTrigger trigger = 6 [json_name = "trigger"];
  if (this->trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_trigger(), target);
  }

  // .vega.AuctionTrigger extension_trigger = 7 [json_name = "extensionTrigger"];
  if (this->extension_trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_extension_trigger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.AuctionEvent)
  return target;
}

size_t AuctionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.AuctionEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // bool opening_auction = 2 [json_name = "openingAuction"];
  if (this->opening_auction() != 0) {
    total_size += 1 + 1;
  }

  // bool leave = 3 [json_name = "leave"];
  if (this->leave() != 0) {
    total_size += 1 + 1;
  }

  // .vega.AuctionTrigger trigger = 6 [json_name = "trigger"];
  if (this->trigger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trigger());
  }

  // int64 start = 4 [json_name = "start"];
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start());
  }

  // int64 end = 5 [json_name = "end"];
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end());
  }

  // .vega.AuctionTrigger extension_trigger = 7 [json_name = "extensionTrigger"];
  if (this->extension_trigger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_extension_trigger());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuctionEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.AuctionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const AuctionEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuctionEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.AuctionEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.AuctionEvent)
    MergeFrom(*source);
  }
}

void AuctionEvent::MergeFrom(const AuctionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.AuctionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.opening_auction() != 0) {
    _internal_set_opening_auction(from._internal_opening_auction());
  }
  if (from.leave() != 0) {
    _internal_set_leave(from._internal_leave());
  }
  if (from.trigger() != 0) {
    _internal_set_trigger(from._internal_trigger());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from.extension_trigger() != 0) {
    _internal_set_extension_trigger(from._internal_extension_trigger());
  }
}

void AuctionEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.AuctionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionEvent::CopyFrom(const AuctionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.AuctionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionEvent::IsInitialized() const {
  return true;
}

void AuctionEvent::InternalSwap(AuctionEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuctionEvent, extension_trigger_)
      + sizeof(AuctionEvent::extension_trigger_)
      - PROTOBUF_FIELD_OFFSET(AuctionEvent, opening_auction_)>(
          reinterpret_cast<char*>(&opening_auction_),
          reinterpret_cast<char*>(&other->opening_auction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuctionEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatorUpdate::_Internal {
 public:
};

ValidatorUpdate::ValidatorUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.ValidatorUpdate)
}
ValidatorUpdate::ValidatorUpdate(const ValidatorUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vega_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_pub_key().empty()) {
    vega_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_pub_key(),
      GetArena());
  }
  ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ethereum_address().empty()) {
    ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ethereum_address(),
      GetArena());
  }
  tm_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tm_pub_key().empty()) {
    tm_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tm_pub_key(),
      GetArena());
  }
  info_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info_url().empty()) {
    info_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info_url(),
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.ValidatorUpdate)
}

void ValidatorUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatorUpdate_events_2fv1_2fevents_2eproto.base);
  vega_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tm_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ValidatorUpdate::~ValidatorUpdate() {
  // @@protoc_insertion_point(destructor:vega.events.v1.ValidatorUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatorUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vega_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ethereum_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tm_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidatorUpdate::ArenaDtor(void* object) {
  ValidatorUpdate* _this = reinterpret_cast< ValidatorUpdate* >(object);
  (void)_this;
}
void ValidatorUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorUpdate& ValidatorUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatorUpdate_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void ValidatorUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.ValidatorUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vega_pub_key_.ClearToEmpty();
  ethereum_address_.ClearToEmpty();
  tm_pub_key_.ClearToEmpty();
  info_url_.ClearToEmpty();
  country_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vega_pub_key = 1 [json_name = "vegaPubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vega_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.ValidatorUpdate.vega_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ethereum_address = 2 [json_name = "ethereumAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ethereum_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.ValidatorUpdate.ethereum_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tm_pub_key = 3 [json_name = "tmPubKey"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tm_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.ValidatorUpdate.tm_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info_url = 4 [json_name = "infoUrl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_info_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.ValidatorUpdate.info_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 5 [json_name = "country"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.ValidatorUpdate.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.ValidatorUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vega_pub_key = 1 [json_name = "vegaPubKey"];
  if (this->vega_pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_pub_key().data(), static_cast<int>(this->_internal_vega_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.ValidatorUpdate.vega_pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vega_pub_key(), target);
  }

  // string ethereum_address = 2 [json_name = "ethereumAddress"];
  if (this->ethereum_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ethereum_address().data(), static_cast<int>(this->_internal_ethereum_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.ValidatorUpdate.ethereum_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ethereum_address(), target);
  }

  // string tm_pub_key = 3 [json_name = "tmPubKey"];
  if (this->tm_pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tm_pub_key().data(), static_cast<int>(this->_internal_tm_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.ValidatorUpdate.tm_pub_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tm_pub_key(), target);
  }

  // string info_url = 4 [json_name = "infoUrl"];
  if (this->info_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info_url().data(), static_cast<int>(this->_internal_info_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.ValidatorUpdate.info_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info_url(), target);
  }

  // string country = 5 [json_name = "country"];
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.ValidatorUpdate.country");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.ValidatorUpdate)
  return target;
}

size_t ValidatorUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.ValidatorUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vega_pub_key = 1 [json_name = "vegaPubKey"];
  if (this->vega_pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_pub_key());
  }

  // string ethereum_address = 2 [json_name = "ethereumAddress"];
  if (this->ethereum_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ethereum_address());
  }

  // string tm_pub_key = 3 [json_name = "tmPubKey"];
  if (this->tm_pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tm_pub_key());
  }

  // string info_url = 4 [json_name = "infoUrl"];
  if (this->info_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info_url());
  }

  // string country = 5 [json_name = "country"];
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatorUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.ValidatorUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.ValidatorUpdate)
    MergeFrom(*source);
  }
}

void ValidatorUpdate::MergeFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vega_pub_key().size() > 0) {
    _internal_set_vega_pub_key(from._internal_vega_pub_key());
  }
  if (from.ethereum_address().size() > 0) {
    _internal_set_ethereum_address(from._internal_ethereum_address());
  }
  if (from.tm_pub_key().size() > 0) {
    _internal_set_tm_pub_key(from._internal_tm_pub_key());
  }
  if (from.info_url().size() > 0) {
    _internal_set_info_url(from._internal_info_url());
  }
  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
}

void ValidatorUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorUpdate::CopyFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorUpdate::IsInitialized() const {
  return true;
}

void ValidatorUpdate::InternalSwap(ValidatorUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vega_pub_key_.Swap(&other->vega_pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ethereum_address_.Swap(&other->ethereum_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tm_pub_key_.Swap(&other->tm_pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  info_url_.Swap(&other->info_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BusEvent::_Internal {
 public:
  static const ::vega::events::v1::TimeUpdate& time_update(const BusEvent* msg);
  static const ::vega::events::v1::TransferResponses& transfer_responses(const BusEvent* msg);
  static const ::vega::events::v1::PositionResolution& position_resolution(const BusEvent* msg);
  static const ::vega::Order& order(const BusEvent* msg);
  static const ::vega::Account& account(const BusEvent* msg);
  static const ::vega::Party& party(const BusEvent* msg);
  static const ::vega::Trade& trade(const BusEvent* msg);
  static const ::vega::MarginLevels& margin_levels(const BusEvent* msg);
  static const ::vega::Proposal& proposal(const BusEvent* msg);
  static const ::vega::Vote& vote(const BusEvent* msg);
  static const ::vega::MarketData& market_data(const BusEvent* msg);
  static const ::vega::commands::v1::NodeSignature& node_signature(const BusEvent* msg);
  static const ::vega::events::v1::LossSocialization& loss_socialization(const BusEvent* msg);
  static const ::vega::events::v1::SettlePosition& settle_position(const BusEvent* msg);
  static const ::vega::events::v1::SettleDistressed& settle_distressed(const BusEvent* msg);
  static const ::vega::Market& market_created(const BusEvent* msg);
  static const ::vega::Asset& asset(const BusEvent* msg);
  static const ::vega::events::v1::MarketTick& market_tick(const BusEvent* msg);
  static const ::vega::Withdrawal& withdrawal(const BusEvent* msg);
  static const ::vega::Deposit& deposit(const BusEvent* msg);
  static const ::vega::events::v1::AuctionEvent& auction(const BusEvent* msg);
  static const ::vega::RiskFactor& risk_factor(const BusEvent* msg);
  static const ::vega::NetworkParameter& network_parameter(const BusEvent* msg);
  static const ::vega::LiquidityProvision& liquidity_provision(const BusEvent* msg);
  static const ::vega::Market& market_updated(const BusEvent* msg);
  static const ::oracles::v1::OracleSpec& oracle_spec(const BusEvent* msg);
  static const ::oracles::v1::OracleData& oracle_data(const BusEvent* msg);
  static const ::vega::events::v1::DelegationBalanceEvent& delegation_balance(const BusEvent* msg);
  static const ::vega::events::v1::ValidatorScoreEvent& validator_score(const BusEvent* msg);
  static const ::vega::events::v1::EpochEvent& epoch_event(const BusEvent* msg);
  static const ::vega::events::v1::ValidatorUpdate& validator_update(const BusEvent* msg);
  static const ::vega::events::v1::StakeLinking& stake_linking(const BusEvent* msg);
  static const ::vega::events::v1::RewardPayoutEvent& reward_payout(const BusEvent* msg);
  static const ::vega::events::v1::CheckpointEvent& checkpoint(const BusEvent* msg);
  static const ::vega::events::v1::MarketEvent& market(const BusEvent* msg);
  static const ::vega::events::v1::TxErrorEvent& tx_err_event(const BusEvent* msg);
};

const ::vega::events::v1::TimeUpdate&
BusEvent::_Internal::time_update(const BusEvent* msg) {
  return *msg->event_.time_update_;
}
const ::vega::events::v1::TransferResponses&
BusEvent::_Internal::transfer_responses(const BusEvent* msg) {
  return *msg->event_.transfer_responses_;
}
const ::vega::events::v1::PositionResolution&
BusEvent::_Internal::position_resolution(const BusEvent* msg) {
  return *msg->event_.position_resolution_;
}
const ::vega::Order&
BusEvent::_Internal::order(const BusEvent* msg) {
  return *msg->event_.order_;
}
const ::vega::Account&
BusEvent::_Internal::account(const BusEvent* msg) {
  return *msg->event_.account_;
}
const ::vega::Party&
BusEvent::_Internal::party(const BusEvent* msg) {
  return *msg->event_.party_;
}
const ::vega::Trade&
BusEvent::_Internal::trade(const BusEvent* msg) {
  return *msg->event_.trade_;
}
const ::vega::MarginLevels&
BusEvent::_Internal::margin_levels(const BusEvent* msg) {
  return *msg->event_.margin_levels_;
}
const ::vega::Proposal&
BusEvent::_Internal::proposal(const BusEvent* msg) {
  return *msg->event_.proposal_;
}
const ::vega::Vote&
BusEvent::_Internal::vote(const BusEvent* msg) {
  return *msg->event_.vote_;
}
const ::vega::MarketData&
BusEvent::_Internal::market_data(const BusEvent* msg) {
  return *msg->event_.market_data_;
}
const ::vega::commands::v1::NodeSignature&
BusEvent::_Internal::node_signature(const BusEvent* msg) {
  return *msg->event_.node_signature_;
}
const ::vega::events::v1::LossSocialization&
BusEvent::_Internal::loss_socialization(const BusEvent* msg) {
  return *msg->event_.loss_socialization_;
}
const ::vega::events::v1::SettlePosition&
BusEvent::_Internal::settle_position(const BusEvent* msg) {
  return *msg->event_.settle_position_;
}
const ::vega::events::v1::SettleDistressed&
BusEvent::_Internal::settle_distressed(const BusEvent* msg) {
  return *msg->event_.settle_distressed_;
}
const ::vega::Market&
BusEvent::_Internal::market_created(const BusEvent* msg) {
  return *msg->event_.market_created_;
}
const ::vega::Asset&
BusEvent::_Internal::asset(const BusEvent* msg) {
  return *msg->event_.asset_;
}
const ::vega::events::v1::MarketTick&
BusEvent::_Internal::market_tick(const BusEvent* msg) {
  return *msg->event_.market_tick_;
}
const ::vega::Withdrawal&
BusEvent::_Internal::withdrawal(const BusEvent* msg) {
  return *msg->event_.withdrawal_;
}
const ::vega::Deposit&
BusEvent::_Internal::deposit(const BusEvent* msg) {
  return *msg->event_.deposit_;
}
const ::vega::events::v1::AuctionEvent&
BusEvent::_Internal::auction(const BusEvent* msg) {
  return *msg->event_.auction_;
}
const ::vega::RiskFactor&
BusEvent::_Internal::risk_factor(const BusEvent* msg) {
  return *msg->event_.risk_factor_;
}
const ::vega::NetworkParameter&
BusEvent::_Internal::network_parameter(const BusEvent* msg) {
  return *msg->event_.network_parameter_;
}
const ::vega::LiquidityProvision&
BusEvent::_Internal::liquidity_provision(const BusEvent* msg) {
  return *msg->event_.liquidity_provision_;
}
const ::vega::Market&
BusEvent::_Internal::market_updated(const BusEvent* msg) {
  return *msg->event_.market_updated_;
}
const ::oracles::v1::OracleSpec&
BusEvent::_Internal::oracle_spec(const BusEvent* msg) {
  return *msg->event_.oracle_spec_;
}
const ::oracles::v1::OracleData&
BusEvent::_Internal::oracle_data(const BusEvent* msg) {
  return *msg->event_.oracle_data_;
}
const ::vega::events::v1::DelegationBalanceEvent&
BusEvent::_Internal::delegation_balance(const BusEvent* msg) {
  return *msg->event_.delegation_balance_;
}
const ::vega::events::v1::ValidatorScoreEvent&
BusEvent::_Internal::validator_score(const BusEvent* msg) {
  return *msg->event_.validator_score_;
}
const ::vega::events::v1::EpochEvent&
BusEvent::_Internal::epoch_event(const BusEvent* msg) {
  return *msg->event_.epoch_event_;
}
const ::vega::events::v1::ValidatorUpdate&
BusEvent::_Internal::validator_update(const BusEvent* msg) {
  return *msg->event_.validator_update_;
}
const ::vega::events::v1::StakeLinking&
BusEvent::_Internal::stake_linking(const BusEvent* msg) {
  return *msg->event_.stake_linking_;
}
const ::vega::events::v1::RewardPayoutEvent&
BusEvent::_Internal::reward_payout(const BusEvent* msg) {
  return *msg->event_.reward_payout_;
}
const ::vega::events::v1::CheckpointEvent&
BusEvent::_Internal::checkpoint(const BusEvent* msg) {
  return *msg->event_.checkpoint_;
}
const ::vega::events::v1::MarketEvent&
BusEvent::_Internal::market(const BusEvent* msg) {
  return *msg->event_.market_;
}
const ::vega::events::v1::TxErrorEvent&
BusEvent::_Internal::tx_err_event(const BusEvent* msg) {
  return *msg->event_.tx_err_event_;
}
void BusEvent::set_allocated_time_update(::vega::events::v1::TimeUpdate* time_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (time_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_update);
    if (message_arena != submessage_arena) {
      time_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_update, submessage_arena);
    }
    set_has_time_update();
    event_.time_update_ = time_update;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.time_update)
}
void BusEvent::set_allocated_transfer_responses(::vega::events::v1::TransferResponses* transfer_responses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (transfer_responses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer_responses);
    if (message_arena != submessage_arena) {
      transfer_responses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_responses, submessage_arena);
    }
    set_has_transfer_responses();
    event_.transfer_responses_ = transfer_responses;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.transfer_responses)
}
void BusEvent::set_allocated_position_resolution(::vega::events::v1::PositionResolution* position_resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (position_resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position_resolution);
    if (message_arena != submessage_arena) {
      position_resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_resolution, submessage_arena);
    }
    set_has_position_resolution();
    event_.position_resolution_ = position_resolution;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.position_resolution)
}
void BusEvent::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order)->GetArena();
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    set_has_order();
    event_.order_ = order;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.order)
}
void BusEvent::clear_order() {
  if (_internal_has_order()) {
    if (GetArena() == nullptr) {
      delete event_.order_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_account(::vega::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account)->GetArena();
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    set_has_account();
    event_.account_ = account;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.account)
}
void BusEvent::clear_account() {
  if (_internal_has_account()) {
    if (GetArena() == nullptr) {
      delete event_.account_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_party(::vega::Party* party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party)->GetArena();
    if (message_arena != submessage_arena) {
      party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party, submessage_arena);
    }
    set_has_party();
    event_.party_ = party;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.party)
}
void BusEvent::clear_party() {
  if (_internal_has_party()) {
    if (GetArena() == nullptr) {
      delete event_.party_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_trade(::vega::Trade* trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade)->GetArena();
    if (message_arena != submessage_arena) {
      trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade, submessage_arena);
    }
    set_has_trade();
    event_.trade_ = trade;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.trade)
}
void BusEvent::clear_trade() {
  if (_internal_has_trade()) {
    if (GetArena() == nullptr) {
      delete event_.trade_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_margin_levels(::vega::MarginLevels* margin_levels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (margin_levels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(margin_levels)->GetArena();
    if (message_arena != submessage_arena) {
      margin_levels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, margin_levels, submessage_arena);
    }
    set_has_margin_levels();
    event_.margin_levels_ = margin_levels;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.margin_levels)
}
void BusEvent::clear_margin_levels() {
  if (_internal_has_margin_levels()) {
    if (GetArena() == nullptr) {
      delete event_.margin_levels_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_proposal(::vega::Proposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal)->GetArena();
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    set_has_proposal();
    event_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.proposal)
}
void BusEvent::clear_proposal() {
  if (_internal_has_proposal()) {
    if (GetArena() == nullptr) {
      delete event_.proposal_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_vote(::vega::Vote* vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote)->GetArena();
    if (message_arena != submessage_arena) {
      vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }
    set_has_vote();
    event_.vote_ = vote;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.vote)
}
void BusEvent::clear_vote() {
  if (_internal_has_vote()) {
    if (GetArena() == nullptr) {
      delete event_.vote_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_market_data(::vega::MarketData* market_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (market_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_data)->GetArena();
    if (message_arena != submessage_arena) {
      market_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_data, submessage_arena);
    }
    set_has_market_data();
    event_.market_data_ = market_data;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.market_data)
}
void BusEvent::clear_market_data() {
  if (_internal_has_market_data()) {
    if (GetArena() == nullptr) {
      delete event_.market_data_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_node_signature(::vega::commands::v1::NodeSignature* node_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (node_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_signature)->GetArena();
    if (message_arena != submessage_arena) {
      node_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_signature, submessage_arena);
    }
    set_has_node_signature();
    event_.node_signature_ = node_signature;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.node_signature)
}
void BusEvent::clear_node_signature() {
  if (_internal_has_node_signature()) {
    if (GetArena() == nullptr) {
      delete event_.node_signature_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_loss_socialization(::vega::events::v1::LossSocialization* loss_socialization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (loss_socialization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loss_socialization);
    if (message_arena != submessage_arena) {
      loss_socialization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loss_socialization, submessage_arena);
    }
    set_has_loss_socialization();
    event_.loss_socialization_ = loss_socialization;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.loss_socialization)
}
void BusEvent::set_allocated_settle_position(::vega::events::v1::SettlePosition* settle_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (settle_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settle_position);
    if (message_arena != submessage_arena) {
      settle_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settle_position, submessage_arena);
    }
    set_has_settle_position();
    event_.settle_position_ = settle_position;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.settle_position)
}
void BusEvent::set_allocated_settle_distressed(::vega::events::v1::SettleDistressed* settle_distressed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (settle_distressed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settle_distressed);
    if (message_arena != submessage_arena) {
      settle_distressed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settle_distressed, submessage_arena);
    }
    set_has_settle_distressed();
    event_.settle_distressed_ = settle_distressed;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.settle_distressed)
}
void BusEvent::set_allocated_market_created(::vega::Market* market_created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (market_created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_created)->GetArena();
    if (message_arena != submessage_arena) {
      market_created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_created, submessage_arena);
    }
    set_has_market_created();
    event_.market_created_ = market_created;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.market_created)
}
void BusEvent::clear_market_created() {
  if (_internal_has_market_created()) {
    if (GetArena() == nullptr) {
      delete event_.market_created_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_asset(::vega::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset)->GetArena();
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    set_has_asset();
    event_.asset_ = asset;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.asset)
}
void BusEvent::clear_asset() {
  if (_internal_has_asset()) {
    if (GetArena() == nullptr) {
      delete event_.asset_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_market_tick(::vega::events::v1::MarketTick* market_tick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (market_tick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(market_tick);
    if (message_arena != submessage_arena) {
      market_tick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_tick, submessage_arena);
    }
    set_has_market_tick();
    event_.market_tick_ = market_tick;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.market_tick)
}
void BusEvent::set_allocated_withdrawal(::vega::Withdrawal* withdrawal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (withdrawal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawal)->GetArena();
    if (message_arena != submessage_arena) {
      withdrawal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdrawal, submessage_arena);
    }
    set_has_withdrawal();
    event_.withdrawal_ = withdrawal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.withdrawal)
}
void BusEvent::clear_withdrawal() {
  if (_internal_has_withdrawal()) {
    if (GetArena() == nullptr) {
      delete event_.withdrawal_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_deposit(::vega::Deposit* deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit)->GetArena();
    if (message_arena != submessage_arena) {
      deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit, submessage_arena);
    }
    set_has_deposit();
    event_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.deposit)
}
void BusEvent::clear_deposit() {
  if (_internal_has_deposit()) {
    if (GetArena() == nullptr) {
      delete event_.deposit_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_auction(::vega::events::v1::AuctionEvent* auction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (auction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auction);
    if (message_arena != submessage_arena) {
      auction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auction, submessage_arena);
    }
    set_has_auction();
    event_.auction_ = auction;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.auction)
}
void BusEvent::set_allocated_risk_factor(::vega::RiskFactor* risk_factor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (risk_factor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(risk_factor)->GetArena();
    if (message_arena != submessage_arena) {
      risk_factor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, risk_factor, submessage_arena);
    }
    set_has_risk_factor();
    event_.risk_factor_ = risk_factor;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.risk_factor)
}
void BusEvent::clear_risk_factor() {
  if (_internal_has_risk_factor()) {
    if (GetArena() == nullptr) {
      delete event_.risk_factor_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_network_parameter(::vega::NetworkParameter* network_parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (network_parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_parameter)->GetArena();
    if (message_arena != submessage_arena) {
      network_parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_parameter, submessage_arena);
    }
    set_has_network_parameter();
    event_.network_parameter_ = network_parameter;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.network_parameter)
}
void BusEvent::clear_network_parameter() {
  if (_internal_has_network_parameter()) {
    if (GetArena() == nullptr) {
      delete event_.network_parameter_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_liquidity_provision(::vega::LiquidityProvision* liquidity_provision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (liquidity_provision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liquidity_provision)->GetArena();
    if (message_arena != submessage_arena) {
      liquidity_provision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquidity_provision, submessage_arena);
    }
    set_has_liquidity_provision();
    event_.liquidity_provision_ = liquidity_provision;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.liquidity_provision)
}
void BusEvent::clear_liquidity_provision() {
  if (_internal_has_liquidity_provision()) {
    if (GetArena() == nullptr) {
      delete event_.liquidity_provision_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_market_updated(::vega::Market* market_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (market_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_updated)->GetArena();
    if (message_arena != submessage_arena) {
      market_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_updated, submessage_arena);
    }
    set_has_market_updated();
    event_.market_updated_ = market_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.market_updated)
}
void BusEvent::clear_market_updated() {
  if (_internal_has_market_updated()) {
    if (GetArena() == nullptr) {
      delete event_.market_updated_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_oracle_spec(::oracles::v1::OracleSpec* oracle_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (oracle_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oracle_spec)->GetArena();
    if (message_arena != submessage_arena) {
      oracle_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oracle_spec, submessage_arena);
    }
    set_has_oracle_spec();
    event_.oracle_spec_ = oracle_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.oracle_spec)
}
void BusEvent::clear_oracle_spec() {
  if (_internal_has_oracle_spec()) {
    if (GetArena() == nullptr) {
      delete event_.oracle_spec_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_oracle_data(::oracles::v1::OracleData* oracle_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (oracle_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oracle_data)->GetArena();
    if (message_arena != submessage_arena) {
      oracle_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oracle_data, submessage_arena);
    }
    set_has_oracle_data();
    event_.oracle_data_ = oracle_data;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.oracle_data)
}
void BusEvent::clear_oracle_data() {
  if (_internal_has_oracle_data()) {
    if (GetArena() == nullptr) {
      delete event_.oracle_data_;
    }
    clear_has_event();
  }
}
void BusEvent::set_allocated_delegation_balance(::vega::events::v1::DelegationBalanceEvent* delegation_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (delegation_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delegation_balance);
    if (message_arena != submessage_arena) {
      delegation_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegation_balance, submessage_arena);
    }
    set_has_delegation_balance();
    event_.delegation_balance_ = delegation_balance;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.delegation_balance)
}
void BusEvent::set_allocated_validator_score(::vega::events::v1::ValidatorScoreEvent* validator_score) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (validator_score) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validator_score);
    if (message_arena != submessage_arena) {
      validator_score = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator_score, submessage_arena);
    }
    set_has_validator_score();
    event_.validator_score_ = validator_score;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.validator_score)
}
void BusEvent::set_allocated_epoch_event(::vega::events::v1::EpochEvent* epoch_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (epoch_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(epoch_event);
    if (message_arena != submessage_arena) {
      epoch_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_event, submessage_arena);
    }
    set_has_epoch_event();
    event_.epoch_event_ = epoch_event;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.epoch_event)
}
void BusEvent::set_allocated_validator_update(::vega::events::v1::ValidatorUpdate* validator_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (validator_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validator_update);
    if (message_arena != submessage_arena) {
      validator_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator_update, submessage_arena);
    }
    set_has_validator_update();
    event_.validator_update_ = validator_update;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.validator_update)
}
void BusEvent::set_allocated_stake_linking(::vega::events::v1::StakeLinking* stake_linking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (stake_linking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stake_linking);
    if (message_arena != submessage_arena) {
      stake_linking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stake_linking, submessage_arena);
    }
    set_has_stake_linking();
    event_.stake_linking_ = stake_linking;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.stake_linking)
}
void BusEvent::set_allocated_reward_payout(::vega::events::v1::RewardPayoutEvent* reward_payout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (reward_payout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reward_payout);
    if (message_arena != submessage_arena) {
      reward_payout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reward_payout, submessage_arena);
    }
    set_has_reward_payout();
    event_.reward_payout_ = reward_payout;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.reward_payout)
}
void BusEvent::set_allocated_checkpoint(::vega::events::v1::CheckpointEvent* checkpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (checkpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkpoint);
    if (message_arena != submessage_arena) {
      checkpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkpoint, submessage_arena);
    }
    set_has_checkpoint();
    event_.checkpoint_ = checkpoint;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.checkpoint)
}
void BusEvent::set_allocated_market(::vega::events::v1::MarketEvent* market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(market);
    if (message_arena != submessage_arena) {
      market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market, submessage_arena);
    }
    set_has_market();
    event_.market_ = market;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.market)
}
void BusEvent::set_allocated_tx_err_event(::vega::events::v1::TxErrorEvent* tx_err_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (tx_err_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tx_err_event);
    if (message_arena != submessage_arena) {
      tx_err_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx_err_event, submessage_arena);
    }
    set_has_tx_err_event();
    event_.tx_err_event_ = tx_err_event;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.tx_err_event)
}
BusEvent::BusEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.events.v1.BusEvent)
}
BusEvent::BusEvent(const BusEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block().empty()) {
    block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block(),
      GetArena());
  }
  type_ = from.type_;
  clear_has_event();
  switch (from.event_case()) {
    case kTimeUpdate: {
      _internal_mutable_time_update()->::vega::events::v1::TimeUpdate::MergeFrom(from._internal_time_update());
      break;
    }
    case kTransferResponses: {
      _internal_mutable_transfer_responses()->::vega::events::v1::TransferResponses::MergeFrom(from._internal_transfer_responses());
      break;
    }
    case kPositionResolution: {
      _internal_mutable_position_resolution()->::vega::events::v1::PositionResolution::MergeFrom(from._internal_position_resolution());
      break;
    }
    case kOrder: {
      _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
      break;
    }
    case kAccount: {
      _internal_mutable_account()->::vega::Account::MergeFrom(from._internal_account());
      break;
    }
    case kParty: {
      _internal_mutable_party()->::vega::Party::MergeFrom(from._internal_party());
      break;
    }
    case kTrade: {
      _internal_mutable_trade()->::vega::Trade::MergeFrom(from._internal_trade());
      break;
    }
    case kMarginLevels: {
      _internal_mutable_margin_levels()->::vega::MarginLevels::MergeFrom(from._internal_margin_levels());
      break;
    }
    case kProposal: {
      _internal_mutable_proposal()->::vega::Proposal::MergeFrom(from._internal_proposal());
      break;
    }
    case kVote: {
      _internal_mutable_vote()->::vega::Vote::MergeFrom(from._internal_vote());
      break;
    }
    case kMarketData: {
      _internal_mutable_market_data()->::vega::MarketData::MergeFrom(from._internal_market_data());
      break;
    }
    case kNodeSignature: {
      _internal_mutable_node_signature()->::vega::commands::v1::NodeSignature::MergeFrom(from._internal_node_signature());
      break;
    }
    case kLossSocialization: {
      _internal_mutable_loss_socialization()->::vega::events::v1::LossSocialization::MergeFrom(from._internal_loss_socialization());
      break;
    }
    case kSettlePosition: {
      _internal_mutable_settle_position()->::vega::events::v1::SettlePosition::MergeFrom(from._internal_settle_position());
      break;
    }
    case kSettleDistressed: {
      _internal_mutable_settle_distressed()->::vega::events::v1::SettleDistressed::MergeFrom(from._internal_settle_distressed());
      break;
    }
    case kMarketCreated: {
      _internal_mutable_market_created()->::vega::Market::MergeFrom(from._internal_market_created());
      break;
    }
    case kAsset: {
      _internal_mutable_asset()->::vega::Asset::MergeFrom(from._internal_asset());
      break;
    }
    case kMarketTick: {
      _internal_mutable_market_tick()->::vega::events::v1::MarketTick::MergeFrom(from._internal_market_tick());
      break;
    }
    case kWithdrawal: {
      _internal_mutable_withdrawal()->::vega::Withdrawal::MergeFrom(from._internal_withdrawal());
      break;
    }
    case kDeposit: {
      _internal_mutable_deposit()->::vega::Deposit::MergeFrom(from._internal_deposit());
      break;
    }
    case kAuction: {
      _internal_mutable_auction()->::vega::events::v1::AuctionEvent::MergeFrom(from._internal_auction());
      break;
    }
    case kRiskFactor: {
      _internal_mutable_risk_factor()->::vega::RiskFactor::MergeFrom(from._internal_risk_factor());
      break;
    }
    case kNetworkParameter: {
      _internal_mutable_network_parameter()->::vega::NetworkParameter::MergeFrom(from._internal_network_parameter());
      break;
    }
    case kLiquidityProvision: {
      _internal_mutable_liquidity_provision()->::vega::LiquidityProvision::MergeFrom(from._internal_liquidity_provision());
      break;
    }
    case kMarketUpdated: {
      _internal_mutable_market_updated()->::vega::Market::MergeFrom(from._internal_market_updated());
      break;
    }
    case kOracleSpec: {
      _internal_mutable_oracle_spec()->::oracles::v1::OracleSpec::MergeFrom(from._internal_oracle_spec());
      break;
    }
    case kOracleData: {
      _internal_mutable_oracle_data()->::oracles::v1::OracleData::MergeFrom(from._internal_oracle_data());
      break;
    }
    case kDelegationBalance: {
      _internal_mutable_delegation_balance()->::vega::events::v1::DelegationBalanceEvent::MergeFrom(from._internal_delegation_balance());
      break;
    }
    case kValidatorScore: {
      _internal_mutable_validator_score()->::vega::events::v1::ValidatorScoreEvent::MergeFrom(from._internal_validator_score());
      break;
    }
    case kEpochEvent: {
      _internal_mutable_epoch_event()->::vega::events::v1::EpochEvent::MergeFrom(from._internal_epoch_event());
      break;
    }
    case kValidatorUpdate: {
      _internal_mutable_validator_update()->::vega::events::v1::ValidatorUpdate::MergeFrom(from._internal_validator_update());
      break;
    }
    case kStakeLinking: {
      _internal_mutable_stake_linking()->::vega::events::v1::StakeLinking::MergeFrom(from._internal_stake_linking());
      break;
    }
    case kRewardPayout: {
      _internal_mutable_reward_payout()->::vega::events::v1::RewardPayoutEvent::MergeFrom(from._internal_reward_payout());
      break;
    }
    case kCheckpoint: {
      _internal_mutable_checkpoint()->::vega::events::v1::CheckpointEvent::MergeFrom(from._internal_checkpoint());
      break;
    }
    case kMarket: {
      _internal_mutable_market()->::vega::events::v1::MarketEvent::MergeFrom(from._internal_market());
      break;
    }
    case kTxErrEvent: {
      _internal_mutable_tx_err_event()->::vega::events::v1::TxErrorEvent::MergeFrom(from._internal_tx_err_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.events.v1.BusEvent)
}

void BusEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BusEvent_events_2fv1_2fevents_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_has_event();
}

BusEvent::~BusEvent() {
  // @@protoc_insertion_point(destructor:vega.events.v1.BusEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BusEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_event()) {
    clear_event();
  }
}

void BusEvent::ArenaDtor(void* object) {
  BusEvent* _this = reinterpret_cast< BusEvent* >(object);
  (void)_this;
}
void BusEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusEvent& BusEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BusEvent_events_2fv1_2fevents_2eproto.base);
  return *internal_default_instance();
}


void BusEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:vega.events.v1.BusEvent)
  switch (event_case()) {
    case kTimeUpdate: {
      if (GetArena() == nullptr) {
        delete event_.time_update_;
      }
      break;
    }
    case kTransferResponses: {
      if (GetArena() == nullptr) {
        delete event_.transfer_responses_;
      }
      break;
    }
    case kPositionResolution: {
      if (GetArena() == nullptr) {
        delete event_.position_resolution_;
      }
      break;
    }
    case kOrder: {
      if (GetArena() == nullptr) {
        delete event_.order_;
      }
      break;
    }
    case kAccount: {
      if (GetArena() == nullptr) {
        delete event_.account_;
      }
      break;
    }
    case kParty: {
      if (GetArena() == nullptr) {
        delete event_.party_;
      }
      break;
    }
    case kTrade: {
      if (GetArena() == nullptr) {
        delete event_.trade_;
      }
      break;
    }
    case kMarginLevels: {
      if (GetArena() == nullptr) {
        delete event_.margin_levels_;
      }
      break;
    }
    case kProposal: {
      if (GetArena() == nullptr) {
        delete event_.proposal_;
      }
      break;
    }
    case kVote: {
      if (GetArena() == nullptr) {
        delete event_.vote_;
      }
      break;
    }
    case kMarketData: {
      if (GetArena() == nullptr) {
        delete event_.market_data_;
      }
      break;
    }
    case kNodeSignature: {
      if (GetArena() == nullptr) {
        delete event_.node_signature_;
      }
      break;
    }
    case kLossSocialization: {
      if (GetArena() == nullptr) {
        delete event_.loss_socialization_;
      }
      break;
    }
    case kSettlePosition: {
      if (GetArena() == nullptr) {
        delete event_.settle_position_;
      }
      break;
    }
    case kSettleDistressed: {
      if (GetArena() == nullptr) {
        delete event_.settle_distressed_;
      }
      break;
    }
    case kMarketCreated: {
      if (GetArena() == nullptr) {
        delete event_.market_created_;
      }
      break;
    }
    case kAsset: {
      if (GetArena() == nullptr) {
        delete event_.asset_;
      }
      break;
    }
    case kMarketTick: {
      if (GetArena() == nullptr) {
        delete event_.market_tick_;
      }
      break;
    }
    case kWithdrawal: {
      if (GetArena() == nullptr) {
        delete event_.withdrawal_;
      }
      break;
    }
    case kDeposit: {
      if (GetArena() == nullptr) {
        delete event_.deposit_;
      }
      break;
    }
    case kAuction: {
      if (GetArena() == nullptr) {
        delete event_.auction_;
      }
      break;
    }
    case kRiskFactor: {
      if (GetArena() == nullptr) {
        delete event_.risk_factor_;
      }
      break;
    }
    case kNetworkParameter: {
      if (GetArena() == nullptr) {
        delete event_.network_parameter_;
      }
      break;
    }
    case kLiquidityProvision: {
      if (GetArena() == nullptr) {
        delete event_.liquidity_provision_;
      }
      break;
    }
    case kMarketUpdated: {
      if (GetArena() == nullptr) {
        delete event_.market_updated_;
      }
      break;
    }
    case kOracleSpec: {
      if (GetArena() == nullptr) {
        delete event_.oracle_spec_;
      }
      break;
    }
    case kOracleData: {
      if (GetArena() == nullptr) {
        delete event_.oracle_data_;
      }
      break;
    }
    case kDelegationBalance: {
      if (GetArena() == nullptr) {
        delete event_.delegation_balance_;
      }
      break;
    }
    case kValidatorScore: {
      if (GetArena() == nullptr) {
        delete event_.validator_score_;
      }
      break;
    }
    case kEpochEvent: {
      if (GetArena() == nullptr) {
        delete event_.epoch_event_;
      }
      break;
    }
    case kValidatorUpdate: {
      if (GetArena() == nullptr) {
        delete event_.validator_update_;
      }
      break;
    }
    case kStakeLinking: {
      if (GetArena() == nullptr) {
        delete event_.stake_linking_;
      }
      break;
    }
    case kRewardPayout: {
      if (GetArena() == nullptr) {
        delete event_.reward_payout_;
      }
      break;
    }
    case kCheckpoint: {
      if (GetArena() == nullptr) {
        delete event_.checkpoint_;
      }
      break;
    }
    case kMarket: {
      if (GetArena() == nullptr) {
        delete event_.market_;
      }
      break;
    }
    case kTxErrEvent: {
      if (GetArena() == nullptr) {
        delete event_.tx_err_event_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void BusEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.events.v1.BusEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  block_.ClearToEmpty();
  type_ = 0;
  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.BusEvent.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string block = 2 [json_name = "block"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.events.v1.BusEvent.block"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.BusEventType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::events::v1::BusEventType>(val));
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.TimeUpdate time_update = 101 [json_name = "timeUpdate"];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.TransferResponses transfer_responses = 102 [json_name = "transferResponses"];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer_responses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.PositionResolution position_resolution = 103 [json_name = "positionResolution"];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_resolution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Order order = 104 [json_name = "order"];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Account account = 105 [json_name = "account"];
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Party party = 106 [json_name = "party"];
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Trade trade = 107 [json_name = "trade"];
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.MarginLevels margin_levels = 108 [json_name = "marginLevels"];
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_margin_levels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Proposal proposal = 109 [json_name = "proposal"];
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Vote vote = 110 [json_name = "vote"];
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.MarketData market_data = 111 [json_name = "marketData"];
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.NodeSignature node_signature = 112 [json_name = "nodeSignature"];
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.LossSocialization loss_socialization = 113 [json_name = "lossSocialization"];
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_loss_socialization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.SettlePosition settle_position = 114 [json_name = "settlePosition"];
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_settle_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.SettleDistressed settle_distressed = 115 [json_name = "settleDistressed"];
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_settle_distressed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Market market_created = 116 [json_name = "marketCreated"];
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Asset asset = 117 [json_name = "asset"];
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.MarketTick market_tick = 118 [json_name = "marketTick"];
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_tick(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Withdrawal withdrawal = 119 [json_name = "withdrawal"];
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Deposit deposit = 120 [json_name = "deposit"];
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.AuctionEvent auction = 121 [json_name = "auction"];
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_auction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.RiskFactor risk_factor = 122 [json_name = "riskFactor"];
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_risk_factor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.NetworkParameter network_parameter = 123 [json_name = "networkParameter"];
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_parameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.LiquidityProvision liquidity_provision = 124 [json_name = "liquidityProvision"];
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidity_provision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Market market_updated = 125 [json_name = "marketUpdated"];
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .oracles.v1.OracleSpec oracle_spec = 126 [json_name = "oracleSpec"];
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .oracles.v1.OracleData oracle_data = 127 [json_name = "oracleData"];
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.DelegationBalanceEvent delegation_balance = 129 [json_name = "delegationBalance"];
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegation_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.ValidatorScoreEvent validator_score = 130 [json_name = "validatorScore"];
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_score(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.EpochEvent epoch_event = 131 [json_name = "epochEvent"];
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.ValidatorUpdate validator_update = 132 [json_name = "validatorUpdate"];
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.StakeLinking stake_linking = 133 [json_name = "stakeLinking"];
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stake_linking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.RewardPayoutEvent reward_payout = 134 [json_name = "rewardPayout"];
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward_payout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.CheckpointEvent checkpoint = 135 [json_name = "checkpoint"];
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.MarketEvent market = 1001 [json_name = "market"];
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.events.v1.TxErrorEvent tx_err_event = 2001 [json_name = "txErrEvent"];
      case 2001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_err_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.events.v1.BusEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.BusEvent.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string block = 2 [json_name = "block"];
  if (this->block().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block().data(), static_cast<int>(this->_internal_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.events.v1.BusEvent.block");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_block(), target);
  }

  // .vega.events.v1.BusEventType type = 3 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .vega.events.v1.TimeUpdate time_update = 101 [json_name = "timeUpdate"];
  if (_internal_has_time_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::time_update(this), target, stream);
  }

  // .vega.events.v1.TransferResponses transfer_responses = 102 [json_name = "transferResponses"];
  if (_internal_has_transfer_responses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::transfer_responses(this), target, stream);
  }

  // .vega.events.v1.PositionResolution position_resolution = 103 [json_name = "positionResolution"];
  if (_internal_has_position_resolution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::position_resolution(this), target, stream);
  }

  // .vega.Order order = 104 [json_name = "order"];
  if (_internal_has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::order(this), target, stream);
  }

  // .vega.Account account = 105 [json_name = "account"];
  if (_internal_has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::account(this), target, stream);
  }

  // .vega.Party party = 106 [json_name = "party"];
  if (_internal_has_party()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::party(this), target, stream);
  }

  // .vega.Trade trade = 107 [json_name = "trade"];
  if (_internal_has_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::trade(this), target, stream);
  }

  // .vega.MarginLevels margin_levels = 108 [json_name = "marginLevels"];
  if (_internal_has_margin_levels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        108, _Internal::margin_levels(this), target, stream);
  }

  // .vega.Proposal proposal = 109 [json_name = "proposal"];
  if (_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        109, _Internal::proposal(this), target, stream);
  }

  // .vega.Vote vote = 110 [json_name = "vote"];
  if (_internal_has_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        110, _Internal::vote(this), target, stream);
  }

  // .vega.MarketData market_data = 111 [json_name = "marketData"];
  if (_internal_has_market_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        111, _Internal::market_data(this), target, stream);
  }

  // .vega.commands.v1.NodeSignature node_signature = 112 [json_name = "nodeSignature"];
  if (_internal_has_node_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        112, _Internal::node_signature(this), target, stream);
  }

  // .vega.events.v1.LossSocialization loss_socialization = 113 [json_name = "lossSocialization"];
  if (_internal_has_loss_socialization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        113, _Internal::loss_socialization(this), target, stream);
  }

  // .vega.events.v1.SettlePosition settle_position = 114 [json_name = "settlePosition"];
  if (_internal_has_settle_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        114, _Internal::settle_position(this), target, stream);
  }

  // .vega.events.v1.SettleDistressed settle_distressed = 115 [json_name = "settleDistressed"];
  if (_internal_has_settle_distressed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        115, _Internal::settle_distressed(this), target, stream);
  }

  // .vega.Market market_created = 116 [json_name = "marketCreated"];
  if (_internal_has_market_created()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        116, _Internal::market_created(this), target, stream);
  }

  // .vega.Asset asset = 117 [json_name = "asset"];
  if (_internal_has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        117, _Internal::asset(this), target, stream);
  }

  // .vega.events.v1.MarketTick market_tick = 118 [json_name = "marketTick"];
  if (_internal_has_market_tick()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        118, _Internal::market_tick(this), target, stream);
  }

  // .vega.Withdrawal withdrawal = 119 [json_name = "withdrawal"];
  if (_internal_has_withdrawal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        119, _Internal::withdrawal(this), target, stream);
  }

  // .vega.Deposit deposit = 120 [json_name = "deposit"];
  if (_internal_has_deposit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        120, _Internal::deposit(this), target, stream);
  }

  // .vega.events.v1.AuctionEvent auction = 121 [json_name = "auction"];
  if (_internal_has_auction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        121, _Internal::auction(this), target, stream);
  }

  // .vega.RiskFactor risk_factor = 122 [json_name = "riskFactor"];
  if (_internal_has_risk_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        122, _Internal::risk_factor(this), target, stream);
  }

  // .vega.NetworkParameter network_parameter = 123 [json_name = "networkParameter"];
  if (_internal_has_network_parameter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        123, _Internal::network_parameter(this), target, stream);
  }

  // .vega.LiquidityProvision liquidity_provision = 124 [json_name = "liquidityProvision"];
  if (_internal_has_liquidity_provision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        124, _Internal::liquidity_provision(this), target, stream);
  }

  // .vega.Market market_updated = 125 [json_name = "marketUpdated"];
  if (_internal_has_market_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        125, _Internal::market_updated(this), target, stream);
  }

  // .oracles.v1.OracleSpec oracle_spec = 126 [json_name = "oracleSpec"];
  if (_internal_has_oracle_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        126, _Internal::oracle_spec(this), target, stream);
  }

  // .oracles.v1.OracleData oracle_data = 127 [json_name = "oracleData"];
  if (_internal_has_oracle_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        127, _Internal::oracle_data(this), target, stream);
  }

  // .vega.events.v1.DelegationBalanceEvent delegation_balance = 129 [json_name = "delegationBalance"];
  if (_internal_has_delegation_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        129, _Internal::delegation_balance(this), target, stream);
  }

  // .vega.events.v1.ValidatorScoreEvent validator_score = 130 [json_name = "validatorScore"];
  if (_internal_has_validator_score()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        130, _Internal::validator_score(this), target, stream);
  }

  // .vega.events.v1.EpochEvent epoch_event = 131 [json_name = "epochEvent"];
  if (_internal_has_epoch_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        131, _Internal::epoch_event(this), target, stream);
  }

  // .vega.events.v1.ValidatorUpdate validator_update = 132 [json_name = "validatorUpdate"];
  if (_internal_has_validator_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        132, _Internal::validator_update(this), target, stream);
  }

  // .vega.events.v1.StakeLinking stake_linking = 133 [json_name = "stakeLinking"];
  if (_internal_has_stake_linking()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        133, _Internal::stake_linking(this), target, stream);
  }

  // .vega.events.v1.RewardPayoutEvent reward_payout = 134 [json_name = "rewardPayout"];
  if (_internal_has_reward_payout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        134, _Internal::reward_payout(this), target, stream);
  }

  // .vega.events.v1.CheckpointEvent checkpoint = 135 [json_name = "checkpoint"];
  if (_internal_has_checkpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        135, _Internal::checkpoint(this), target, stream);
  }

  // .vega.events.v1.MarketEvent market = 1001 [json_name = "market"];
  if (_internal_has_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::market(this), target, stream);
  }

  // .vega.events.v1.TxErrorEvent tx_err_event = 2001 [json_name = "txErrEvent"];
  if (_internal_has_tx_err_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2001, _Internal::tx_err_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.events.v1.BusEvent)
  return target;
}

size_t BusEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.events.v1.BusEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string block = 2 [json_name = "block"];
  if (this->block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block());
  }

  // .vega.events.v1.BusEventType type = 3 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (event_case()) {
    // .vega.events.v1.TimeUpdate time_update = 101 [json_name = "timeUpdate"];
    case kTimeUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.time_update_);
      break;
    }
    // .vega.events.v1.TransferResponses transfer_responses = 102 [json_name = "transferResponses"];
    case kTransferResponses: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.transfer_responses_);
      break;
    }
    // .vega.events.v1.PositionResolution position_resolution = 103 [json_name = "positionResolution"];
    case kPositionResolution: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.position_resolution_);
      break;
    }
    // .vega.Order order = 104 [json_name = "order"];
    case kOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.order_);
      break;
    }
    // .vega.Account account = 105 [json_name = "account"];
    case kAccount: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.account_);
      break;
    }
    // .vega.Party party = 106 [json_name = "party"];
    case kParty: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.party_);
      break;
    }
    // .vega.Trade trade = 107 [json_name = "trade"];
    case kTrade: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.trade_);
      break;
    }
    // .vega.MarginLevels margin_levels = 108 [json_name = "marginLevels"];
    case kMarginLevels: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.margin_levels_);
      break;
    }
    // .vega.Proposal proposal = 109 [json_name = "proposal"];
    case kProposal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.proposal_);
      break;
    }
    // .vega.Vote vote = 110 [json_name = "vote"];
    case kVote: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.vote_);
      break;
    }
    // .vega.MarketData market_data = 111 [json_name = "marketData"];
    case kMarketData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.market_data_);
      break;
    }
    // .vega.commands.v1.NodeSignature node_signature = 112 [json_name = "nodeSignature"];
    case kNodeSignature: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.node_signature_);
      break;
    }
    // .vega.events.v1.LossSocialization loss_socialization = 113 [json_name = "lossSocialization"];
    case kLossSocialization: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.loss_socialization_);
      break;
    }
    // .vega.events.v1.SettlePosition settle_position = 114 [json_name = "settlePosition"];
    case kSettlePosition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.settle_position_);
      break;
    }
    // .vega.events.v1.SettleDistressed settle_distressed = 115 [json_name = "settleDistressed"];
    case kSettleDistressed: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.settle_distressed_);
      break;
    }
    // .vega.Market market_created = 116 [json_name = "marketCreated"];
    case kMarketCreated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.market_created_);
      break;
    }
    // .vega.Asset asset = 117 [json_name = "asset"];
    case kAsset: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.asset_);
      break;
    }
    // .vega.events.v1.MarketTick market_tick = 118 [json_name = "marketTick"];
    case kMarketTick: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.market_tick_);
      break;
    }
    // .vega.Withdrawal withdrawal = 119 [json_name = "withdrawal"];
    case kWithdrawal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.withdrawal_);
      break;
    }
    // .vega.Deposit deposit = 120 [json_name = "deposit"];
    case kDeposit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.deposit_);
      break;
    }
    // .vega.events.v1.AuctionEvent auction = 121 [json_name = "auction"];
    case kAuction: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.auction_);
      break;
    }
    // .vega.RiskFactor risk_factor = 122 [json_name = "riskFactor"];
    case kRiskFactor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.risk_factor_);
      break;
    }
    // .vega.NetworkParameter network_parameter = 123 [json_name = "networkParameter"];
    case kNetworkParameter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.network_parameter_);
      break;
    }
    // .vega.LiquidityProvision liquidity_provision = 124 [json_name = "liquidityProvision"];
    case kLiquidityProvision: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.liquidity_provision_);
      break;
    }
    // .vega.Market market_updated = 125 [json_name = "marketUpdated"];
    case kMarketUpdated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.market_updated_);
      break;
    }
    // .oracles.v1.OracleSpec oracle_spec = 126 [json_name = "oracleSpec"];
    case kOracleSpec: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.oracle_spec_);
      break;
    }
    // .oracles.v1.OracleData oracle_data = 127 [json_name = "oracleData"];
    case kOracleData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.oracle_data_);
      break;
    }
    // .vega.events.v1.DelegationBalanceEvent delegation_balance = 129 [json_name = "delegationBalance"];
    case kDelegationBalance: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.delegation_balance_);
      break;
    }
    // .vega.events.v1.ValidatorScoreEvent validator_score = 130 [json_name = "validatorScore"];
    case kValidatorScore: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.validator_score_);
      break;
    }
    // .vega.events.v1.EpochEvent epoch_event = 131 [json_name = "epochEvent"];
    case kEpochEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.epoch_event_);
      break;
    }
    // .vega.events.v1.ValidatorUpdate validator_update = 132 [json_name = "validatorUpdate"];
    case kValidatorUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.validator_update_);
      break;
    }
    // .vega.events.v1.StakeLinking stake_linking = 133 [json_name = "stakeLinking"];
    case kStakeLinking: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.stake_linking_);
      break;
    }
    // .vega.events.v1.RewardPayoutEvent reward_payout = 134 [json_name = "rewardPayout"];
    case kRewardPayout: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.reward_payout_);
      break;
    }
    // .vega.events.v1.CheckpointEvent checkpoint = 135 [json_name = "checkpoint"];
    case kCheckpoint: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.checkpoint_);
      break;
    }
    // .vega.events.v1.MarketEvent market = 1001 [json_name = "market"];
    case kMarket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.market_);
      break;
    }
    // .vega.events.v1.TxErrorEvent tx_err_event = 2001 [json_name = "txErrEvent"];
    case kTxErrEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.tx_err_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.events.v1.BusEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BusEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.events.v1.BusEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.events.v1.BusEvent)
    MergeFrom(*source);
  }
}

void BusEvent::MergeFrom(const BusEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.events.v1.BusEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.block().size() > 0) {
    _internal_set_block(from._internal_block());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.event_case()) {
    case kTimeUpdate: {
      _internal_mutable_time_update()->::vega::events::v1::TimeUpdate::MergeFrom(from._internal_time_update());
      break;
    }
    case kTransferResponses: {
      _internal_mutable_transfer_responses()->::vega::events::v1::TransferResponses::MergeFrom(from._internal_transfer_responses());
      break;
    }
    case kPositionResolution: {
      _internal_mutable_position_resolution()->::vega::events::v1::PositionResolution::MergeFrom(from._internal_position_resolution());
      break;
    }
    case kOrder: {
      _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
      break;
    }
    case kAccount: {
      _internal_mutable_account()->::vega::Account::MergeFrom(from._internal_account());
      break;
    }
    case kParty: {
      _internal_mutable_party()->::vega::Party::MergeFrom(from._internal_party());
      break;
    }
    case kTrade: {
      _internal_mutable_trade()->::vega::Trade::MergeFrom(from._internal_trade());
      break;
    }
    case kMarginLevels: {
      _internal_mutable_margin_levels()->::vega::MarginLevels::MergeFrom(from._internal_margin_levels());
      break;
    }
    case kProposal: {
      _internal_mutable_proposal()->::vega::Proposal::MergeFrom(from._internal_proposal());
      break;
    }
    case kVote: {
      _internal_mutable_vote()->::vega::Vote::MergeFrom(from._internal_vote());
      break;
    }
    case kMarketData: {
      _internal_mutable_market_data()->::vega::MarketData::MergeFrom(from._internal_market_data());
      break;
    }
    case kNodeSignature: {
      _internal_mutable_node_signature()->::vega::commands::v1::NodeSignature::MergeFrom(from._internal_node_signature());
      break;
    }
    case kLossSocialization: {
      _internal_mutable_loss_socialization()->::vega::events::v1::LossSocialization::MergeFrom(from._internal_loss_socialization());
      break;
    }
    case kSettlePosition: {
      _internal_mutable_settle_position()->::vega::events::v1::SettlePosition::MergeFrom(from._internal_settle_position());
      break;
    }
    case kSettleDistressed: {
      _internal_mutable_settle_distressed()->::vega::events::v1::SettleDistressed::MergeFrom(from._internal_settle_distressed());
      break;
    }
    case kMarketCreated: {
      _internal_mutable_market_created()->::vega::Market::MergeFrom(from._internal_market_created());
      break;
    }
    case kAsset: {
      _internal_mutable_asset()->::vega::Asset::MergeFrom(from._internal_asset());
      break;
    }
    case kMarketTick: {
      _internal_mutable_market_tick()->::vega::events::v1::MarketTick::MergeFrom(from._internal_market_tick());
      break;
    }
    case kWithdrawal: {
      _internal_mutable_withdrawal()->::vega::Withdrawal::MergeFrom(from._internal_withdrawal());
      break;
    }
    case kDeposit: {
      _internal_mutable_deposit()->::vega::Deposit::MergeFrom(from._internal_deposit());
      break;
    }
    case kAuction: {
      _internal_mutable_auction()->::vega::events::v1::AuctionEvent::MergeFrom(from._internal_auction());
      break;
    }
    case kRiskFactor: {
      _internal_mutable_risk_factor()->::vega::RiskFactor::MergeFrom(from._internal_risk_factor());
      break;
    }
    case kNetworkParameter: {
      _internal_mutable_network_parameter()->::vega::NetworkParameter::MergeFrom(from._internal_network_parameter());
      break;
    }
    case kLiquidityProvision: {
      _internal_mutable_liquidity_provision()->::vega::LiquidityProvision::MergeFrom(from._internal_liquidity_provision());
      break;
    }
    case kMarketUpdated: {
      _internal_mutable_market_updated()->::vega::Market::MergeFrom(from._internal_market_updated());
      break;
    }
    case kOracleSpec: {
      _internal_mutable_oracle_spec()->::oracles::v1::OracleSpec::MergeFrom(from._internal_oracle_spec());
      break;
    }
    case kOracleData: {
      _internal_mutable_oracle_data()->::oracles::v1::OracleData::MergeFrom(from._internal_oracle_data());
      break;
    }
    case kDelegationBalance: {
      _internal_mutable_delegation_balance()->::vega::events::v1::DelegationBalanceEvent::MergeFrom(from._internal_delegation_balance());
      break;
    }
    case kValidatorScore: {
      _internal_mutable_validator_score()->::vega::events::v1::ValidatorScoreEvent::MergeFrom(from._internal_validator_score());
      break;
    }
    case kEpochEvent: {
      _internal_mutable_epoch_event()->::vega::events::v1::EpochEvent::MergeFrom(from._internal_epoch_event());
      break;
    }
    case kValidatorUpdate: {
      _internal_mutable_validator_update()->::vega::events::v1::ValidatorUpdate::MergeFrom(from._internal_validator_update());
      break;
    }
    case kStakeLinking: {
      _internal_mutable_stake_linking()->::vega::events::v1::StakeLinking::MergeFrom(from._internal_stake_linking());
      break;
    }
    case kRewardPayout: {
      _internal_mutable_reward_payout()->::vega::events::v1::RewardPayoutEvent::MergeFrom(from._internal_reward_payout());
      break;
    }
    case kCheckpoint: {
      _internal_mutable_checkpoint()->::vega::events::v1::CheckpointEvent::MergeFrom(from._internal_checkpoint());
      break;
    }
    case kMarket: {
      _internal_mutable_market()->::vega::events::v1::MarketEvent::MergeFrom(from._internal_market());
      break;
    }
    case kTxErrEvent: {
      _internal_mutable_tx_err_event()->::vega::events::v1::TxErrorEvent::MergeFrom(from._internal_tx_err_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void BusEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.events.v1.BusEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusEvent::CopyFrom(const BusEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.events.v1.BusEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusEvent::IsInitialized() const {
  return true;
}

void BusEvent::InternalSwap(BusEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_.Swap(&other->block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace events
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::events::v1::StakeLinking* Arena::CreateMaybeMessage< ::vega::events::v1::StakeLinking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::StakeLinking >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::CheckpointEvent* Arena::CreateMaybeMessage< ::vega::events::v1::CheckpointEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::CheckpointEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::RewardPayoutEvent* Arena::CreateMaybeMessage< ::vega::events::v1::RewardPayoutEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::RewardPayoutEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::ValidatorScoreEvent* Arena::CreateMaybeMessage< ::vega::events::v1::ValidatorScoreEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::ValidatorScoreEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::DelegationBalanceEvent* Arena::CreateMaybeMessage< ::vega::events::v1::DelegationBalanceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::DelegationBalanceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::PendingDelegationBalanceEvent* Arena::CreateMaybeMessage< ::vega::events::v1::PendingDelegationBalanceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::PendingDelegationBalanceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::MarketEvent* Arena::CreateMaybeMessage< ::vega::events::v1::MarketEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::MarketEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::TxErrorEvent* Arena::CreateMaybeMessage< ::vega::events::v1::TxErrorEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::TxErrorEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::TimeUpdate* Arena::CreateMaybeMessage< ::vega::events::v1::TimeUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::TimeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::EpochEvent* Arena::CreateMaybeMessage< ::vega::events::v1::EpochEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::EpochEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::TransferResponses* Arena::CreateMaybeMessage< ::vega::events::v1::TransferResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::TransferResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::PositionResolution* Arena::CreateMaybeMessage< ::vega::events::v1::PositionResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::PositionResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::LossSocialization* Arena::CreateMaybeMessage< ::vega::events::v1::LossSocialization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::LossSocialization >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::TradeSettlement* Arena::CreateMaybeMessage< ::vega::events::v1::TradeSettlement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::TradeSettlement >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::SettlePosition* Arena::CreateMaybeMessage< ::vega::events::v1::SettlePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::SettlePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::SettleDistressed* Arena::CreateMaybeMessage< ::vega::events::v1::SettleDistressed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::SettleDistressed >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::MarketTick* Arena::CreateMaybeMessage< ::vega::events::v1::MarketTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::MarketTick >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::AuctionEvent* Arena::CreateMaybeMessage< ::vega::events::v1::AuctionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::AuctionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::ValidatorUpdate* Arena::CreateMaybeMessage< ::vega::events::v1::ValidatorUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::ValidatorUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::events::v1::BusEvent* Arena::CreateMaybeMessage< ::vega::events::v1::BusEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::events::v1::BusEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
