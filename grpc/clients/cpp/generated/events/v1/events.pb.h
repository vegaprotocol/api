// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events/v1/events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_events_2fv1_2fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_events_2fv1_2fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "markets.pb.h"
#include "assets.pb.h"
#include "governance.pb.h"
#include "vega.pb.h"
#include "oracles/v1/spec.pb.h"
#include "oracles/v1/data.pb.h"
#include "commands/v1/commands.pb.h"
#include "commands/v1/validator_commands.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_events_2fv1_2fevents_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_events_2fv1_2fevents_2eproto;
namespace vega {
namespace events {
namespace v1 {
class AuctionEvent;
class AuctionEventDefaultTypeInternal;
extern AuctionEventDefaultTypeInternal _AuctionEvent_default_instance_;
class BusEvent;
class BusEventDefaultTypeInternal;
extern BusEventDefaultTypeInternal _BusEvent_default_instance_;
class CheckpointEvent;
class CheckpointEventDefaultTypeInternal;
extern CheckpointEventDefaultTypeInternal _CheckpointEvent_default_instance_;
class DelegationBalanceEvent;
class DelegationBalanceEventDefaultTypeInternal;
extern DelegationBalanceEventDefaultTypeInternal _DelegationBalanceEvent_default_instance_;
class EpochEvent;
class EpochEventDefaultTypeInternal;
extern EpochEventDefaultTypeInternal _EpochEvent_default_instance_;
class LossSocialization;
class LossSocializationDefaultTypeInternal;
extern LossSocializationDefaultTypeInternal _LossSocialization_default_instance_;
class MarketEvent;
class MarketEventDefaultTypeInternal;
extern MarketEventDefaultTypeInternal _MarketEvent_default_instance_;
class MarketTick;
class MarketTickDefaultTypeInternal;
extern MarketTickDefaultTypeInternal _MarketTick_default_instance_;
class PendingDelegationBalanceEvent;
class PendingDelegationBalanceEventDefaultTypeInternal;
extern PendingDelegationBalanceEventDefaultTypeInternal _PendingDelegationBalanceEvent_default_instance_;
class PositionResolution;
class PositionResolutionDefaultTypeInternal;
extern PositionResolutionDefaultTypeInternal _PositionResolution_default_instance_;
class RewardPayoutEvent;
class RewardPayoutEventDefaultTypeInternal;
extern RewardPayoutEventDefaultTypeInternal _RewardPayoutEvent_default_instance_;
class SettleDistressed;
class SettleDistressedDefaultTypeInternal;
extern SettleDistressedDefaultTypeInternal _SettleDistressed_default_instance_;
class SettlePosition;
class SettlePositionDefaultTypeInternal;
extern SettlePositionDefaultTypeInternal _SettlePosition_default_instance_;
class StakeLinking;
class StakeLinkingDefaultTypeInternal;
extern StakeLinkingDefaultTypeInternal _StakeLinking_default_instance_;
class TimeUpdate;
class TimeUpdateDefaultTypeInternal;
extern TimeUpdateDefaultTypeInternal _TimeUpdate_default_instance_;
class TradeSettlement;
class TradeSettlementDefaultTypeInternal;
extern TradeSettlementDefaultTypeInternal _TradeSettlement_default_instance_;
class TransferResponses;
class TransferResponsesDefaultTypeInternal;
extern TransferResponsesDefaultTypeInternal _TransferResponses_default_instance_;
class TxErrorEvent;
class TxErrorEventDefaultTypeInternal;
extern TxErrorEventDefaultTypeInternal _TxErrorEvent_default_instance_;
class ValidatorUpdate;
class ValidatorUpdateDefaultTypeInternal;
extern ValidatorUpdateDefaultTypeInternal _ValidatorUpdate_default_instance_;
}  // namespace v1
}  // namespace events
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::events::v1::AuctionEvent* Arena::CreateMaybeMessage<::vega::events::v1::AuctionEvent>(Arena*);
template<> ::vega::events::v1::BusEvent* Arena::CreateMaybeMessage<::vega::events::v1::BusEvent>(Arena*);
template<> ::vega::events::v1::CheckpointEvent* Arena::CreateMaybeMessage<::vega::events::v1::CheckpointEvent>(Arena*);
template<> ::vega::events::v1::DelegationBalanceEvent* Arena::CreateMaybeMessage<::vega::events::v1::DelegationBalanceEvent>(Arena*);
template<> ::vega::events::v1::EpochEvent* Arena::CreateMaybeMessage<::vega::events::v1::EpochEvent>(Arena*);
template<> ::vega::events::v1::LossSocialization* Arena::CreateMaybeMessage<::vega::events::v1::LossSocialization>(Arena*);
template<> ::vega::events::v1::MarketEvent* Arena::CreateMaybeMessage<::vega::events::v1::MarketEvent>(Arena*);
template<> ::vega::events::v1::MarketTick* Arena::CreateMaybeMessage<::vega::events::v1::MarketTick>(Arena*);
template<> ::vega::events::v1::PendingDelegationBalanceEvent* Arena::CreateMaybeMessage<::vega::events::v1::PendingDelegationBalanceEvent>(Arena*);
template<> ::vega::events::v1::PositionResolution* Arena::CreateMaybeMessage<::vega::events::v1::PositionResolution>(Arena*);
template<> ::vega::events::v1::RewardPayoutEvent* Arena::CreateMaybeMessage<::vega::events::v1::RewardPayoutEvent>(Arena*);
template<> ::vega::events::v1::SettleDistressed* Arena::CreateMaybeMessage<::vega::events::v1::SettleDistressed>(Arena*);
template<> ::vega::events::v1::SettlePosition* Arena::CreateMaybeMessage<::vega::events::v1::SettlePosition>(Arena*);
template<> ::vega::events::v1::StakeLinking* Arena::CreateMaybeMessage<::vega::events::v1::StakeLinking>(Arena*);
template<> ::vega::events::v1::TimeUpdate* Arena::CreateMaybeMessage<::vega::events::v1::TimeUpdate>(Arena*);
template<> ::vega::events::v1::TradeSettlement* Arena::CreateMaybeMessage<::vega::events::v1::TradeSettlement>(Arena*);
template<> ::vega::events::v1::TransferResponses* Arena::CreateMaybeMessage<::vega::events::v1::TransferResponses>(Arena*);
template<> ::vega::events::v1::TxErrorEvent* Arena::CreateMaybeMessage<::vega::events::v1::TxErrorEvent>(Arena*);
template<> ::vega::events::v1::ValidatorUpdate* Arena::CreateMaybeMessage<::vega::events::v1::ValidatorUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {
namespace events {
namespace v1 {

enum StakeLinking_Type : int {
  StakeLinking_Type_TYPE_UNSPECIFIED = 0,
  StakeLinking_Type_TYPE_LINK = 1,
  StakeLinking_Type_TYPE_UNLINK = 2,
  StakeLinking_Type_StakeLinking_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StakeLinking_Type_StakeLinking_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StakeLinking_Type_IsValid(int value);
constexpr StakeLinking_Type StakeLinking_Type_Type_MIN = StakeLinking_Type_TYPE_UNSPECIFIED;
constexpr StakeLinking_Type StakeLinking_Type_Type_MAX = StakeLinking_Type_TYPE_UNLINK;
constexpr int StakeLinking_Type_Type_ARRAYSIZE = StakeLinking_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StakeLinking_Type_descriptor();
template<typename T>
inline const std::string& StakeLinking_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StakeLinking_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StakeLinking_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StakeLinking_Type_descriptor(), enum_t_value);
}
inline bool StakeLinking_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StakeLinking_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StakeLinking_Type>(
    StakeLinking_Type_descriptor(), name, value);
}
enum StakeLinking_Status : int {
  StakeLinking_Status_STATUS_UNSPECIFIED = 0,
  StakeLinking_Status_STATUS_PENDING = 1,
  StakeLinking_Status_STATUS_ACCEPTED = 2,
  StakeLinking_Status_STATUS_REJECTED = 3,
  StakeLinking_Status_StakeLinking_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StakeLinking_Status_StakeLinking_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StakeLinking_Status_IsValid(int value);
constexpr StakeLinking_Status StakeLinking_Status_Status_MIN = StakeLinking_Status_STATUS_UNSPECIFIED;
constexpr StakeLinking_Status StakeLinking_Status_Status_MAX = StakeLinking_Status_STATUS_REJECTED;
constexpr int StakeLinking_Status_Status_ARRAYSIZE = StakeLinking_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StakeLinking_Status_descriptor();
template<typename T>
inline const std::string& StakeLinking_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StakeLinking_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StakeLinking_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StakeLinking_Status_descriptor(), enum_t_value);
}
inline bool StakeLinking_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StakeLinking_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StakeLinking_Status>(
    StakeLinking_Status_descriptor(), name, value);
}
enum BusEventType : int {
  BUS_EVENT_TYPE_UNSPECIFIED = 0,
  BUS_EVENT_TYPE_ALL = 1,
  BUS_EVENT_TYPE_TIME_UPDATE = 2,
  BUS_EVENT_TYPE_TRANSFER_RESPONSES = 3,
  BUS_EVENT_TYPE_POSITION_RESOLUTION = 4,
  BUS_EVENT_TYPE_ORDER = 5,
  BUS_EVENT_TYPE_ACCOUNT = 6,
  BUS_EVENT_TYPE_PARTY = 7,
  BUS_EVENT_TYPE_TRADE = 8,
  BUS_EVENT_TYPE_MARGIN_LEVELS = 9,
  BUS_EVENT_TYPE_PROPOSAL = 10,
  BUS_EVENT_TYPE_VOTE = 11,
  BUS_EVENT_TYPE_MARKET_DATA = 12,
  BUS_EVENT_TYPE_NODE_SIGNATURE = 13,
  BUS_EVENT_TYPE_LOSS_SOCIALIZATION = 14,
  BUS_EVENT_TYPE_SETTLE_POSITION = 15,
  BUS_EVENT_TYPE_SETTLE_DISTRESSED = 16,
  BUS_EVENT_TYPE_MARKET_CREATED = 17,
  BUS_EVENT_TYPE_ASSET = 18,
  BUS_EVENT_TYPE_MARKET_TICK = 19,
  BUS_EVENT_TYPE_WITHDRAWAL = 20,
  BUS_EVENT_TYPE_DEPOSIT = 21,
  BUS_EVENT_TYPE_AUCTION = 22,
  BUS_EVENT_TYPE_RISK_FACTOR = 23,
  BUS_EVENT_TYPE_NETWORK_PARAMETER = 24,
  BUS_EVENT_TYPE_LIQUIDITY_PROVISION = 25,
  BUS_EVENT_TYPE_MARKET_UPDATED = 26,
  BUS_EVENT_TYPE_ORACLE_SPEC = 27,
  BUS_EVENT_TYPE_ORACLE_DATA = 28,
  BUS_EVENT_TYPE_DELEGATION_BALANCE = 29,
  BUS_EVENT_TYPE_PENDING_DELEGATION_BALANCE = 30,
  BUS_EVENT_TYPE_EPOCH_UPDATE = 31,
  BUS_EVENT_TYPE_VALIDATOR_UPDATE = 32,
  BUS_EVENT_TYPE_STAKE_LINKING = 33,
  BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT = 34,
  BUS_EVENT_TYPE_CHECKPOINT = 35,
  BUS_EVENT_TYPE_MARKET = 101,
  BUS_EVENT_TYPE_TX_ERROR = 201,
  BusEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BusEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BusEventType_IsValid(int value);
constexpr BusEventType BusEventType_MIN = BUS_EVENT_TYPE_UNSPECIFIED;
constexpr BusEventType BusEventType_MAX = BUS_EVENT_TYPE_TX_ERROR;
constexpr int BusEventType_ARRAYSIZE = BusEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BusEventType_descriptor();
template<typename T>
inline const std::string& BusEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BusEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BusEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BusEventType_descriptor(), enum_t_value);
}
inline bool BusEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BusEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BusEventType>(
    BusEventType_descriptor(), name, value);
}
// ===================================================================

class StakeLinking PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.StakeLinking) */ {
 public:
  inline StakeLinking() : StakeLinking(nullptr) {}
  virtual ~StakeLinking();

  StakeLinking(const StakeLinking& from);
  StakeLinking(StakeLinking&& from) noexcept
    : StakeLinking() {
    *this = ::std::move(from);
  }

  inline StakeLinking& operator=(const StakeLinking& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakeLinking& operator=(StakeLinking&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StakeLinking& default_instance();

  static inline const StakeLinking* internal_default_instance() {
    return reinterpret_cast<const StakeLinking*>(
               &_StakeLinking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StakeLinking& a, StakeLinking& b) {
    a.Swap(&b);
  }
  inline void Swap(StakeLinking* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakeLinking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StakeLinking* New() const final {
    return CreateMaybeMessage<StakeLinking>(nullptr);
  }

  StakeLinking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StakeLinking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StakeLinking& from);
  void MergeFrom(const StakeLinking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StakeLinking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.StakeLinking";
  }
  protected:
  explicit StakeLinking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StakeLinking_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    StakeLinking_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_LINK =
    StakeLinking_Type_TYPE_LINK;
  static constexpr Type TYPE_UNLINK =
    StakeLinking_Type_TYPE_UNLINK;
  static inline bool Type_IsValid(int value) {
    return StakeLinking_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    StakeLinking_Type_Type_MIN;
  static constexpr Type Type_MAX =
    StakeLinking_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    StakeLinking_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return StakeLinking_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return StakeLinking_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return StakeLinking_Type_Parse(name, value);
  }

  typedef StakeLinking_Status Status;
  static constexpr Status STATUS_UNSPECIFIED =
    StakeLinking_Status_STATUS_UNSPECIFIED;
  static constexpr Status STATUS_PENDING =
    StakeLinking_Status_STATUS_PENDING;
  static constexpr Status STATUS_ACCEPTED =
    StakeLinking_Status_STATUS_ACCEPTED;
  static constexpr Status STATUS_REJECTED =
    StakeLinking_Status_STATUS_REJECTED;
  static inline bool Status_IsValid(int value) {
    return StakeLinking_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    StakeLinking_Status_Status_MIN;
  static constexpr Status Status_MAX =
    StakeLinking_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    StakeLinking_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return StakeLinking_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return StakeLinking_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return StakeLinking_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPartyFieldNumber = 4,
    kAmountFieldNumber = 5,
    kTxHashFieldNumber = 8,
    kTsFieldNumber = 3,
    kTypeFieldNumber = 2,
    kStatusFieldNumber = 6,
    kFinalizedAtFieldNumber = 7,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string party = 4 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string amount = 5 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string tx_hash = 8 [json_name = "txHash"];
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // int64 ts = 3 [json_name = "ts"];
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.events.v1.StakeLinking.Type type = 2 [json_name = "type"];
  void clear_type();
  ::vega::events::v1::StakeLinking_Type type() const;
  void set_type(::vega::events::v1::StakeLinking_Type value);
  private:
  ::vega::events::v1::StakeLinking_Type _internal_type() const;
  void _internal_set_type(::vega::events::v1::StakeLinking_Type value);
  public:

  // .vega.events.v1.StakeLinking.Status status = 6 [json_name = "status"];
  void clear_status();
  ::vega::events::v1::StakeLinking_Status status() const;
  void set_status(::vega::events::v1::StakeLinking_Status value);
  private:
  ::vega::events::v1::StakeLinking_Status _internal_status() const;
  void _internal_set_status(::vega::events::v1::StakeLinking_Status value);
  public:

  // int64 finalized_at = 7 [json_name = "finalizedAt"];
  void clear_finalized_at();
  ::PROTOBUF_NAMESPACE_ID::int64 finalized_at() const;
  void set_finalized_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_finalized_at() const;
  void _internal_set_finalized_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.StakeLinking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  int type_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int64 finalized_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class CheckpointEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.CheckpointEvent) */ {
 public:
  inline CheckpointEvent() : CheckpointEvent(nullptr) {}
  virtual ~CheckpointEvent();

  CheckpointEvent(const CheckpointEvent& from);
  CheckpointEvent(CheckpointEvent&& from) noexcept
    : CheckpointEvent() {
    *this = ::std::move(from);
  }

  inline CheckpointEvent& operator=(const CheckpointEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckpointEvent& operator=(CheckpointEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckpointEvent& default_instance();

  static inline const CheckpointEvent* internal_default_instance() {
    return reinterpret_cast<const CheckpointEvent*>(
               &_CheckpointEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckpointEvent& a, CheckpointEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckpointEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckpointEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckpointEvent* New() const final {
    return CreateMaybeMessage<CheckpointEvent>(nullptr);
  }

  CheckpointEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckpointEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckpointEvent& from);
  void MergeFrom(const CheckpointEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckpointEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.CheckpointEvent";
  }
  protected:
  explicit CheckpointEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kBlockHashFieldNumber = 2,
    kBlockHeightFieldNumber = 3,
  };
  // string hash = 1 [json_name = "hash"];
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string block_hash = 2 [json_name = "blockHash"];
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const char* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // uint64 block_height = 3 [json_name = "blockHeight"];
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.CheckpointEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class RewardPayoutEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.RewardPayoutEvent) */ {
 public:
  inline RewardPayoutEvent() : RewardPayoutEvent(nullptr) {}
  virtual ~RewardPayoutEvent();

  RewardPayoutEvent(const RewardPayoutEvent& from);
  RewardPayoutEvent(RewardPayoutEvent&& from) noexcept
    : RewardPayoutEvent() {
    *this = ::std::move(from);
  }

  inline RewardPayoutEvent& operator=(const RewardPayoutEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardPayoutEvent& operator=(RewardPayoutEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardPayoutEvent& default_instance();

  static inline const RewardPayoutEvent* internal_default_instance() {
    return reinterpret_cast<const RewardPayoutEvent*>(
               &_RewardPayoutEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RewardPayoutEvent& a, RewardPayoutEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardPayoutEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardPayoutEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardPayoutEvent* New() const final {
    return CreateMaybeMessage<RewardPayoutEvent>(nullptr);
  }

  RewardPayoutEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardPayoutEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardPayoutEvent& from);
  void MergeFrom(const RewardPayoutEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardPayoutEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.RewardPayoutEvent";
  }
  protected:
  explicit RewardPayoutEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
    kEpochSeqFieldNumber = 2,
    kAssetFieldNumber = 3,
    kAmountFieldNumber = 4,
    kPercentOfTotalRewardFieldNumber = 5,
    kTimestampFieldNumber = 6,
  };
  // string party = 1 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string epoch_seq = 2 [json_name = "epochSeq"];
  void clear_epoch_seq();
  const std::string& epoch_seq() const;
  void set_epoch_seq(const std::string& value);
  void set_epoch_seq(std::string&& value);
  void set_epoch_seq(const char* value);
  void set_epoch_seq(const char* value, size_t size);
  std::string* mutable_epoch_seq();
  std::string* release_epoch_seq();
  void set_allocated_epoch_seq(std::string* epoch_seq);
  private:
  const std::string& _internal_epoch_seq() const;
  void _internal_set_epoch_seq(const std::string& value);
  std::string* _internal_mutable_epoch_seq();
  public:

  // string asset = 3 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string amount = 4 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string percent_of_total_reward = 5 [json_name = "percentOfTotalReward"];
  void clear_percent_of_total_reward();
  const std::string& percent_of_total_reward() const;
  void set_percent_of_total_reward(const std::string& value);
  void set_percent_of_total_reward(std::string&& value);
  void set_percent_of_total_reward(const char* value);
  void set_percent_of_total_reward(const char* value, size_t size);
  std::string* mutable_percent_of_total_reward();
  std::string* release_percent_of_total_reward();
  void set_allocated_percent_of_total_reward(std::string* percent_of_total_reward);
  private:
  const std::string& _internal_percent_of_total_reward() const;
  void _internal_set_percent_of_total_reward(const std::string& value);
  std::string* _internal_mutable_percent_of_total_reward();
  public:

  // int64 timestamp = 6 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.RewardPayoutEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr epoch_seq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr percent_of_total_reward_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class DelegationBalanceEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.DelegationBalanceEvent) */ {
 public:
  inline DelegationBalanceEvent() : DelegationBalanceEvent(nullptr) {}
  virtual ~DelegationBalanceEvent();

  DelegationBalanceEvent(const DelegationBalanceEvent& from);
  DelegationBalanceEvent(DelegationBalanceEvent&& from) noexcept
    : DelegationBalanceEvent() {
    *this = ::std::move(from);
  }

  inline DelegationBalanceEvent& operator=(const DelegationBalanceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegationBalanceEvent& operator=(DelegationBalanceEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegationBalanceEvent& default_instance();

  static inline const DelegationBalanceEvent* internal_default_instance() {
    return reinterpret_cast<const DelegationBalanceEvent*>(
               &_DelegationBalanceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DelegationBalanceEvent& a, DelegationBalanceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegationBalanceEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegationBalanceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegationBalanceEvent* New() const final {
    return CreateMaybeMessage<DelegationBalanceEvent>(nullptr);
  }

  DelegationBalanceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegationBalanceEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegationBalanceEvent& from);
  void MergeFrom(const DelegationBalanceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegationBalanceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.DelegationBalanceEvent";
  }
  protected:
  explicit DelegationBalanceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kEpochSeqFieldNumber = 4,
    kAmountFieldNumber = 3,
  };
  // string party = 1 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string node_id = 2 [json_name = "nodeId"];
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // string epoch_seq = 4 [json_name = "epochSeq"];
  void clear_epoch_seq();
  const std::string& epoch_seq() const;
  void set_epoch_seq(const std::string& value);
  void set_epoch_seq(std::string&& value);
  void set_epoch_seq(const char* value);
  void set_epoch_seq(const char* value, size_t size);
  std::string* mutable_epoch_seq();
  std::string* release_epoch_seq();
  void set_allocated_epoch_seq(std::string* epoch_seq);
  private:
  const std::string& _internal_epoch_seq() const;
  void _internal_set_epoch_seq(const std::string& value);
  std::string* _internal_mutable_epoch_seq();
  public:

  // uint64 amount = 3 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.DelegationBalanceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr epoch_seq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class PendingDelegationBalanceEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.PendingDelegationBalanceEvent) */ {
 public:
  inline PendingDelegationBalanceEvent() : PendingDelegationBalanceEvent(nullptr) {}
  virtual ~PendingDelegationBalanceEvent();

  PendingDelegationBalanceEvent(const PendingDelegationBalanceEvent& from);
  PendingDelegationBalanceEvent(PendingDelegationBalanceEvent&& from) noexcept
    : PendingDelegationBalanceEvent() {
    *this = ::std::move(from);
  }

  inline PendingDelegationBalanceEvent& operator=(const PendingDelegationBalanceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingDelegationBalanceEvent& operator=(PendingDelegationBalanceEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingDelegationBalanceEvent& default_instance();

  static inline const PendingDelegationBalanceEvent* internal_default_instance() {
    return reinterpret_cast<const PendingDelegationBalanceEvent*>(
               &_PendingDelegationBalanceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PendingDelegationBalanceEvent& a, PendingDelegationBalanceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingDelegationBalanceEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PendingDelegationBalanceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingDelegationBalanceEvent* New() const final {
    return CreateMaybeMessage<PendingDelegationBalanceEvent>(nullptr);
  }

  PendingDelegationBalanceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingDelegationBalanceEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingDelegationBalanceEvent& from);
  void MergeFrom(const PendingDelegationBalanceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingDelegationBalanceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.PendingDelegationBalanceEvent";
  }
  protected:
  explicit PendingDelegationBalanceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kEpochSeqFieldNumber = 5,
    kDelegationAmountFieldNumber = 3,
    kUndelegationAmountFieldNumber = 4,
  };
  // string party = 1 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string node_id = 2 [json_name = "nodeId"];
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // string epoch_seq = 5 [json_name = "epochSeq"];
  void clear_epoch_seq();
  const std::string& epoch_seq() const;
  void set_epoch_seq(const std::string& value);
  void set_epoch_seq(std::string&& value);
  void set_epoch_seq(const char* value);
  void set_epoch_seq(const char* value, size_t size);
  std::string* mutable_epoch_seq();
  std::string* release_epoch_seq();
  void set_allocated_epoch_seq(std::string* epoch_seq);
  private:
  const std::string& _internal_epoch_seq() const;
  void _internal_set_epoch_seq(const std::string& value);
  std::string* _internal_mutable_epoch_seq();
  public:

  // uint64 delegation_amount = 3 [json_name = "delegationAmount"];
  void clear_delegation_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 delegation_amount() const;
  void set_delegation_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_delegation_amount() const;
  void _internal_set_delegation_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 undelegation_amount = 4 [json_name = "undelegationAmount"];
  void clear_undelegation_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 undelegation_amount() const;
  void set_undelegation_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_undelegation_amount() const;
  void _internal_set_undelegation_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.PendingDelegationBalanceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr epoch_seq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 delegation_amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 undelegation_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class MarketEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.MarketEvent) */ {
 public:
  inline MarketEvent() : MarketEvent(nullptr) {}
  virtual ~MarketEvent();

  MarketEvent(const MarketEvent& from);
  MarketEvent(MarketEvent&& from) noexcept
    : MarketEvent() {
    *this = ::std::move(from);
  }

  inline MarketEvent& operator=(const MarketEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketEvent& operator=(MarketEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketEvent& default_instance();

  static inline const MarketEvent* internal_default_instance() {
    return reinterpret_cast<const MarketEvent*>(
               &_MarketEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MarketEvent& a, MarketEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketEvent* New() const final {
    return CreateMaybeMessage<MarketEvent>(nullptr);
  }

  MarketEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketEvent& from);
  void MergeFrom(const MarketEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.MarketEvent";
  }
  protected:
  explicit MarketEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string payload = 2 [json_name = "payload"];
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.MarketEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class TxErrorEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.TxErrorEvent) */ {
 public:
  inline TxErrorEvent() : TxErrorEvent(nullptr) {}
  virtual ~TxErrorEvent();

  TxErrorEvent(const TxErrorEvent& from);
  TxErrorEvent(TxErrorEvent&& from) noexcept
    : TxErrorEvent() {
    *this = ::std::move(from);
  }

  inline TxErrorEvent& operator=(const TxErrorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxErrorEvent& operator=(TxErrorEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxErrorEvent& default_instance();

  enum TransactionCase {
    kOrderSubmission = 101,
    kOrderAmendment = 102,
    kOrderCancellation = 103,
    kProposal = 104,
    kVoteSubmission = 105,
    kLiquidityProvisionSubmission = 106,
    kWithdrawSubmission = 107,
    TRANSACTION_NOT_SET = 0,
  };

  static inline const TxErrorEvent* internal_default_instance() {
    return reinterpret_cast<const TxErrorEvent*>(
               &_TxErrorEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TxErrorEvent& a, TxErrorEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TxErrorEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxErrorEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxErrorEvent* New() const final {
    return CreateMaybeMessage<TxErrorEvent>(nullptr);
  }

  TxErrorEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxErrorEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxErrorEvent& from);
  void MergeFrom(const TxErrorEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxErrorEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.TxErrorEvent";
  }
  protected:
  explicit TxErrorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kErrMsgFieldNumber = 2,
    kOrderSubmissionFieldNumber = 101,
    kOrderAmendmentFieldNumber = 102,
    kOrderCancellationFieldNumber = 103,
    kProposalFieldNumber = 104,
    kVoteSubmissionFieldNumber = 105,
    kLiquidityProvisionSubmissionFieldNumber = 106,
    kWithdrawSubmissionFieldNumber = 107,
  };
  // string party_id = 1 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string err_msg = 2 [json_name = "errMsg"];
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // .vega.commands.v1.OrderSubmission order_submission = 101 [json_name = "orderSubmission"];
  bool has_order_submission() const;
  private:
  bool _internal_has_order_submission() const;
  public:
  void clear_order_submission();
  const ::vega::commands::v1::OrderSubmission& order_submission() const;
  ::vega::commands::v1::OrderSubmission* release_order_submission();
  ::vega::commands::v1::OrderSubmission* mutable_order_submission();
  void set_allocated_order_submission(::vega::commands::v1::OrderSubmission* order_submission);
  private:
  const ::vega::commands::v1::OrderSubmission& _internal_order_submission() const;
  ::vega::commands::v1::OrderSubmission* _internal_mutable_order_submission();
  public:
  void unsafe_arena_set_allocated_order_submission(
      ::vega::commands::v1::OrderSubmission* order_submission);
  ::vega::commands::v1::OrderSubmission* unsafe_arena_release_order_submission();

  // .vega.commands.v1.OrderAmendment order_amendment = 102 [json_name = "orderAmendment"];
  bool has_order_amendment() const;
  private:
  bool _internal_has_order_amendment() const;
  public:
  void clear_order_amendment();
  const ::vega::commands::v1::OrderAmendment& order_amendment() const;
  ::vega::commands::v1::OrderAmendment* release_order_amendment();
  ::vega::commands::v1::OrderAmendment* mutable_order_amendment();
  void set_allocated_order_amendment(::vega::commands::v1::OrderAmendment* order_amendment);
  private:
  const ::vega::commands::v1::OrderAmendment& _internal_order_amendment() const;
  ::vega::commands::v1::OrderAmendment* _internal_mutable_order_amendment();
  public:
  void unsafe_arena_set_allocated_order_amendment(
      ::vega::commands::v1::OrderAmendment* order_amendment);
  ::vega::commands::v1::OrderAmendment* unsafe_arena_release_order_amendment();

  // .vega.commands.v1.OrderCancellation order_cancellation = 103 [json_name = "orderCancellation"];
  bool has_order_cancellation() const;
  private:
  bool _internal_has_order_cancellation() const;
  public:
  void clear_order_cancellation();
  const ::vega::commands::v1::OrderCancellation& order_cancellation() const;
  ::vega::commands::v1::OrderCancellation* release_order_cancellation();
  ::vega::commands::v1::OrderCancellation* mutable_order_cancellation();
  void set_allocated_order_cancellation(::vega::commands::v1::OrderCancellation* order_cancellation);
  private:
  const ::vega::commands::v1::OrderCancellation& _internal_order_cancellation() const;
  ::vega::commands::v1::OrderCancellation* _internal_mutable_order_cancellation();
  public:
  void unsafe_arena_set_allocated_order_cancellation(
      ::vega::commands::v1::OrderCancellation* order_cancellation);
  ::vega::commands::v1::OrderCancellation* unsafe_arena_release_order_cancellation();

  // .vega.commands.v1.ProposalSubmission proposal = 104 [json_name = "proposal"];
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::vega::commands::v1::ProposalSubmission& proposal() const;
  ::vega::commands::v1::ProposalSubmission* release_proposal();
  ::vega::commands::v1::ProposalSubmission* mutable_proposal();
  void set_allocated_proposal(::vega::commands::v1::ProposalSubmission* proposal);
  private:
  const ::vega::commands::v1::ProposalSubmission& _internal_proposal() const;
  ::vega::commands::v1::ProposalSubmission* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::vega::commands::v1::ProposalSubmission* proposal);
  ::vega::commands::v1::ProposalSubmission* unsafe_arena_release_proposal();

  // .vega.commands.v1.VoteSubmission vote_submission = 105 [json_name = "voteSubmission"];
  bool has_vote_submission() const;
  private:
  bool _internal_has_vote_submission() const;
  public:
  void clear_vote_submission();
  const ::vega::commands::v1::VoteSubmission& vote_submission() const;
  ::vega::commands::v1::VoteSubmission* release_vote_submission();
  ::vega::commands::v1::VoteSubmission* mutable_vote_submission();
  void set_allocated_vote_submission(::vega::commands::v1::VoteSubmission* vote_submission);
  private:
  const ::vega::commands::v1::VoteSubmission& _internal_vote_submission() const;
  ::vega::commands::v1::VoteSubmission* _internal_mutable_vote_submission();
  public:
  void unsafe_arena_set_allocated_vote_submission(
      ::vega::commands::v1::VoteSubmission* vote_submission);
  ::vega::commands::v1::VoteSubmission* unsafe_arena_release_vote_submission();

  // .vega.commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 106 [json_name = "liquidityProvisionSubmission"];
  bool has_liquidity_provision_submission() const;
  private:
  bool _internal_has_liquidity_provision_submission() const;
  public:
  void clear_liquidity_provision_submission();
  const ::vega::commands::v1::LiquidityProvisionSubmission& liquidity_provision_submission() const;
  ::vega::commands::v1::LiquidityProvisionSubmission* release_liquidity_provision_submission();
  ::vega::commands::v1::LiquidityProvisionSubmission* mutable_liquidity_provision_submission();
  void set_allocated_liquidity_provision_submission(::vega::commands::v1::LiquidityProvisionSubmission* liquidity_provision_submission);
  private:
  const ::vega::commands::v1::LiquidityProvisionSubmission& _internal_liquidity_provision_submission() const;
  ::vega::commands::v1::LiquidityProvisionSubmission* _internal_mutable_liquidity_provision_submission();
  public:
  void unsafe_arena_set_allocated_liquidity_provision_submission(
      ::vega::commands::v1::LiquidityProvisionSubmission* liquidity_provision_submission);
  ::vega::commands::v1::LiquidityProvisionSubmission* unsafe_arena_release_liquidity_provision_submission();

  // .vega.commands.v1.WithdrawSubmission withdraw_submission = 107 [json_name = "withdrawSubmission"];
  bool has_withdraw_submission() const;
  private:
  bool _internal_has_withdraw_submission() const;
  public:
  void clear_withdraw_submission();
  const ::vega::commands::v1::WithdrawSubmission& withdraw_submission() const;
  ::vega::commands::v1::WithdrawSubmission* release_withdraw_submission();
  ::vega::commands::v1::WithdrawSubmission* mutable_withdraw_submission();
  void set_allocated_withdraw_submission(::vega::commands::v1::WithdrawSubmission* withdraw_submission);
  private:
  const ::vega::commands::v1::WithdrawSubmission& _internal_withdraw_submission() const;
  ::vega::commands::v1::WithdrawSubmission* _internal_mutable_withdraw_submission();
  public:
  void unsafe_arena_set_allocated_withdraw_submission(
      ::vega::commands::v1::WithdrawSubmission* withdraw_submission);
  ::vega::commands::v1::WithdrawSubmission* unsafe_arena_release_withdraw_submission();

  void clear_transaction();
  TransactionCase transaction_case() const;
  // @@protoc_insertion_point(class_scope:vega.events.v1.TxErrorEvent)
 private:
  class _Internal;
  void set_has_order_submission();
  void set_has_order_amendment();
  void set_has_order_cancellation();
  void set_has_proposal();
  void set_has_vote_submission();
  void set_has_liquidity_provision_submission();
  void set_has_withdraw_submission();

  inline bool has_transaction() const;
  inline void clear_has_transaction();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  union TransactionUnion {
    TransactionUnion() {}
    ::vega::commands::v1::OrderSubmission* order_submission_;
    ::vega::commands::v1::OrderAmendment* order_amendment_;
    ::vega::commands::v1::OrderCancellation* order_cancellation_;
    ::vega::commands::v1::ProposalSubmission* proposal_;
    ::vega::commands::v1::VoteSubmission* vote_submission_;
    ::vega::commands::v1::LiquidityProvisionSubmission* liquidity_provision_submission_;
    ::vega::commands::v1::WithdrawSubmission* withdraw_submission_;
  } transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class TimeUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.TimeUpdate) */ {
 public:
  inline TimeUpdate() : TimeUpdate(nullptr) {}
  virtual ~TimeUpdate();

  TimeUpdate(const TimeUpdate& from);
  TimeUpdate(TimeUpdate&& from) noexcept
    : TimeUpdate() {
    *this = ::std::move(from);
  }

  inline TimeUpdate& operator=(const TimeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeUpdate& operator=(TimeUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeUpdate& default_instance();

  static inline const TimeUpdate* internal_default_instance() {
    return reinterpret_cast<const TimeUpdate*>(
               &_TimeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TimeUpdate& a, TimeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeUpdate* New() const final {
    return CreateMaybeMessage<TimeUpdate>(nullptr);
  }

  TimeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeUpdate& from);
  void MergeFrom(const TimeUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.TimeUpdate";
  }
  protected:
  explicit TimeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.TimeUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EpochEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.EpochEvent) */ {
 public:
  inline EpochEvent() : EpochEvent(nullptr) {}
  virtual ~EpochEvent();

  EpochEvent(const EpochEvent& from);
  EpochEvent(EpochEvent&& from) noexcept
    : EpochEvent() {
    *this = ::std::move(from);
  }

  inline EpochEvent& operator=(const EpochEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpochEvent& operator=(EpochEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EpochEvent& default_instance();

  static inline const EpochEvent* internal_default_instance() {
    return reinterpret_cast<const EpochEvent*>(
               &_EpochEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EpochEvent& a, EpochEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(EpochEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpochEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EpochEvent* New() const final {
    return CreateMaybeMessage<EpochEvent>(nullptr);
  }

  EpochEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EpochEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EpochEvent& from);
  void MergeFrom(const EpochEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpochEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.EpochEvent";
  }
  protected:
  explicit EpochEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kExpireTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
  };
  // uint64 seq = 1 [json_name = "seq"];
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 start_time = 2 [json_name = "startTime"];
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expire_time = 3 [json_name = "expireTime"];
  void clear_expire_time();
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time() const;
  void set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expire_time() const;
  void _internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 4 [json_name = "endTime"];
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.EpochEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class TransferResponses PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.TransferResponses) */ {
 public:
  inline TransferResponses() : TransferResponses(nullptr) {}
  virtual ~TransferResponses();

  TransferResponses(const TransferResponses& from);
  TransferResponses(TransferResponses&& from) noexcept
    : TransferResponses() {
    *this = ::std::move(from);
  }

  inline TransferResponses& operator=(const TransferResponses& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferResponses& operator=(TransferResponses&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferResponses& default_instance();

  static inline const TransferResponses* internal_default_instance() {
    return reinterpret_cast<const TransferResponses*>(
               &_TransferResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransferResponses& a, TransferResponses& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferResponses* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferResponses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferResponses* New() const final {
    return CreateMaybeMessage<TransferResponses>(nullptr);
  }

  TransferResponses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferResponses>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferResponses& from);
  void MergeFrom(const TransferResponses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferResponses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.TransferResponses";
  }
  protected:
  explicit TransferResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .vega.TransferResponse responses = 1 [json_name = "responses"];
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::vega::TransferResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferResponse >*
      mutable_responses();
  private:
  const ::vega::TransferResponse& _internal_responses(int index) const;
  ::vega::TransferResponse* _internal_add_responses();
  public:
  const ::vega::TransferResponse& responses(int index) const;
  ::vega::TransferResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferResponse >&
      responses() const;

  // @@protoc_insertion_point(class_scope:vega.events.v1.TransferResponses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferResponse > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class PositionResolution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.PositionResolution) */ {
 public:
  inline PositionResolution() : PositionResolution(nullptr) {}
  virtual ~PositionResolution();

  PositionResolution(const PositionResolution& from);
  PositionResolution(PositionResolution&& from) noexcept
    : PositionResolution() {
    *this = ::std::move(from);
  }

  inline PositionResolution& operator=(const PositionResolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionResolution& operator=(PositionResolution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionResolution& default_instance();

  static inline const PositionResolution* internal_default_instance() {
    return reinterpret_cast<const PositionResolution*>(
               &_PositionResolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PositionResolution& a, PositionResolution& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionResolution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionResolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionResolution* New() const final {
    return CreateMaybeMessage<PositionResolution>(nullptr);
  }

  PositionResolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionResolution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionResolution& from);
  void MergeFrom(const PositionResolution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionResolution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.PositionResolution";
  }
  protected:
  explicit PositionResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kDistressedFieldNumber = 2,
    kClosedFieldNumber = 3,
    kMarkPriceFieldNumber = 4,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // int64 distressed = 2 [json_name = "distressed"];
  void clear_distressed();
  ::PROTOBUF_NAMESPACE_ID::int64 distressed() const;
  void set_distressed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_distressed() const;
  void _internal_set_distressed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 closed = 3 [json_name = "closed"];
  void clear_closed();
  ::PROTOBUF_NAMESPACE_ID::int64 closed() const;
  void set_closed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_closed() const;
  void _internal_set_closed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 mark_price = 4 [json_name = "markPrice"];
  void clear_mark_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 mark_price() const;
  void set_mark_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mark_price() const;
  void _internal_set_mark_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.PositionResolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 distressed_;
  ::PROTOBUF_NAMESPACE_ID::int64 closed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mark_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class LossSocialization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.LossSocialization) */ {
 public:
  inline LossSocialization() : LossSocialization(nullptr) {}
  virtual ~LossSocialization();

  LossSocialization(const LossSocialization& from);
  LossSocialization(LossSocialization&& from) noexcept
    : LossSocialization() {
    *this = ::std::move(from);
  }

  inline LossSocialization& operator=(const LossSocialization& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossSocialization& operator=(LossSocialization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LossSocialization& default_instance();

  static inline const LossSocialization* internal_default_instance() {
    return reinterpret_cast<const LossSocialization*>(
               &_LossSocialization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LossSocialization& a, LossSocialization& b) {
    a.Swap(&b);
  }
  inline void Swap(LossSocialization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossSocialization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LossSocialization* New() const final {
    return CreateMaybeMessage<LossSocialization>(nullptr);
  }

  LossSocialization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LossSocialization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LossSocialization& from);
  void MergeFrom(const LossSocialization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LossSocialization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.LossSocialization";
  }
  protected:
  explicit LossSocialization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // int64 amount = 3 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.LossSocialization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class TradeSettlement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.TradeSettlement) */ {
 public:
  inline TradeSettlement() : TradeSettlement(nullptr) {}
  virtual ~TradeSettlement();

  TradeSettlement(const TradeSettlement& from);
  TradeSettlement(TradeSettlement&& from) noexcept
    : TradeSettlement() {
    *this = ::std::move(from);
  }

  inline TradeSettlement& operator=(const TradeSettlement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeSettlement& operator=(TradeSettlement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeSettlement& default_instance();

  static inline const TradeSettlement* internal_default_instance() {
    return reinterpret_cast<const TradeSettlement*>(
               &_TradeSettlement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TradeSettlement& a, TradeSettlement& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeSettlement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeSettlement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeSettlement* New() const final {
    return CreateMaybeMessage<TradeSettlement>(nullptr);
  }

  TradeSettlement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeSettlement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeSettlement& from);
  void MergeFrom(const TradeSettlement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeSettlement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.TradeSettlement";
  }
  protected:
  explicit TradeSettlement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // int64 size = 1 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 price = 2 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.TradeSettlement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class SettlePosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.SettlePosition) */ {
 public:
  inline SettlePosition() : SettlePosition(nullptr) {}
  virtual ~SettlePosition();

  SettlePosition(const SettlePosition& from);
  SettlePosition(SettlePosition&& from) noexcept
    : SettlePosition() {
    *this = ::std::move(from);
  }

  inline SettlePosition& operator=(const SettlePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettlePosition& operator=(SettlePosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettlePosition& default_instance();

  static inline const SettlePosition* internal_default_instance() {
    return reinterpret_cast<const SettlePosition*>(
               &_SettlePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SettlePosition& a, SettlePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SettlePosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettlePosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettlePosition* New() const final {
    return CreateMaybeMessage<SettlePosition>(nullptr);
  }

  SettlePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettlePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettlePosition& from);
  void MergeFrom(const SettlePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettlePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.SettlePosition";
  }
  protected:
  explicit SettlePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeSettlementsFieldNumber = 4,
    kMarketIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kPriceFieldNumber = 3,
  };
  // repeated .vega.events.v1.TradeSettlement trade_settlements = 4 [json_name = "tradeSettlements"];
  int trade_settlements_size() const;
  private:
  int _internal_trade_settlements_size() const;
  public:
  void clear_trade_settlements();
  ::vega::events::v1::TradeSettlement* mutable_trade_settlements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::TradeSettlement >*
      mutable_trade_settlements();
  private:
  const ::vega::events::v1::TradeSettlement& _internal_trade_settlements(int index) const;
  ::vega::events::v1::TradeSettlement* _internal_add_trade_settlements();
  public:
  const ::vega::events::v1::TradeSettlement& trade_settlements(int index) const;
  ::vega::events::v1::TradeSettlement* add_trade_settlements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::TradeSettlement >&
      trade_settlements() const;

  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // uint64 price = 3 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.SettlePosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::TradeSettlement > trade_settlements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class SettleDistressed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.SettleDistressed) */ {
 public:
  inline SettleDistressed() : SettleDistressed(nullptr) {}
  virtual ~SettleDistressed();

  SettleDistressed(const SettleDistressed& from);
  SettleDistressed(SettleDistressed&& from) noexcept
    : SettleDistressed() {
    *this = ::std::move(from);
  }

  inline SettleDistressed& operator=(const SettleDistressed& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettleDistressed& operator=(SettleDistressed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettleDistressed& default_instance();

  static inline const SettleDistressed* internal_default_instance() {
    return reinterpret_cast<const SettleDistressed*>(
               &_SettleDistressed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SettleDistressed& a, SettleDistressed& b) {
    a.Swap(&b);
  }
  inline void Swap(SettleDistressed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettleDistressed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettleDistressed* New() const final {
    return CreateMaybeMessage<SettleDistressed>(nullptr);
  }

  SettleDistressed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettleDistressed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettleDistressed& from);
  void MergeFrom(const SettleDistressed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettleDistressed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.SettleDistressed";
  }
  protected:
  explicit SettleDistressed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kMarginFieldNumber = 3,
    kPriceFieldNumber = 4,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // uint64 margin = 3 [json_name = "margin"];
  void clear_margin();
  ::PROTOBUF_NAMESPACE_ID::uint64 margin() const;
  void set_margin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_margin() const;
  void _internal_set_margin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 4 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.SettleDistressed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 margin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class MarketTick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.MarketTick) */ {
 public:
  inline MarketTick() : MarketTick(nullptr) {}
  virtual ~MarketTick();

  MarketTick(const MarketTick& from);
  MarketTick(MarketTick&& from) noexcept
    : MarketTick() {
    *this = ::std::move(from);
  }

  inline MarketTick& operator=(const MarketTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketTick& operator=(MarketTick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketTick& default_instance();

  static inline const MarketTick* internal_default_instance() {
    return reinterpret_cast<const MarketTick*>(
               &_MarketTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MarketTick& a, MarketTick& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketTick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketTick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketTick* New() const final {
    return CreateMaybeMessage<MarketTick>(nullptr);
  }

  MarketTick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketTick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketTick& from);
  void MergeFrom(const MarketTick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketTick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.MarketTick";
  }
  protected:
  explicit MarketTick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int64 time = 2 [json_name = "time"];
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.MarketTick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class AuctionEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.AuctionEvent) */ {
 public:
  inline AuctionEvent() : AuctionEvent(nullptr) {}
  virtual ~AuctionEvent();

  AuctionEvent(const AuctionEvent& from);
  AuctionEvent(AuctionEvent&& from) noexcept
    : AuctionEvent() {
    *this = ::std::move(from);
  }

  inline AuctionEvent& operator=(const AuctionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuctionEvent& operator=(AuctionEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuctionEvent& default_instance();

  static inline const AuctionEvent* internal_default_instance() {
    return reinterpret_cast<const AuctionEvent*>(
               &_AuctionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AuctionEvent& a, AuctionEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AuctionEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuctionEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuctionEvent* New() const final {
    return CreateMaybeMessage<AuctionEvent>(nullptr);
  }

  AuctionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuctionEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuctionEvent& from);
  void MergeFrom(const AuctionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuctionEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.AuctionEvent";
  }
  protected:
  explicit AuctionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kOpeningAuctionFieldNumber = 2,
    kLeaveFieldNumber = 3,
    kTriggerFieldNumber = 6,
    kStartFieldNumber = 4,
    kEndFieldNumber = 5,
    kExtensionTriggerFieldNumber = 7,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // bool opening_auction = 2 [json_name = "openingAuction"];
  void clear_opening_auction();
  bool opening_auction() const;
  void set_opening_auction(bool value);
  private:
  bool _internal_opening_auction() const;
  void _internal_set_opening_auction(bool value);
  public:

  // bool leave = 3 [json_name = "leave"];
  void clear_leave();
  bool leave() const;
  void set_leave(bool value);
  private:
  bool _internal_leave() const;
  void _internal_set_leave(bool value);
  public:

  // .vega.AuctionTrigger trigger = 6 [json_name = "trigger"];
  void clear_trigger();
  ::vega::AuctionTrigger trigger() const;
  void set_trigger(::vega::AuctionTrigger value);
  private:
  ::vega::AuctionTrigger _internal_trigger() const;
  void _internal_set_trigger(::vega::AuctionTrigger value);
  public:

  // int64 start = 4 [json_name = "start"];
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end = 5 [json_name = "end"];
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.AuctionTrigger extension_trigger = 7 [json_name = "extensionTrigger"];
  void clear_extension_trigger();
  ::vega::AuctionTrigger extension_trigger() const;
  void set_extension_trigger(::vega::AuctionTrigger value);
  private:
  ::vega::AuctionTrigger _internal_extension_trigger() const;
  void _internal_set_extension_trigger(::vega::AuctionTrigger value);
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.AuctionEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  bool opening_auction_;
  bool leave_;
  int trigger_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_;
  int extension_trigger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class ValidatorUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.ValidatorUpdate) */ {
 public:
  inline ValidatorUpdate() : ValidatorUpdate(nullptr) {}
  virtual ~ValidatorUpdate();

  ValidatorUpdate(const ValidatorUpdate& from);
  ValidatorUpdate(ValidatorUpdate&& from) noexcept
    : ValidatorUpdate() {
    *this = ::std::move(from);
  }

  inline ValidatorUpdate& operator=(const ValidatorUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorUpdate& operator=(ValidatorUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatorUpdate& default_instance();

  static inline const ValidatorUpdate* internal_default_instance() {
    return reinterpret_cast<const ValidatorUpdate*>(
               &_ValidatorUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ValidatorUpdate& a, ValidatorUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatorUpdate* New() const final {
    return CreateMaybeMessage<ValidatorUpdate>(nullptr);
  }

  ValidatorUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatorUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatorUpdate& from);
  void MergeFrom(const ValidatorUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.ValidatorUpdate";
  }
  protected:
  explicit ValidatorUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVegaPubKeyFieldNumber = 1,
    kEthereumAddressFieldNumber = 2,
    kTmPubKeyFieldNumber = 3,
    kInfoUrlFieldNumber = 4,
    kCountryFieldNumber = 5,
  };
  // string vega_pub_key = 1 [json_name = "vegaPubKey"];
  void clear_vega_pub_key();
  const std::string& vega_pub_key() const;
  void set_vega_pub_key(const std::string& value);
  void set_vega_pub_key(std::string&& value);
  void set_vega_pub_key(const char* value);
  void set_vega_pub_key(const char* value, size_t size);
  std::string* mutable_vega_pub_key();
  std::string* release_vega_pub_key();
  void set_allocated_vega_pub_key(std::string* vega_pub_key);
  private:
  const std::string& _internal_vega_pub_key() const;
  void _internal_set_vega_pub_key(const std::string& value);
  std::string* _internal_mutable_vega_pub_key();
  public:

  // string ethereum_address = 2 [json_name = "ethereumAddress"];
  void clear_ethereum_address();
  const std::string& ethereum_address() const;
  void set_ethereum_address(const std::string& value);
  void set_ethereum_address(std::string&& value);
  void set_ethereum_address(const char* value);
  void set_ethereum_address(const char* value, size_t size);
  std::string* mutable_ethereum_address();
  std::string* release_ethereum_address();
  void set_allocated_ethereum_address(std::string* ethereum_address);
  private:
  const std::string& _internal_ethereum_address() const;
  void _internal_set_ethereum_address(const std::string& value);
  std::string* _internal_mutable_ethereum_address();
  public:

  // string tm_pub_key = 3 [json_name = "tmPubKey"];
  void clear_tm_pub_key();
  const std::string& tm_pub_key() const;
  void set_tm_pub_key(const std::string& value);
  void set_tm_pub_key(std::string&& value);
  void set_tm_pub_key(const char* value);
  void set_tm_pub_key(const char* value, size_t size);
  std::string* mutable_tm_pub_key();
  std::string* release_tm_pub_key();
  void set_allocated_tm_pub_key(std::string* tm_pub_key);
  private:
  const std::string& _internal_tm_pub_key() const;
  void _internal_set_tm_pub_key(const std::string& value);
  std::string* _internal_mutable_tm_pub_key();
  public:

  // string info_url = 4 [json_name = "infoUrl"];
  void clear_info_url();
  const std::string& info_url() const;
  void set_info_url(const std::string& value);
  void set_info_url(std::string&& value);
  void set_info_url(const char* value);
  void set_info_url(const char* value, size_t size);
  std::string* mutable_info_url();
  std::string* release_info_url();
  void set_allocated_info_url(std::string* info_url);
  private:
  const std::string& _internal_info_url() const;
  void _internal_set_info_url(const std::string& value);
  std::string* _internal_mutable_info_url();
  public:

  // string country = 5 [json_name = "country"];
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // @@protoc_insertion_point(class_scope:vega.events.v1.ValidatorUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_pub_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ethereum_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tm_pub_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class BusEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.events.v1.BusEvent) */ {
 public:
  inline BusEvent() : BusEvent(nullptr) {}
  virtual ~BusEvent();

  BusEvent(const BusEvent& from);
  BusEvent(BusEvent&& from) noexcept
    : BusEvent() {
    *this = ::std::move(from);
  }

  inline BusEvent& operator=(const BusEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusEvent& operator=(BusEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BusEvent& default_instance();

  enum EventCase {
    kTimeUpdate = 101,
    kTransferResponses = 102,
    kPositionResolution = 103,
    kOrder = 104,
    kAccount = 105,
    kParty = 106,
    kTrade = 107,
    kMarginLevels = 108,
    kProposal = 109,
    kVote = 110,
    kMarketData = 111,
    kNodeSignature = 112,
    kLossSocialization = 113,
    kSettlePosition = 114,
    kSettleDistressed = 115,
    kMarketCreated = 116,
    kAsset = 117,
    kMarketTick = 118,
    kWithdrawal = 119,
    kDeposit = 120,
    kAuction = 121,
    kRiskFactor = 122,
    kNetworkParameter = 123,
    kLiquidityProvision = 124,
    kMarketUpdated = 125,
    kOracleSpec = 126,
    kOracleData = 127,
    kDelegationBalance = 129,
    kPendingDelegationBalance = 130,
    kEpochEvent = 131,
    kValidatorUpdate = 132,
    kStakeLinking = 133,
    kRewardPayout = 134,
    kCheckpoint = 135,
    kMarket = 1001,
    kTxErrEvent = 2001,
    EVENT_NOT_SET = 0,
  };

  static inline const BusEvent* internal_default_instance() {
    return reinterpret_cast<const BusEvent*>(
               &_BusEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BusEvent& a, BusEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BusEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusEvent* New() const final {
    return CreateMaybeMessage<BusEvent>(nullptr);
  }

  BusEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BusEvent& from);
  void MergeFrom(const BusEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.events.v1.BusEvent";
  }
  protected:
  explicit BusEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2fv1_2fevents_2eproto);
    return ::descriptor_table_events_2fv1_2fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBlockFieldNumber = 2,
    kTypeFieldNumber = 3,
    kTimeUpdateFieldNumber = 101,
    kTransferResponsesFieldNumber = 102,
    kPositionResolutionFieldNumber = 103,
    kOrderFieldNumber = 104,
    kAccountFieldNumber = 105,
    kPartyFieldNumber = 106,
    kTradeFieldNumber = 107,
    kMarginLevelsFieldNumber = 108,
    kProposalFieldNumber = 109,
    kVoteFieldNumber = 110,
    kMarketDataFieldNumber = 111,
    kNodeSignatureFieldNumber = 112,
    kLossSocializationFieldNumber = 113,
    kSettlePositionFieldNumber = 114,
    kSettleDistressedFieldNumber = 115,
    kMarketCreatedFieldNumber = 116,
    kAssetFieldNumber = 117,
    kMarketTickFieldNumber = 118,
    kWithdrawalFieldNumber = 119,
    kDepositFieldNumber = 120,
    kAuctionFieldNumber = 121,
    kRiskFactorFieldNumber = 122,
    kNetworkParameterFieldNumber = 123,
    kLiquidityProvisionFieldNumber = 124,
    kMarketUpdatedFieldNumber = 125,
    kOracleSpecFieldNumber = 126,
    kOracleDataFieldNumber = 127,
    kDelegationBalanceFieldNumber = 129,
    kPendingDelegationBalanceFieldNumber = 130,
    kEpochEventFieldNumber = 131,
    kValidatorUpdateFieldNumber = 132,
    kStakeLinkingFieldNumber = 133,
    kRewardPayoutFieldNumber = 134,
    kCheckpointFieldNumber = 135,
    kMarketFieldNumber = 1001,
    kTxErrEventFieldNumber = 2001,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string block = 2 [json_name = "block"];
  void clear_block();
  const std::string& block() const;
  void set_block(const std::string& value);
  void set_block(std::string&& value);
  void set_block(const char* value);
  void set_block(const char* value, size_t size);
  std::string* mutable_block();
  std::string* release_block();
  void set_allocated_block(std::string* block);
  private:
  const std::string& _internal_block() const;
  void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // .vega.events.v1.BusEventType type = 3 [json_name = "type"];
  void clear_type();
  ::vega::events::v1::BusEventType type() const;
  void set_type(::vega::events::v1::BusEventType value);
  private:
  ::vega::events::v1::BusEventType _internal_type() const;
  void _internal_set_type(::vega::events::v1::BusEventType value);
  public:

  // .vega.events.v1.TimeUpdate time_update = 101 [json_name = "timeUpdate"];
  bool has_time_update() const;
  private:
  bool _internal_has_time_update() const;
  public:
  void clear_time_update();
  const ::vega::events::v1::TimeUpdate& time_update() const;
  ::vega::events::v1::TimeUpdate* release_time_update();
  ::vega::events::v1::TimeUpdate* mutable_time_update();
  void set_allocated_time_update(::vega::events::v1::TimeUpdate* time_update);
  private:
  const ::vega::events::v1::TimeUpdate& _internal_time_update() const;
  ::vega::events::v1::TimeUpdate* _internal_mutable_time_update();
  public:
  void unsafe_arena_set_allocated_time_update(
      ::vega::events::v1::TimeUpdate* time_update);
  ::vega::events::v1::TimeUpdate* unsafe_arena_release_time_update();

  // .vega.events.v1.TransferResponses transfer_responses = 102 [json_name = "transferResponses"];
  bool has_transfer_responses() const;
  private:
  bool _internal_has_transfer_responses() const;
  public:
  void clear_transfer_responses();
  const ::vega::events::v1::TransferResponses& transfer_responses() const;
  ::vega::events::v1::TransferResponses* release_transfer_responses();
  ::vega::events::v1::TransferResponses* mutable_transfer_responses();
  void set_allocated_transfer_responses(::vega::events::v1::TransferResponses* transfer_responses);
  private:
  const ::vega::events::v1::TransferResponses& _internal_transfer_responses() const;
  ::vega::events::v1::TransferResponses* _internal_mutable_transfer_responses();
  public:
  void unsafe_arena_set_allocated_transfer_responses(
      ::vega::events::v1::TransferResponses* transfer_responses);
  ::vega::events::v1::TransferResponses* unsafe_arena_release_transfer_responses();

  // .vega.events.v1.PositionResolution position_resolution = 103 [json_name = "positionResolution"];
  bool has_position_resolution() const;
  private:
  bool _internal_has_position_resolution() const;
  public:
  void clear_position_resolution();
  const ::vega::events::v1::PositionResolution& position_resolution() const;
  ::vega::events::v1::PositionResolution* release_position_resolution();
  ::vega::events::v1::PositionResolution* mutable_position_resolution();
  void set_allocated_position_resolution(::vega::events::v1::PositionResolution* position_resolution);
  private:
  const ::vega::events::v1::PositionResolution& _internal_position_resolution() const;
  ::vega::events::v1::PositionResolution* _internal_mutable_position_resolution();
  public:
  void unsafe_arena_set_allocated_position_resolution(
      ::vega::events::v1::PositionResolution* position_resolution);
  ::vega::events::v1::PositionResolution* unsafe_arena_release_position_resolution();

  // .vega.Order order = 104 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // .vega.Account account = 105 [json_name = "account"];
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::vega::Account& account() const;
  ::vega::Account* release_account();
  ::vega::Account* mutable_account();
  void set_allocated_account(::vega::Account* account);
  private:
  const ::vega::Account& _internal_account() const;
  ::vega::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::vega::Account* account);
  ::vega::Account* unsafe_arena_release_account();

  // .vega.Party party = 106 [json_name = "party"];
  bool has_party() const;
  private:
  bool _internal_has_party() const;
  public:
  void clear_party();
  const ::vega::Party& party() const;
  ::vega::Party* release_party();
  ::vega::Party* mutable_party();
  void set_allocated_party(::vega::Party* party);
  private:
  const ::vega::Party& _internal_party() const;
  ::vega::Party* _internal_mutable_party();
  public:
  void unsafe_arena_set_allocated_party(
      ::vega::Party* party);
  ::vega::Party* unsafe_arena_release_party();

  // .vega.Trade trade = 107 [json_name = "trade"];
  bool has_trade() const;
  private:
  bool _internal_has_trade() const;
  public:
  void clear_trade();
  const ::vega::Trade& trade() const;
  ::vega::Trade* release_trade();
  ::vega::Trade* mutable_trade();
  void set_allocated_trade(::vega::Trade* trade);
  private:
  const ::vega::Trade& _internal_trade() const;
  ::vega::Trade* _internal_mutable_trade();
  public:
  void unsafe_arena_set_allocated_trade(
      ::vega::Trade* trade);
  ::vega::Trade* unsafe_arena_release_trade();

  // .vega.MarginLevels margin_levels = 108 [json_name = "marginLevels"];
  bool has_margin_levels() const;
  private:
  bool _internal_has_margin_levels() const;
  public:
  void clear_margin_levels();
  const ::vega::MarginLevels& margin_levels() const;
  ::vega::MarginLevels* release_margin_levels();
  ::vega::MarginLevels* mutable_margin_levels();
  void set_allocated_margin_levels(::vega::MarginLevels* margin_levels);
  private:
  const ::vega::MarginLevels& _internal_margin_levels() const;
  ::vega::MarginLevels* _internal_mutable_margin_levels();
  public:
  void unsafe_arena_set_allocated_margin_levels(
      ::vega::MarginLevels* margin_levels);
  ::vega::MarginLevels* unsafe_arena_release_margin_levels();

  // .vega.Proposal proposal = 109 [json_name = "proposal"];
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::vega::Proposal& proposal() const;
  ::vega::Proposal* release_proposal();
  ::vega::Proposal* mutable_proposal();
  void set_allocated_proposal(::vega::Proposal* proposal);
  private:
  const ::vega::Proposal& _internal_proposal() const;
  ::vega::Proposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::vega::Proposal* proposal);
  ::vega::Proposal* unsafe_arena_release_proposal();

  // .vega.Vote vote = 110 [json_name = "vote"];
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  const ::vega::Vote& vote() const;
  ::vega::Vote* release_vote();
  ::vega::Vote* mutable_vote();
  void set_allocated_vote(::vega::Vote* vote);
  private:
  const ::vega::Vote& _internal_vote() const;
  ::vega::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::vega::Vote* vote);
  ::vega::Vote* unsafe_arena_release_vote();

  // .vega.MarketData market_data = 111 [json_name = "marketData"];
  bool has_market_data() const;
  private:
  bool _internal_has_market_data() const;
  public:
  void clear_market_data();
  const ::vega::MarketData& market_data() const;
  ::vega::MarketData* release_market_data();
  ::vega::MarketData* mutable_market_data();
  void set_allocated_market_data(::vega::MarketData* market_data);
  private:
  const ::vega::MarketData& _internal_market_data() const;
  ::vega::MarketData* _internal_mutable_market_data();
  public:
  void unsafe_arena_set_allocated_market_data(
      ::vega::MarketData* market_data);
  ::vega::MarketData* unsafe_arena_release_market_data();

  // .vega.commands.v1.NodeSignature node_signature = 112 [json_name = "nodeSignature"];
  bool has_node_signature() const;
  private:
  bool _internal_has_node_signature() const;
  public:
  void clear_node_signature();
  const ::vega::commands::v1::NodeSignature& node_signature() const;
  ::vega::commands::v1::NodeSignature* release_node_signature();
  ::vega::commands::v1::NodeSignature* mutable_node_signature();
  void set_allocated_node_signature(::vega::commands::v1::NodeSignature* node_signature);
  private:
  const ::vega::commands::v1::NodeSignature& _internal_node_signature() const;
  ::vega::commands::v1::NodeSignature* _internal_mutable_node_signature();
  public:
  void unsafe_arena_set_allocated_node_signature(
      ::vega::commands::v1::NodeSignature* node_signature);
  ::vega::commands::v1::NodeSignature* unsafe_arena_release_node_signature();

  // .vega.events.v1.LossSocialization loss_socialization = 113 [json_name = "lossSocialization"];
  bool has_loss_socialization() const;
  private:
  bool _internal_has_loss_socialization() const;
  public:
  void clear_loss_socialization();
  const ::vega::events::v1::LossSocialization& loss_socialization() const;
  ::vega::events::v1::LossSocialization* release_loss_socialization();
  ::vega::events::v1::LossSocialization* mutable_loss_socialization();
  void set_allocated_loss_socialization(::vega::events::v1::LossSocialization* loss_socialization);
  private:
  const ::vega::events::v1::LossSocialization& _internal_loss_socialization() const;
  ::vega::events::v1::LossSocialization* _internal_mutable_loss_socialization();
  public:
  void unsafe_arena_set_allocated_loss_socialization(
      ::vega::events::v1::LossSocialization* loss_socialization);
  ::vega::events::v1::LossSocialization* unsafe_arena_release_loss_socialization();

  // .vega.events.v1.SettlePosition settle_position = 114 [json_name = "settlePosition"];
  bool has_settle_position() const;
  private:
  bool _internal_has_settle_position() const;
  public:
  void clear_settle_position();
  const ::vega::events::v1::SettlePosition& settle_position() const;
  ::vega::events::v1::SettlePosition* release_settle_position();
  ::vega::events::v1::SettlePosition* mutable_settle_position();
  void set_allocated_settle_position(::vega::events::v1::SettlePosition* settle_position);
  private:
  const ::vega::events::v1::SettlePosition& _internal_settle_position() const;
  ::vega::events::v1::SettlePosition* _internal_mutable_settle_position();
  public:
  void unsafe_arena_set_allocated_settle_position(
      ::vega::events::v1::SettlePosition* settle_position);
  ::vega::events::v1::SettlePosition* unsafe_arena_release_settle_position();

  // .vega.events.v1.SettleDistressed settle_distressed = 115 [json_name = "settleDistressed"];
  bool has_settle_distressed() const;
  private:
  bool _internal_has_settle_distressed() const;
  public:
  void clear_settle_distressed();
  const ::vega::events::v1::SettleDistressed& settle_distressed() const;
  ::vega::events::v1::SettleDistressed* release_settle_distressed();
  ::vega::events::v1::SettleDistressed* mutable_settle_distressed();
  void set_allocated_settle_distressed(::vega::events::v1::SettleDistressed* settle_distressed);
  private:
  const ::vega::events::v1::SettleDistressed& _internal_settle_distressed() const;
  ::vega::events::v1::SettleDistressed* _internal_mutable_settle_distressed();
  public:
  void unsafe_arena_set_allocated_settle_distressed(
      ::vega::events::v1::SettleDistressed* settle_distressed);
  ::vega::events::v1::SettleDistressed* unsafe_arena_release_settle_distressed();

  // .vega.Market market_created = 116 [json_name = "marketCreated"];
  bool has_market_created() const;
  private:
  bool _internal_has_market_created() const;
  public:
  void clear_market_created();
  const ::vega::Market& market_created() const;
  ::vega::Market* release_market_created();
  ::vega::Market* mutable_market_created();
  void set_allocated_market_created(::vega::Market* market_created);
  private:
  const ::vega::Market& _internal_market_created() const;
  ::vega::Market* _internal_mutable_market_created();
  public:
  void unsafe_arena_set_allocated_market_created(
      ::vega::Market* market_created);
  ::vega::Market* unsafe_arena_release_market_created();

  // .vega.Asset asset = 117 [json_name = "asset"];
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::vega::Asset& asset() const;
  ::vega::Asset* release_asset();
  ::vega::Asset* mutable_asset();
  void set_allocated_asset(::vega::Asset* asset);
  private:
  const ::vega::Asset& _internal_asset() const;
  ::vega::Asset* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::vega::Asset* asset);
  ::vega::Asset* unsafe_arena_release_asset();

  // .vega.events.v1.MarketTick market_tick = 118 [json_name = "marketTick"];
  bool has_market_tick() const;
  private:
  bool _internal_has_market_tick() const;
  public:
  void clear_market_tick();
  const ::vega::events::v1::MarketTick& market_tick() const;
  ::vega::events::v1::MarketTick* release_market_tick();
  ::vega::events::v1::MarketTick* mutable_market_tick();
  void set_allocated_market_tick(::vega::events::v1::MarketTick* market_tick);
  private:
  const ::vega::events::v1::MarketTick& _internal_market_tick() const;
  ::vega::events::v1::MarketTick* _internal_mutable_market_tick();
  public:
  void unsafe_arena_set_allocated_market_tick(
      ::vega::events::v1::MarketTick* market_tick);
  ::vega::events::v1::MarketTick* unsafe_arena_release_market_tick();

  // .vega.Withdrawal withdrawal = 119 [json_name = "withdrawal"];
  bool has_withdrawal() const;
  private:
  bool _internal_has_withdrawal() const;
  public:
  void clear_withdrawal();
  const ::vega::Withdrawal& withdrawal() const;
  ::vega::Withdrawal* release_withdrawal();
  ::vega::Withdrawal* mutable_withdrawal();
  void set_allocated_withdrawal(::vega::Withdrawal* withdrawal);
  private:
  const ::vega::Withdrawal& _internal_withdrawal() const;
  ::vega::Withdrawal* _internal_mutable_withdrawal();
  public:
  void unsafe_arena_set_allocated_withdrawal(
      ::vega::Withdrawal* withdrawal);
  ::vega::Withdrawal* unsafe_arena_release_withdrawal();

  // .vega.Deposit deposit = 120 [json_name = "deposit"];
  bool has_deposit() const;
  private:
  bool _internal_has_deposit() const;
  public:
  void clear_deposit();
  const ::vega::Deposit& deposit() const;
  ::vega::Deposit* release_deposit();
  ::vega::Deposit* mutable_deposit();
  void set_allocated_deposit(::vega::Deposit* deposit);
  private:
  const ::vega::Deposit& _internal_deposit() const;
  ::vega::Deposit* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::vega::Deposit* deposit);
  ::vega::Deposit* unsafe_arena_release_deposit();

  // .vega.events.v1.AuctionEvent auction = 121 [json_name = "auction"];
  bool has_auction() const;
  private:
  bool _internal_has_auction() const;
  public:
  void clear_auction();
  const ::vega::events::v1::AuctionEvent& auction() const;
  ::vega::events::v1::AuctionEvent* release_auction();
  ::vega::events::v1::AuctionEvent* mutable_auction();
  void set_allocated_auction(::vega::events::v1::AuctionEvent* auction);
  private:
  const ::vega::events::v1::AuctionEvent& _internal_auction() const;
  ::vega::events::v1::AuctionEvent* _internal_mutable_auction();
  public:
  void unsafe_arena_set_allocated_auction(
      ::vega::events::v1::AuctionEvent* auction);
  ::vega::events::v1::AuctionEvent* unsafe_arena_release_auction();

  // .vega.RiskFactor risk_factor = 122 [json_name = "riskFactor"];
  bool has_risk_factor() const;
  private:
  bool _internal_has_risk_factor() const;
  public:
  void clear_risk_factor();
  const ::vega::RiskFactor& risk_factor() const;
  ::vega::RiskFactor* release_risk_factor();
  ::vega::RiskFactor* mutable_risk_factor();
  void set_allocated_risk_factor(::vega::RiskFactor* risk_factor);
  private:
  const ::vega::RiskFactor& _internal_risk_factor() const;
  ::vega::RiskFactor* _internal_mutable_risk_factor();
  public:
  void unsafe_arena_set_allocated_risk_factor(
      ::vega::RiskFactor* risk_factor);
  ::vega::RiskFactor* unsafe_arena_release_risk_factor();

  // .vega.NetworkParameter network_parameter = 123 [json_name = "networkParameter"];
  bool has_network_parameter() const;
  private:
  bool _internal_has_network_parameter() const;
  public:
  void clear_network_parameter();
  const ::vega::NetworkParameter& network_parameter() const;
  ::vega::NetworkParameter* release_network_parameter();
  ::vega::NetworkParameter* mutable_network_parameter();
  void set_allocated_network_parameter(::vega::NetworkParameter* network_parameter);
  private:
  const ::vega::NetworkParameter& _internal_network_parameter() const;
  ::vega::NetworkParameter* _internal_mutable_network_parameter();
  public:
  void unsafe_arena_set_allocated_network_parameter(
      ::vega::NetworkParameter* network_parameter);
  ::vega::NetworkParameter* unsafe_arena_release_network_parameter();

  // .vega.LiquidityProvision liquidity_provision = 124 [json_name = "liquidityProvision"];
  bool has_liquidity_provision() const;
  private:
  bool _internal_has_liquidity_provision() const;
  public:
  void clear_liquidity_provision();
  const ::vega::LiquidityProvision& liquidity_provision() const;
  ::vega::LiquidityProvision* release_liquidity_provision();
  ::vega::LiquidityProvision* mutable_liquidity_provision();
  void set_allocated_liquidity_provision(::vega::LiquidityProvision* liquidity_provision);
  private:
  const ::vega::LiquidityProvision& _internal_liquidity_provision() const;
  ::vega::LiquidityProvision* _internal_mutable_liquidity_provision();
  public:
  void unsafe_arena_set_allocated_liquidity_provision(
      ::vega::LiquidityProvision* liquidity_provision);
  ::vega::LiquidityProvision* unsafe_arena_release_liquidity_provision();

  // .vega.Market market_updated = 125 [json_name = "marketUpdated"];
  bool has_market_updated() const;
  private:
  bool _internal_has_market_updated() const;
  public:
  void clear_market_updated();
  const ::vega::Market& market_updated() const;
  ::vega::Market* release_market_updated();
  ::vega::Market* mutable_market_updated();
  void set_allocated_market_updated(::vega::Market* market_updated);
  private:
  const ::vega::Market& _internal_market_updated() const;
  ::vega::Market* _internal_mutable_market_updated();
  public:
  void unsafe_arena_set_allocated_market_updated(
      ::vega::Market* market_updated);
  ::vega::Market* unsafe_arena_release_market_updated();

  // .oracles.v1.OracleSpec oracle_spec = 126 [json_name = "oracleSpec"];
  bool has_oracle_spec() const;
  private:
  bool _internal_has_oracle_spec() const;
  public:
  void clear_oracle_spec();
  const ::oracles::v1::OracleSpec& oracle_spec() const;
  ::oracles::v1::OracleSpec* release_oracle_spec();
  ::oracles::v1::OracleSpec* mutable_oracle_spec();
  void set_allocated_oracle_spec(::oracles::v1::OracleSpec* oracle_spec);
  private:
  const ::oracles::v1::OracleSpec& _internal_oracle_spec() const;
  ::oracles::v1::OracleSpec* _internal_mutable_oracle_spec();
  public:
  void unsafe_arena_set_allocated_oracle_spec(
      ::oracles::v1::OracleSpec* oracle_spec);
  ::oracles::v1::OracleSpec* unsafe_arena_release_oracle_spec();

  // .oracles.v1.OracleData oracle_data = 127 [json_name = "oracleData"];
  bool has_oracle_data() const;
  private:
  bool _internal_has_oracle_data() const;
  public:
  void clear_oracle_data();
  const ::oracles::v1::OracleData& oracle_data() const;
  ::oracles::v1::OracleData* release_oracle_data();
  ::oracles::v1::OracleData* mutable_oracle_data();
  void set_allocated_oracle_data(::oracles::v1::OracleData* oracle_data);
  private:
  const ::oracles::v1::OracleData& _internal_oracle_data() const;
  ::oracles::v1::OracleData* _internal_mutable_oracle_data();
  public:
  void unsafe_arena_set_allocated_oracle_data(
      ::oracles::v1::OracleData* oracle_data);
  ::oracles::v1::OracleData* unsafe_arena_release_oracle_data();

  // .vega.events.v1.DelegationBalanceEvent delegation_balance = 129 [json_name = "delegationBalance"];
  bool has_delegation_balance() const;
  private:
  bool _internal_has_delegation_balance() const;
  public:
  void clear_delegation_balance();
  const ::vega::events::v1::DelegationBalanceEvent& delegation_balance() const;
  ::vega::events::v1::DelegationBalanceEvent* release_delegation_balance();
  ::vega::events::v1::DelegationBalanceEvent* mutable_delegation_balance();
  void set_allocated_delegation_balance(::vega::events::v1::DelegationBalanceEvent* delegation_balance);
  private:
  const ::vega::events::v1::DelegationBalanceEvent& _internal_delegation_balance() const;
  ::vega::events::v1::DelegationBalanceEvent* _internal_mutable_delegation_balance();
  public:
  void unsafe_arena_set_allocated_delegation_balance(
      ::vega::events::v1::DelegationBalanceEvent* delegation_balance);
  ::vega::events::v1::DelegationBalanceEvent* unsafe_arena_release_delegation_balance();

  // .vega.events.v1.PendingDelegationBalanceEvent pending_delegation_balance = 130 [json_name = "pendingDelegationBalance"];
  bool has_pending_delegation_balance() const;
  private:
  bool _internal_has_pending_delegation_balance() const;
  public:
  void clear_pending_delegation_balance();
  const ::vega::events::v1::PendingDelegationBalanceEvent& pending_delegation_balance() const;
  ::vega::events::v1::PendingDelegationBalanceEvent* release_pending_delegation_balance();
  ::vega::events::v1::PendingDelegationBalanceEvent* mutable_pending_delegation_balance();
  void set_allocated_pending_delegation_balance(::vega::events::v1::PendingDelegationBalanceEvent* pending_delegation_balance);
  private:
  const ::vega::events::v1::PendingDelegationBalanceEvent& _internal_pending_delegation_balance() const;
  ::vega::events::v1::PendingDelegationBalanceEvent* _internal_mutable_pending_delegation_balance();
  public:
  void unsafe_arena_set_allocated_pending_delegation_balance(
      ::vega::events::v1::PendingDelegationBalanceEvent* pending_delegation_balance);
  ::vega::events::v1::PendingDelegationBalanceEvent* unsafe_arena_release_pending_delegation_balance();

  // .vega.events.v1.EpochEvent epoch_event = 131 [json_name = "epochEvent"];
  bool has_epoch_event() const;
  private:
  bool _internal_has_epoch_event() const;
  public:
  void clear_epoch_event();
  const ::vega::events::v1::EpochEvent& epoch_event() const;
  ::vega::events::v1::EpochEvent* release_epoch_event();
  ::vega::events::v1::EpochEvent* mutable_epoch_event();
  void set_allocated_epoch_event(::vega::events::v1::EpochEvent* epoch_event);
  private:
  const ::vega::events::v1::EpochEvent& _internal_epoch_event() const;
  ::vega::events::v1::EpochEvent* _internal_mutable_epoch_event();
  public:
  void unsafe_arena_set_allocated_epoch_event(
      ::vega::events::v1::EpochEvent* epoch_event);
  ::vega::events::v1::EpochEvent* unsafe_arena_release_epoch_event();

  // .vega.events.v1.ValidatorUpdate validator_update = 132 [json_name = "validatorUpdate"];
  bool has_validator_update() const;
  private:
  bool _internal_has_validator_update() const;
  public:
  void clear_validator_update();
  const ::vega::events::v1::ValidatorUpdate& validator_update() const;
  ::vega::events::v1::ValidatorUpdate* release_validator_update();
  ::vega::events::v1::ValidatorUpdate* mutable_validator_update();
  void set_allocated_validator_update(::vega::events::v1::ValidatorUpdate* validator_update);
  private:
  const ::vega::events::v1::ValidatorUpdate& _internal_validator_update() const;
  ::vega::events::v1::ValidatorUpdate* _internal_mutable_validator_update();
  public:
  void unsafe_arena_set_allocated_validator_update(
      ::vega::events::v1::ValidatorUpdate* validator_update);
  ::vega::events::v1::ValidatorUpdate* unsafe_arena_release_validator_update();

  // .vega.events.v1.StakeLinking stake_linking = 133 [json_name = "stakeLinking"];
  bool has_stake_linking() const;
  private:
  bool _internal_has_stake_linking() const;
  public:
  void clear_stake_linking();
  const ::vega::events::v1::StakeLinking& stake_linking() const;
  ::vega::events::v1::StakeLinking* release_stake_linking();
  ::vega::events::v1::StakeLinking* mutable_stake_linking();
  void set_allocated_stake_linking(::vega::events::v1::StakeLinking* stake_linking);
  private:
  const ::vega::events::v1::StakeLinking& _internal_stake_linking() const;
  ::vega::events::v1::StakeLinking* _internal_mutable_stake_linking();
  public:
  void unsafe_arena_set_allocated_stake_linking(
      ::vega::events::v1::StakeLinking* stake_linking);
  ::vega::events::v1::StakeLinking* unsafe_arena_release_stake_linking();

  // .vega.events.v1.RewardPayoutEvent reward_payout = 134 [json_name = "rewardPayout"];
  bool has_reward_payout() const;
  private:
  bool _internal_has_reward_payout() const;
  public:
  void clear_reward_payout();
  const ::vega::events::v1::RewardPayoutEvent& reward_payout() const;
  ::vega::events::v1::RewardPayoutEvent* release_reward_payout();
  ::vega::events::v1::RewardPayoutEvent* mutable_reward_payout();
  void set_allocated_reward_payout(::vega::events::v1::RewardPayoutEvent* reward_payout);
  private:
  const ::vega::events::v1::RewardPayoutEvent& _internal_reward_payout() const;
  ::vega::events::v1::RewardPayoutEvent* _internal_mutable_reward_payout();
  public:
  void unsafe_arena_set_allocated_reward_payout(
      ::vega::events::v1::RewardPayoutEvent* reward_payout);
  ::vega::events::v1::RewardPayoutEvent* unsafe_arena_release_reward_payout();

  // .vega.events.v1.CheckpointEvent checkpoint = 135 [json_name = "checkpoint"];
  bool has_checkpoint() const;
  private:
  bool _internal_has_checkpoint() const;
  public:
  void clear_checkpoint();
  const ::vega::events::v1::CheckpointEvent& checkpoint() const;
  ::vega::events::v1::CheckpointEvent* release_checkpoint();
  ::vega::events::v1::CheckpointEvent* mutable_checkpoint();
  void set_allocated_checkpoint(::vega::events::v1::CheckpointEvent* checkpoint);
  private:
  const ::vega::events::v1::CheckpointEvent& _internal_checkpoint() const;
  ::vega::events::v1::CheckpointEvent* _internal_mutable_checkpoint();
  public:
  void unsafe_arena_set_allocated_checkpoint(
      ::vega::events::v1::CheckpointEvent* checkpoint);
  ::vega::events::v1::CheckpointEvent* unsafe_arena_release_checkpoint();

  // .vega.events.v1.MarketEvent market = 1001 [json_name = "market"];
  bool has_market() const;
  private:
  bool _internal_has_market() const;
  public:
  void clear_market();
  const ::vega::events::v1::MarketEvent& market() const;
  ::vega::events::v1::MarketEvent* release_market();
  ::vega::events::v1::MarketEvent* mutable_market();
  void set_allocated_market(::vega::events::v1::MarketEvent* market);
  private:
  const ::vega::events::v1::MarketEvent& _internal_market() const;
  ::vega::events::v1::MarketEvent* _internal_mutable_market();
  public:
  void unsafe_arena_set_allocated_market(
      ::vega::events::v1::MarketEvent* market);
  ::vega::events::v1::MarketEvent* unsafe_arena_release_market();

  // .vega.events.v1.TxErrorEvent tx_err_event = 2001 [json_name = "txErrEvent"];
  bool has_tx_err_event() const;
  private:
  bool _internal_has_tx_err_event() const;
  public:
  void clear_tx_err_event();
  const ::vega::events::v1::TxErrorEvent& tx_err_event() const;
  ::vega::events::v1::TxErrorEvent* release_tx_err_event();
  ::vega::events::v1::TxErrorEvent* mutable_tx_err_event();
  void set_allocated_tx_err_event(::vega::events::v1::TxErrorEvent* tx_err_event);
  private:
  const ::vega::events::v1::TxErrorEvent& _internal_tx_err_event() const;
  ::vega::events::v1::TxErrorEvent* _internal_mutable_tx_err_event();
  public:
  void unsafe_arena_set_allocated_tx_err_event(
      ::vega::events::v1::TxErrorEvent* tx_err_event);
  ::vega::events::v1::TxErrorEvent* unsafe_arena_release_tx_err_event();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:vega.events.v1.BusEvent)
 private:
  class _Internal;
  void set_has_time_update();
  void set_has_transfer_responses();
  void set_has_position_resolution();
  void set_has_order();
  void set_has_account();
  void set_has_party();
  void set_has_trade();
  void set_has_margin_levels();
  void set_has_proposal();
  void set_has_vote();
  void set_has_market_data();
  void set_has_node_signature();
  void set_has_loss_socialization();
  void set_has_settle_position();
  void set_has_settle_distressed();
  void set_has_market_created();
  void set_has_asset();
  void set_has_market_tick();
  void set_has_withdrawal();
  void set_has_deposit();
  void set_has_auction();
  void set_has_risk_factor();
  void set_has_network_parameter();
  void set_has_liquidity_provision();
  void set_has_market_updated();
  void set_has_oracle_spec();
  void set_has_oracle_data();
  void set_has_delegation_balance();
  void set_has_pending_delegation_balance();
  void set_has_epoch_event();
  void set_has_validator_update();
  void set_has_stake_linking();
  void set_has_reward_payout();
  void set_has_checkpoint();
  void set_has_market();
  void set_has_tx_err_event();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
  int type_;
  union EventUnion {
    EventUnion() {}
    ::vega::events::v1::TimeUpdate* time_update_;
    ::vega::events::v1::TransferResponses* transfer_responses_;
    ::vega::events::v1::PositionResolution* position_resolution_;
    ::vega::Order* order_;
    ::vega::Account* account_;
    ::vega::Party* party_;
    ::vega::Trade* trade_;
    ::vega::MarginLevels* margin_levels_;
    ::vega::Proposal* proposal_;
    ::vega::Vote* vote_;
    ::vega::MarketData* market_data_;
    ::vega::commands::v1::NodeSignature* node_signature_;
    ::vega::events::v1::LossSocialization* loss_socialization_;
    ::vega::events::v1::SettlePosition* settle_position_;
    ::vega::events::v1::SettleDistressed* settle_distressed_;
    ::vega::Market* market_created_;
    ::vega::Asset* asset_;
    ::vega::events::v1::MarketTick* market_tick_;
    ::vega::Withdrawal* withdrawal_;
    ::vega::Deposit* deposit_;
    ::vega::events::v1::AuctionEvent* auction_;
    ::vega::RiskFactor* risk_factor_;
    ::vega::NetworkParameter* network_parameter_;
    ::vega::LiquidityProvision* liquidity_provision_;
    ::vega::Market* market_updated_;
    ::oracles::v1::OracleSpec* oracle_spec_;
    ::oracles::v1::OracleData* oracle_data_;
    ::vega::events::v1::DelegationBalanceEvent* delegation_balance_;
    ::vega::events::v1::PendingDelegationBalanceEvent* pending_delegation_balance_;
    ::vega::events::v1::EpochEvent* epoch_event_;
    ::vega::events::v1::ValidatorUpdate* validator_update_;
    ::vega::events::v1::StakeLinking* stake_linking_;
    ::vega::events::v1::RewardPayoutEvent* reward_payout_;
    ::vega::events::v1::CheckpointEvent* checkpoint_;
    ::vega::events::v1::MarketEvent* market_;
    ::vega::events::v1::TxErrorEvent* tx_err_event_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_events_2fv1_2fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StakeLinking

// string id = 1 [json_name = "id"];
inline void StakeLinking::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& StakeLinking::id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.StakeLinking.id)
  return _internal_id();
}
inline void StakeLinking::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.StakeLinking.id)
}
inline std::string* StakeLinking::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.StakeLinking.id)
  return _internal_mutable_id();
}
inline const std::string& StakeLinking::_internal_id() const {
  return id_.Get();
}
inline void StakeLinking::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeLinking::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.StakeLinking.id)
}
inline void StakeLinking::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.StakeLinking.id)
}
inline void StakeLinking::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.StakeLinking.id)
}
inline std::string* StakeLinking::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeLinking::release_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.StakeLinking.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeLinking::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.StakeLinking.id)
}

// .vega.events.v1.StakeLinking.Type type = 2 [json_name = "type"];
inline void StakeLinking::clear_type() {
  type_ = 0;
}
inline ::vega::events::v1::StakeLinking_Type StakeLinking::_internal_type() const {
  return static_cast< ::vega::events::v1::StakeLinking_Type >(type_);
}
inline ::vega::events::v1::StakeLinking_Type StakeLinking::type() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.StakeLinking.type)
  return _internal_type();
}
inline void StakeLinking::_internal_set_type(::vega::events::v1::StakeLinking_Type value) {

  type_ = value;
}
inline void StakeLinking::set_type(::vega::events::v1::StakeLinking_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.StakeLinking.type)
}

// int64 ts = 3 [json_name = "ts"];
inline void StakeLinking::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StakeLinking::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StakeLinking::ts() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.StakeLinking.ts)
  return _internal_ts();
}
inline void StakeLinking::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {

  ts_ = value;
}
inline void StakeLinking::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.StakeLinking.ts)
}

// string party = 4 [json_name = "party"];
inline void StakeLinking::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& StakeLinking::party() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.StakeLinking.party)
  return _internal_party();
}
inline void StakeLinking::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.StakeLinking.party)
}
inline std::string* StakeLinking::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.StakeLinking.party)
  return _internal_mutable_party();
}
inline const std::string& StakeLinking::_internal_party() const {
  return party_.Get();
}
inline void StakeLinking::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeLinking::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.StakeLinking.party)
}
inline void StakeLinking::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.StakeLinking.party)
}
inline void StakeLinking::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.StakeLinking.party)
}
inline std::string* StakeLinking::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeLinking::release_party() {
  // @@protoc_insertion_point(field_release:vega.events.v1.StakeLinking.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeLinking::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.StakeLinking.party)
}

// string amount = 5 [json_name = "amount"];
inline void StakeLinking::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& StakeLinking::amount() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.StakeLinking.amount)
  return _internal_amount();
}
inline void StakeLinking::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.StakeLinking.amount)
}
inline std::string* StakeLinking::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.StakeLinking.amount)
  return _internal_mutable_amount();
}
inline const std::string& StakeLinking::_internal_amount() const {
  return amount_.Get();
}
inline void StakeLinking::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeLinking::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.StakeLinking.amount)
}
inline void StakeLinking::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.StakeLinking.amount)
}
inline void StakeLinking::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.StakeLinking.amount)
}
inline std::string* StakeLinking::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeLinking::release_amount() {
  // @@protoc_insertion_point(field_release:vega.events.v1.StakeLinking.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeLinking::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.StakeLinking.amount)
}

// .vega.events.v1.StakeLinking.Status status = 6 [json_name = "status"];
inline void StakeLinking::clear_status() {
  status_ = 0;
}
inline ::vega::events::v1::StakeLinking_Status StakeLinking::_internal_status() const {
  return static_cast< ::vega::events::v1::StakeLinking_Status >(status_);
}
inline ::vega::events::v1::StakeLinking_Status StakeLinking::status() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.StakeLinking.status)
  return _internal_status();
}
inline void StakeLinking::_internal_set_status(::vega::events::v1::StakeLinking_Status value) {

  status_ = value;
}
inline void StakeLinking::set_status(::vega::events::v1::StakeLinking_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.StakeLinking.status)
}

// int64 finalized_at = 7 [json_name = "finalizedAt"];
inline void StakeLinking::clear_finalized_at() {
  finalized_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StakeLinking::_internal_finalized_at() const {
  return finalized_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StakeLinking::finalized_at() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.StakeLinking.finalized_at)
  return _internal_finalized_at();
}
inline void StakeLinking::_internal_set_finalized_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  finalized_at_ = value;
}
inline void StakeLinking::set_finalized_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_finalized_at(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.StakeLinking.finalized_at)
}

// string tx_hash = 8 [json_name = "txHash"];
inline void StakeLinking::clear_tx_hash() {
  tx_hash_.ClearToEmpty();
}
inline const std::string& StakeLinking::tx_hash() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.StakeLinking.tx_hash)
  return _internal_tx_hash();
}
inline void StakeLinking::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.StakeLinking.tx_hash)
}
inline std::string* StakeLinking::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.StakeLinking.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& StakeLinking::_internal_tx_hash() const {
  return tx_hash_.Get();
}
inline void StakeLinking::_internal_set_tx_hash(const std::string& value) {

  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeLinking::set_tx_hash(std::string&& value) {

  tx_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.StakeLinking.tx_hash)
}
inline void StakeLinking::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.StakeLinking.tx_hash)
}
inline void StakeLinking::set_tx_hash(const char* value,
    size_t size) {

  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.StakeLinking.tx_hash)
}
inline std::string* StakeLinking::_internal_mutable_tx_hash() {

  return tx_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeLinking::release_tx_hash() {
  // @@protoc_insertion_point(field_release:vega.events.v1.StakeLinking.tx_hash)
  return tx_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeLinking::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {

  } else {

  }
  tx_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.StakeLinking.tx_hash)
}

// -------------------------------------------------------------------

// CheckpointEvent

// string hash = 1 [json_name = "hash"];
inline void CheckpointEvent::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& CheckpointEvent::hash() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.CheckpointEvent.hash)
  return _internal_hash();
}
inline void CheckpointEvent::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.CheckpointEvent.hash)
}
inline std::string* CheckpointEvent::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.CheckpointEvent.hash)
  return _internal_mutable_hash();
}
inline const std::string& CheckpointEvent::_internal_hash() const {
  return hash_.Get();
}
inline void CheckpointEvent::_internal_set_hash(const std::string& value) {

  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckpointEvent::set_hash(std::string&& value) {

  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.CheckpointEvent.hash)
}
inline void CheckpointEvent::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.CheckpointEvent.hash)
}
inline void CheckpointEvent::set_hash(const char* value,
    size_t size) {

  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.CheckpointEvent.hash)
}
inline std::string* CheckpointEvent::_internal_mutable_hash() {

  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckpointEvent::release_hash() {
  // @@protoc_insertion_point(field_release:vega.events.v1.CheckpointEvent.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckpointEvent::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {

  } else {

  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.CheckpointEvent.hash)
}

// string block_hash = 2 [json_name = "blockHash"];
inline void CheckpointEvent::clear_block_hash() {
  block_hash_.ClearToEmpty();
}
inline const std::string& CheckpointEvent::block_hash() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.CheckpointEvent.block_hash)
  return _internal_block_hash();
}
inline void CheckpointEvent::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.CheckpointEvent.block_hash)
}
inline std::string* CheckpointEvent::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.CheckpointEvent.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& CheckpointEvent::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void CheckpointEvent::_internal_set_block_hash(const std::string& value) {

  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckpointEvent::set_block_hash(std::string&& value) {

  block_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.CheckpointEvent.block_hash)
}
inline void CheckpointEvent::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.CheckpointEvent.block_hash)
}
inline void CheckpointEvent::set_block_hash(const char* value,
    size_t size) {

  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.CheckpointEvent.block_hash)
}
inline std::string* CheckpointEvent::_internal_mutable_block_hash() {

  return block_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckpointEvent::release_block_hash() {
  // @@protoc_insertion_point(field_release:vega.events.v1.CheckpointEvent.block_hash)
  return block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckpointEvent::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {

  } else {

  }
  block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.CheckpointEvent.block_hash)
}

// uint64 block_height = 3 [json_name = "blockHeight"];
inline void CheckpointEvent::clear_block_height() {
  block_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckpointEvent::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckpointEvent::block_height() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.CheckpointEvent.block_height)
  return _internal_block_height();
}
inline void CheckpointEvent::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  block_height_ = value;
}
inline void CheckpointEvent::set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.CheckpointEvent.block_height)
}

// -------------------------------------------------------------------

// RewardPayoutEvent

// string party = 1 [json_name = "party"];
inline void RewardPayoutEvent::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& RewardPayoutEvent::party() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.RewardPayoutEvent.party)
  return _internal_party();
}
inline void RewardPayoutEvent::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.RewardPayoutEvent.party)
}
inline std::string* RewardPayoutEvent::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.RewardPayoutEvent.party)
  return _internal_mutable_party();
}
inline const std::string& RewardPayoutEvent::_internal_party() const {
  return party_.Get();
}
inline void RewardPayoutEvent::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardPayoutEvent::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.RewardPayoutEvent.party)
}
inline void RewardPayoutEvent::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.RewardPayoutEvent.party)
}
inline void RewardPayoutEvent::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.RewardPayoutEvent.party)
}
inline std::string* RewardPayoutEvent::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardPayoutEvent::release_party() {
  // @@protoc_insertion_point(field_release:vega.events.v1.RewardPayoutEvent.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardPayoutEvent::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.RewardPayoutEvent.party)
}

// string epoch_seq = 2 [json_name = "epochSeq"];
inline void RewardPayoutEvent::clear_epoch_seq() {
  epoch_seq_.ClearToEmpty();
}
inline const std::string& RewardPayoutEvent::epoch_seq() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.RewardPayoutEvent.epoch_seq)
  return _internal_epoch_seq();
}
inline void RewardPayoutEvent::set_epoch_seq(const std::string& value) {
  _internal_set_epoch_seq(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.RewardPayoutEvent.epoch_seq)
}
inline std::string* RewardPayoutEvent::mutable_epoch_seq() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.RewardPayoutEvent.epoch_seq)
  return _internal_mutable_epoch_seq();
}
inline const std::string& RewardPayoutEvent::_internal_epoch_seq() const {
  return epoch_seq_.Get();
}
inline void RewardPayoutEvent::_internal_set_epoch_seq(const std::string& value) {

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardPayoutEvent::set_epoch_seq(std::string&& value) {

  epoch_seq_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.RewardPayoutEvent.epoch_seq)
}
inline void RewardPayoutEvent::set_epoch_seq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.RewardPayoutEvent.epoch_seq)
}
inline void RewardPayoutEvent::set_epoch_seq(const char* value,
    size_t size) {

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.RewardPayoutEvent.epoch_seq)
}
inline std::string* RewardPayoutEvent::_internal_mutable_epoch_seq() {

  return epoch_seq_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardPayoutEvent::release_epoch_seq() {
  // @@protoc_insertion_point(field_release:vega.events.v1.RewardPayoutEvent.epoch_seq)
  return epoch_seq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardPayoutEvent::set_allocated_epoch_seq(std::string* epoch_seq) {
  if (epoch_seq != nullptr) {

  } else {

  }
  epoch_seq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), epoch_seq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.RewardPayoutEvent.epoch_seq)
}

// string asset = 3 [json_name = "asset"];
inline void RewardPayoutEvent::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& RewardPayoutEvent::asset() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.RewardPayoutEvent.asset)
  return _internal_asset();
}
inline void RewardPayoutEvent::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.RewardPayoutEvent.asset)
}
inline std::string* RewardPayoutEvent::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.RewardPayoutEvent.asset)
  return _internal_mutable_asset();
}
inline const std::string& RewardPayoutEvent::_internal_asset() const {
  return asset_.Get();
}
inline void RewardPayoutEvent::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardPayoutEvent::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.RewardPayoutEvent.asset)
}
inline void RewardPayoutEvent::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.RewardPayoutEvent.asset)
}
inline void RewardPayoutEvent::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.RewardPayoutEvent.asset)
}
inline std::string* RewardPayoutEvent::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardPayoutEvent::release_asset() {
  // @@protoc_insertion_point(field_release:vega.events.v1.RewardPayoutEvent.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardPayoutEvent::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.RewardPayoutEvent.asset)
}

// string amount = 4 [json_name = "amount"];
inline void RewardPayoutEvent::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& RewardPayoutEvent::amount() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.RewardPayoutEvent.amount)
  return _internal_amount();
}
inline void RewardPayoutEvent::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.RewardPayoutEvent.amount)
}
inline std::string* RewardPayoutEvent::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.RewardPayoutEvent.amount)
  return _internal_mutable_amount();
}
inline const std::string& RewardPayoutEvent::_internal_amount() const {
  return amount_.Get();
}
inline void RewardPayoutEvent::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardPayoutEvent::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.RewardPayoutEvent.amount)
}
inline void RewardPayoutEvent::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.RewardPayoutEvent.amount)
}
inline void RewardPayoutEvent::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.RewardPayoutEvent.amount)
}
inline std::string* RewardPayoutEvent::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardPayoutEvent::release_amount() {
  // @@protoc_insertion_point(field_release:vega.events.v1.RewardPayoutEvent.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardPayoutEvent::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.RewardPayoutEvent.amount)
}

// string percent_of_total_reward = 5 [json_name = "percentOfTotalReward"];
inline void RewardPayoutEvent::clear_percent_of_total_reward() {
  percent_of_total_reward_.ClearToEmpty();
}
inline const std::string& RewardPayoutEvent::percent_of_total_reward() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.RewardPayoutEvent.percent_of_total_reward)
  return _internal_percent_of_total_reward();
}
inline void RewardPayoutEvent::set_percent_of_total_reward(const std::string& value) {
  _internal_set_percent_of_total_reward(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.RewardPayoutEvent.percent_of_total_reward)
}
inline std::string* RewardPayoutEvent::mutable_percent_of_total_reward() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.RewardPayoutEvent.percent_of_total_reward)
  return _internal_mutable_percent_of_total_reward();
}
inline const std::string& RewardPayoutEvent::_internal_percent_of_total_reward() const {
  return percent_of_total_reward_.Get();
}
inline void RewardPayoutEvent::_internal_set_percent_of_total_reward(const std::string& value) {

  percent_of_total_reward_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardPayoutEvent::set_percent_of_total_reward(std::string&& value) {

  percent_of_total_reward_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.RewardPayoutEvent.percent_of_total_reward)
}
inline void RewardPayoutEvent::set_percent_of_total_reward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  percent_of_total_reward_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.RewardPayoutEvent.percent_of_total_reward)
}
inline void RewardPayoutEvent::set_percent_of_total_reward(const char* value,
    size_t size) {

  percent_of_total_reward_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.RewardPayoutEvent.percent_of_total_reward)
}
inline std::string* RewardPayoutEvent::_internal_mutable_percent_of_total_reward() {

  return percent_of_total_reward_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardPayoutEvent::release_percent_of_total_reward() {
  // @@protoc_insertion_point(field_release:vega.events.v1.RewardPayoutEvent.percent_of_total_reward)
  return percent_of_total_reward_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardPayoutEvent::set_allocated_percent_of_total_reward(std::string* percent_of_total_reward) {
  if (percent_of_total_reward != nullptr) {

  } else {

  }
  percent_of_total_reward_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), percent_of_total_reward,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.RewardPayoutEvent.percent_of_total_reward)
}

// int64 timestamp = 6 [json_name = "timestamp"];
inline void RewardPayoutEvent::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RewardPayoutEvent::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RewardPayoutEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.RewardPayoutEvent.timestamp)
  return _internal_timestamp();
}
inline void RewardPayoutEvent::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void RewardPayoutEvent::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.RewardPayoutEvent.timestamp)
}

// -------------------------------------------------------------------

// DelegationBalanceEvent

// string party = 1 [json_name = "party"];
inline void DelegationBalanceEvent::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& DelegationBalanceEvent::party() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.DelegationBalanceEvent.party)
  return _internal_party();
}
inline void DelegationBalanceEvent::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.DelegationBalanceEvent.party)
}
inline std::string* DelegationBalanceEvent::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.DelegationBalanceEvent.party)
  return _internal_mutable_party();
}
inline const std::string& DelegationBalanceEvent::_internal_party() const {
  return party_.Get();
}
inline void DelegationBalanceEvent::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelegationBalanceEvent::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.DelegationBalanceEvent.party)
}
inline void DelegationBalanceEvent::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.DelegationBalanceEvent.party)
}
inline void DelegationBalanceEvent::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.DelegationBalanceEvent.party)
}
inline std::string* DelegationBalanceEvent::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelegationBalanceEvent::release_party() {
  // @@protoc_insertion_point(field_release:vega.events.v1.DelegationBalanceEvent.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegationBalanceEvent::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.DelegationBalanceEvent.party)
}

// string node_id = 2 [json_name = "nodeId"];
inline void DelegationBalanceEvent::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& DelegationBalanceEvent::node_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.DelegationBalanceEvent.node_id)
  return _internal_node_id();
}
inline void DelegationBalanceEvent::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.DelegationBalanceEvent.node_id)
}
inline std::string* DelegationBalanceEvent::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.DelegationBalanceEvent.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& DelegationBalanceEvent::_internal_node_id() const {
  return node_id_.Get();
}
inline void DelegationBalanceEvent::_internal_set_node_id(const std::string& value) {

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelegationBalanceEvent::set_node_id(std::string&& value) {

  node_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.DelegationBalanceEvent.node_id)
}
inline void DelegationBalanceEvent::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.DelegationBalanceEvent.node_id)
}
inline void DelegationBalanceEvent::set_node_id(const char* value,
    size_t size) {

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.DelegationBalanceEvent.node_id)
}
inline std::string* DelegationBalanceEvent::_internal_mutable_node_id() {

  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelegationBalanceEvent::release_node_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.DelegationBalanceEvent.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegationBalanceEvent::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {

  } else {

  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.DelegationBalanceEvent.node_id)
}

// uint64 amount = 3 [json_name = "amount"];
inline void DelegationBalanceEvent::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DelegationBalanceEvent::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DelegationBalanceEvent::amount() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.DelegationBalanceEvent.amount)
  return _internal_amount();
}
inline void DelegationBalanceEvent::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void DelegationBalanceEvent::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.DelegationBalanceEvent.amount)
}

// string epoch_seq = 4 [json_name = "epochSeq"];
inline void DelegationBalanceEvent::clear_epoch_seq() {
  epoch_seq_.ClearToEmpty();
}
inline const std::string& DelegationBalanceEvent::epoch_seq() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.DelegationBalanceEvent.epoch_seq)
  return _internal_epoch_seq();
}
inline void DelegationBalanceEvent::set_epoch_seq(const std::string& value) {
  _internal_set_epoch_seq(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.DelegationBalanceEvent.epoch_seq)
}
inline std::string* DelegationBalanceEvent::mutable_epoch_seq() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.DelegationBalanceEvent.epoch_seq)
  return _internal_mutable_epoch_seq();
}
inline const std::string& DelegationBalanceEvent::_internal_epoch_seq() const {
  return epoch_seq_.Get();
}
inline void DelegationBalanceEvent::_internal_set_epoch_seq(const std::string& value) {

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelegationBalanceEvent::set_epoch_seq(std::string&& value) {

  epoch_seq_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.DelegationBalanceEvent.epoch_seq)
}
inline void DelegationBalanceEvent::set_epoch_seq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.DelegationBalanceEvent.epoch_seq)
}
inline void DelegationBalanceEvent::set_epoch_seq(const char* value,
    size_t size) {

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.DelegationBalanceEvent.epoch_seq)
}
inline std::string* DelegationBalanceEvent::_internal_mutable_epoch_seq() {

  return epoch_seq_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelegationBalanceEvent::release_epoch_seq() {
  // @@protoc_insertion_point(field_release:vega.events.v1.DelegationBalanceEvent.epoch_seq)
  return epoch_seq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegationBalanceEvent::set_allocated_epoch_seq(std::string* epoch_seq) {
  if (epoch_seq != nullptr) {

  } else {

  }
  epoch_seq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), epoch_seq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.DelegationBalanceEvent.epoch_seq)
}

// -------------------------------------------------------------------

// PendingDelegationBalanceEvent

// string party = 1 [json_name = "party"];
inline void PendingDelegationBalanceEvent::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& PendingDelegationBalanceEvent::party() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.PendingDelegationBalanceEvent.party)
  return _internal_party();
}
inline void PendingDelegationBalanceEvent::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.PendingDelegationBalanceEvent.party)
}
inline std::string* PendingDelegationBalanceEvent::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.PendingDelegationBalanceEvent.party)
  return _internal_mutable_party();
}
inline const std::string& PendingDelegationBalanceEvent::_internal_party() const {
  return party_.Get();
}
inline void PendingDelegationBalanceEvent::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PendingDelegationBalanceEvent::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.PendingDelegationBalanceEvent.party)
}
inline void PendingDelegationBalanceEvent::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.PendingDelegationBalanceEvent.party)
}
inline void PendingDelegationBalanceEvent::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.PendingDelegationBalanceEvent.party)
}
inline std::string* PendingDelegationBalanceEvent::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PendingDelegationBalanceEvent::release_party() {
  // @@protoc_insertion_point(field_release:vega.events.v1.PendingDelegationBalanceEvent.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PendingDelegationBalanceEvent::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.PendingDelegationBalanceEvent.party)
}

// string node_id = 2 [json_name = "nodeId"];
inline void PendingDelegationBalanceEvent::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& PendingDelegationBalanceEvent::node_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.PendingDelegationBalanceEvent.node_id)
  return _internal_node_id();
}
inline void PendingDelegationBalanceEvent::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.PendingDelegationBalanceEvent.node_id)
}
inline std::string* PendingDelegationBalanceEvent::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.PendingDelegationBalanceEvent.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& PendingDelegationBalanceEvent::_internal_node_id() const {
  return node_id_.Get();
}
inline void PendingDelegationBalanceEvent::_internal_set_node_id(const std::string& value) {

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PendingDelegationBalanceEvent::set_node_id(std::string&& value) {

  node_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.PendingDelegationBalanceEvent.node_id)
}
inline void PendingDelegationBalanceEvent::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.PendingDelegationBalanceEvent.node_id)
}
inline void PendingDelegationBalanceEvent::set_node_id(const char* value,
    size_t size) {

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.PendingDelegationBalanceEvent.node_id)
}
inline std::string* PendingDelegationBalanceEvent::_internal_mutable_node_id() {

  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PendingDelegationBalanceEvent::release_node_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.PendingDelegationBalanceEvent.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PendingDelegationBalanceEvent::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {

  } else {

  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.PendingDelegationBalanceEvent.node_id)
}

// uint64 delegation_amount = 3 [json_name = "delegationAmount"];
inline void PendingDelegationBalanceEvent::clear_delegation_amount() {
  delegation_amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PendingDelegationBalanceEvent::_internal_delegation_amount() const {
  return delegation_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PendingDelegationBalanceEvent::delegation_amount() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.PendingDelegationBalanceEvent.delegation_amount)
  return _internal_delegation_amount();
}
inline void PendingDelegationBalanceEvent::_internal_set_delegation_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  delegation_amount_ = value;
}
inline void PendingDelegationBalanceEvent::set_delegation_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_delegation_amount(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.PendingDelegationBalanceEvent.delegation_amount)
}

// uint64 undelegation_amount = 4 [json_name = "undelegationAmount"];
inline void PendingDelegationBalanceEvent::clear_undelegation_amount() {
  undelegation_amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PendingDelegationBalanceEvent::_internal_undelegation_amount() const {
  return undelegation_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PendingDelegationBalanceEvent::undelegation_amount() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.PendingDelegationBalanceEvent.undelegation_amount)
  return _internal_undelegation_amount();
}
inline void PendingDelegationBalanceEvent::_internal_set_undelegation_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  undelegation_amount_ = value;
}
inline void PendingDelegationBalanceEvent::set_undelegation_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_undelegation_amount(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.PendingDelegationBalanceEvent.undelegation_amount)
}

// string epoch_seq = 5 [json_name = "epochSeq"];
inline void PendingDelegationBalanceEvent::clear_epoch_seq() {
  epoch_seq_.ClearToEmpty();
}
inline const std::string& PendingDelegationBalanceEvent::epoch_seq() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.PendingDelegationBalanceEvent.epoch_seq)
  return _internal_epoch_seq();
}
inline void PendingDelegationBalanceEvent::set_epoch_seq(const std::string& value) {
  _internal_set_epoch_seq(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.PendingDelegationBalanceEvent.epoch_seq)
}
inline std::string* PendingDelegationBalanceEvent::mutable_epoch_seq() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.PendingDelegationBalanceEvent.epoch_seq)
  return _internal_mutable_epoch_seq();
}
inline const std::string& PendingDelegationBalanceEvent::_internal_epoch_seq() const {
  return epoch_seq_.Get();
}
inline void PendingDelegationBalanceEvent::_internal_set_epoch_seq(const std::string& value) {

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PendingDelegationBalanceEvent::set_epoch_seq(std::string&& value) {

  epoch_seq_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.PendingDelegationBalanceEvent.epoch_seq)
}
inline void PendingDelegationBalanceEvent::set_epoch_seq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.PendingDelegationBalanceEvent.epoch_seq)
}
inline void PendingDelegationBalanceEvent::set_epoch_seq(const char* value,
    size_t size) {

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.PendingDelegationBalanceEvent.epoch_seq)
}
inline std::string* PendingDelegationBalanceEvent::_internal_mutable_epoch_seq() {

  return epoch_seq_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PendingDelegationBalanceEvent::release_epoch_seq() {
  // @@protoc_insertion_point(field_release:vega.events.v1.PendingDelegationBalanceEvent.epoch_seq)
  return epoch_seq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PendingDelegationBalanceEvent::set_allocated_epoch_seq(std::string* epoch_seq) {
  if (epoch_seq != nullptr) {

  } else {

  }
  epoch_seq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), epoch_seq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.PendingDelegationBalanceEvent.epoch_seq)
}

// -------------------------------------------------------------------

// MarketEvent

// string market_id = 1 [json_name = "marketId"];
inline void MarketEvent::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketEvent::market_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.MarketEvent.market_id)
  return _internal_market_id();
}
inline void MarketEvent::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.MarketEvent.market_id)
}
inline std::string* MarketEvent::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.MarketEvent.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketEvent::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketEvent::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketEvent::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.MarketEvent.market_id)
}
inline void MarketEvent::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.MarketEvent.market_id)
}
inline void MarketEvent::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.MarketEvent.market_id)
}
inline std::string* MarketEvent::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketEvent::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.MarketEvent.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketEvent::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.MarketEvent.market_id)
}

// string payload = 2 [json_name = "payload"];
inline void MarketEvent::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& MarketEvent::payload() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.MarketEvent.payload)
  return _internal_payload();
}
inline void MarketEvent::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.MarketEvent.payload)
}
inline std::string* MarketEvent::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.MarketEvent.payload)
  return _internal_mutable_payload();
}
inline const std::string& MarketEvent::_internal_payload() const {
  return payload_.Get();
}
inline void MarketEvent::_internal_set_payload(const std::string& value) {

  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketEvent::set_payload(std::string&& value) {

  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.MarketEvent.payload)
}
inline void MarketEvent::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.MarketEvent.payload)
}
inline void MarketEvent::set_payload(const char* value,
    size_t size) {

  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.MarketEvent.payload)
}
inline std::string* MarketEvent::_internal_mutable_payload() {

  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketEvent::release_payload() {
  // @@protoc_insertion_point(field_release:vega.events.v1.MarketEvent.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketEvent::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {

  } else {

  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.MarketEvent.payload)
}

// -------------------------------------------------------------------

// TxErrorEvent

// string party_id = 1 [json_name = "partyId"];
inline void TxErrorEvent::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& TxErrorEvent::party_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TxErrorEvent.party_id)
  return _internal_party_id();
}
inline void TxErrorEvent::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.TxErrorEvent.party_id)
}
inline std::string* TxErrorEvent::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.TxErrorEvent.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& TxErrorEvent::_internal_party_id() const {
  return party_id_.Get();
}
inline void TxErrorEvent::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TxErrorEvent::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.TxErrorEvent.party_id)
}
inline void TxErrorEvent::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.TxErrorEvent.party_id)
}
inline void TxErrorEvent::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.TxErrorEvent.party_id)
}
inline std::string* TxErrorEvent::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TxErrorEvent::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.TxErrorEvent.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TxErrorEvent::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.TxErrorEvent.party_id)
}

// string err_msg = 2 [json_name = "errMsg"];
inline void TxErrorEvent::clear_err_msg() {
  err_msg_.ClearToEmpty();
}
inline const std::string& TxErrorEvent::err_msg() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TxErrorEvent.err_msg)
  return _internal_err_msg();
}
inline void TxErrorEvent::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.TxErrorEvent.err_msg)
}
inline std::string* TxErrorEvent::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.TxErrorEvent.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& TxErrorEvent::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void TxErrorEvent::_internal_set_err_msg(const std::string& value) {

  err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TxErrorEvent::set_err_msg(std::string&& value) {

  err_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.TxErrorEvent.err_msg)
}
inline void TxErrorEvent::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.TxErrorEvent.err_msg)
}
inline void TxErrorEvent::set_err_msg(const char* value,
    size_t size) {

  err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.TxErrorEvent.err_msg)
}
inline std::string* TxErrorEvent::_internal_mutable_err_msg() {

  return err_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TxErrorEvent::release_err_msg() {
  // @@protoc_insertion_point(field_release:vega.events.v1.TxErrorEvent.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TxErrorEvent::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {

  } else {

  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.TxErrorEvent.err_msg)
}

// .vega.commands.v1.OrderSubmission order_submission = 101 [json_name = "orderSubmission"];
inline bool TxErrorEvent::_internal_has_order_submission() const {
  return transaction_case() == kOrderSubmission;
}
inline bool TxErrorEvent::has_order_submission() const {
  return _internal_has_order_submission();
}
inline void TxErrorEvent::set_has_order_submission() {
  _oneof_case_[0] = kOrderSubmission;
}
inline ::vega::commands::v1::OrderSubmission* TxErrorEvent::release_order_submission() {
  // @@protoc_insertion_point(field_release:vega.events.v1.TxErrorEvent.order_submission)
  if (_internal_has_order_submission()) {
    clear_has_transaction();
      ::vega::commands::v1::OrderSubmission* temp = transaction_.order_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.order_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::OrderSubmission& TxErrorEvent::_internal_order_submission() const {
  return _internal_has_order_submission()
      ? *transaction_.order_submission_
      : reinterpret_cast< ::vega::commands::v1::OrderSubmission&>(::vega::commands::v1::_OrderSubmission_default_instance_);
}
inline const ::vega::commands::v1::OrderSubmission& TxErrorEvent::order_submission() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TxErrorEvent.order_submission)
  return _internal_order_submission();
}
inline ::vega::commands::v1::OrderSubmission* TxErrorEvent::unsafe_arena_release_order_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.TxErrorEvent.order_submission)
  if (_internal_has_order_submission()) {
    clear_has_transaction();
    ::vega::commands::v1::OrderSubmission* temp = transaction_.order_submission_;
    transaction_.order_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_order_submission(::vega::commands::v1::OrderSubmission* order_submission) {
  clear_transaction();
  if (order_submission) {
    set_has_order_submission();
    transaction_.order_submission_ = order_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.TxErrorEvent.order_submission)
}
inline ::vega::commands::v1::OrderSubmission* TxErrorEvent::_internal_mutable_order_submission() {
  if (!_internal_has_order_submission()) {
    clear_transaction();
    set_has_order_submission();
    transaction_.order_submission_ = CreateMaybeMessage< ::vega::commands::v1::OrderSubmission >(GetArena());
  }
  return transaction_.order_submission_;
}
inline ::vega::commands::v1::OrderSubmission* TxErrorEvent::mutable_order_submission() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.TxErrorEvent.order_submission)
  return _internal_mutable_order_submission();
}

// .vega.commands.v1.OrderAmendment order_amendment = 102 [json_name = "orderAmendment"];
inline bool TxErrorEvent::_internal_has_order_amendment() const {
  return transaction_case() == kOrderAmendment;
}
inline bool TxErrorEvent::has_order_amendment() const {
  return _internal_has_order_amendment();
}
inline void TxErrorEvent::set_has_order_amendment() {
  _oneof_case_[0] = kOrderAmendment;
}
inline ::vega::commands::v1::OrderAmendment* TxErrorEvent::release_order_amendment() {
  // @@protoc_insertion_point(field_release:vega.events.v1.TxErrorEvent.order_amendment)
  if (_internal_has_order_amendment()) {
    clear_has_transaction();
      ::vega::commands::v1::OrderAmendment* temp = transaction_.order_amendment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.order_amendment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::OrderAmendment& TxErrorEvent::_internal_order_amendment() const {
  return _internal_has_order_amendment()
      ? *transaction_.order_amendment_
      : reinterpret_cast< ::vega::commands::v1::OrderAmendment&>(::vega::commands::v1::_OrderAmendment_default_instance_);
}
inline const ::vega::commands::v1::OrderAmendment& TxErrorEvent::order_amendment() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TxErrorEvent.order_amendment)
  return _internal_order_amendment();
}
inline ::vega::commands::v1::OrderAmendment* TxErrorEvent::unsafe_arena_release_order_amendment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.TxErrorEvent.order_amendment)
  if (_internal_has_order_amendment()) {
    clear_has_transaction();
    ::vega::commands::v1::OrderAmendment* temp = transaction_.order_amendment_;
    transaction_.order_amendment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_order_amendment(::vega::commands::v1::OrderAmendment* order_amendment) {
  clear_transaction();
  if (order_amendment) {
    set_has_order_amendment();
    transaction_.order_amendment_ = order_amendment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.TxErrorEvent.order_amendment)
}
inline ::vega::commands::v1::OrderAmendment* TxErrorEvent::_internal_mutable_order_amendment() {
  if (!_internal_has_order_amendment()) {
    clear_transaction();
    set_has_order_amendment();
    transaction_.order_amendment_ = CreateMaybeMessage< ::vega::commands::v1::OrderAmendment >(GetArena());
  }
  return transaction_.order_amendment_;
}
inline ::vega::commands::v1::OrderAmendment* TxErrorEvent::mutable_order_amendment() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.TxErrorEvent.order_amendment)
  return _internal_mutable_order_amendment();
}

// .vega.commands.v1.OrderCancellation order_cancellation = 103 [json_name = "orderCancellation"];
inline bool TxErrorEvent::_internal_has_order_cancellation() const {
  return transaction_case() == kOrderCancellation;
}
inline bool TxErrorEvent::has_order_cancellation() const {
  return _internal_has_order_cancellation();
}
inline void TxErrorEvent::set_has_order_cancellation() {
  _oneof_case_[0] = kOrderCancellation;
}
inline ::vega::commands::v1::OrderCancellation* TxErrorEvent::release_order_cancellation() {
  // @@protoc_insertion_point(field_release:vega.events.v1.TxErrorEvent.order_cancellation)
  if (_internal_has_order_cancellation()) {
    clear_has_transaction();
      ::vega::commands::v1::OrderCancellation* temp = transaction_.order_cancellation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.order_cancellation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::OrderCancellation& TxErrorEvent::_internal_order_cancellation() const {
  return _internal_has_order_cancellation()
      ? *transaction_.order_cancellation_
      : reinterpret_cast< ::vega::commands::v1::OrderCancellation&>(::vega::commands::v1::_OrderCancellation_default_instance_);
}
inline const ::vega::commands::v1::OrderCancellation& TxErrorEvent::order_cancellation() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TxErrorEvent.order_cancellation)
  return _internal_order_cancellation();
}
inline ::vega::commands::v1::OrderCancellation* TxErrorEvent::unsafe_arena_release_order_cancellation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.TxErrorEvent.order_cancellation)
  if (_internal_has_order_cancellation()) {
    clear_has_transaction();
    ::vega::commands::v1::OrderCancellation* temp = transaction_.order_cancellation_;
    transaction_.order_cancellation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_order_cancellation(::vega::commands::v1::OrderCancellation* order_cancellation) {
  clear_transaction();
  if (order_cancellation) {
    set_has_order_cancellation();
    transaction_.order_cancellation_ = order_cancellation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.TxErrorEvent.order_cancellation)
}
inline ::vega::commands::v1::OrderCancellation* TxErrorEvent::_internal_mutable_order_cancellation() {
  if (!_internal_has_order_cancellation()) {
    clear_transaction();
    set_has_order_cancellation();
    transaction_.order_cancellation_ = CreateMaybeMessage< ::vega::commands::v1::OrderCancellation >(GetArena());
  }
  return transaction_.order_cancellation_;
}
inline ::vega::commands::v1::OrderCancellation* TxErrorEvent::mutable_order_cancellation() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.TxErrorEvent.order_cancellation)
  return _internal_mutable_order_cancellation();
}

// .vega.commands.v1.ProposalSubmission proposal = 104 [json_name = "proposal"];
inline bool TxErrorEvent::_internal_has_proposal() const {
  return transaction_case() == kProposal;
}
inline bool TxErrorEvent::has_proposal() const {
  return _internal_has_proposal();
}
inline void TxErrorEvent::set_has_proposal() {
  _oneof_case_[0] = kProposal;
}
inline ::vega::commands::v1::ProposalSubmission* TxErrorEvent::release_proposal() {
  // @@protoc_insertion_point(field_release:vega.events.v1.TxErrorEvent.proposal)
  if (_internal_has_proposal()) {
    clear_has_transaction();
      ::vega::commands::v1::ProposalSubmission* temp = transaction_.proposal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::ProposalSubmission& TxErrorEvent::_internal_proposal() const {
  return _internal_has_proposal()
      ? *transaction_.proposal_
      : reinterpret_cast< ::vega::commands::v1::ProposalSubmission&>(::vega::commands::v1::_ProposalSubmission_default_instance_);
}
inline const ::vega::commands::v1::ProposalSubmission& TxErrorEvent::proposal() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TxErrorEvent.proposal)
  return _internal_proposal();
}
inline ::vega::commands::v1::ProposalSubmission* TxErrorEvent::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.TxErrorEvent.proposal)
  if (_internal_has_proposal()) {
    clear_has_transaction();
    ::vega::commands::v1::ProposalSubmission* temp = transaction_.proposal_;
    transaction_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_proposal(::vega::commands::v1::ProposalSubmission* proposal) {
  clear_transaction();
  if (proposal) {
    set_has_proposal();
    transaction_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.TxErrorEvent.proposal)
}
inline ::vega::commands::v1::ProposalSubmission* TxErrorEvent::_internal_mutable_proposal() {
  if (!_internal_has_proposal()) {
    clear_transaction();
    set_has_proposal();
    transaction_.proposal_ = CreateMaybeMessage< ::vega::commands::v1::ProposalSubmission >(GetArena());
  }
  return transaction_.proposal_;
}
inline ::vega::commands::v1::ProposalSubmission* TxErrorEvent::mutable_proposal() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.TxErrorEvent.proposal)
  return _internal_mutable_proposal();
}

// .vega.commands.v1.VoteSubmission vote_submission = 105 [json_name = "voteSubmission"];
inline bool TxErrorEvent::_internal_has_vote_submission() const {
  return transaction_case() == kVoteSubmission;
}
inline bool TxErrorEvent::has_vote_submission() const {
  return _internal_has_vote_submission();
}
inline void TxErrorEvent::set_has_vote_submission() {
  _oneof_case_[0] = kVoteSubmission;
}
inline ::vega::commands::v1::VoteSubmission* TxErrorEvent::release_vote_submission() {
  // @@protoc_insertion_point(field_release:vega.events.v1.TxErrorEvent.vote_submission)
  if (_internal_has_vote_submission()) {
    clear_has_transaction();
      ::vega::commands::v1::VoteSubmission* temp = transaction_.vote_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.vote_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::VoteSubmission& TxErrorEvent::_internal_vote_submission() const {
  return _internal_has_vote_submission()
      ? *transaction_.vote_submission_
      : reinterpret_cast< ::vega::commands::v1::VoteSubmission&>(::vega::commands::v1::_VoteSubmission_default_instance_);
}
inline const ::vega::commands::v1::VoteSubmission& TxErrorEvent::vote_submission() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TxErrorEvent.vote_submission)
  return _internal_vote_submission();
}
inline ::vega::commands::v1::VoteSubmission* TxErrorEvent::unsafe_arena_release_vote_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.TxErrorEvent.vote_submission)
  if (_internal_has_vote_submission()) {
    clear_has_transaction();
    ::vega::commands::v1::VoteSubmission* temp = transaction_.vote_submission_;
    transaction_.vote_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_vote_submission(::vega::commands::v1::VoteSubmission* vote_submission) {
  clear_transaction();
  if (vote_submission) {
    set_has_vote_submission();
    transaction_.vote_submission_ = vote_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.TxErrorEvent.vote_submission)
}
inline ::vega::commands::v1::VoteSubmission* TxErrorEvent::_internal_mutable_vote_submission() {
  if (!_internal_has_vote_submission()) {
    clear_transaction();
    set_has_vote_submission();
    transaction_.vote_submission_ = CreateMaybeMessage< ::vega::commands::v1::VoteSubmission >(GetArena());
  }
  return transaction_.vote_submission_;
}
inline ::vega::commands::v1::VoteSubmission* TxErrorEvent::mutable_vote_submission() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.TxErrorEvent.vote_submission)
  return _internal_mutable_vote_submission();
}

// .vega.commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 106 [json_name = "liquidityProvisionSubmission"];
inline bool TxErrorEvent::_internal_has_liquidity_provision_submission() const {
  return transaction_case() == kLiquidityProvisionSubmission;
}
inline bool TxErrorEvent::has_liquidity_provision_submission() const {
  return _internal_has_liquidity_provision_submission();
}
inline void TxErrorEvent::set_has_liquidity_provision_submission() {
  _oneof_case_[0] = kLiquidityProvisionSubmission;
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* TxErrorEvent::release_liquidity_provision_submission() {
  // @@protoc_insertion_point(field_release:vega.events.v1.TxErrorEvent.liquidity_provision_submission)
  if (_internal_has_liquidity_provision_submission()) {
    clear_has_transaction();
      ::vega::commands::v1::LiquidityProvisionSubmission* temp = transaction_.liquidity_provision_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.liquidity_provision_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::LiquidityProvisionSubmission& TxErrorEvent::_internal_liquidity_provision_submission() const {
  return _internal_has_liquidity_provision_submission()
      ? *transaction_.liquidity_provision_submission_
      : reinterpret_cast< ::vega::commands::v1::LiquidityProvisionSubmission&>(::vega::commands::v1::_LiquidityProvisionSubmission_default_instance_);
}
inline const ::vega::commands::v1::LiquidityProvisionSubmission& TxErrorEvent::liquidity_provision_submission() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TxErrorEvent.liquidity_provision_submission)
  return _internal_liquidity_provision_submission();
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* TxErrorEvent::unsafe_arena_release_liquidity_provision_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.TxErrorEvent.liquidity_provision_submission)
  if (_internal_has_liquidity_provision_submission()) {
    clear_has_transaction();
    ::vega::commands::v1::LiquidityProvisionSubmission* temp = transaction_.liquidity_provision_submission_;
    transaction_.liquidity_provision_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_liquidity_provision_submission(::vega::commands::v1::LiquidityProvisionSubmission* liquidity_provision_submission) {
  clear_transaction();
  if (liquidity_provision_submission) {
    set_has_liquidity_provision_submission();
    transaction_.liquidity_provision_submission_ = liquidity_provision_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.TxErrorEvent.liquidity_provision_submission)
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* TxErrorEvent::_internal_mutable_liquidity_provision_submission() {
  if (!_internal_has_liquidity_provision_submission()) {
    clear_transaction();
    set_has_liquidity_provision_submission();
    transaction_.liquidity_provision_submission_ = CreateMaybeMessage< ::vega::commands::v1::LiquidityProvisionSubmission >(GetArena());
  }
  return transaction_.liquidity_provision_submission_;
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* TxErrorEvent::mutable_liquidity_provision_submission() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.TxErrorEvent.liquidity_provision_submission)
  return _internal_mutable_liquidity_provision_submission();
}

// .vega.commands.v1.WithdrawSubmission withdraw_submission = 107 [json_name = "withdrawSubmission"];
inline bool TxErrorEvent::_internal_has_withdraw_submission() const {
  return transaction_case() == kWithdrawSubmission;
}
inline bool TxErrorEvent::has_withdraw_submission() const {
  return _internal_has_withdraw_submission();
}
inline void TxErrorEvent::set_has_withdraw_submission() {
  _oneof_case_[0] = kWithdrawSubmission;
}
inline ::vega::commands::v1::WithdrawSubmission* TxErrorEvent::release_withdraw_submission() {
  // @@protoc_insertion_point(field_release:vega.events.v1.TxErrorEvent.withdraw_submission)
  if (_internal_has_withdraw_submission()) {
    clear_has_transaction();
      ::vega::commands::v1::WithdrawSubmission* temp = transaction_.withdraw_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.withdraw_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::WithdrawSubmission& TxErrorEvent::_internal_withdraw_submission() const {
  return _internal_has_withdraw_submission()
      ? *transaction_.withdraw_submission_
      : reinterpret_cast< ::vega::commands::v1::WithdrawSubmission&>(::vega::commands::v1::_WithdrawSubmission_default_instance_);
}
inline const ::vega::commands::v1::WithdrawSubmission& TxErrorEvent::withdraw_submission() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TxErrorEvent.withdraw_submission)
  return _internal_withdraw_submission();
}
inline ::vega::commands::v1::WithdrawSubmission* TxErrorEvent::unsafe_arena_release_withdraw_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.TxErrorEvent.withdraw_submission)
  if (_internal_has_withdraw_submission()) {
    clear_has_transaction();
    ::vega::commands::v1::WithdrawSubmission* temp = transaction_.withdraw_submission_;
    transaction_.withdraw_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_withdraw_submission(::vega::commands::v1::WithdrawSubmission* withdraw_submission) {
  clear_transaction();
  if (withdraw_submission) {
    set_has_withdraw_submission();
    transaction_.withdraw_submission_ = withdraw_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.TxErrorEvent.withdraw_submission)
}
inline ::vega::commands::v1::WithdrawSubmission* TxErrorEvent::_internal_mutable_withdraw_submission() {
  if (!_internal_has_withdraw_submission()) {
    clear_transaction();
    set_has_withdraw_submission();
    transaction_.withdraw_submission_ = CreateMaybeMessage< ::vega::commands::v1::WithdrawSubmission >(GetArena());
  }
  return transaction_.withdraw_submission_;
}
inline ::vega::commands::v1::WithdrawSubmission* TxErrorEvent::mutable_withdraw_submission() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.TxErrorEvent.withdraw_submission)
  return _internal_mutable_withdraw_submission();
}

inline bool TxErrorEvent::has_transaction() const {
  return transaction_case() != TRANSACTION_NOT_SET;
}
inline void TxErrorEvent::clear_has_transaction() {
  _oneof_case_[0] = TRANSACTION_NOT_SET;
}
inline TxErrorEvent::TransactionCase TxErrorEvent::transaction_case() const {
  return TxErrorEvent::TransactionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimeUpdate

// int64 timestamp = 1 [json_name = "timestamp"];
inline void TimeUpdate::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeUpdate::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TimeUpdate.timestamp)
  return _internal_timestamp();
}
inline void TimeUpdate::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void TimeUpdate::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.TimeUpdate.timestamp)
}

// -------------------------------------------------------------------

// EpochEvent

// uint64 seq = 1 [json_name = "seq"];
inline void EpochEvent::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EpochEvent::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EpochEvent::seq() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.EpochEvent.seq)
  return _internal_seq();
}
inline void EpochEvent::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  seq_ = value;
}
inline void EpochEvent::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.EpochEvent.seq)
}

// int64 start_time = 2 [json_name = "startTime"];
inline void EpochEvent::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EpochEvent::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EpochEvent::start_time() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.EpochEvent.start_time)
  return _internal_start_time();
}
inline void EpochEvent::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  start_time_ = value;
}
inline void EpochEvent::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.EpochEvent.start_time)
}

// int64 expire_time = 3 [json_name = "expireTime"];
inline void EpochEvent::clear_expire_time() {
  expire_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EpochEvent::_internal_expire_time() const {
  return expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EpochEvent::expire_time() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.EpochEvent.expire_time)
  return _internal_expire_time();
}
inline void EpochEvent::_internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  expire_time_ = value;
}
inline void EpochEvent::set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expire_time(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.EpochEvent.expire_time)
}

// int64 end_time = 4 [json_name = "endTime"];
inline void EpochEvent::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EpochEvent::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EpochEvent::end_time() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.EpochEvent.end_time)
  return _internal_end_time();
}
inline void EpochEvent::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  end_time_ = value;
}
inline void EpochEvent::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.EpochEvent.end_time)
}

// -------------------------------------------------------------------

// TransferResponses

// repeated .vega.TransferResponse responses = 1 [json_name = "responses"];
inline int TransferResponses::_internal_responses_size() const {
  return responses_.size();
}
inline int TransferResponses::responses_size() const {
  return _internal_responses_size();
}
inline ::vega::TransferResponse* TransferResponses::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.TransferResponses.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferResponse >*
TransferResponses::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:vega.events.v1.TransferResponses.responses)
  return &responses_;
}
inline const ::vega::TransferResponse& TransferResponses::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::vega::TransferResponse& TransferResponses::responses(int index) const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TransferResponses.responses)
  return _internal_responses(index);
}
inline ::vega::TransferResponse* TransferResponses::_internal_add_responses() {
  return responses_.Add();
}
inline ::vega::TransferResponse* TransferResponses::add_responses() {
  // @@protoc_insertion_point(field_add:vega.events.v1.TransferResponses.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferResponse >&
TransferResponses::responses() const {
  // @@protoc_insertion_point(field_list:vega.events.v1.TransferResponses.responses)
  return responses_;
}

// -------------------------------------------------------------------

// PositionResolution

// string market_id = 1 [json_name = "marketId"];
inline void PositionResolution::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& PositionResolution::market_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.PositionResolution.market_id)
  return _internal_market_id();
}
inline void PositionResolution::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.PositionResolution.market_id)
}
inline std::string* PositionResolution::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.PositionResolution.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& PositionResolution::_internal_market_id() const {
  return market_id_.Get();
}
inline void PositionResolution::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionResolution::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.PositionResolution.market_id)
}
inline void PositionResolution::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.PositionResolution.market_id)
}
inline void PositionResolution::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.PositionResolution.market_id)
}
inline std::string* PositionResolution::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionResolution::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.PositionResolution.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionResolution::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.PositionResolution.market_id)
}

// int64 distressed = 2 [json_name = "distressed"];
inline void PositionResolution::clear_distressed() {
  distressed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionResolution::_internal_distressed() const {
  return distressed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionResolution::distressed() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.PositionResolution.distressed)
  return _internal_distressed();
}
inline void PositionResolution::_internal_set_distressed(::PROTOBUF_NAMESPACE_ID::int64 value) {

  distressed_ = value;
}
inline void PositionResolution::set_distressed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_distressed(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.PositionResolution.distressed)
}

// int64 closed = 3 [json_name = "closed"];
inline void PositionResolution::clear_closed() {
  closed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionResolution::_internal_closed() const {
  return closed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionResolution::closed() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.PositionResolution.closed)
  return _internal_closed();
}
inline void PositionResolution::_internal_set_closed(::PROTOBUF_NAMESPACE_ID::int64 value) {

  closed_ = value;
}
inline void PositionResolution::set_closed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_closed(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.PositionResolution.closed)
}

// uint64 mark_price = 4 [json_name = "markPrice"];
inline void PositionResolution::clear_mark_price() {
  mark_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionResolution::_internal_mark_price() const {
  return mark_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionResolution::mark_price() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.PositionResolution.mark_price)
  return _internal_mark_price();
}
inline void PositionResolution::_internal_set_mark_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  mark_price_ = value;
}
inline void PositionResolution::set_mark_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mark_price(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.PositionResolution.mark_price)
}

// -------------------------------------------------------------------

// LossSocialization

// string market_id = 1 [json_name = "marketId"];
inline void LossSocialization::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& LossSocialization::market_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.LossSocialization.market_id)
  return _internal_market_id();
}
inline void LossSocialization::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.LossSocialization.market_id)
}
inline std::string* LossSocialization::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.LossSocialization.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& LossSocialization::_internal_market_id() const {
  return market_id_.Get();
}
inline void LossSocialization::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LossSocialization::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.LossSocialization.market_id)
}
inline void LossSocialization::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.LossSocialization.market_id)
}
inline void LossSocialization::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.LossSocialization.market_id)
}
inline std::string* LossSocialization::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LossSocialization::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.LossSocialization.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LossSocialization::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.LossSocialization.market_id)
}

// string party_id = 2 [json_name = "partyId"];
inline void LossSocialization::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& LossSocialization::party_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.LossSocialization.party_id)
  return _internal_party_id();
}
inline void LossSocialization::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.LossSocialization.party_id)
}
inline std::string* LossSocialization::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.LossSocialization.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& LossSocialization::_internal_party_id() const {
  return party_id_.Get();
}
inline void LossSocialization::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LossSocialization::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.LossSocialization.party_id)
}
inline void LossSocialization::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.LossSocialization.party_id)
}
inline void LossSocialization::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.LossSocialization.party_id)
}
inline std::string* LossSocialization::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LossSocialization::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.LossSocialization.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LossSocialization::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.LossSocialization.party_id)
}

// int64 amount = 3 [json_name = "amount"];
inline void LossSocialization::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LossSocialization::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LossSocialization::amount() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.LossSocialization.amount)
  return _internal_amount();
}
inline void LossSocialization::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {

  amount_ = value;
}
inline void LossSocialization::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.LossSocialization.amount)
}

// -------------------------------------------------------------------

// TradeSettlement

// int64 size = 1 [json_name = "size"];
inline void TradeSettlement::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeSettlement::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeSettlement::size() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TradeSettlement.size)
  return _internal_size();
}
inline void TradeSettlement::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {

  size_ = value;
}
inline void TradeSettlement::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.TradeSettlement.size)
}

// uint64 price = 2 [json_name = "price"];
inline void TradeSettlement::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeSettlement::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeSettlement::price() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.TradeSettlement.price)
  return _internal_price();
}
inline void TradeSettlement::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void TradeSettlement::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.TradeSettlement.price)
}

// -------------------------------------------------------------------

// SettlePosition

// string market_id = 1 [json_name = "marketId"];
inline void SettlePosition::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& SettlePosition::market_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.SettlePosition.market_id)
  return _internal_market_id();
}
inline void SettlePosition::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.SettlePosition.market_id)
}
inline std::string* SettlePosition::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.SettlePosition.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& SettlePosition::_internal_market_id() const {
  return market_id_.Get();
}
inline void SettlePosition::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SettlePosition::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.SettlePosition.market_id)
}
inline void SettlePosition::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.SettlePosition.market_id)
}
inline void SettlePosition::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.SettlePosition.market_id)
}
inline std::string* SettlePosition::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettlePosition::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.SettlePosition.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettlePosition::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.SettlePosition.market_id)
}

// string party_id = 2 [json_name = "partyId"];
inline void SettlePosition::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& SettlePosition::party_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.SettlePosition.party_id)
  return _internal_party_id();
}
inline void SettlePosition::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.SettlePosition.party_id)
}
inline std::string* SettlePosition::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.SettlePosition.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& SettlePosition::_internal_party_id() const {
  return party_id_.Get();
}
inline void SettlePosition::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SettlePosition::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.SettlePosition.party_id)
}
inline void SettlePosition::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.SettlePosition.party_id)
}
inline void SettlePosition::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.SettlePosition.party_id)
}
inline std::string* SettlePosition::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettlePosition::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.SettlePosition.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettlePosition::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.SettlePosition.party_id)
}

// uint64 price = 3 [json_name = "price"];
inline void SettlePosition::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettlePosition::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettlePosition::price() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.SettlePosition.price)
  return _internal_price();
}
inline void SettlePosition::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void SettlePosition::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.SettlePosition.price)
}

// repeated .vega.events.v1.TradeSettlement trade_settlements = 4 [json_name = "tradeSettlements"];
inline int SettlePosition::_internal_trade_settlements_size() const {
  return trade_settlements_.size();
}
inline int SettlePosition::trade_settlements_size() const {
  return _internal_trade_settlements_size();
}
inline void SettlePosition::clear_trade_settlements() {
  trade_settlements_.Clear();
}
inline ::vega::events::v1::TradeSettlement* SettlePosition::mutable_trade_settlements(int index) {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.SettlePosition.trade_settlements)
  return trade_settlements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::TradeSettlement >*
SettlePosition::mutable_trade_settlements() {
  // @@protoc_insertion_point(field_mutable_list:vega.events.v1.SettlePosition.trade_settlements)
  return &trade_settlements_;
}
inline const ::vega::events::v1::TradeSettlement& SettlePosition::_internal_trade_settlements(int index) const {
  return trade_settlements_.Get(index);
}
inline const ::vega::events::v1::TradeSettlement& SettlePosition::trade_settlements(int index) const {
  // @@protoc_insertion_point(field_get:vega.events.v1.SettlePosition.trade_settlements)
  return _internal_trade_settlements(index);
}
inline ::vega::events::v1::TradeSettlement* SettlePosition::_internal_add_trade_settlements() {
  return trade_settlements_.Add();
}
inline ::vega::events::v1::TradeSettlement* SettlePosition::add_trade_settlements() {
  // @@protoc_insertion_point(field_add:vega.events.v1.SettlePosition.trade_settlements)
  return _internal_add_trade_settlements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::TradeSettlement >&
SettlePosition::trade_settlements() const {
  // @@protoc_insertion_point(field_list:vega.events.v1.SettlePosition.trade_settlements)
  return trade_settlements_;
}

// -------------------------------------------------------------------

// SettleDistressed

// string market_id = 1 [json_name = "marketId"];
inline void SettleDistressed::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& SettleDistressed::market_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.SettleDistressed.market_id)
  return _internal_market_id();
}
inline void SettleDistressed::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.SettleDistressed.market_id)
}
inline std::string* SettleDistressed::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.SettleDistressed.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& SettleDistressed::_internal_market_id() const {
  return market_id_.Get();
}
inline void SettleDistressed::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SettleDistressed::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.SettleDistressed.market_id)
}
inline void SettleDistressed::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.SettleDistressed.market_id)
}
inline void SettleDistressed::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.SettleDistressed.market_id)
}
inline std::string* SettleDistressed::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettleDistressed::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.SettleDistressed.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettleDistressed::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.SettleDistressed.market_id)
}

// string party_id = 2 [json_name = "partyId"];
inline void SettleDistressed::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& SettleDistressed::party_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.SettleDistressed.party_id)
  return _internal_party_id();
}
inline void SettleDistressed::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.SettleDistressed.party_id)
}
inline std::string* SettleDistressed::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.SettleDistressed.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& SettleDistressed::_internal_party_id() const {
  return party_id_.Get();
}
inline void SettleDistressed::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SettleDistressed::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.SettleDistressed.party_id)
}
inline void SettleDistressed::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.SettleDistressed.party_id)
}
inline void SettleDistressed::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.SettleDistressed.party_id)
}
inline std::string* SettleDistressed::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettleDistressed::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.SettleDistressed.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettleDistressed::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.SettleDistressed.party_id)
}

// uint64 margin = 3 [json_name = "margin"];
inline void SettleDistressed::clear_margin() {
  margin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettleDistressed::_internal_margin() const {
  return margin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettleDistressed::margin() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.SettleDistressed.margin)
  return _internal_margin();
}
inline void SettleDistressed::_internal_set_margin(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  margin_ = value;
}
inline void SettleDistressed::set_margin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.SettleDistressed.margin)
}

// uint64 price = 4 [json_name = "price"];
inline void SettleDistressed::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettleDistressed::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettleDistressed::price() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.SettleDistressed.price)
  return _internal_price();
}
inline void SettleDistressed::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void SettleDistressed::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.SettleDistressed.price)
}

// -------------------------------------------------------------------

// MarketTick

// string id = 1 [json_name = "id"];
inline void MarketTick::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MarketTick::id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.MarketTick.id)
  return _internal_id();
}
inline void MarketTick::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.MarketTick.id)
}
inline std::string* MarketTick::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.MarketTick.id)
  return _internal_mutable_id();
}
inline const std::string& MarketTick::_internal_id() const {
  return id_.Get();
}
inline void MarketTick::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketTick::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.MarketTick.id)
}
inline void MarketTick::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.MarketTick.id)
}
inline void MarketTick::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.MarketTick.id)
}
inline std::string* MarketTick::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketTick::release_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.MarketTick.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketTick::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.MarketTick.id)
}

// int64 time = 2 [json_name = "time"];
inline void MarketTick::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketTick::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketTick::time() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.MarketTick.time)
  return _internal_time();
}
inline void MarketTick::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  time_ = value;
}
inline void MarketTick::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.MarketTick.time)
}

// -------------------------------------------------------------------

// AuctionEvent

// string market_id = 1 [json_name = "marketId"];
inline void AuctionEvent::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& AuctionEvent::market_id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.AuctionEvent.market_id)
  return _internal_market_id();
}
inline void AuctionEvent::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.AuctionEvent.market_id)
}
inline std::string* AuctionEvent::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.AuctionEvent.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& AuctionEvent::_internal_market_id() const {
  return market_id_.Get();
}
inline void AuctionEvent::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuctionEvent::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.AuctionEvent.market_id)
}
inline void AuctionEvent::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.AuctionEvent.market_id)
}
inline void AuctionEvent::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.AuctionEvent.market_id)
}
inline std::string* AuctionEvent::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuctionEvent::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.AuctionEvent.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuctionEvent::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.AuctionEvent.market_id)
}

// bool opening_auction = 2 [json_name = "openingAuction"];
inline void AuctionEvent::clear_opening_auction() {
  opening_auction_ = false;
}
inline bool AuctionEvent::_internal_opening_auction() const {
  return opening_auction_;
}
inline bool AuctionEvent::opening_auction() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.AuctionEvent.opening_auction)
  return _internal_opening_auction();
}
inline void AuctionEvent::_internal_set_opening_auction(bool value) {

  opening_auction_ = value;
}
inline void AuctionEvent::set_opening_auction(bool value) {
  _internal_set_opening_auction(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.AuctionEvent.opening_auction)
}

// bool leave = 3 [json_name = "leave"];
inline void AuctionEvent::clear_leave() {
  leave_ = false;
}
inline bool AuctionEvent::_internal_leave() const {
  return leave_;
}
inline bool AuctionEvent::leave() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.AuctionEvent.leave)
  return _internal_leave();
}
inline void AuctionEvent::_internal_set_leave(bool value) {

  leave_ = value;
}
inline void AuctionEvent::set_leave(bool value) {
  _internal_set_leave(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.AuctionEvent.leave)
}

// int64 start = 4 [json_name = "start"];
inline void AuctionEvent::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionEvent::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionEvent::start() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.AuctionEvent.start)
  return _internal_start();
}
inline void AuctionEvent::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {

  start_ = value;
}
inline void AuctionEvent::set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.AuctionEvent.start)
}

// int64 end = 5 [json_name = "end"];
inline void AuctionEvent::clear_end() {
  end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionEvent::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionEvent::end() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.AuctionEvent.end)
  return _internal_end();
}
inline void AuctionEvent::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {

  end_ = value;
}
inline void AuctionEvent::set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.AuctionEvent.end)
}

// .vega.AuctionTrigger trigger = 6 [json_name = "trigger"];
inline void AuctionEvent::clear_trigger() {
  trigger_ = 0;
}
inline ::vega::AuctionTrigger AuctionEvent::_internal_trigger() const {
  return static_cast< ::vega::AuctionTrigger >(trigger_);
}
inline ::vega::AuctionTrigger AuctionEvent::trigger() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.AuctionEvent.trigger)
  return _internal_trigger();
}
inline void AuctionEvent::_internal_set_trigger(::vega::AuctionTrigger value) {

  trigger_ = value;
}
inline void AuctionEvent::set_trigger(::vega::AuctionTrigger value) {
  _internal_set_trigger(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.AuctionEvent.trigger)
}

// .vega.AuctionTrigger extension_trigger = 7 [json_name = "extensionTrigger"];
inline void AuctionEvent::clear_extension_trigger() {
  extension_trigger_ = 0;
}
inline ::vega::AuctionTrigger AuctionEvent::_internal_extension_trigger() const {
  return static_cast< ::vega::AuctionTrigger >(extension_trigger_);
}
inline ::vega::AuctionTrigger AuctionEvent::extension_trigger() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.AuctionEvent.extension_trigger)
  return _internal_extension_trigger();
}
inline void AuctionEvent::_internal_set_extension_trigger(::vega::AuctionTrigger value) {

  extension_trigger_ = value;
}
inline void AuctionEvent::set_extension_trigger(::vega::AuctionTrigger value) {
  _internal_set_extension_trigger(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.AuctionEvent.extension_trigger)
}

// -------------------------------------------------------------------

// ValidatorUpdate

// string vega_pub_key = 1 [json_name = "vegaPubKey"];
inline void ValidatorUpdate::clear_vega_pub_key() {
  vega_pub_key_.ClearToEmpty();
}
inline const std::string& ValidatorUpdate::vega_pub_key() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.ValidatorUpdate.vega_pub_key)
  return _internal_vega_pub_key();
}
inline void ValidatorUpdate::set_vega_pub_key(const std::string& value) {
  _internal_set_vega_pub_key(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.ValidatorUpdate.vega_pub_key)
}
inline std::string* ValidatorUpdate::mutable_vega_pub_key() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.ValidatorUpdate.vega_pub_key)
  return _internal_mutable_vega_pub_key();
}
inline const std::string& ValidatorUpdate::_internal_vega_pub_key() const {
  return vega_pub_key_.Get();
}
inline void ValidatorUpdate::_internal_set_vega_pub_key(const std::string& value) {

  vega_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatorUpdate::set_vega_pub_key(std::string&& value) {

  vega_pub_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.ValidatorUpdate.vega_pub_key)
}
inline void ValidatorUpdate::set_vega_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.ValidatorUpdate.vega_pub_key)
}
inline void ValidatorUpdate::set_vega_pub_key(const char* value,
    size_t size) {

  vega_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.ValidatorUpdate.vega_pub_key)
}
inline std::string* ValidatorUpdate::_internal_mutable_vega_pub_key() {

  return vega_pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatorUpdate::release_vega_pub_key() {
  // @@protoc_insertion_point(field_release:vega.events.v1.ValidatorUpdate.vega_pub_key)
  return vega_pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatorUpdate::set_allocated_vega_pub_key(std::string* vega_pub_key) {
  if (vega_pub_key != nullptr) {

  } else {

  }
  vega_pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_pub_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.ValidatorUpdate.vega_pub_key)
}

// string ethereum_address = 2 [json_name = "ethereumAddress"];
inline void ValidatorUpdate::clear_ethereum_address() {
  ethereum_address_.ClearToEmpty();
}
inline const std::string& ValidatorUpdate::ethereum_address() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.ValidatorUpdate.ethereum_address)
  return _internal_ethereum_address();
}
inline void ValidatorUpdate::set_ethereum_address(const std::string& value) {
  _internal_set_ethereum_address(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.ValidatorUpdate.ethereum_address)
}
inline std::string* ValidatorUpdate::mutable_ethereum_address() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.ValidatorUpdate.ethereum_address)
  return _internal_mutable_ethereum_address();
}
inline const std::string& ValidatorUpdate::_internal_ethereum_address() const {
  return ethereum_address_.Get();
}
inline void ValidatorUpdate::_internal_set_ethereum_address(const std::string& value) {

  ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatorUpdate::set_ethereum_address(std::string&& value) {

  ethereum_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.ValidatorUpdate.ethereum_address)
}
inline void ValidatorUpdate::set_ethereum_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.ValidatorUpdate.ethereum_address)
}
inline void ValidatorUpdate::set_ethereum_address(const char* value,
    size_t size) {

  ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.ValidatorUpdate.ethereum_address)
}
inline std::string* ValidatorUpdate::_internal_mutable_ethereum_address() {

  return ethereum_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatorUpdate::release_ethereum_address() {
  // @@protoc_insertion_point(field_release:vega.events.v1.ValidatorUpdate.ethereum_address)
  return ethereum_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatorUpdate::set_allocated_ethereum_address(std::string* ethereum_address) {
  if (ethereum_address != nullptr) {

  } else {

  }
  ethereum_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ethereum_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.ValidatorUpdate.ethereum_address)
}

// string tm_pub_key = 3 [json_name = "tmPubKey"];
inline void ValidatorUpdate::clear_tm_pub_key() {
  tm_pub_key_.ClearToEmpty();
}
inline const std::string& ValidatorUpdate::tm_pub_key() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.ValidatorUpdate.tm_pub_key)
  return _internal_tm_pub_key();
}
inline void ValidatorUpdate::set_tm_pub_key(const std::string& value) {
  _internal_set_tm_pub_key(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.ValidatorUpdate.tm_pub_key)
}
inline std::string* ValidatorUpdate::mutable_tm_pub_key() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.ValidatorUpdate.tm_pub_key)
  return _internal_mutable_tm_pub_key();
}
inline const std::string& ValidatorUpdate::_internal_tm_pub_key() const {
  return tm_pub_key_.Get();
}
inline void ValidatorUpdate::_internal_set_tm_pub_key(const std::string& value) {

  tm_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatorUpdate::set_tm_pub_key(std::string&& value) {

  tm_pub_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.ValidatorUpdate.tm_pub_key)
}
inline void ValidatorUpdate::set_tm_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  tm_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.ValidatorUpdate.tm_pub_key)
}
inline void ValidatorUpdate::set_tm_pub_key(const char* value,
    size_t size) {

  tm_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.ValidatorUpdate.tm_pub_key)
}
inline std::string* ValidatorUpdate::_internal_mutable_tm_pub_key() {

  return tm_pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatorUpdate::release_tm_pub_key() {
  // @@protoc_insertion_point(field_release:vega.events.v1.ValidatorUpdate.tm_pub_key)
  return tm_pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatorUpdate::set_allocated_tm_pub_key(std::string* tm_pub_key) {
  if (tm_pub_key != nullptr) {

  } else {

  }
  tm_pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tm_pub_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.ValidatorUpdate.tm_pub_key)
}

// string info_url = 4 [json_name = "infoUrl"];
inline void ValidatorUpdate::clear_info_url() {
  info_url_.ClearToEmpty();
}
inline const std::string& ValidatorUpdate::info_url() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.ValidatorUpdate.info_url)
  return _internal_info_url();
}
inline void ValidatorUpdate::set_info_url(const std::string& value) {
  _internal_set_info_url(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.ValidatorUpdate.info_url)
}
inline std::string* ValidatorUpdate::mutable_info_url() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.ValidatorUpdate.info_url)
  return _internal_mutable_info_url();
}
inline const std::string& ValidatorUpdate::_internal_info_url() const {
  return info_url_.Get();
}
inline void ValidatorUpdate::_internal_set_info_url(const std::string& value) {

  info_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatorUpdate::set_info_url(std::string&& value) {

  info_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.ValidatorUpdate.info_url)
}
inline void ValidatorUpdate::set_info_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  info_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.ValidatorUpdate.info_url)
}
inline void ValidatorUpdate::set_info_url(const char* value,
    size_t size) {

  info_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.ValidatorUpdate.info_url)
}
inline std::string* ValidatorUpdate::_internal_mutable_info_url() {

  return info_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatorUpdate::release_info_url() {
  // @@protoc_insertion_point(field_release:vega.events.v1.ValidatorUpdate.info_url)
  return info_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatorUpdate::set_allocated_info_url(std::string* info_url) {
  if (info_url != nullptr) {

  } else {

  }
  info_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.ValidatorUpdate.info_url)
}

// string country = 5 [json_name = "country"];
inline void ValidatorUpdate::clear_country() {
  country_.ClearToEmpty();
}
inline const std::string& ValidatorUpdate::country() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.ValidatorUpdate.country)
  return _internal_country();
}
inline void ValidatorUpdate::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.ValidatorUpdate.country)
}
inline std::string* ValidatorUpdate::mutable_country() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.ValidatorUpdate.country)
  return _internal_mutable_country();
}
inline const std::string& ValidatorUpdate::_internal_country() const {
  return country_.Get();
}
inline void ValidatorUpdate::_internal_set_country(const std::string& value) {

  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatorUpdate::set_country(std::string&& value) {

  country_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.ValidatorUpdate.country)
}
inline void ValidatorUpdate::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.ValidatorUpdate.country)
}
inline void ValidatorUpdate::set_country(const char* value,
    size_t size) {

  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.ValidatorUpdate.country)
}
inline std::string* ValidatorUpdate::_internal_mutable_country() {

  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatorUpdate::release_country() {
  // @@protoc_insertion_point(field_release:vega.events.v1.ValidatorUpdate.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatorUpdate::set_allocated_country(std::string* country) {
  if (country != nullptr) {

  } else {

  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.ValidatorUpdate.country)
}

// -------------------------------------------------------------------

// BusEvent

// string id = 1 [json_name = "id"];
inline void BusEvent::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BusEvent::id() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.id)
  return _internal_id();
}
inline void BusEvent::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.BusEvent.id)
}
inline std::string* BusEvent::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.id)
  return _internal_mutable_id();
}
inline const std::string& BusEvent::_internal_id() const {
  return id_.Get();
}
inline void BusEvent::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusEvent::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.BusEvent.id)
}
inline void BusEvent::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.BusEvent.id)
}
inline void BusEvent::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.BusEvent.id)
}
inline std::string* BusEvent::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusEvent::release_id() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusEvent::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.id)
}

// string block = 2 [json_name = "block"];
inline void BusEvent::clear_block() {
  block_.ClearToEmpty();
}
inline const std::string& BusEvent::block() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.block)
  return _internal_block();
}
inline void BusEvent::set_block(const std::string& value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.BusEvent.block)
}
inline std::string* BusEvent::mutable_block() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.block)
  return _internal_mutable_block();
}
inline const std::string& BusEvent::_internal_block() const {
  return block_.Get();
}
inline void BusEvent::_internal_set_block(const std::string& value) {

  block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusEvent::set_block(std::string&& value) {

  block_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.events.v1.BusEvent.block)
}
inline void BusEvent::set_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.events.v1.BusEvent.block)
}
inline void BusEvent::set_block(const char* value,
    size_t size) {

  block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.events.v1.BusEvent.block)
}
inline std::string* BusEvent::_internal_mutable_block() {

  return block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusEvent::release_block() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.block)
  return block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusEvent::set_allocated_block(std::string* block) {
  if (block != nullptr) {

  } else {

  }
  block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.events.v1.BusEvent.block)
}

// .vega.events.v1.BusEventType type = 3 [json_name = "type"];
inline void BusEvent::clear_type() {
  type_ = 0;
}
inline ::vega::events::v1::BusEventType BusEvent::_internal_type() const {
  return static_cast< ::vega::events::v1::BusEventType >(type_);
}
inline ::vega::events::v1::BusEventType BusEvent::type() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.type)
  return _internal_type();
}
inline void BusEvent::_internal_set_type(::vega::events::v1::BusEventType value) {

  type_ = value;
}
inline void BusEvent::set_type(::vega::events::v1::BusEventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.events.v1.BusEvent.type)
}

// .vega.events.v1.TimeUpdate time_update = 101 [json_name = "timeUpdate"];
inline bool BusEvent::_internal_has_time_update() const {
  return event_case() == kTimeUpdate;
}
inline bool BusEvent::has_time_update() const {
  return _internal_has_time_update();
}
inline void BusEvent::set_has_time_update() {
  _oneof_case_[0] = kTimeUpdate;
}
inline void BusEvent::clear_time_update() {
  if (_internal_has_time_update()) {
    if (GetArena() == nullptr) {
      delete event_.time_update_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::TimeUpdate* BusEvent::release_time_update() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.time_update)
  if (_internal_has_time_update()) {
    clear_has_event();
      ::vega::events::v1::TimeUpdate* temp = event_.time_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.time_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::TimeUpdate& BusEvent::_internal_time_update() const {
  return _internal_has_time_update()
      ? *event_.time_update_
      : reinterpret_cast< ::vega::events::v1::TimeUpdate&>(::vega::events::v1::_TimeUpdate_default_instance_);
}
inline const ::vega::events::v1::TimeUpdate& BusEvent::time_update() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.time_update)
  return _internal_time_update();
}
inline ::vega::events::v1::TimeUpdate* BusEvent::unsafe_arena_release_time_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.time_update)
  if (_internal_has_time_update()) {
    clear_has_event();
    ::vega::events::v1::TimeUpdate* temp = event_.time_update_;
    event_.time_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_time_update(::vega::events::v1::TimeUpdate* time_update) {
  clear_event();
  if (time_update) {
    set_has_time_update();
    event_.time_update_ = time_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.time_update)
}
inline ::vega::events::v1::TimeUpdate* BusEvent::_internal_mutable_time_update() {
  if (!_internal_has_time_update()) {
    clear_event();
    set_has_time_update();
    event_.time_update_ = CreateMaybeMessage< ::vega::events::v1::TimeUpdate >(GetArena());
  }
  return event_.time_update_;
}
inline ::vega::events::v1::TimeUpdate* BusEvent::mutable_time_update() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.time_update)
  return _internal_mutable_time_update();
}

// .vega.events.v1.TransferResponses transfer_responses = 102 [json_name = "transferResponses"];
inline bool BusEvent::_internal_has_transfer_responses() const {
  return event_case() == kTransferResponses;
}
inline bool BusEvent::has_transfer_responses() const {
  return _internal_has_transfer_responses();
}
inline void BusEvent::set_has_transfer_responses() {
  _oneof_case_[0] = kTransferResponses;
}
inline void BusEvent::clear_transfer_responses() {
  if (_internal_has_transfer_responses()) {
    if (GetArena() == nullptr) {
      delete event_.transfer_responses_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::TransferResponses* BusEvent::release_transfer_responses() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.transfer_responses)
  if (_internal_has_transfer_responses()) {
    clear_has_event();
      ::vega::events::v1::TransferResponses* temp = event_.transfer_responses_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.transfer_responses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::TransferResponses& BusEvent::_internal_transfer_responses() const {
  return _internal_has_transfer_responses()
      ? *event_.transfer_responses_
      : reinterpret_cast< ::vega::events::v1::TransferResponses&>(::vega::events::v1::_TransferResponses_default_instance_);
}
inline const ::vega::events::v1::TransferResponses& BusEvent::transfer_responses() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.transfer_responses)
  return _internal_transfer_responses();
}
inline ::vega::events::v1::TransferResponses* BusEvent::unsafe_arena_release_transfer_responses() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.transfer_responses)
  if (_internal_has_transfer_responses()) {
    clear_has_event();
    ::vega::events::v1::TransferResponses* temp = event_.transfer_responses_;
    event_.transfer_responses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_transfer_responses(::vega::events::v1::TransferResponses* transfer_responses) {
  clear_event();
  if (transfer_responses) {
    set_has_transfer_responses();
    event_.transfer_responses_ = transfer_responses;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.transfer_responses)
}
inline ::vega::events::v1::TransferResponses* BusEvent::_internal_mutable_transfer_responses() {
  if (!_internal_has_transfer_responses()) {
    clear_event();
    set_has_transfer_responses();
    event_.transfer_responses_ = CreateMaybeMessage< ::vega::events::v1::TransferResponses >(GetArena());
  }
  return event_.transfer_responses_;
}
inline ::vega::events::v1::TransferResponses* BusEvent::mutable_transfer_responses() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.transfer_responses)
  return _internal_mutable_transfer_responses();
}

// .vega.events.v1.PositionResolution position_resolution = 103 [json_name = "positionResolution"];
inline bool BusEvent::_internal_has_position_resolution() const {
  return event_case() == kPositionResolution;
}
inline bool BusEvent::has_position_resolution() const {
  return _internal_has_position_resolution();
}
inline void BusEvent::set_has_position_resolution() {
  _oneof_case_[0] = kPositionResolution;
}
inline void BusEvent::clear_position_resolution() {
  if (_internal_has_position_resolution()) {
    if (GetArena() == nullptr) {
      delete event_.position_resolution_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::PositionResolution* BusEvent::release_position_resolution() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.position_resolution)
  if (_internal_has_position_resolution()) {
    clear_has_event();
      ::vega::events::v1::PositionResolution* temp = event_.position_resolution_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.position_resolution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::PositionResolution& BusEvent::_internal_position_resolution() const {
  return _internal_has_position_resolution()
      ? *event_.position_resolution_
      : reinterpret_cast< ::vega::events::v1::PositionResolution&>(::vega::events::v1::_PositionResolution_default_instance_);
}
inline const ::vega::events::v1::PositionResolution& BusEvent::position_resolution() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.position_resolution)
  return _internal_position_resolution();
}
inline ::vega::events::v1::PositionResolution* BusEvent::unsafe_arena_release_position_resolution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.position_resolution)
  if (_internal_has_position_resolution()) {
    clear_has_event();
    ::vega::events::v1::PositionResolution* temp = event_.position_resolution_;
    event_.position_resolution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_position_resolution(::vega::events::v1::PositionResolution* position_resolution) {
  clear_event();
  if (position_resolution) {
    set_has_position_resolution();
    event_.position_resolution_ = position_resolution;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.position_resolution)
}
inline ::vega::events::v1::PositionResolution* BusEvent::_internal_mutable_position_resolution() {
  if (!_internal_has_position_resolution()) {
    clear_event();
    set_has_position_resolution();
    event_.position_resolution_ = CreateMaybeMessage< ::vega::events::v1::PositionResolution >(GetArena());
  }
  return event_.position_resolution_;
}
inline ::vega::events::v1::PositionResolution* BusEvent::mutable_position_resolution() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.position_resolution)
  return _internal_mutable_position_resolution();
}

// .vega.Order order = 104 [json_name = "order"];
inline bool BusEvent::_internal_has_order() const {
  return event_case() == kOrder;
}
inline bool BusEvent::has_order() const {
  return _internal_has_order();
}
inline void BusEvent::set_has_order() {
  _oneof_case_[0] = kOrder;
}
inline ::vega::Order* BusEvent::release_order() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.order)
  if (_internal_has_order()) {
    clear_has_event();
      ::vega::Order* temp = event_.order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Order& BusEvent::_internal_order() const {
  return _internal_has_order()
      ? *event_.order_
      : reinterpret_cast< ::vega::Order&>(::vega::_Order_default_instance_);
}
inline const ::vega::Order& BusEvent::order() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.order)
  return _internal_order();
}
inline ::vega::Order* BusEvent::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.order)
  if (_internal_has_order()) {
    clear_has_event();
    ::vega::Order* temp = event_.order_;
    event_.order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_order(::vega::Order* order) {
  clear_event();
  if (order) {
    set_has_order();
    event_.order_ = order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.order)
}
inline ::vega::Order* BusEvent::_internal_mutable_order() {
  if (!_internal_has_order()) {
    clear_event();
    set_has_order();
    event_.order_ = CreateMaybeMessage< ::vega::Order >(GetArena());
  }
  return event_.order_;
}
inline ::vega::Order* BusEvent::mutable_order() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.order)
  return _internal_mutable_order();
}

// .vega.Account account = 105 [json_name = "account"];
inline bool BusEvent::_internal_has_account() const {
  return event_case() == kAccount;
}
inline bool BusEvent::has_account() const {
  return _internal_has_account();
}
inline void BusEvent::set_has_account() {
  _oneof_case_[0] = kAccount;
}
inline ::vega::Account* BusEvent::release_account() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.account)
  if (_internal_has_account()) {
    clear_has_event();
      ::vega::Account* temp = event_.account_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Account& BusEvent::_internal_account() const {
  return _internal_has_account()
      ? *event_.account_
      : reinterpret_cast< ::vega::Account&>(::vega::_Account_default_instance_);
}
inline const ::vega::Account& BusEvent::account() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.account)
  return _internal_account();
}
inline ::vega::Account* BusEvent::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.account)
  if (_internal_has_account()) {
    clear_has_event();
    ::vega::Account* temp = event_.account_;
    event_.account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_account(::vega::Account* account) {
  clear_event();
  if (account) {
    set_has_account();
    event_.account_ = account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.account)
}
inline ::vega::Account* BusEvent::_internal_mutable_account() {
  if (!_internal_has_account()) {
    clear_event();
    set_has_account();
    event_.account_ = CreateMaybeMessage< ::vega::Account >(GetArena());
  }
  return event_.account_;
}
inline ::vega::Account* BusEvent::mutable_account() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.account)
  return _internal_mutable_account();
}

// .vega.Party party = 106 [json_name = "party"];
inline bool BusEvent::_internal_has_party() const {
  return event_case() == kParty;
}
inline bool BusEvent::has_party() const {
  return _internal_has_party();
}
inline void BusEvent::set_has_party() {
  _oneof_case_[0] = kParty;
}
inline ::vega::Party* BusEvent::release_party() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.party)
  if (_internal_has_party()) {
    clear_has_event();
      ::vega::Party* temp = event_.party_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.party_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Party& BusEvent::_internal_party() const {
  return _internal_has_party()
      ? *event_.party_
      : reinterpret_cast< ::vega::Party&>(::vega::_Party_default_instance_);
}
inline const ::vega::Party& BusEvent::party() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.party)
  return _internal_party();
}
inline ::vega::Party* BusEvent::unsafe_arena_release_party() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.party)
  if (_internal_has_party()) {
    clear_has_event();
    ::vega::Party* temp = event_.party_;
    event_.party_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_party(::vega::Party* party) {
  clear_event();
  if (party) {
    set_has_party();
    event_.party_ = party;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.party)
}
inline ::vega::Party* BusEvent::_internal_mutable_party() {
  if (!_internal_has_party()) {
    clear_event();
    set_has_party();
    event_.party_ = CreateMaybeMessage< ::vega::Party >(GetArena());
  }
  return event_.party_;
}
inline ::vega::Party* BusEvent::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.party)
  return _internal_mutable_party();
}

// .vega.Trade trade = 107 [json_name = "trade"];
inline bool BusEvent::_internal_has_trade() const {
  return event_case() == kTrade;
}
inline bool BusEvent::has_trade() const {
  return _internal_has_trade();
}
inline void BusEvent::set_has_trade() {
  _oneof_case_[0] = kTrade;
}
inline ::vega::Trade* BusEvent::release_trade() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.trade)
  if (_internal_has_trade()) {
    clear_has_event();
      ::vega::Trade* temp = event_.trade_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Trade& BusEvent::_internal_trade() const {
  return _internal_has_trade()
      ? *event_.trade_
      : reinterpret_cast< ::vega::Trade&>(::vega::_Trade_default_instance_);
}
inline const ::vega::Trade& BusEvent::trade() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.trade)
  return _internal_trade();
}
inline ::vega::Trade* BusEvent::unsafe_arena_release_trade() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.trade)
  if (_internal_has_trade()) {
    clear_has_event();
    ::vega::Trade* temp = event_.trade_;
    event_.trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_trade(::vega::Trade* trade) {
  clear_event();
  if (trade) {
    set_has_trade();
    event_.trade_ = trade;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.trade)
}
inline ::vega::Trade* BusEvent::_internal_mutable_trade() {
  if (!_internal_has_trade()) {
    clear_event();
    set_has_trade();
    event_.trade_ = CreateMaybeMessage< ::vega::Trade >(GetArena());
  }
  return event_.trade_;
}
inline ::vega::Trade* BusEvent::mutable_trade() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.trade)
  return _internal_mutable_trade();
}

// .vega.MarginLevels margin_levels = 108 [json_name = "marginLevels"];
inline bool BusEvent::_internal_has_margin_levels() const {
  return event_case() == kMarginLevels;
}
inline bool BusEvent::has_margin_levels() const {
  return _internal_has_margin_levels();
}
inline void BusEvent::set_has_margin_levels() {
  _oneof_case_[0] = kMarginLevels;
}
inline ::vega::MarginLevels* BusEvent::release_margin_levels() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.margin_levels)
  if (_internal_has_margin_levels()) {
    clear_has_event();
      ::vega::MarginLevels* temp = event_.margin_levels_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.margin_levels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::MarginLevels& BusEvent::_internal_margin_levels() const {
  return _internal_has_margin_levels()
      ? *event_.margin_levels_
      : reinterpret_cast< ::vega::MarginLevels&>(::vega::_MarginLevels_default_instance_);
}
inline const ::vega::MarginLevels& BusEvent::margin_levels() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.margin_levels)
  return _internal_margin_levels();
}
inline ::vega::MarginLevels* BusEvent::unsafe_arena_release_margin_levels() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.margin_levels)
  if (_internal_has_margin_levels()) {
    clear_has_event();
    ::vega::MarginLevels* temp = event_.margin_levels_;
    event_.margin_levels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_margin_levels(::vega::MarginLevels* margin_levels) {
  clear_event();
  if (margin_levels) {
    set_has_margin_levels();
    event_.margin_levels_ = margin_levels;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.margin_levels)
}
inline ::vega::MarginLevels* BusEvent::_internal_mutable_margin_levels() {
  if (!_internal_has_margin_levels()) {
    clear_event();
    set_has_margin_levels();
    event_.margin_levels_ = CreateMaybeMessage< ::vega::MarginLevels >(GetArena());
  }
  return event_.margin_levels_;
}
inline ::vega::MarginLevels* BusEvent::mutable_margin_levels() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.margin_levels)
  return _internal_mutable_margin_levels();
}

// .vega.Proposal proposal = 109 [json_name = "proposal"];
inline bool BusEvent::_internal_has_proposal() const {
  return event_case() == kProposal;
}
inline bool BusEvent::has_proposal() const {
  return _internal_has_proposal();
}
inline void BusEvent::set_has_proposal() {
  _oneof_case_[0] = kProposal;
}
inline ::vega::Proposal* BusEvent::release_proposal() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.proposal)
  if (_internal_has_proposal()) {
    clear_has_event();
      ::vega::Proposal* temp = event_.proposal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Proposal& BusEvent::_internal_proposal() const {
  return _internal_has_proposal()
      ? *event_.proposal_
      : reinterpret_cast< ::vega::Proposal&>(::vega::_Proposal_default_instance_);
}
inline const ::vega::Proposal& BusEvent::proposal() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.proposal)
  return _internal_proposal();
}
inline ::vega::Proposal* BusEvent::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.proposal)
  if (_internal_has_proposal()) {
    clear_has_event();
    ::vega::Proposal* temp = event_.proposal_;
    event_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_proposal(::vega::Proposal* proposal) {
  clear_event();
  if (proposal) {
    set_has_proposal();
    event_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.proposal)
}
inline ::vega::Proposal* BusEvent::_internal_mutable_proposal() {
  if (!_internal_has_proposal()) {
    clear_event();
    set_has_proposal();
    event_.proposal_ = CreateMaybeMessage< ::vega::Proposal >(GetArena());
  }
  return event_.proposal_;
}
inline ::vega::Proposal* BusEvent::mutable_proposal() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.proposal)
  return _internal_mutable_proposal();
}

// .vega.Vote vote = 110 [json_name = "vote"];
inline bool BusEvent::_internal_has_vote() const {
  return event_case() == kVote;
}
inline bool BusEvent::has_vote() const {
  return _internal_has_vote();
}
inline void BusEvent::set_has_vote() {
  _oneof_case_[0] = kVote;
}
inline ::vega::Vote* BusEvent::release_vote() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.vote)
  if (_internal_has_vote()) {
    clear_has_event();
      ::vega::Vote* temp = event_.vote_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Vote& BusEvent::_internal_vote() const {
  return _internal_has_vote()
      ? *event_.vote_
      : reinterpret_cast< ::vega::Vote&>(::vega::_Vote_default_instance_);
}
inline const ::vega::Vote& BusEvent::vote() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.vote)
  return _internal_vote();
}
inline ::vega::Vote* BusEvent::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.vote)
  if (_internal_has_vote()) {
    clear_has_event();
    ::vega::Vote* temp = event_.vote_;
    event_.vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_vote(::vega::Vote* vote) {
  clear_event();
  if (vote) {
    set_has_vote();
    event_.vote_ = vote;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.vote)
}
inline ::vega::Vote* BusEvent::_internal_mutable_vote() {
  if (!_internal_has_vote()) {
    clear_event();
    set_has_vote();
    event_.vote_ = CreateMaybeMessage< ::vega::Vote >(GetArena());
  }
  return event_.vote_;
}
inline ::vega::Vote* BusEvent::mutable_vote() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.vote)
  return _internal_mutable_vote();
}

// .vega.MarketData market_data = 111 [json_name = "marketData"];
inline bool BusEvent::_internal_has_market_data() const {
  return event_case() == kMarketData;
}
inline bool BusEvent::has_market_data() const {
  return _internal_has_market_data();
}
inline void BusEvent::set_has_market_data() {
  _oneof_case_[0] = kMarketData;
}
inline ::vega::MarketData* BusEvent::release_market_data() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.market_data)
  if (_internal_has_market_data()) {
    clear_has_event();
      ::vega::MarketData* temp = event_.market_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.market_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::MarketData& BusEvent::_internal_market_data() const {
  return _internal_has_market_data()
      ? *event_.market_data_
      : reinterpret_cast< ::vega::MarketData&>(::vega::_MarketData_default_instance_);
}
inline const ::vega::MarketData& BusEvent::market_data() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.market_data)
  return _internal_market_data();
}
inline ::vega::MarketData* BusEvent::unsafe_arena_release_market_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.market_data)
  if (_internal_has_market_data()) {
    clear_has_event();
    ::vega::MarketData* temp = event_.market_data_;
    event_.market_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_market_data(::vega::MarketData* market_data) {
  clear_event();
  if (market_data) {
    set_has_market_data();
    event_.market_data_ = market_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.market_data)
}
inline ::vega::MarketData* BusEvent::_internal_mutable_market_data() {
  if (!_internal_has_market_data()) {
    clear_event();
    set_has_market_data();
    event_.market_data_ = CreateMaybeMessage< ::vega::MarketData >(GetArena());
  }
  return event_.market_data_;
}
inline ::vega::MarketData* BusEvent::mutable_market_data() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.market_data)
  return _internal_mutable_market_data();
}

// .vega.commands.v1.NodeSignature node_signature = 112 [json_name = "nodeSignature"];
inline bool BusEvent::_internal_has_node_signature() const {
  return event_case() == kNodeSignature;
}
inline bool BusEvent::has_node_signature() const {
  return _internal_has_node_signature();
}
inline void BusEvent::set_has_node_signature() {
  _oneof_case_[0] = kNodeSignature;
}
inline ::vega::commands::v1::NodeSignature* BusEvent::release_node_signature() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.node_signature)
  if (_internal_has_node_signature()) {
    clear_has_event();
      ::vega::commands::v1::NodeSignature* temp = event_.node_signature_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.node_signature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::NodeSignature& BusEvent::_internal_node_signature() const {
  return _internal_has_node_signature()
      ? *event_.node_signature_
      : reinterpret_cast< ::vega::commands::v1::NodeSignature&>(::vega::commands::v1::_NodeSignature_default_instance_);
}
inline const ::vega::commands::v1::NodeSignature& BusEvent::node_signature() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.node_signature)
  return _internal_node_signature();
}
inline ::vega::commands::v1::NodeSignature* BusEvent::unsafe_arena_release_node_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.node_signature)
  if (_internal_has_node_signature()) {
    clear_has_event();
    ::vega::commands::v1::NodeSignature* temp = event_.node_signature_;
    event_.node_signature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_node_signature(::vega::commands::v1::NodeSignature* node_signature) {
  clear_event();
  if (node_signature) {
    set_has_node_signature();
    event_.node_signature_ = node_signature;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.node_signature)
}
inline ::vega::commands::v1::NodeSignature* BusEvent::_internal_mutable_node_signature() {
  if (!_internal_has_node_signature()) {
    clear_event();
    set_has_node_signature();
    event_.node_signature_ = CreateMaybeMessage< ::vega::commands::v1::NodeSignature >(GetArena());
  }
  return event_.node_signature_;
}
inline ::vega::commands::v1::NodeSignature* BusEvent::mutable_node_signature() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.node_signature)
  return _internal_mutable_node_signature();
}

// .vega.events.v1.LossSocialization loss_socialization = 113 [json_name = "lossSocialization"];
inline bool BusEvent::_internal_has_loss_socialization() const {
  return event_case() == kLossSocialization;
}
inline bool BusEvent::has_loss_socialization() const {
  return _internal_has_loss_socialization();
}
inline void BusEvent::set_has_loss_socialization() {
  _oneof_case_[0] = kLossSocialization;
}
inline void BusEvent::clear_loss_socialization() {
  if (_internal_has_loss_socialization()) {
    if (GetArena() == nullptr) {
      delete event_.loss_socialization_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::LossSocialization* BusEvent::release_loss_socialization() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.loss_socialization)
  if (_internal_has_loss_socialization()) {
    clear_has_event();
      ::vega::events::v1::LossSocialization* temp = event_.loss_socialization_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.loss_socialization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::LossSocialization& BusEvent::_internal_loss_socialization() const {
  return _internal_has_loss_socialization()
      ? *event_.loss_socialization_
      : reinterpret_cast< ::vega::events::v1::LossSocialization&>(::vega::events::v1::_LossSocialization_default_instance_);
}
inline const ::vega::events::v1::LossSocialization& BusEvent::loss_socialization() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.loss_socialization)
  return _internal_loss_socialization();
}
inline ::vega::events::v1::LossSocialization* BusEvent::unsafe_arena_release_loss_socialization() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.loss_socialization)
  if (_internal_has_loss_socialization()) {
    clear_has_event();
    ::vega::events::v1::LossSocialization* temp = event_.loss_socialization_;
    event_.loss_socialization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_loss_socialization(::vega::events::v1::LossSocialization* loss_socialization) {
  clear_event();
  if (loss_socialization) {
    set_has_loss_socialization();
    event_.loss_socialization_ = loss_socialization;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.loss_socialization)
}
inline ::vega::events::v1::LossSocialization* BusEvent::_internal_mutable_loss_socialization() {
  if (!_internal_has_loss_socialization()) {
    clear_event();
    set_has_loss_socialization();
    event_.loss_socialization_ = CreateMaybeMessage< ::vega::events::v1::LossSocialization >(GetArena());
  }
  return event_.loss_socialization_;
}
inline ::vega::events::v1::LossSocialization* BusEvent::mutable_loss_socialization() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.loss_socialization)
  return _internal_mutable_loss_socialization();
}

// .vega.events.v1.SettlePosition settle_position = 114 [json_name = "settlePosition"];
inline bool BusEvent::_internal_has_settle_position() const {
  return event_case() == kSettlePosition;
}
inline bool BusEvent::has_settle_position() const {
  return _internal_has_settle_position();
}
inline void BusEvent::set_has_settle_position() {
  _oneof_case_[0] = kSettlePosition;
}
inline void BusEvent::clear_settle_position() {
  if (_internal_has_settle_position()) {
    if (GetArena() == nullptr) {
      delete event_.settle_position_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::SettlePosition* BusEvent::release_settle_position() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.settle_position)
  if (_internal_has_settle_position()) {
    clear_has_event();
      ::vega::events::v1::SettlePosition* temp = event_.settle_position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.settle_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::SettlePosition& BusEvent::_internal_settle_position() const {
  return _internal_has_settle_position()
      ? *event_.settle_position_
      : reinterpret_cast< ::vega::events::v1::SettlePosition&>(::vega::events::v1::_SettlePosition_default_instance_);
}
inline const ::vega::events::v1::SettlePosition& BusEvent::settle_position() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.settle_position)
  return _internal_settle_position();
}
inline ::vega::events::v1::SettlePosition* BusEvent::unsafe_arena_release_settle_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.settle_position)
  if (_internal_has_settle_position()) {
    clear_has_event();
    ::vega::events::v1::SettlePosition* temp = event_.settle_position_;
    event_.settle_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_settle_position(::vega::events::v1::SettlePosition* settle_position) {
  clear_event();
  if (settle_position) {
    set_has_settle_position();
    event_.settle_position_ = settle_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.settle_position)
}
inline ::vega::events::v1::SettlePosition* BusEvent::_internal_mutable_settle_position() {
  if (!_internal_has_settle_position()) {
    clear_event();
    set_has_settle_position();
    event_.settle_position_ = CreateMaybeMessage< ::vega::events::v1::SettlePosition >(GetArena());
  }
  return event_.settle_position_;
}
inline ::vega::events::v1::SettlePosition* BusEvent::mutable_settle_position() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.settle_position)
  return _internal_mutable_settle_position();
}

// .vega.events.v1.SettleDistressed settle_distressed = 115 [json_name = "settleDistressed"];
inline bool BusEvent::_internal_has_settle_distressed() const {
  return event_case() == kSettleDistressed;
}
inline bool BusEvent::has_settle_distressed() const {
  return _internal_has_settle_distressed();
}
inline void BusEvent::set_has_settle_distressed() {
  _oneof_case_[0] = kSettleDistressed;
}
inline void BusEvent::clear_settle_distressed() {
  if (_internal_has_settle_distressed()) {
    if (GetArena() == nullptr) {
      delete event_.settle_distressed_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::SettleDistressed* BusEvent::release_settle_distressed() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.settle_distressed)
  if (_internal_has_settle_distressed()) {
    clear_has_event();
      ::vega::events::v1::SettleDistressed* temp = event_.settle_distressed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.settle_distressed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::SettleDistressed& BusEvent::_internal_settle_distressed() const {
  return _internal_has_settle_distressed()
      ? *event_.settle_distressed_
      : reinterpret_cast< ::vega::events::v1::SettleDistressed&>(::vega::events::v1::_SettleDistressed_default_instance_);
}
inline const ::vega::events::v1::SettleDistressed& BusEvent::settle_distressed() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.settle_distressed)
  return _internal_settle_distressed();
}
inline ::vega::events::v1::SettleDistressed* BusEvent::unsafe_arena_release_settle_distressed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.settle_distressed)
  if (_internal_has_settle_distressed()) {
    clear_has_event();
    ::vega::events::v1::SettleDistressed* temp = event_.settle_distressed_;
    event_.settle_distressed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_settle_distressed(::vega::events::v1::SettleDistressed* settle_distressed) {
  clear_event();
  if (settle_distressed) {
    set_has_settle_distressed();
    event_.settle_distressed_ = settle_distressed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.settle_distressed)
}
inline ::vega::events::v1::SettleDistressed* BusEvent::_internal_mutable_settle_distressed() {
  if (!_internal_has_settle_distressed()) {
    clear_event();
    set_has_settle_distressed();
    event_.settle_distressed_ = CreateMaybeMessage< ::vega::events::v1::SettleDistressed >(GetArena());
  }
  return event_.settle_distressed_;
}
inline ::vega::events::v1::SettleDistressed* BusEvent::mutable_settle_distressed() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.settle_distressed)
  return _internal_mutable_settle_distressed();
}

// .vega.Market market_created = 116 [json_name = "marketCreated"];
inline bool BusEvent::_internal_has_market_created() const {
  return event_case() == kMarketCreated;
}
inline bool BusEvent::has_market_created() const {
  return _internal_has_market_created();
}
inline void BusEvent::set_has_market_created() {
  _oneof_case_[0] = kMarketCreated;
}
inline ::vega::Market* BusEvent::release_market_created() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.market_created)
  if (_internal_has_market_created()) {
    clear_has_event();
      ::vega::Market* temp = event_.market_created_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.market_created_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Market& BusEvent::_internal_market_created() const {
  return _internal_has_market_created()
      ? *event_.market_created_
      : reinterpret_cast< ::vega::Market&>(::vega::_Market_default_instance_);
}
inline const ::vega::Market& BusEvent::market_created() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.market_created)
  return _internal_market_created();
}
inline ::vega::Market* BusEvent::unsafe_arena_release_market_created() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.market_created)
  if (_internal_has_market_created()) {
    clear_has_event();
    ::vega::Market* temp = event_.market_created_;
    event_.market_created_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_market_created(::vega::Market* market_created) {
  clear_event();
  if (market_created) {
    set_has_market_created();
    event_.market_created_ = market_created;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.market_created)
}
inline ::vega::Market* BusEvent::_internal_mutable_market_created() {
  if (!_internal_has_market_created()) {
    clear_event();
    set_has_market_created();
    event_.market_created_ = CreateMaybeMessage< ::vega::Market >(GetArena());
  }
  return event_.market_created_;
}
inline ::vega::Market* BusEvent::mutable_market_created() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.market_created)
  return _internal_mutable_market_created();
}

// .vega.Asset asset = 117 [json_name = "asset"];
inline bool BusEvent::_internal_has_asset() const {
  return event_case() == kAsset;
}
inline bool BusEvent::has_asset() const {
  return _internal_has_asset();
}
inline void BusEvent::set_has_asset() {
  _oneof_case_[0] = kAsset;
}
inline ::vega::Asset* BusEvent::release_asset() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.asset)
  if (_internal_has_asset()) {
    clear_has_event();
      ::vega::Asset* temp = event_.asset_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.asset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Asset& BusEvent::_internal_asset() const {
  return _internal_has_asset()
      ? *event_.asset_
      : reinterpret_cast< ::vega::Asset&>(::vega::_Asset_default_instance_);
}
inline const ::vega::Asset& BusEvent::asset() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.asset)
  return _internal_asset();
}
inline ::vega::Asset* BusEvent::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.asset)
  if (_internal_has_asset()) {
    clear_has_event();
    ::vega::Asset* temp = event_.asset_;
    event_.asset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_asset(::vega::Asset* asset) {
  clear_event();
  if (asset) {
    set_has_asset();
    event_.asset_ = asset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.asset)
}
inline ::vega::Asset* BusEvent::_internal_mutable_asset() {
  if (!_internal_has_asset()) {
    clear_event();
    set_has_asset();
    event_.asset_ = CreateMaybeMessage< ::vega::Asset >(GetArena());
  }
  return event_.asset_;
}
inline ::vega::Asset* BusEvent::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.asset)
  return _internal_mutable_asset();
}

// .vega.events.v1.MarketTick market_tick = 118 [json_name = "marketTick"];
inline bool BusEvent::_internal_has_market_tick() const {
  return event_case() == kMarketTick;
}
inline bool BusEvent::has_market_tick() const {
  return _internal_has_market_tick();
}
inline void BusEvent::set_has_market_tick() {
  _oneof_case_[0] = kMarketTick;
}
inline void BusEvent::clear_market_tick() {
  if (_internal_has_market_tick()) {
    if (GetArena() == nullptr) {
      delete event_.market_tick_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::MarketTick* BusEvent::release_market_tick() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.market_tick)
  if (_internal_has_market_tick()) {
    clear_has_event();
      ::vega::events::v1::MarketTick* temp = event_.market_tick_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.market_tick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::MarketTick& BusEvent::_internal_market_tick() const {
  return _internal_has_market_tick()
      ? *event_.market_tick_
      : reinterpret_cast< ::vega::events::v1::MarketTick&>(::vega::events::v1::_MarketTick_default_instance_);
}
inline const ::vega::events::v1::MarketTick& BusEvent::market_tick() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.market_tick)
  return _internal_market_tick();
}
inline ::vega::events::v1::MarketTick* BusEvent::unsafe_arena_release_market_tick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.market_tick)
  if (_internal_has_market_tick()) {
    clear_has_event();
    ::vega::events::v1::MarketTick* temp = event_.market_tick_;
    event_.market_tick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_market_tick(::vega::events::v1::MarketTick* market_tick) {
  clear_event();
  if (market_tick) {
    set_has_market_tick();
    event_.market_tick_ = market_tick;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.market_tick)
}
inline ::vega::events::v1::MarketTick* BusEvent::_internal_mutable_market_tick() {
  if (!_internal_has_market_tick()) {
    clear_event();
    set_has_market_tick();
    event_.market_tick_ = CreateMaybeMessage< ::vega::events::v1::MarketTick >(GetArena());
  }
  return event_.market_tick_;
}
inline ::vega::events::v1::MarketTick* BusEvent::mutable_market_tick() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.market_tick)
  return _internal_mutable_market_tick();
}

// .vega.Withdrawal withdrawal = 119 [json_name = "withdrawal"];
inline bool BusEvent::_internal_has_withdrawal() const {
  return event_case() == kWithdrawal;
}
inline bool BusEvent::has_withdrawal() const {
  return _internal_has_withdrawal();
}
inline void BusEvent::set_has_withdrawal() {
  _oneof_case_[0] = kWithdrawal;
}
inline ::vega::Withdrawal* BusEvent::release_withdrawal() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.withdrawal)
  if (_internal_has_withdrawal()) {
    clear_has_event();
      ::vega::Withdrawal* temp = event_.withdrawal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.withdrawal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Withdrawal& BusEvent::_internal_withdrawal() const {
  return _internal_has_withdrawal()
      ? *event_.withdrawal_
      : reinterpret_cast< ::vega::Withdrawal&>(::vega::_Withdrawal_default_instance_);
}
inline const ::vega::Withdrawal& BusEvent::withdrawal() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.withdrawal)
  return _internal_withdrawal();
}
inline ::vega::Withdrawal* BusEvent::unsafe_arena_release_withdrawal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.withdrawal)
  if (_internal_has_withdrawal()) {
    clear_has_event();
    ::vega::Withdrawal* temp = event_.withdrawal_;
    event_.withdrawal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_withdrawal(::vega::Withdrawal* withdrawal) {
  clear_event();
  if (withdrawal) {
    set_has_withdrawal();
    event_.withdrawal_ = withdrawal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.withdrawal)
}
inline ::vega::Withdrawal* BusEvent::_internal_mutable_withdrawal() {
  if (!_internal_has_withdrawal()) {
    clear_event();
    set_has_withdrawal();
    event_.withdrawal_ = CreateMaybeMessage< ::vega::Withdrawal >(GetArena());
  }
  return event_.withdrawal_;
}
inline ::vega::Withdrawal* BusEvent::mutable_withdrawal() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.withdrawal)
  return _internal_mutable_withdrawal();
}

// .vega.Deposit deposit = 120 [json_name = "deposit"];
inline bool BusEvent::_internal_has_deposit() const {
  return event_case() == kDeposit;
}
inline bool BusEvent::has_deposit() const {
  return _internal_has_deposit();
}
inline void BusEvent::set_has_deposit() {
  _oneof_case_[0] = kDeposit;
}
inline ::vega::Deposit* BusEvent::release_deposit() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.deposit)
  if (_internal_has_deposit()) {
    clear_has_event();
      ::vega::Deposit* temp = event_.deposit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Deposit& BusEvent::_internal_deposit() const {
  return _internal_has_deposit()
      ? *event_.deposit_
      : reinterpret_cast< ::vega::Deposit&>(::vega::_Deposit_default_instance_);
}
inline const ::vega::Deposit& BusEvent::deposit() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.deposit)
  return _internal_deposit();
}
inline ::vega::Deposit* BusEvent::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.deposit)
  if (_internal_has_deposit()) {
    clear_has_event();
    ::vega::Deposit* temp = event_.deposit_;
    event_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_deposit(::vega::Deposit* deposit) {
  clear_event();
  if (deposit) {
    set_has_deposit();
    event_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.deposit)
}
inline ::vega::Deposit* BusEvent::_internal_mutable_deposit() {
  if (!_internal_has_deposit()) {
    clear_event();
    set_has_deposit();
    event_.deposit_ = CreateMaybeMessage< ::vega::Deposit >(GetArena());
  }
  return event_.deposit_;
}
inline ::vega::Deposit* BusEvent::mutable_deposit() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.deposit)
  return _internal_mutable_deposit();
}

// .vega.events.v1.AuctionEvent auction = 121 [json_name = "auction"];
inline bool BusEvent::_internal_has_auction() const {
  return event_case() == kAuction;
}
inline bool BusEvent::has_auction() const {
  return _internal_has_auction();
}
inline void BusEvent::set_has_auction() {
  _oneof_case_[0] = kAuction;
}
inline void BusEvent::clear_auction() {
  if (_internal_has_auction()) {
    if (GetArena() == nullptr) {
      delete event_.auction_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::AuctionEvent* BusEvent::release_auction() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.auction)
  if (_internal_has_auction()) {
    clear_has_event();
      ::vega::events::v1::AuctionEvent* temp = event_.auction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.auction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::AuctionEvent& BusEvent::_internal_auction() const {
  return _internal_has_auction()
      ? *event_.auction_
      : reinterpret_cast< ::vega::events::v1::AuctionEvent&>(::vega::events::v1::_AuctionEvent_default_instance_);
}
inline const ::vega::events::v1::AuctionEvent& BusEvent::auction() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.auction)
  return _internal_auction();
}
inline ::vega::events::v1::AuctionEvent* BusEvent::unsafe_arena_release_auction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.auction)
  if (_internal_has_auction()) {
    clear_has_event();
    ::vega::events::v1::AuctionEvent* temp = event_.auction_;
    event_.auction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_auction(::vega::events::v1::AuctionEvent* auction) {
  clear_event();
  if (auction) {
    set_has_auction();
    event_.auction_ = auction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.auction)
}
inline ::vega::events::v1::AuctionEvent* BusEvent::_internal_mutable_auction() {
  if (!_internal_has_auction()) {
    clear_event();
    set_has_auction();
    event_.auction_ = CreateMaybeMessage< ::vega::events::v1::AuctionEvent >(GetArena());
  }
  return event_.auction_;
}
inline ::vega::events::v1::AuctionEvent* BusEvent::mutable_auction() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.auction)
  return _internal_mutable_auction();
}

// .vega.RiskFactor risk_factor = 122 [json_name = "riskFactor"];
inline bool BusEvent::_internal_has_risk_factor() const {
  return event_case() == kRiskFactor;
}
inline bool BusEvent::has_risk_factor() const {
  return _internal_has_risk_factor();
}
inline void BusEvent::set_has_risk_factor() {
  _oneof_case_[0] = kRiskFactor;
}
inline ::vega::RiskFactor* BusEvent::release_risk_factor() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.risk_factor)
  if (_internal_has_risk_factor()) {
    clear_has_event();
      ::vega::RiskFactor* temp = event_.risk_factor_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.risk_factor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::RiskFactor& BusEvent::_internal_risk_factor() const {
  return _internal_has_risk_factor()
      ? *event_.risk_factor_
      : reinterpret_cast< ::vega::RiskFactor&>(::vega::_RiskFactor_default_instance_);
}
inline const ::vega::RiskFactor& BusEvent::risk_factor() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.risk_factor)
  return _internal_risk_factor();
}
inline ::vega::RiskFactor* BusEvent::unsafe_arena_release_risk_factor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.risk_factor)
  if (_internal_has_risk_factor()) {
    clear_has_event();
    ::vega::RiskFactor* temp = event_.risk_factor_;
    event_.risk_factor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_risk_factor(::vega::RiskFactor* risk_factor) {
  clear_event();
  if (risk_factor) {
    set_has_risk_factor();
    event_.risk_factor_ = risk_factor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.risk_factor)
}
inline ::vega::RiskFactor* BusEvent::_internal_mutable_risk_factor() {
  if (!_internal_has_risk_factor()) {
    clear_event();
    set_has_risk_factor();
    event_.risk_factor_ = CreateMaybeMessage< ::vega::RiskFactor >(GetArena());
  }
  return event_.risk_factor_;
}
inline ::vega::RiskFactor* BusEvent::mutable_risk_factor() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.risk_factor)
  return _internal_mutable_risk_factor();
}

// .vega.NetworkParameter network_parameter = 123 [json_name = "networkParameter"];
inline bool BusEvent::_internal_has_network_parameter() const {
  return event_case() == kNetworkParameter;
}
inline bool BusEvent::has_network_parameter() const {
  return _internal_has_network_parameter();
}
inline void BusEvent::set_has_network_parameter() {
  _oneof_case_[0] = kNetworkParameter;
}
inline ::vega::NetworkParameter* BusEvent::release_network_parameter() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.network_parameter)
  if (_internal_has_network_parameter()) {
    clear_has_event();
      ::vega::NetworkParameter* temp = event_.network_parameter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.network_parameter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::NetworkParameter& BusEvent::_internal_network_parameter() const {
  return _internal_has_network_parameter()
      ? *event_.network_parameter_
      : reinterpret_cast< ::vega::NetworkParameter&>(::vega::_NetworkParameter_default_instance_);
}
inline const ::vega::NetworkParameter& BusEvent::network_parameter() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.network_parameter)
  return _internal_network_parameter();
}
inline ::vega::NetworkParameter* BusEvent::unsafe_arena_release_network_parameter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.network_parameter)
  if (_internal_has_network_parameter()) {
    clear_has_event();
    ::vega::NetworkParameter* temp = event_.network_parameter_;
    event_.network_parameter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_network_parameter(::vega::NetworkParameter* network_parameter) {
  clear_event();
  if (network_parameter) {
    set_has_network_parameter();
    event_.network_parameter_ = network_parameter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.network_parameter)
}
inline ::vega::NetworkParameter* BusEvent::_internal_mutable_network_parameter() {
  if (!_internal_has_network_parameter()) {
    clear_event();
    set_has_network_parameter();
    event_.network_parameter_ = CreateMaybeMessage< ::vega::NetworkParameter >(GetArena());
  }
  return event_.network_parameter_;
}
inline ::vega::NetworkParameter* BusEvent::mutable_network_parameter() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.network_parameter)
  return _internal_mutable_network_parameter();
}

// .vega.LiquidityProvision liquidity_provision = 124 [json_name = "liquidityProvision"];
inline bool BusEvent::_internal_has_liquidity_provision() const {
  return event_case() == kLiquidityProvision;
}
inline bool BusEvent::has_liquidity_provision() const {
  return _internal_has_liquidity_provision();
}
inline void BusEvent::set_has_liquidity_provision() {
  _oneof_case_[0] = kLiquidityProvision;
}
inline ::vega::LiquidityProvision* BusEvent::release_liquidity_provision() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.liquidity_provision)
  if (_internal_has_liquidity_provision()) {
    clear_has_event();
      ::vega::LiquidityProvision* temp = event_.liquidity_provision_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.liquidity_provision_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::LiquidityProvision& BusEvent::_internal_liquidity_provision() const {
  return _internal_has_liquidity_provision()
      ? *event_.liquidity_provision_
      : reinterpret_cast< ::vega::LiquidityProvision&>(::vega::_LiquidityProvision_default_instance_);
}
inline const ::vega::LiquidityProvision& BusEvent::liquidity_provision() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.liquidity_provision)
  return _internal_liquidity_provision();
}
inline ::vega::LiquidityProvision* BusEvent::unsafe_arena_release_liquidity_provision() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.liquidity_provision)
  if (_internal_has_liquidity_provision()) {
    clear_has_event();
    ::vega::LiquidityProvision* temp = event_.liquidity_provision_;
    event_.liquidity_provision_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_liquidity_provision(::vega::LiquidityProvision* liquidity_provision) {
  clear_event();
  if (liquidity_provision) {
    set_has_liquidity_provision();
    event_.liquidity_provision_ = liquidity_provision;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.liquidity_provision)
}
inline ::vega::LiquidityProvision* BusEvent::_internal_mutable_liquidity_provision() {
  if (!_internal_has_liquidity_provision()) {
    clear_event();
    set_has_liquidity_provision();
    event_.liquidity_provision_ = CreateMaybeMessage< ::vega::LiquidityProvision >(GetArena());
  }
  return event_.liquidity_provision_;
}
inline ::vega::LiquidityProvision* BusEvent::mutable_liquidity_provision() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.liquidity_provision)
  return _internal_mutable_liquidity_provision();
}

// .vega.Market market_updated = 125 [json_name = "marketUpdated"];
inline bool BusEvent::_internal_has_market_updated() const {
  return event_case() == kMarketUpdated;
}
inline bool BusEvent::has_market_updated() const {
  return _internal_has_market_updated();
}
inline void BusEvent::set_has_market_updated() {
  _oneof_case_[0] = kMarketUpdated;
}
inline ::vega::Market* BusEvent::release_market_updated() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.market_updated)
  if (_internal_has_market_updated()) {
    clear_has_event();
      ::vega::Market* temp = event_.market_updated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.market_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Market& BusEvent::_internal_market_updated() const {
  return _internal_has_market_updated()
      ? *event_.market_updated_
      : reinterpret_cast< ::vega::Market&>(::vega::_Market_default_instance_);
}
inline const ::vega::Market& BusEvent::market_updated() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.market_updated)
  return _internal_market_updated();
}
inline ::vega::Market* BusEvent::unsafe_arena_release_market_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.market_updated)
  if (_internal_has_market_updated()) {
    clear_has_event();
    ::vega::Market* temp = event_.market_updated_;
    event_.market_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_market_updated(::vega::Market* market_updated) {
  clear_event();
  if (market_updated) {
    set_has_market_updated();
    event_.market_updated_ = market_updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.market_updated)
}
inline ::vega::Market* BusEvent::_internal_mutable_market_updated() {
  if (!_internal_has_market_updated()) {
    clear_event();
    set_has_market_updated();
    event_.market_updated_ = CreateMaybeMessage< ::vega::Market >(GetArena());
  }
  return event_.market_updated_;
}
inline ::vega::Market* BusEvent::mutable_market_updated() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.market_updated)
  return _internal_mutable_market_updated();
}

// .oracles.v1.OracleSpec oracle_spec = 126 [json_name = "oracleSpec"];
inline bool BusEvent::_internal_has_oracle_spec() const {
  return event_case() == kOracleSpec;
}
inline bool BusEvent::has_oracle_spec() const {
  return _internal_has_oracle_spec();
}
inline void BusEvent::set_has_oracle_spec() {
  _oneof_case_[0] = kOracleSpec;
}
inline ::oracles::v1::OracleSpec* BusEvent::release_oracle_spec() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.oracle_spec)
  if (_internal_has_oracle_spec()) {
    clear_has_event();
      ::oracles::v1::OracleSpec* temp = event_.oracle_spec_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.oracle_spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oracles::v1::OracleSpec& BusEvent::_internal_oracle_spec() const {
  return _internal_has_oracle_spec()
      ? *event_.oracle_spec_
      : reinterpret_cast< ::oracles::v1::OracleSpec&>(::oracles::v1::_OracleSpec_default_instance_);
}
inline const ::oracles::v1::OracleSpec& BusEvent::oracle_spec() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.oracle_spec)
  return _internal_oracle_spec();
}
inline ::oracles::v1::OracleSpec* BusEvent::unsafe_arena_release_oracle_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.oracle_spec)
  if (_internal_has_oracle_spec()) {
    clear_has_event();
    ::oracles::v1::OracleSpec* temp = event_.oracle_spec_;
    event_.oracle_spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_oracle_spec(::oracles::v1::OracleSpec* oracle_spec) {
  clear_event();
  if (oracle_spec) {
    set_has_oracle_spec();
    event_.oracle_spec_ = oracle_spec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.oracle_spec)
}
inline ::oracles::v1::OracleSpec* BusEvent::_internal_mutable_oracle_spec() {
  if (!_internal_has_oracle_spec()) {
    clear_event();
    set_has_oracle_spec();
    event_.oracle_spec_ = CreateMaybeMessage< ::oracles::v1::OracleSpec >(GetArena());
  }
  return event_.oracle_spec_;
}
inline ::oracles::v1::OracleSpec* BusEvent::mutable_oracle_spec() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.oracle_spec)
  return _internal_mutable_oracle_spec();
}

// .oracles.v1.OracleData oracle_data = 127 [json_name = "oracleData"];
inline bool BusEvent::_internal_has_oracle_data() const {
  return event_case() == kOracleData;
}
inline bool BusEvent::has_oracle_data() const {
  return _internal_has_oracle_data();
}
inline void BusEvent::set_has_oracle_data() {
  _oneof_case_[0] = kOracleData;
}
inline ::oracles::v1::OracleData* BusEvent::release_oracle_data() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.oracle_data)
  if (_internal_has_oracle_data()) {
    clear_has_event();
      ::oracles::v1::OracleData* temp = event_.oracle_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.oracle_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oracles::v1::OracleData& BusEvent::_internal_oracle_data() const {
  return _internal_has_oracle_data()
      ? *event_.oracle_data_
      : reinterpret_cast< ::oracles::v1::OracleData&>(::oracles::v1::_OracleData_default_instance_);
}
inline const ::oracles::v1::OracleData& BusEvent::oracle_data() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.oracle_data)
  return _internal_oracle_data();
}
inline ::oracles::v1::OracleData* BusEvent::unsafe_arena_release_oracle_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.oracle_data)
  if (_internal_has_oracle_data()) {
    clear_has_event();
    ::oracles::v1::OracleData* temp = event_.oracle_data_;
    event_.oracle_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_oracle_data(::oracles::v1::OracleData* oracle_data) {
  clear_event();
  if (oracle_data) {
    set_has_oracle_data();
    event_.oracle_data_ = oracle_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.oracle_data)
}
inline ::oracles::v1::OracleData* BusEvent::_internal_mutable_oracle_data() {
  if (!_internal_has_oracle_data()) {
    clear_event();
    set_has_oracle_data();
    event_.oracle_data_ = CreateMaybeMessage< ::oracles::v1::OracleData >(GetArena());
  }
  return event_.oracle_data_;
}
inline ::oracles::v1::OracleData* BusEvent::mutable_oracle_data() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.oracle_data)
  return _internal_mutable_oracle_data();
}

// .vega.events.v1.DelegationBalanceEvent delegation_balance = 129 [json_name = "delegationBalance"];
inline bool BusEvent::_internal_has_delegation_balance() const {
  return event_case() == kDelegationBalance;
}
inline bool BusEvent::has_delegation_balance() const {
  return _internal_has_delegation_balance();
}
inline void BusEvent::set_has_delegation_balance() {
  _oneof_case_[0] = kDelegationBalance;
}
inline void BusEvent::clear_delegation_balance() {
  if (_internal_has_delegation_balance()) {
    if (GetArena() == nullptr) {
      delete event_.delegation_balance_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::DelegationBalanceEvent* BusEvent::release_delegation_balance() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.delegation_balance)
  if (_internal_has_delegation_balance()) {
    clear_has_event();
      ::vega::events::v1::DelegationBalanceEvent* temp = event_.delegation_balance_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.delegation_balance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::DelegationBalanceEvent& BusEvent::_internal_delegation_balance() const {
  return _internal_has_delegation_balance()
      ? *event_.delegation_balance_
      : reinterpret_cast< ::vega::events::v1::DelegationBalanceEvent&>(::vega::events::v1::_DelegationBalanceEvent_default_instance_);
}
inline const ::vega::events::v1::DelegationBalanceEvent& BusEvent::delegation_balance() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.delegation_balance)
  return _internal_delegation_balance();
}
inline ::vega::events::v1::DelegationBalanceEvent* BusEvent::unsafe_arena_release_delegation_balance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.delegation_balance)
  if (_internal_has_delegation_balance()) {
    clear_has_event();
    ::vega::events::v1::DelegationBalanceEvent* temp = event_.delegation_balance_;
    event_.delegation_balance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_delegation_balance(::vega::events::v1::DelegationBalanceEvent* delegation_balance) {
  clear_event();
  if (delegation_balance) {
    set_has_delegation_balance();
    event_.delegation_balance_ = delegation_balance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.delegation_balance)
}
inline ::vega::events::v1::DelegationBalanceEvent* BusEvent::_internal_mutable_delegation_balance() {
  if (!_internal_has_delegation_balance()) {
    clear_event();
    set_has_delegation_balance();
    event_.delegation_balance_ = CreateMaybeMessage< ::vega::events::v1::DelegationBalanceEvent >(GetArena());
  }
  return event_.delegation_balance_;
}
inline ::vega::events::v1::DelegationBalanceEvent* BusEvent::mutable_delegation_balance() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.delegation_balance)
  return _internal_mutable_delegation_balance();
}

// .vega.events.v1.PendingDelegationBalanceEvent pending_delegation_balance = 130 [json_name = "pendingDelegationBalance"];
inline bool BusEvent::_internal_has_pending_delegation_balance() const {
  return event_case() == kPendingDelegationBalance;
}
inline bool BusEvent::has_pending_delegation_balance() const {
  return _internal_has_pending_delegation_balance();
}
inline void BusEvent::set_has_pending_delegation_balance() {
  _oneof_case_[0] = kPendingDelegationBalance;
}
inline void BusEvent::clear_pending_delegation_balance() {
  if (_internal_has_pending_delegation_balance()) {
    if (GetArena() == nullptr) {
      delete event_.pending_delegation_balance_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::PendingDelegationBalanceEvent* BusEvent::release_pending_delegation_balance() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.pending_delegation_balance)
  if (_internal_has_pending_delegation_balance()) {
    clear_has_event();
      ::vega::events::v1::PendingDelegationBalanceEvent* temp = event_.pending_delegation_balance_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.pending_delegation_balance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::PendingDelegationBalanceEvent& BusEvent::_internal_pending_delegation_balance() const {
  return _internal_has_pending_delegation_balance()
      ? *event_.pending_delegation_balance_
      : reinterpret_cast< ::vega::events::v1::PendingDelegationBalanceEvent&>(::vega::events::v1::_PendingDelegationBalanceEvent_default_instance_);
}
inline const ::vega::events::v1::PendingDelegationBalanceEvent& BusEvent::pending_delegation_balance() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.pending_delegation_balance)
  return _internal_pending_delegation_balance();
}
inline ::vega::events::v1::PendingDelegationBalanceEvent* BusEvent::unsafe_arena_release_pending_delegation_balance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.pending_delegation_balance)
  if (_internal_has_pending_delegation_balance()) {
    clear_has_event();
    ::vega::events::v1::PendingDelegationBalanceEvent* temp = event_.pending_delegation_balance_;
    event_.pending_delegation_balance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_pending_delegation_balance(::vega::events::v1::PendingDelegationBalanceEvent* pending_delegation_balance) {
  clear_event();
  if (pending_delegation_balance) {
    set_has_pending_delegation_balance();
    event_.pending_delegation_balance_ = pending_delegation_balance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.pending_delegation_balance)
}
inline ::vega::events::v1::PendingDelegationBalanceEvent* BusEvent::_internal_mutable_pending_delegation_balance() {
  if (!_internal_has_pending_delegation_balance()) {
    clear_event();
    set_has_pending_delegation_balance();
    event_.pending_delegation_balance_ = CreateMaybeMessage< ::vega::events::v1::PendingDelegationBalanceEvent >(GetArena());
  }
  return event_.pending_delegation_balance_;
}
inline ::vega::events::v1::PendingDelegationBalanceEvent* BusEvent::mutable_pending_delegation_balance() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.pending_delegation_balance)
  return _internal_mutable_pending_delegation_balance();
}

// .vega.events.v1.EpochEvent epoch_event = 131 [json_name = "epochEvent"];
inline bool BusEvent::_internal_has_epoch_event() const {
  return event_case() == kEpochEvent;
}
inline bool BusEvent::has_epoch_event() const {
  return _internal_has_epoch_event();
}
inline void BusEvent::set_has_epoch_event() {
  _oneof_case_[0] = kEpochEvent;
}
inline void BusEvent::clear_epoch_event() {
  if (_internal_has_epoch_event()) {
    if (GetArena() == nullptr) {
      delete event_.epoch_event_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::EpochEvent* BusEvent::release_epoch_event() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.epoch_event)
  if (_internal_has_epoch_event()) {
    clear_has_event();
      ::vega::events::v1::EpochEvent* temp = event_.epoch_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.epoch_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::EpochEvent& BusEvent::_internal_epoch_event() const {
  return _internal_has_epoch_event()
      ? *event_.epoch_event_
      : reinterpret_cast< ::vega::events::v1::EpochEvent&>(::vega::events::v1::_EpochEvent_default_instance_);
}
inline const ::vega::events::v1::EpochEvent& BusEvent::epoch_event() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.epoch_event)
  return _internal_epoch_event();
}
inline ::vega::events::v1::EpochEvent* BusEvent::unsafe_arena_release_epoch_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.epoch_event)
  if (_internal_has_epoch_event()) {
    clear_has_event();
    ::vega::events::v1::EpochEvent* temp = event_.epoch_event_;
    event_.epoch_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_epoch_event(::vega::events::v1::EpochEvent* epoch_event) {
  clear_event();
  if (epoch_event) {
    set_has_epoch_event();
    event_.epoch_event_ = epoch_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.epoch_event)
}
inline ::vega::events::v1::EpochEvent* BusEvent::_internal_mutable_epoch_event() {
  if (!_internal_has_epoch_event()) {
    clear_event();
    set_has_epoch_event();
    event_.epoch_event_ = CreateMaybeMessage< ::vega::events::v1::EpochEvent >(GetArena());
  }
  return event_.epoch_event_;
}
inline ::vega::events::v1::EpochEvent* BusEvent::mutable_epoch_event() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.epoch_event)
  return _internal_mutable_epoch_event();
}

// .vega.events.v1.ValidatorUpdate validator_update = 132 [json_name = "validatorUpdate"];
inline bool BusEvent::_internal_has_validator_update() const {
  return event_case() == kValidatorUpdate;
}
inline bool BusEvent::has_validator_update() const {
  return _internal_has_validator_update();
}
inline void BusEvent::set_has_validator_update() {
  _oneof_case_[0] = kValidatorUpdate;
}
inline void BusEvent::clear_validator_update() {
  if (_internal_has_validator_update()) {
    if (GetArena() == nullptr) {
      delete event_.validator_update_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::ValidatorUpdate* BusEvent::release_validator_update() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.validator_update)
  if (_internal_has_validator_update()) {
    clear_has_event();
      ::vega::events::v1::ValidatorUpdate* temp = event_.validator_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.validator_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::ValidatorUpdate& BusEvent::_internal_validator_update() const {
  return _internal_has_validator_update()
      ? *event_.validator_update_
      : reinterpret_cast< ::vega::events::v1::ValidatorUpdate&>(::vega::events::v1::_ValidatorUpdate_default_instance_);
}
inline const ::vega::events::v1::ValidatorUpdate& BusEvent::validator_update() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.validator_update)
  return _internal_validator_update();
}
inline ::vega::events::v1::ValidatorUpdate* BusEvent::unsafe_arena_release_validator_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.validator_update)
  if (_internal_has_validator_update()) {
    clear_has_event();
    ::vega::events::v1::ValidatorUpdate* temp = event_.validator_update_;
    event_.validator_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_validator_update(::vega::events::v1::ValidatorUpdate* validator_update) {
  clear_event();
  if (validator_update) {
    set_has_validator_update();
    event_.validator_update_ = validator_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.validator_update)
}
inline ::vega::events::v1::ValidatorUpdate* BusEvent::_internal_mutable_validator_update() {
  if (!_internal_has_validator_update()) {
    clear_event();
    set_has_validator_update();
    event_.validator_update_ = CreateMaybeMessage< ::vega::events::v1::ValidatorUpdate >(GetArena());
  }
  return event_.validator_update_;
}
inline ::vega::events::v1::ValidatorUpdate* BusEvent::mutable_validator_update() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.validator_update)
  return _internal_mutable_validator_update();
}

// .vega.events.v1.StakeLinking stake_linking = 133 [json_name = "stakeLinking"];
inline bool BusEvent::_internal_has_stake_linking() const {
  return event_case() == kStakeLinking;
}
inline bool BusEvent::has_stake_linking() const {
  return _internal_has_stake_linking();
}
inline void BusEvent::set_has_stake_linking() {
  _oneof_case_[0] = kStakeLinking;
}
inline void BusEvent::clear_stake_linking() {
  if (_internal_has_stake_linking()) {
    if (GetArena() == nullptr) {
      delete event_.stake_linking_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::StakeLinking* BusEvent::release_stake_linking() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.stake_linking)
  if (_internal_has_stake_linking()) {
    clear_has_event();
      ::vega::events::v1::StakeLinking* temp = event_.stake_linking_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.stake_linking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::StakeLinking& BusEvent::_internal_stake_linking() const {
  return _internal_has_stake_linking()
      ? *event_.stake_linking_
      : reinterpret_cast< ::vega::events::v1::StakeLinking&>(::vega::events::v1::_StakeLinking_default_instance_);
}
inline const ::vega::events::v1::StakeLinking& BusEvent::stake_linking() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.stake_linking)
  return _internal_stake_linking();
}
inline ::vega::events::v1::StakeLinking* BusEvent::unsafe_arena_release_stake_linking() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.stake_linking)
  if (_internal_has_stake_linking()) {
    clear_has_event();
    ::vega::events::v1::StakeLinking* temp = event_.stake_linking_;
    event_.stake_linking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_stake_linking(::vega::events::v1::StakeLinking* stake_linking) {
  clear_event();
  if (stake_linking) {
    set_has_stake_linking();
    event_.stake_linking_ = stake_linking;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.stake_linking)
}
inline ::vega::events::v1::StakeLinking* BusEvent::_internal_mutable_stake_linking() {
  if (!_internal_has_stake_linking()) {
    clear_event();
    set_has_stake_linking();
    event_.stake_linking_ = CreateMaybeMessage< ::vega::events::v1::StakeLinking >(GetArena());
  }
  return event_.stake_linking_;
}
inline ::vega::events::v1::StakeLinking* BusEvent::mutable_stake_linking() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.stake_linking)
  return _internal_mutable_stake_linking();
}

// .vega.events.v1.RewardPayoutEvent reward_payout = 134 [json_name = "rewardPayout"];
inline bool BusEvent::_internal_has_reward_payout() const {
  return event_case() == kRewardPayout;
}
inline bool BusEvent::has_reward_payout() const {
  return _internal_has_reward_payout();
}
inline void BusEvent::set_has_reward_payout() {
  _oneof_case_[0] = kRewardPayout;
}
inline void BusEvent::clear_reward_payout() {
  if (_internal_has_reward_payout()) {
    if (GetArena() == nullptr) {
      delete event_.reward_payout_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::RewardPayoutEvent* BusEvent::release_reward_payout() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.reward_payout)
  if (_internal_has_reward_payout()) {
    clear_has_event();
      ::vega::events::v1::RewardPayoutEvent* temp = event_.reward_payout_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.reward_payout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::RewardPayoutEvent& BusEvent::_internal_reward_payout() const {
  return _internal_has_reward_payout()
      ? *event_.reward_payout_
      : reinterpret_cast< ::vega::events::v1::RewardPayoutEvent&>(::vega::events::v1::_RewardPayoutEvent_default_instance_);
}
inline const ::vega::events::v1::RewardPayoutEvent& BusEvent::reward_payout() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.reward_payout)
  return _internal_reward_payout();
}
inline ::vega::events::v1::RewardPayoutEvent* BusEvent::unsafe_arena_release_reward_payout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.reward_payout)
  if (_internal_has_reward_payout()) {
    clear_has_event();
    ::vega::events::v1::RewardPayoutEvent* temp = event_.reward_payout_;
    event_.reward_payout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_reward_payout(::vega::events::v1::RewardPayoutEvent* reward_payout) {
  clear_event();
  if (reward_payout) {
    set_has_reward_payout();
    event_.reward_payout_ = reward_payout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.reward_payout)
}
inline ::vega::events::v1::RewardPayoutEvent* BusEvent::_internal_mutable_reward_payout() {
  if (!_internal_has_reward_payout()) {
    clear_event();
    set_has_reward_payout();
    event_.reward_payout_ = CreateMaybeMessage< ::vega::events::v1::RewardPayoutEvent >(GetArena());
  }
  return event_.reward_payout_;
}
inline ::vega::events::v1::RewardPayoutEvent* BusEvent::mutable_reward_payout() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.reward_payout)
  return _internal_mutable_reward_payout();
}

// .vega.events.v1.CheckpointEvent checkpoint = 135 [json_name = "checkpoint"];
inline bool BusEvent::_internal_has_checkpoint() const {
  return event_case() == kCheckpoint;
}
inline bool BusEvent::has_checkpoint() const {
  return _internal_has_checkpoint();
}
inline void BusEvent::set_has_checkpoint() {
  _oneof_case_[0] = kCheckpoint;
}
inline void BusEvent::clear_checkpoint() {
  if (_internal_has_checkpoint()) {
    if (GetArena() == nullptr) {
      delete event_.checkpoint_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::CheckpointEvent* BusEvent::release_checkpoint() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.checkpoint)
  if (_internal_has_checkpoint()) {
    clear_has_event();
      ::vega::events::v1::CheckpointEvent* temp = event_.checkpoint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.checkpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::CheckpointEvent& BusEvent::_internal_checkpoint() const {
  return _internal_has_checkpoint()
      ? *event_.checkpoint_
      : reinterpret_cast< ::vega::events::v1::CheckpointEvent&>(::vega::events::v1::_CheckpointEvent_default_instance_);
}
inline const ::vega::events::v1::CheckpointEvent& BusEvent::checkpoint() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.checkpoint)
  return _internal_checkpoint();
}
inline ::vega::events::v1::CheckpointEvent* BusEvent::unsafe_arena_release_checkpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.checkpoint)
  if (_internal_has_checkpoint()) {
    clear_has_event();
    ::vega::events::v1::CheckpointEvent* temp = event_.checkpoint_;
    event_.checkpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_checkpoint(::vega::events::v1::CheckpointEvent* checkpoint) {
  clear_event();
  if (checkpoint) {
    set_has_checkpoint();
    event_.checkpoint_ = checkpoint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.checkpoint)
}
inline ::vega::events::v1::CheckpointEvent* BusEvent::_internal_mutable_checkpoint() {
  if (!_internal_has_checkpoint()) {
    clear_event();
    set_has_checkpoint();
    event_.checkpoint_ = CreateMaybeMessage< ::vega::events::v1::CheckpointEvent >(GetArena());
  }
  return event_.checkpoint_;
}
inline ::vega::events::v1::CheckpointEvent* BusEvent::mutable_checkpoint() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.checkpoint)
  return _internal_mutable_checkpoint();
}

// .vega.events.v1.MarketEvent market = 1001 [json_name = "market"];
inline bool BusEvent::_internal_has_market() const {
  return event_case() == kMarket;
}
inline bool BusEvent::has_market() const {
  return _internal_has_market();
}
inline void BusEvent::set_has_market() {
  _oneof_case_[0] = kMarket;
}
inline void BusEvent::clear_market() {
  if (_internal_has_market()) {
    if (GetArena() == nullptr) {
      delete event_.market_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::MarketEvent* BusEvent::release_market() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.market)
  if (_internal_has_market()) {
    clear_has_event();
      ::vega::events::v1::MarketEvent* temp = event_.market_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.market_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::MarketEvent& BusEvent::_internal_market() const {
  return _internal_has_market()
      ? *event_.market_
      : reinterpret_cast< ::vega::events::v1::MarketEvent&>(::vega::events::v1::_MarketEvent_default_instance_);
}
inline const ::vega::events::v1::MarketEvent& BusEvent::market() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.market)
  return _internal_market();
}
inline ::vega::events::v1::MarketEvent* BusEvent::unsafe_arena_release_market() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.market)
  if (_internal_has_market()) {
    clear_has_event();
    ::vega::events::v1::MarketEvent* temp = event_.market_;
    event_.market_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_market(::vega::events::v1::MarketEvent* market) {
  clear_event();
  if (market) {
    set_has_market();
    event_.market_ = market;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.market)
}
inline ::vega::events::v1::MarketEvent* BusEvent::_internal_mutable_market() {
  if (!_internal_has_market()) {
    clear_event();
    set_has_market();
    event_.market_ = CreateMaybeMessage< ::vega::events::v1::MarketEvent >(GetArena());
  }
  return event_.market_;
}
inline ::vega::events::v1::MarketEvent* BusEvent::mutable_market() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.market)
  return _internal_mutable_market();
}

// .vega.events.v1.TxErrorEvent tx_err_event = 2001 [json_name = "txErrEvent"];
inline bool BusEvent::_internal_has_tx_err_event() const {
  return event_case() == kTxErrEvent;
}
inline bool BusEvent::has_tx_err_event() const {
  return _internal_has_tx_err_event();
}
inline void BusEvent::set_has_tx_err_event() {
  _oneof_case_[0] = kTxErrEvent;
}
inline void BusEvent::clear_tx_err_event() {
  if (_internal_has_tx_err_event()) {
    if (GetArena() == nullptr) {
      delete event_.tx_err_event_;
    }
    clear_has_event();
  }
}
inline ::vega::events::v1::TxErrorEvent* BusEvent::release_tx_err_event() {
  // @@protoc_insertion_point(field_release:vega.events.v1.BusEvent.tx_err_event)
  if (_internal_has_tx_err_event()) {
    clear_has_event();
      ::vega::events::v1::TxErrorEvent* temp = event_.tx_err_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.tx_err_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::events::v1::TxErrorEvent& BusEvent::_internal_tx_err_event() const {
  return _internal_has_tx_err_event()
      ? *event_.tx_err_event_
      : reinterpret_cast< ::vega::events::v1::TxErrorEvent&>(::vega::events::v1::_TxErrorEvent_default_instance_);
}
inline const ::vega::events::v1::TxErrorEvent& BusEvent::tx_err_event() const {
  // @@protoc_insertion_point(field_get:vega.events.v1.BusEvent.tx_err_event)
  return _internal_tx_err_event();
}
inline ::vega::events::v1::TxErrorEvent* BusEvent::unsafe_arena_release_tx_err_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.events.v1.BusEvent.tx_err_event)
  if (_internal_has_tx_err_event()) {
    clear_has_event();
    ::vega::events::v1::TxErrorEvent* temp = event_.tx_err_event_;
    event_.tx_err_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_tx_err_event(::vega::events::v1::TxErrorEvent* tx_err_event) {
  clear_event();
  if (tx_err_event) {
    set_has_tx_err_event();
    event_.tx_err_event_ = tx_err_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.events.v1.BusEvent.tx_err_event)
}
inline ::vega::events::v1::TxErrorEvent* BusEvent::_internal_mutable_tx_err_event() {
  if (!_internal_has_tx_err_event()) {
    clear_event();
    set_has_tx_err_event();
    event_.tx_err_event_ = CreateMaybeMessage< ::vega::events::v1::TxErrorEvent >(GetArena());
  }
  return event_.tx_err_event_;
}
inline ::vega::events::v1::TxErrorEvent* BusEvent::mutable_tx_err_event() {
  // @@protoc_insertion_point(field_mutable:vega.events.v1.BusEvent.tx_err_event)
  return _internal_mutable_tx_err_event();
}

inline bool BusEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void BusEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline BusEvent::EventCase BusEvent::event_case() const {
  return BusEvent::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace events
}  // namespace vega

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vega::events::v1::StakeLinking_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::events::v1::StakeLinking_Type>() {
  return ::vega::events::v1::StakeLinking_Type_descriptor();
}
template <> struct is_proto_enum< ::vega::events::v1::StakeLinking_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::events::v1::StakeLinking_Status>() {
  return ::vega::events::v1::StakeLinking_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::events::v1::BusEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::events::v1::BusEventType>() {
  return ::vega::events::v1::BusEventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_events_2fv1_2fevents_2eproto
