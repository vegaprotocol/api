// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: governance.proto

#include "governance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_oracles_2fv1_2fspec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OracleSpecConfiguration_oracles_2fv1_2fspec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_assets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AssetDetails_assets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContinuousTrading_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscreteTrading_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FutureProduct_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GovernanceData_NoPartyEntry_DoNotUse_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GovernanceData_YesPartyEntry_DoNotUse_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentConfiguration_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityMonitoringParameters_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiquidityOrder_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogNormalRiskModel_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParameter_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewAsset_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NewMarket_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewMarketCommitment_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_NewMarketConfiguration_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OracleSpecToFutureBinding_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceMonitoringParameters_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proposal_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProposalTerms_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleModelParams_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateMarket_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateNetworkParameter_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vote_governance_2eproto;
namespace vega {
class FutureProductDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FutureProduct> _instance;
} _FutureProduct_default_instance_;
class InstrumentConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentConfiguration> _instance;
} _InstrumentConfiguration_default_instance_;
class NewMarketConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewMarketConfiguration> _instance;
} _NewMarketConfiguration_default_instance_;
class NewMarketCommitmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewMarketCommitment> _instance;
} _NewMarketCommitment_default_instance_;
class NewMarketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewMarket> _instance;
} _NewMarket_default_instance_;
class UpdateMarketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMarket> _instance;
} _UpdateMarket_default_instance_;
class UpdateNetworkParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateNetworkParameter> _instance;
} _UpdateNetworkParameter_default_instance_;
class NewAssetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewAsset> _instance;
} _NewAsset_default_instance_;
class ProposalTermsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProposalTerms> _instance;
} _ProposalTerms_default_instance_;
class GovernanceData_YesPartyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GovernanceData_YesPartyEntry_DoNotUse> _instance;
} _GovernanceData_YesPartyEntry_DoNotUse_default_instance_;
class GovernanceData_NoPartyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GovernanceData_NoPartyEntry_DoNotUse> _instance;
} _GovernanceData_NoPartyEntry_DoNotUse_default_instance_;
class GovernanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GovernanceData> _instance;
} _GovernanceData_default_instance_;
class ProposalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proposal> _instance;
} _Proposal_default_instance_;
class VoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vote> _instance;
} _Vote_default_instance_;
}  // namespace vega
static void InitDefaultsscc_info_FutureProduct_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_FutureProduct_default_instance_;
    new (ptr) ::vega::FutureProduct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FutureProduct_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FutureProduct_governance_2eproto}, {
      &scc_info_OracleSpecConfiguration_oracles_2fv1_2fspec_2eproto.base,
      &scc_info_OracleSpecToFutureBinding_markets_2eproto.base,}};

static void InitDefaultsscc_info_GovernanceData_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_GovernanceData_default_instance_;
    new (ptr) ::vega::GovernanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GovernanceData_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_GovernanceData_governance_2eproto}, {
      &scc_info_Proposal_governance_2eproto.base,
      &scc_info_Vote_governance_2eproto.base,
      &scc_info_GovernanceData_YesPartyEntry_DoNotUse_governance_2eproto.base,
      &scc_info_GovernanceData_NoPartyEntry_DoNotUse_governance_2eproto.base,}};

static void InitDefaultsscc_info_GovernanceData_NoPartyEntry_DoNotUse_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_GovernanceData_NoPartyEntry_DoNotUse_default_instance_;
    new (ptr) ::vega::GovernanceData_NoPartyEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GovernanceData_NoPartyEntry_DoNotUse_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GovernanceData_NoPartyEntry_DoNotUse_governance_2eproto}, {
      &scc_info_Vote_governance_2eproto.base,}};

static void InitDefaultsscc_info_GovernanceData_YesPartyEntry_DoNotUse_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_GovernanceData_YesPartyEntry_DoNotUse_default_instance_;
    new (ptr) ::vega::GovernanceData_YesPartyEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GovernanceData_YesPartyEntry_DoNotUse_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GovernanceData_YesPartyEntry_DoNotUse_governance_2eproto}, {
      &scc_info_Vote_governance_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentConfiguration_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_InstrumentConfiguration_default_instance_;
    new (ptr) ::vega::InstrumentConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentConfiguration_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstrumentConfiguration_governance_2eproto}, {
      &scc_info_FutureProduct_governance_2eproto.base,}};

static void InitDefaultsscc_info_NewAsset_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NewAsset_default_instance_;
    new (ptr) ::vega::NewAsset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewAsset_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewAsset_governance_2eproto}, {
      &scc_info_AssetDetails_assets_2eproto.base,}};

static void InitDefaultsscc_info_NewMarket_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NewMarket_default_instance_;
    new (ptr) ::vega::NewMarket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NewMarket_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NewMarket_governance_2eproto}, {
      &scc_info_NewMarketConfiguration_governance_2eproto.base,
      &scc_info_NewMarketCommitment_governance_2eproto.base,}};

static void InitDefaultsscc_info_NewMarketCommitment_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NewMarketCommitment_default_instance_;
    new (ptr) ::vega::NewMarketCommitment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewMarketCommitment_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewMarketCommitment_governance_2eproto}, {
      &scc_info_LiquidityOrder_vega_2eproto.base,}};

static void InitDefaultsscc_info_NewMarketConfiguration_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NewMarketConfiguration_default_instance_;
    new (ptr) ::vega::NewMarketConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_NewMarketConfiguration_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_NewMarketConfiguration_governance_2eproto}, {
      &scc_info_InstrumentConfiguration_governance_2eproto.base,
      &scc_info_PriceMonitoringParameters_markets_2eproto.base,
      &scc_info_LiquidityMonitoringParameters_markets_2eproto.base,
      &scc_info_SimpleModelParams_markets_2eproto.base,
      &scc_info_LogNormalRiskModel_markets_2eproto.base,
      &scc_info_ContinuousTrading_markets_2eproto.base,
      &scc_info_DiscreteTrading_markets_2eproto.base,}};

static void InitDefaultsscc_info_Proposal_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Proposal_default_instance_;
    new (ptr) ::vega::Proposal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proposal_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Proposal_governance_2eproto}, {
      &scc_info_ProposalTerms_governance_2eproto.base,}};

static void InitDefaultsscc_info_ProposalTerms_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ProposalTerms_default_instance_;
    new (ptr) ::vega::ProposalTerms();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProposalTerms_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ProposalTerms_governance_2eproto}, {
      &scc_info_UpdateMarket_governance_2eproto.base,
      &scc_info_NewMarket_governance_2eproto.base,
      &scc_info_UpdateNetworkParameter_governance_2eproto.base,
      &scc_info_NewAsset_governance_2eproto.base,}};

static void InitDefaultsscc_info_UpdateMarket_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_UpdateMarket_default_instance_;
    new (ptr) ::vega::UpdateMarket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateMarket_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateMarket_governance_2eproto}, {}};

static void InitDefaultsscc_info_UpdateNetworkParameter_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_UpdateNetworkParameter_default_instance_;
    new (ptr) ::vega::UpdateNetworkParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateNetworkParameter_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateNetworkParameter_governance_2eproto}, {
      &scc_info_NetworkParameter_vega_2eproto.base,}};

static void InitDefaultsscc_info_Vote_governance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Vote_default_instance_;
    new (ptr) ::vega::Vote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vote_governance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vote_governance_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_governance_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_governance_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_governance_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_governance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::FutureProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::FutureProduct, maturity_),
  PROTOBUF_FIELD_OFFSET(::vega::FutureProduct, settlement_asset_),
  PROTOBUF_FIELD_OFFSET(::vega::FutureProduct, quote_name_),
  PROTOBUF_FIELD_OFFSET(::vega::FutureProduct, oracle_spec_for_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::vega::FutureProduct, oracle_spec_for_trading_termination_),
  PROTOBUF_FIELD_OFFSET(::vega::FutureProduct, oracle_spec_binding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, code_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, instrument_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, decimal_places_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, metadata_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, price_monitoring_parameters_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, liquidity_monitoring_parameters_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, risk_parameters_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, trading_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketCommitment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketCommitment, commitment_amount_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketCommitment, fee_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketCommitment, sells_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketCommitment, buys_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketCommitment, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarket, changes_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarket, liquidity_commitment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::UpdateMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::UpdateNetworkParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::UpdateNetworkParameter, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NewAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NewAsset, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, closing_timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, enactment_timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, validation_timestamp_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, change_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_YesPartyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_YesPartyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_YesPartyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_YesPartyEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_NoPartyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_NoPartyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_NoPartyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_NoPartyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, proposal_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, yes_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, no_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, yes_party_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, no_party_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, state_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, terms_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, reason_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, error_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Vote, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, value_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, proposal_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, total_governance_token_balance_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, total_governance_token_weight_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::FutureProduct)},
  { 11, -1, sizeof(::vega::InstrumentConfiguration)},
  { 20, -1, sizeof(::vega::NewMarketConfiguration)},
  { 36, -1, sizeof(::vega::NewMarketCommitment)},
  { 46, -1, sizeof(::vega::NewMarket)},
  { 53, -1, sizeof(::vega::UpdateMarket)},
  { 58, -1, sizeof(::vega::UpdateNetworkParameter)},
  { 64, -1, sizeof(::vega::NewAsset)},
  { 70, -1, sizeof(::vega::ProposalTerms)},
  { 83, 90, sizeof(::vega::GovernanceData_YesPartyEntry_DoNotUse)},
  { 92, 99, sizeof(::vega::GovernanceData_NoPartyEntry_DoNotUse)},
  { 101, -1, sizeof(::vega::GovernanceData)},
  { 111, -1, sizeof(::vega::Proposal)},
  { 124, -1, sizeof(::vega::Vote)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_FutureProduct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_InstrumentConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_NewMarketConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_NewMarketCommitment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_NewMarket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_UpdateMarket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_UpdateNetworkParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_NewAsset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ProposalTerms_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_GovernanceData_YesPartyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_GovernanceData_NoPartyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_GovernanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Proposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Vote_default_instance_),
};

const char descriptor_table_protodef_governance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020governance.proto\022\004vega\0326github.com/mwi"
  "tkow/go-proto-validators/validator.proto"
  "\032\rmarkets.proto\032\nvega.proto\032\014assets.prot"
  "o\032\025oracles/v1/spec.proto\"\276\003\n\rFutureProdu"
  "ct\022\"\n\010maturity\030\001 \001(\tB\006\342\337\037\002X\001R\010maturity\0221"
  "\n\020settlement_asset\030\002 \001(\tB\006\342\337\037\002X\001R\017settle"
  "mentAsset\022%\n\nquote_name\030\003 \001(\tB\006\342\337\037\002X\001R\tq"
  "uoteName\022k\n oracle_spec_for_settlement_p"
  "rice\030\005 \001(\0132#.oracles.v1.OracleSpecConfig"
  "urationR\034oracleSpecForSettlementPrice\022q\n"
  "#oracle_spec_for_trading_termination\030\006 \001"
  "(\0132#.oracles.v1.OracleSpecConfigurationR"
  "\037oracleSpecForTradingTermination\022O\n\023orac"
  "le_spec_binding\030\007 \001(\0132\037.vega.OracleSpecT"
  "oFutureBindingR\021oracleSpecBinding\"\213\001\n\027In"
  "strumentConfiguration\022\032\n\004name\030\001 \001(\tB\006\342\337\037"
  "\002X\001R\004name\022\032\n\004code\030\002 \001(\tB\006\342\337\037\002X\001R\004code\022-\n"
  "\006future\030d \001(\0132\023.vega.FutureProductH\000R\006fu"
  "tureB\t\n\007product\"\374\004\n\026NewMarketConfigurati"
  "on\022E\n\ninstrument\030\001 \001(\0132\035.vega.Instrument"
  "ConfigurationB\006\342\337\037\002 \001R\ninstrument\022.\n\016dec"
  "imal_places\030\002 \001(\004B\007\342\337\037\003\030\226\001R\rdecimalPlace"
  "s\022\032\n\010metadata\030\003 \003(\tR\010metadata\022_\n\033price_m"
  "onitoring_parameters\030\004 \001(\0132\037.vega.PriceM"
  "onitoringParametersR\031priceMonitoringPara"
  "meters\022k\n\037liquidity_monitoring_parameter"
  "s\030\005 \001(\0132#.vega.LiquidityMonitoringParame"
  "tersR\035liquidityMonitoringParameters\0221\n\006s"
  "imple\030d \001(\0132\027.vega.SimpleModelParamsH\000R\006"
  "simple\0229\n\nlog_normal\030e \001(\0132\030.vega.LogNor"
  "malRiskModelH\000R\tlogNormal\022:\n\ncontinuous\030"
  "\310\001 \001(\0132\027.vega.ContinuousTradingH\001R\nconti"
  "nuous\0224\n\010discrete\030\311\001 \001(\0132\025.vega.Discrete"
  "TradingH\001R\010discreteB\021\n\017risk_parametersB\016"
  "\n\014trading_mode\"\310\001\n\023NewMarketCommitment\022+"
  "\n\021commitment_amount\030\001 \001(\tR\020commitmentAmo"
  "unt\022\020\n\003fee\030\002 \001(\tR\003fee\022*\n\005sells\030\003 \003(\0132\024.v"
  "ega.LiquidityOrderR\005sells\022(\n\004buys\030\004 \003(\0132"
  "\024.vega.LiquidityOrderR\004buys\022\034\n\treference"
  "\030\005 \001(\tR\treference\"\231\001\n\tNewMarket\022>\n\007chang"
  "es\030\001 \001(\0132\034.vega.NewMarketConfigurationB\006"
  "\342\337\037\002 \001R\007changes\022L\n\024liquidity_commitment\030"
  "\002 \001(\0132\031.vega.NewMarketCommitmentR\023liquid"
  "ityCommitment\"\016\n\014UpdateMarket\"R\n\026UpdateN"
  "etworkParameter\0228\n\007changes\030\001 \001(\0132\026.vega."
  "NetworkParameterB\006\342\337\037\002 \001R\007changes\"@\n\010New"
  "Asset\0224\n\007changes\030\001 \001(\0132\022.vega.AssetDetai"
  "lsB\006\342\337\037\002 \001R\007changes\"\260\003\n\rProposalTerms\0223\n"
  "\021closing_timestamp\030\001 \001(\003B\006\342\337\037\002\020\000R\020closin"
  "gTimestamp\0227\n\023enactment_timestamp\030\002 \001(\003B"
  "\006\342\337\037\002\020\000R\022enactmentTimestamp\0221\n\024validatio"
  "n_timestamp\030\003 \001(\003R\023validationTimestamp\0229"
  "\n\rupdate_market\030e \001(\0132\022.vega.UpdateMarke"
  "tH\000R\014updateMarket\0220\n\nnew_market\030f \001(\0132\017."
  "vega.NewMarketH\000R\tnewMarket\022X\n\030update_ne"
  "twork_parameter\030g \001(\0132\034.vega.UpdateNetwo"
  "rkParameterH\000R\026updateNetworkParameter\022-\n"
  "\tnew_asset\030h \001(\0132\016.vega.NewAssetH\000R\010newA"
  "ssetB\010\n\006change\"\206\003\n\016GovernanceData\022*\n\010pro"
  "posal\030\001 \001(\0132\016.vega.ProposalR\010proposal\022\034\n"
  "\003yes\030\002 \003(\0132\n.vega.VoteR\003yes\022\032\n\002no\030\003 \003(\0132"
  "\n.vega.VoteR\002no\022\?\n\tyes_party\030\004 \003(\0132\".veg"
  "a.GovernanceData.YesPartyEntryR\010yesParty"
  "\022<\n\010no_party\030\005 \003(\0132!.vega.GovernanceData"
  ".NoPartyEntryR\007noParty\032G\n\rYesPartyEntry\022"
  "\020\n\003key\030\001 \001(\tR\003key\022 \n\005value\030\002 \001(\0132\n.vega."
  "VoteR\005value:\0028\001\032F\n\014NoPartyEntry\022\020\n\003key\030\001"
  " \001(\tR\003key\022 \n\005value\030\002 \001(\0132\n.vega.VoteR\005va"
  "lue:\0028\001\"\344\003\n\010Proposal\022\016\n\002id\030\001 \001(\tR\002id\022\034\n\t"
  "reference\030\002 \001(\tR\treference\022!\n\010party_id\030\003"
  " \001(\tB\006\342\337\037\002X\001R\007partyId\0223\n\005state\030\004 \001(\0162\024.v"
  "ega.Proposal.StateB\007\342\337\037\003\210\001\001R\005state\022\034\n\tti"
  "mestamp\030\005 \001(\003R\ttimestamp\0221\n\005terms\030\006 \001(\0132"
  "\023.vega.ProposalTermsB\006\342\337\037\002 \001R\005terms\022+\n\006r"
  "eason\030\007 \001(\0162\023.vega.ProposalErrorR\006reason"
  "\022#\n\rerror_details\030\010 \001(\tR\014errorDetails\"\256\001"
  "\n\005State\022\025\n\021STATE_UNSPECIFIED\020\000\022\020\n\014STATE_"
  "FAILED\020\001\022\016\n\nSTATE_OPEN\020\002\022\020\n\014STATE_PASSED"
  "\020\003\022\022\n\016STATE_REJECTED\020\004\022\022\n\016STATE_DECLINED"
  "\020\005\022\021\n\rSTATE_ENACTED\020\006\022\037\n\033STATE_WAITING_F"
  "OR_NODE_VOTE\020\007\"\346\002\n\004Vote\022!\n\010party_id\030\001 \001("
  "\tB\006\342\337\037\002X\001R\007partyId\022/\n\005value\030\002 \001(\0162\020.vega"
  ".Vote.ValueB\007\342\337\037\003\210\001\001R\005value\022\'\n\013proposal_"
  "id\030\003 \001(\tB\006\342\337\037\002X\001R\nproposalId\022\034\n\ttimestam"
  "p\030\004 \001(\003R\ttimestamp\022C\n\036total_governance_t"
  "oken_balance\030\005 \001(\tR\033totalGovernanceToken"
  "Balance\022A\n\035total_governance_token_weight"
  "\030\006 \001(\tR\032totalGovernanceTokenWeight\";\n\005Va"
  "lue\022\025\n\021VALUE_UNSPECIFIED\020\000\022\014\n\010VALUE_NO\020\001"
  "\022\r\n\tVALUE_YES\020\002*\375\013\n\rProposalError\022\036\n\032PRO"
  "POSAL_ERROR_UNSPECIFIED\020\000\022&\n\"PROPOSAL_ER"
  "ROR_CLOSE_TIME_TOO_SOON\020\001\022&\n\"PROPOSAL_ER"
  "ROR_CLOSE_TIME_TOO_LATE\020\002\022&\n\"PROPOSAL_ER"
  "ROR_ENACT_TIME_TOO_SOON\020\003\022&\n\"PROPOSAL_ER"
  "ROR_ENACT_TIME_TOO_LATE\020\004\022&\n\"PROPOSAL_ER"
  "ROR_INSUFFICIENT_TOKENS\020\005\022.\n*PROPOSAL_ER"
  "ROR_INVALID_INSTRUMENT_SECURITY\020\006\022\035\n\031PRO"
  "POSAL_ERROR_NO_PRODUCT\020\007\022&\n\"PROPOSAL_ERR"
  "OR_UNSUPPORTED_PRODUCT\020\010\0223\n/PROPOSAL_ERR"
  "OR_INVALID_FUTURE_PRODUCT_TIMESTAMP\020\t\022-\n"
  ")PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASS"
  "ED\020\n\022\"\n\036PROPOSAL_ERROR_NO_TRADING_MODE\020\013"
  "\022+\n\'PROPOSAL_ERROR_UNSUPPORTED_TRADING_M"
  "ODE\020\014\022)\n%PROPOSAL_ERROR_NODE_VALIDATION_"
  "FAILED\020\r\022.\n*PROPOSAL_ERROR_MISSING_BUILT"
  "IN_ASSET_FIELD\020\016\0221\n-PROPOSAL_ERROR_MISSI"
  "NG_ERC20_CONTRACT_ADDRESS\020\017\022 \n\034PROPOSAL_"
  "ERROR_INVALID_ASSET\020\020\022*\n&PROPOSAL_ERROR_"
  "INCOMPATIBLE_TIMESTAMPS\020\021\022%\n!PROPOSAL_ER"
  "ROR_NO_RISK_PARAMETERS\020\022\0220\n,PROPOSAL_ERR"
  "OR_NETWORK_PARAMETER_INVALID_KEY\020\023\0222\n.PR"
  "OPOSAL_ERROR_NETWORK_PARAMETER_INVALID_V"
  "ALUE\020\024\0226\n2PROPOSAL_ERROR_NETWORK_PARAMET"
  "ER_VALIDATION_FAILED\020\025\0225\n1PROPOSAL_ERROR"
  "_OPENING_AUCTION_DURATION_TOO_SMALL\020\026\0225\n"
  "1PROPOSAL_ERROR_OPENING_AUCTION_DURATION"
  "_TOO_LARGE\020\027\0226\n2PROPOSAL_ERROR_MARKET_MI"
  "SSING_LIQUIDITY_COMMITMENT\020\030\022/\n+PROPOSAL"
  "_ERROR_COULD_NOT_INSTANTIATE_MARKET\020\031\022)\n"
  "%PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT\020\032"
  "\022,\n(PROPOSAL_ERROR_MISSING_COMMITMENT_AM"
  "OUNT\020\033\022%\n!PROPOSAL_ERROR_INVALID_FEE_AMO"
  "UNT\020\034\022 \n\034PROPOSAL_ERROR_INVALID_SHAPE\020\035\022"
  ")\n%PROPOSAL_ERROR_INVALID_RISK_PARAMETER"
  "\020\036\0221\n-PROPOSAL_ERROR_MAJORITY_THRESHOLD_"
  "NOT_REACHED\020\037\0226\n2PROPOSAL_ERROR_PARTICIP"
  "ATION_THRESHOLD_NOT_REACHED\020 \022(\n$PROPOSA"
  "L_ERROR_INVALID_ASSET_DETAILS\020!B7\n\024io.ve"
  "gaprotocol.vegaZ\037code.vegaprotocol.io/ve"
  "ga/protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_governance_2eproto_deps[5] = {
  &::descriptor_table_assets_2eproto,
  &::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
  &::descriptor_table_markets_2eproto,
  &::descriptor_table_oracles_2fv1_2fspec_2eproto,
  &::descriptor_table_vega_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_governance_2eproto_sccs[14] = {
  &scc_info_FutureProduct_governance_2eproto.base,
  &scc_info_GovernanceData_governance_2eproto.base,
  &scc_info_GovernanceData_NoPartyEntry_DoNotUse_governance_2eproto.base,
  &scc_info_GovernanceData_YesPartyEntry_DoNotUse_governance_2eproto.base,
  &scc_info_InstrumentConfiguration_governance_2eproto.base,
  &scc_info_NewAsset_governance_2eproto.base,
  &scc_info_NewMarket_governance_2eproto.base,
  &scc_info_NewMarketCommitment_governance_2eproto.base,
  &scc_info_NewMarketConfiguration_governance_2eproto.base,
  &scc_info_Proposal_governance_2eproto.base,
  &scc_info_ProposalTerms_governance_2eproto.base,
  &scc_info_UpdateMarket_governance_2eproto.base,
  &scc_info_UpdateNetworkParameter_governance_2eproto.base,
  &scc_info_Vote_governance_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_governance_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_governance_2eproto = {
  false, false, descriptor_table_protodef_governance_2eproto, "governance.proto", 5176,
  &descriptor_table_governance_2eproto_once, descriptor_table_governance_2eproto_sccs, descriptor_table_governance_2eproto_deps, 14, 5,
  schemas, file_default_instances, TableStruct_governance_2eproto::offsets,
  file_level_metadata_governance_2eproto, 14, file_level_enum_descriptors_governance_2eproto, file_level_service_descriptors_governance_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_governance_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_governance_2eproto)), true);
namespace vega {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proposal_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_governance_2eproto);
  return file_level_enum_descriptors_governance_2eproto[0];
}
bool Proposal_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Proposal_State Proposal::STATE_UNSPECIFIED;
constexpr Proposal_State Proposal::STATE_FAILED;
constexpr Proposal_State Proposal::STATE_OPEN;
constexpr Proposal_State Proposal::STATE_PASSED;
constexpr Proposal_State Proposal::STATE_REJECTED;
constexpr Proposal_State Proposal::STATE_DECLINED;
constexpr Proposal_State Proposal::STATE_ENACTED;
constexpr Proposal_State Proposal::STATE_WAITING_FOR_NODE_VOTE;
constexpr Proposal_State Proposal::State_MIN;
constexpr Proposal_State Proposal::State_MAX;
constexpr int Proposal::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vote_Value_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_governance_2eproto);
  return file_level_enum_descriptors_governance_2eproto[1];
}
bool Vote_Value_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vote_Value Vote::VALUE_UNSPECIFIED;
constexpr Vote_Value Vote::VALUE_NO;
constexpr Vote_Value Vote::VALUE_YES;
constexpr Vote_Value Vote::Value_MIN;
constexpr Vote_Value Vote::Value_MAX;
constexpr int Vote::Value_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProposalError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_governance_2eproto);
  return file_level_enum_descriptors_governance_2eproto[2];
}
bool ProposalError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FutureProduct::_Internal {
 public:
  static const ::oracles::v1::OracleSpecConfiguration& oracle_spec_for_settlement_price(const FutureProduct* msg);
  static const ::oracles::v1::OracleSpecConfiguration& oracle_spec_for_trading_termination(const FutureProduct* msg);
  static const ::vega::OracleSpecToFutureBinding& oracle_spec_binding(const FutureProduct* msg);
};

const ::oracles::v1::OracleSpecConfiguration&
FutureProduct::_Internal::oracle_spec_for_settlement_price(const FutureProduct* msg) {
  return *msg->oracle_spec_for_settlement_price_;
}
const ::oracles::v1::OracleSpecConfiguration&
FutureProduct::_Internal::oracle_spec_for_trading_termination(const FutureProduct* msg) {
  return *msg->oracle_spec_for_trading_termination_;
}
const ::vega::OracleSpecToFutureBinding&
FutureProduct::_Internal::oracle_spec_binding(const FutureProduct* msg) {
  return *msg->oracle_spec_binding_;
}
void FutureProduct::clear_oracle_spec_for_settlement_price() {
  if (GetArena() == nullptr && oracle_spec_for_settlement_price_ != nullptr) {
    delete oracle_spec_for_settlement_price_;
  }
  oracle_spec_for_settlement_price_ = nullptr;
}
void FutureProduct::clear_oracle_spec_for_trading_termination() {
  if (GetArena() == nullptr && oracle_spec_for_trading_termination_ != nullptr) {
    delete oracle_spec_for_trading_termination_;
  }
  oracle_spec_for_trading_termination_ = nullptr;
}
void FutureProduct::clear_oracle_spec_binding() {
  if (GetArena() == nullptr && oracle_spec_binding_ != nullptr) {
    delete oracle_spec_binding_;
  }
  oracle_spec_binding_ = nullptr;
}
FutureProduct::FutureProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.FutureProduct)
}
FutureProduct::FutureProduct(const FutureProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maturity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maturity().empty()) {
    maturity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maturity(),
      GetArena());
  }
  settlement_asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_settlement_asset().empty()) {
    settlement_asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_settlement_asset(),
      GetArena());
  }
  quote_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quote_name().empty()) {
    quote_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quote_name(),
      GetArena());
  }
  if (from._internal_has_oracle_spec_for_settlement_price()) {
    oracle_spec_for_settlement_price_ = new ::oracles::v1::OracleSpecConfiguration(*from.oracle_spec_for_settlement_price_);
  } else {
    oracle_spec_for_settlement_price_ = nullptr;
  }
  if (from._internal_has_oracle_spec_for_trading_termination()) {
    oracle_spec_for_trading_termination_ = new ::oracles::v1::OracleSpecConfiguration(*from.oracle_spec_for_trading_termination_);
  } else {
    oracle_spec_for_trading_termination_ = nullptr;
  }
  if (from._internal_has_oracle_spec_binding()) {
    oracle_spec_binding_ = new ::vega::OracleSpecToFutureBinding(*from.oracle_spec_binding_);
  } else {
    oracle_spec_binding_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.FutureProduct)
}

void FutureProduct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FutureProduct_governance_2eproto.base);
  maturity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settlement_asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quote_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&oracle_spec_for_settlement_price_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oracle_spec_binding_) -
      reinterpret_cast<char*>(&oracle_spec_for_settlement_price_)) + sizeof(oracle_spec_binding_));
}

FutureProduct::~FutureProduct() {
  // @@protoc_insertion_point(destructor:vega.FutureProduct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FutureProduct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  maturity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settlement_asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quote_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete oracle_spec_for_settlement_price_;
  if (this != internal_default_instance()) delete oracle_spec_for_trading_termination_;
  if (this != internal_default_instance()) delete oracle_spec_binding_;
}

void FutureProduct::ArenaDtor(void* object) {
  FutureProduct* _this = reinterpret_cast< FutureProduct* >(object);
  (void)_this;
}
void FutureProduct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FutureProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FutureProduct& FutureProduct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FutureProduct_governance_2eproto.base);
  return *internal_default_instance();
}


void FutureProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.FutureProduct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maturity_.ClearToEmpty();
  settlement_asset_.ClearToEmpty();
  quote_name_.ClearToEmpty();
  if (GetArena() == nullptr && oracle_spec_for_settlement_price_ != nullptr) {
    delete oracle_spec_for_settlement_price_;
  }
  oracle_spec_for_settlement_price_ = nullptr;
  if (GetArena() == nullptr && oracle_spec_for_trading_termination_ != nullptr) {
    delete oracle_spec_for_trading_termination_;
  }
  oracle_spec_for_trading_termination_ = nullptr;
  if (GetArena() == nullptr && oracle_spec_binding_ != nullptr) {
    delete oracle_spec_binding_;
  }
  oracle_spec_binding_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FutureProduct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string maturity = 1 [json_name = "maturity", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_maturity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.FutureProduct.maturity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string settlement_asset = 2 [json_name = "settlementAsset", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_settlement_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.FutureProduct.settlement_asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quote_name = 3 [json_name = "quoteName", (.validator.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_quote_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.FutureProduct.quote_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .oracles.v1.OracleSpecConfiguration oracle_spec_for_settlement_price = 5 [json_name = "oracleSpecForSettlementPrice"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_spec_for_settlement_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .oracles.v1.OracleSpecConfiguration oracle_spec_for_trading_termination = 6 [json_name = "oracleSpecForTradingTermination"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_spec_for_trading_termination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.OracleSpecToFutureBinding oracle_spec_binding = 7 [json_name = "oracleSpecBinding"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_spec_binding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FutureProduct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.FutureProduct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string maturity = 1 [json_name = "maturity", (.validator.field) = {
  if (this->maturity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maturity().data(), static_cast<int>(this->_internal_maturity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.FutureProduct.maturity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_maturity(), target);
  }

  // string settlement_asset = 2 [json_name = "settlementAsset", (.validator.field) = {
  if (this->settlement_asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settlement_asset().data(), static_cast<int>(this->_internal_settlement_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.FutureProduct.settlement_asset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_settlement_asset(), target);
  }

  // string quote_name = 3 [json_name = "quoteName", (.validator.field) = {
  if (this->quote_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote_name().data(), static_cast<int>(this->_internal_quote_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.FutureProduct.quote_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_quote_name(), target);
  }

  // .oracles.v1.OracleSpecConfiguration oracle_spec_for_settlement_price = 5 [json_name = "oracleSpecForSettlementPrice"];
  if (this->has_oracle_spec_for_settlement_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::oracle_spec_for_settlement_price(this), target, stream);
  }

  // .oracles.v1.OracleSpecConfiguration oracle_spec_for_trading_termination = 6 [json_name = "oracleSpecForTradingTermination"];
  if (this->has_oracle_spec_for_trading_termination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::oracle_spec_for_trading_termination(this), target, stream);
  }

  // .vega.OracleSpecToFutureBinding oracle_spec_binding = 7 [json_name = "oracleSpecBinding"];
  if (this->has_oracle_spec_binding()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::oracle_spec_binding(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.FutureProduct)
  return target;
}

size_t FutureProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.FutureProduct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string maturity = 1 [json_name = "maturity", (.validator.field) = {
  if (this->maturity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maturity());
  }

  // string settlement_asset = 2 [json_name = "settlementAsset", (.validator.field) = {
  if (this->settlement_asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settlement_asset());
  }

  // string quote_name = 3 [json_name = "quoteName", (.validator.field) = {
  if (this->quote_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote_name());
  }

  // .oracles.v1.OracleSpecConfiguration oracle_spec_for_settlement_price = 5 [json_name = "oracleSpecForSettlementPrice"];
  if (this->has_oracle_spec_for_settlement_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oracle_spec_for_settlement_price_);
  }

  // .oracles.v1.OracleSpecConfiguration oracle_spec_for_trading_termination = 6 [json_name = "oracleSpecForTradingTermination"];
  if (this->has_oracle_spec_for_trading_termination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oracle_spec_for_trading_termination_);
  }

  // .vega.OracleSpecToFutureBinding oracle_spec_binding = 7 [json_name = "oracleSpecBinding"];
  if (this->has_oracle_spec_binding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oracle_spec_binding_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureProduct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.FutureProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureProduct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FutureProduct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.FutureProduct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.FutureProduct)
    MergeFrom(*source);
  }
}

void FutureProduct::MergeFrom(const FutureProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.FutureProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maturity().size() > 0) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (from.settlement_asset().size() > 0) {
    _internal_set_settlement_asset(from._internal_settlement_asset());
  }
  if (from.quote_name().size() > 0) {
    _internal_set_quote_name(from._internal_quote_name());
  }
  if (from.has_oracle_spec_for_settlement_price()) {
    _internal_mutable_oracle_spec_for_settlement_price()->::oracles::v1::OracleSpecConfiguration::MergeFrom(from._internal_oracle_spec_for_settlement_price());
  }
  if (from.has_oracle_spec_for_trading_termination()) {
    _internal_mutable_oracle_spec_for_trading_termination()->::oracles::v1::OracleSpecConfiguration::MergeFrom(from._internal_oracle_spec_for_trading_termination());
  }
  if (from.has_oracle_spec_binding()) {
    _internal_mutable_oracle_spec_binding()->::vega::OracleSpecToFutureBinding::MergeFrom(from._internal_oracle_spec_binding());
  }
}

void FutureProduct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.FutureProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureProduct::CopyFrom(const FutureProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.FutureProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureProduct::IsInitialized() const {
  return true;
}

void FutureProduct::InternalSwap(FutureProduct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  maturity_.Swap(&other->maturity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  settlement_asset_.Swap(&other->settlement_asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quote_name_.Swap(&other->quote_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FutureProduct, oracle_spec_binding_)
      + sizeof(FutureProduct::oracle_spec_binding_)
      - PROTOBUF_FIELD_OFFSET(FutureProduct, oracle_spec_for_settlement_price_)>(
          reinterpret_cast<char*>(&oracle_spec_for_settlement_price_),
          reinterpret_cast<char*>(&other->oracle_spec_for_settlement_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FutureProduct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InstrumentConfiguration::_Internal {
 public:
  static const ::vega::FutureProduct& future(const InstrumentConfiguration* msg);
};

const ::vega::FutureProduct&
InstrumentConfiguration::_Internal::future(const InstrumentConfiguration* msg) {
  return *msg->product_.future_;
}
void InstrumentConfiguration::set_allocated_future(::vega::FutureProduct* future) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product();
  if (future) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(future);
    if (message_arena != submessage_arena) {
      future = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, future, submessage_arena);
    }
    set_has_future();
    product_.future_ = future;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.InstrumentConfiguration.future)
}
InstrumentConfiguration::InstrumentConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.InstrumentConfiguration)
}
InstrumentConfiguration::InstrumentConfiguration(const InstrumentConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(),
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(),
      GetArena());
  }
  clear_has_product();
  switch (from.product_case()) {
    case kFuture: {
      _internal_mutable_future()->::vega::FutureProduct::MergeFrom(from._internal_future());
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.InstrumentConfiguration)
}

void InstrumentConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentConfiguration_governance_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_product();
}

InstrumentConfiguration::~InstrumentConfiguration() {
  // @@protoc_insertion_point(destructor:vega.InstrumentConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_product()) {
    clear_product();
  }
}

void InstrumentConfiguration::ArenaDtor(void* object) {
  InstrumentConfiguration* _this = reinterpret_cast< InstrumentConfiguration* >(object);
  (void)_this;
}
void InstrumentConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentConfiguration& InstrumentConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentConfiguration_governance_2eproto.base);
  return *internal_default_instance();
}


void InstrumentConfiguration::clear_product() {
// @@protoc_insertion_point(one_of_clear_start:vega.InstrumentConfiguration)
  switch (product_case()) {
    case kFuture: {
      if (GetArena() == nullptr) {
        delete product_.future_;
      }
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PRODUCT_NOT_SET;
}


void InstrumentConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.InstrumentConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  code_.ClearToEmpty();
  clear_product();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.InstrumentConfiguration.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2 [json_name = "code", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.InstrumentConfiguration.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.FutureProduct future = 100 [json_name = "future"];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_future(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.InstrumentConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name", (.validator.field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string code = 2 [json_name = "code", (.validator.field) = {
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentConfiguration.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // .vega.FutureProduct future = 100 [json_name = "future"];
  if (_internal_has_future()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::future(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.InstrumentConfiguration)
  return target;
}

size_t InstrumentConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.InstrumentConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name", (.validator.field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 2 [json_name = "code", (.validator.field) = {
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  switch (product_case()) {
    // .vega.FutureProduct future = 100 [json_name = "future"];
    case kFuture: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_.future_);
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.InstrumentConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.InstrumentConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.InstrumentConfiguration)
    MergeFrom(*source);
  }
}

void InstrumentConfiguration::MergeFrom(const InstrumentConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.InstrumentConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  switch (from.product_case()) {
    case kFuture: {
      _internal_mutable_future()->::vega::FutureProduct::MergeFrom(from._internal_future());
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
}

void InstrumentConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.InstrumentConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentConfiguration::CopyFrom(const InstrumentConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.InstrumentConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentConfiguration::IsInitialized() const {
  return true;
}

void InstrumentConfiguration::InternalSwap(InstrumentConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(product_, other->product_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewMarketConfiguration::_Internal {
 public:
  static const ::vega::InstrumentConfiguration& instrument(const NewMarketConfiguration* msg);
  static const ::vega::PriceMonitoringParameters& price_monitoring_parameters(const NewMarketConfiguration* msg);
  static const ::vega::LiquidityMonitoringParameters& liquidity_monitoring_parameters(const NewMarketConfiguration* msg);
  static const ::vega::SimpleModelParams& simple(const NewMarketConfiguration* msg);
  static const ::vega::LogNormalRiskModel& log_normal(const NewMarketConfiguration* msg);
  static const ::vega::ContinuousTrading& continuous(const NewMarketConfiguration* msg);
  static const ::vega::DiscreteTrading& discrete(const NewMarketConfiguration* msg);
};

const ::vega::InstrumentConfiguration&
NewMarketConfiguration::_Internal::instrument(const NewMarketConfiguration* msg) {
  return *msg->instrument_;
}
const ::vega::PriceMonitoringParameters&
NewMarketConfiguration::_Internal::price_monitoring_parameters(const NewMarketConfiguration* msg) {
  return *msg->price_monitoring_parameters_;
}
const ::vega::LiquidityMonitoringParameters&
NewMarketConfiguration::_Internal::liquidity_monitoring_parameters(const NewMarketConfiguration* msg) {
  return *msg->liquidity_monitoring_parameters_;
}
const ::vega::SimpleModelParams&
NewMarketConfiguration::_Internal::simple(const NewMarketConfiguration* msg) {
  return *msg->risk_parameters_.simple_;
}
const ::vega::LogNormalRiskModel&
NewMarketConfiguration::_Internal::log_normal(const NewMarketConfiguration* msg) {
  return *msg->risk_parameters_.log_normal_;
}
const ::vega::ContinuousTrading&
NewMarketConfiguration::_Internal::continuous(const NewMarketConfiguration* msg) {
  return *msg->trading_mode_.continuous_;
}
const ::vega::DiscreteTrading&
NewMarketConfiguration::_Internal::discrete(const NewMarketConfiguration* msg) {
  return *msg->trading_mode_.discrete_;
}
void NewMarketConfiguration::clear_price_monitoring_parameters() {
  if (GetArena() == nullptr && price_monitoring_parameters_ != nullptr) {
    delete price_monitoring_parameters_;
  }
  price_monitoring_parameters_ = nullptr;
}
void NewMarketConfiguration::clear_liquidity_monitoring_parameters() {
  if (GetArena() == nullptr && liquidity_monitoring_parameters_ != nullptr) {
    delete liquidity_monitoring_parameters_;
  }
  liquidity_monitoring_parameters_ = nullptr;
}
void NewMarketConfiguration::set_allocated_simple(::vega::SimpleModelParams* simple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_risk_parameters();
  if (simple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simple)->GetArena();
    if (message_arena != submessage_arena) {
      simple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple, submessage_arena);
    }
    set_has_simple();
    risk_parameters_.simple_ = simple;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.NewMarketConfiguration.simple)
}
void NewMarketConfiguration::clear_simple() {
  if (_internal_has_simple()) {
    if (GetArena() == nullptr) {
      delete risk_parameters_.simple_;
    }
    clear_has_risk_parameters();
  }
}
void NewMarketConfiguration::set_allocated_log_normal(::vega::LogNormalRiskModel* log_normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_risk_parameters();
  if (log_normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_normal)->GetArena();
    if (message_arena != submessage_arena) {
      log_normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_normal, submessage_arena);
    }
    set_has_log_normal();
    risk_parameters_.log_normal_ = log_normal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.NewMarketConfiguration.log_normal)
}
void NewMarketConfiguration::clear_log_normal() {
  if (_internal_has_log_normal()) {
    if (GetArena() == nullptr) {
      delete risk_parameters_.log_normal_;
    }
    clear_has_risk_parameters();
  }
}
void NewMarketConfiguration::set_allocated_continuous(::vega::ContinuousTrading* continuous) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_trading_mode();
  if (continuous) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(continuous)->GetArena();
    if (message_arena != submessage_arena) {
      continuous = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continuous, submessage_arena);
    }
    set_has_continuous();
    trading_mode_.continuous_ = continuous;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.NewMarketConfiguration.continuous)
}
void NewMarketConfiguration::clear_continuous() {
  if (_internal_has_continuous()) {
    if (GetArena() == nullptr) {
      delete trading_mode_.continuous_;
    }
    clear_has_trading_mode();
  }
}
void NewMarketConfiguration::set_allocated_discrete(::vega::DiscreteTrading* discrete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_trading_mode();
  if (discrete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discrete)->GetArena();
    if (message_arena != submessage_arena) {
      discrete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discrete, submessage_arena);
    }
    set_has_discrete();
    trading_mode_.discrete_ = discrete;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.NewMarketConfiguration.discrete)
}
void NewMarketConfiguration::clear_discrete() {
  if (_internal_has_discrete()) {
    if (GetArena() == nullptr) {
      delete trading_mode_.discrete_;
    }
    clear_has_trading_mode();
  }
}
NewMarketConfiguration::NewMarketConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.NewMarketConfiguration)
}
NewMarketConfiguration::NewMarketConfiguration(const NewMarketConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    instrument_ = new ::vega::InstrumentConfiguration(*from.instrument_);
  } else {
    instrument_ = nullptr;
  }
  if (from._internal_has_price_monitoring_parameters()) {
    price_monitoring_parameters_ = new ::vega::PriceMonitoringParameters(*from.price_monitoring_parameters_);
  } else {
    price_monitoring_parameters_ = nullptr;
  }
  if (from._internal_has_liquidity_monitoring_parameters()) {
    liquidity_monitoring_parameters_ = new ::vega::LiquidityMonitoringParameters(*from.liquidity_monitoring_parameters_);
  } else {
    liquidity_monitoring_parameters_ = nullptr;
  }
  decimal_places_ = from.decimal_places_;
  clear_has_risk_parameters();
  switch (from.risk_parameters_case()) {
    case kSimple: {
      _internal_mutable_simple()->::vega::SimpleModelParams::MergeFrom(from._internal_simple());
      break;
    }
    case kLogNormal: {
      _internal_mutable_log_normal()->::vega::LogNormalRiskModel::MergeFrom(from._internal_log_normal());
      break;
    }
    case RISK_PARAMETERS_NOT_SET: {
      break;
    }
  }
  clear_has_trading_mode();
  switch (from.trading_mode_case()) {
    case kContinuous: {
      _internal_mutable_continuous()->::vega::ContinuousTrading::MergeFrom(from._internal_continuous());
      break;
    }
    case kDiscrete: {
      _internal_mutable_discrete()->::vega::DiscreteTrading::MergeFrom(from._internal_discrete());
      break;
    }
    case TRADING_MODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.NewMarketConfiguration)
}

void NewMarketConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewMarketConfiguration_governance_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&instrument_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&decimal_places_) -
      reinterpret_cast<char*>(&instrument_)) + sizeof(decimal_places_));
  clear_has_risk_parameters();
  clear_has_trading_mode();
}

NewMarketConfiguration::~NewMarketConfiguration() {
  // @@protoc_insertion_point(destructor:vega.NewMarketConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewMarketConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete instrument_;
  if (this != internal_default_instance()) delete price_monitoring_parameters_;
  if (this != internal_default_instance()) delete liquidity_monitoring_parameters_;
  if (has_risk_parameters()) {
    clear_risk_parameters();
  }
  if (has_trading_mode()) {
    clear_trading_mode();
  }
}

void NewMarketConfiguration::ArenaDtor(void* object) {
  NewMarketConfiguration* _this = reinterpret_cast< NewMarketConfiguration* >(object);
  (void)_this;
}
void NewMarketConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewMarketConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewMarketConfiguration& NewMarketConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewMarketConfiguration_governance_2eproto.base);
  return *internal_default_instance();
}


void NewMarketConfiguration::clear_risk_parameters() {
// @@protoc_insertion_point(one_of_clear_start:vega.NewMarketConfiguration)
  switch (risk_parameters_case()) {
    case kSimple: {
      if (GetArena() == nullptr) {
        delete risk_parameters_.simple_;
      }
      break;
    }
    case kLogNormal: {
      if (GetArena() == nullptr) {
        delete risk_parameters_.log_normal_;
      }
      break;
    }
    case RISK_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RISK_PARAMETERS_NOT_SET;
}

void NewMarketConfiguration::clear_trading_mode() {
// @@protoc_insertion_point(one_of_clear_start:vega.NewMarketConfiguration)
  switch (trading_mode_case()) {
    case kContinuous: {
      if (GetArena() == nullptr) {
        delete trading_mode_.continuous_;
      }
      break;
    }
    case kDiscrete: {
      if (GetArena() == nullptr) {
        delete trading_mode_.discrete_;
      }
      break;
    }
    case TRADING_MODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TRADING_MODE_NOT_SET;
}


void NewMarketConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NewMarketConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  if (GetArena() == nullptr && instrument_ != nullptr) {
    delete instrument_;
  }
  instrument_ = nullptr;
  if (GetArena() == nullptr && price_monitoring_parameters_ != nullptr) {
    delete price_monitoring_parameters_;
  }
  price_monitoring_parameters_ = nullptr;
  if (GetArena() == nullptr && liquidity_monitoring_parameters_ != nullptr) {
    delete liquidity_monitoring_parameters_;
  }
  liquidity_monitoring_parameters_ = nullptr;
  decimal_places_ = PROTOBUF_ULONGLONG(0);
  clear_risk_parameters();
  clear_trading_mode();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewMarketConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.InstrumentConfiguration instrument = 1 [json_name = "instrument", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 decimal_places = 2 [json_name = "decimalPlaces", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata = 3 [json_name = "metadata"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NewMarketConfiguration.metadata"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .vega.PriceMonitoringParameters price_monitoring_parameters = 4 [json_name = "priceMonitoringParameters"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_monitoring_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.LiquidityMonitoringParameters liquidity_monitoring_parameters = 5 [json_name = "liquidityMonitoringParameters"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidity_monitoring_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.SimpleModelParams simple = 100 [json_name = "simple"];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.LogNormalRiskModel log_normal = 101 [json_name = "logNormal"];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ContinuousTrading continuous = 200 [json_name = "continuous"];
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuous(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.DiscreteTrading discrete = 201 [json_name = "discrete"];
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_discrete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewMarketConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NewMarketConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.InstrumentConfiguration instrument = 1 [json_name = "instrument", (.validator.field) = {
  if (this->has_instrument()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instrument(this), target, stream);
  }

  // uint64 decimal_places = 2 [json_name = "decimalPlaces", (.validator.field) = {
  if (this->decimal_places() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_decimal_places(), target);
  }

  // repeated string metadata = 3 [json_name = "metadata"];
  for (int i = 0, n = this->_internal_metadata_size(); i < n; i++) {
    const auto& s = this->_internal_metadata(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NewMarketConfiguration.metadata");
    target = stream->WriteString(3, s, target);
  }

  // .vega.PriceMonitoringParameters price_monitoring_parameters = 4 [json_name = "priceMonitoringParameters"];
  if (this->has_price_monitoring_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::price_monitoring_parameters(this), target, stream);
  }

  // .vega.LiquidityMonitoringParameters liquidity_monitoring_parameters = 5 [json_name = "liquidityMonitoringParameters"];
  if (this->has_liquidity_monitoring_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::liquidity_monitoring_parameters(this), target, stream);
  }

  // .vega.SimpleModelParams simple = 100 [json_name = "simple"];
  if (_internal_has_simple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::simple(this), target, stream);
  }

  // .vega.LogNormalRiskModel log_normal = 101 [json_name = "logNormal"];
  if (_internal_has_log_normal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::log_normal(this), target, stream);
  }

  // .vega.ContinuousTrading continuous = 200 [json_name = "continuous"];
  if (_internal_has_continuous()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::continuous(this), target, stream);
  }

  // .vega.DiscreteTrading discrete = 201 [json_name = "discrete"];
  if (_internal_has_discrete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        201, _Internal::discrete(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NewMarketConfiguration)
  return target;
}

size_t NewMarketConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NewMarketConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata = 3 [json_name = "metadata"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_.size());
  for (int i = 0, n = metadata_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_.Get(i));
  }

  // .vega.InstrumentConfiguration instrument = 1 [json_name = "instrument", (.validator.field) = {
  if (this->has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instrument_);
  }

  // .vega.PriceMonitoringParameters price_monitoring_parameters = 4 [json_name = "priceMonitoringParameters"];
  if (this->has_price_monitoring_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_monitoring_parameters_);
  }

  // .vega.LiquidityMonitoringParameters liquidity_monitoring_parameters = 5 [json_name = "liquidityMonitoringParameters"];
  if (this->has_liquidity_monitoring_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *liquidity_monitoring_parameters_);
  }

  // uint64 decimal_places = 2 [json_name = "decimalPlaces", (.validator.field) = {
  if (this->decimal_places() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_decimal_places());
  }

  switch (risk_parameters_case()) {
    // .vega.SimpleModelParams simple = 100 [json_name = "simple"];
    case kSimple: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *risk_parameters_.simple_);
      break;
    }
    // .vega.LogNormalRiskModel log_normal = 101 [json_name = "logNormal"];
    case kLogNormal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *risk_parameters_.log_normal_);
      break;
    }
    case RISK_PARAMETERS_NOT_SET: {
      break;
    }
  }
  switch (trading_mode_case()) {
    // .vega.ContinuousTrading continuous = 200 [json_name = "continuous"];
    case kContinuous: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trading_mode_.continuous_);
      break;
    }
    // .vega.DiscreteTrading discrete = 201 [json_name = "discrete"];
    case kDiscrete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trading_mode_.discrete_);
      break;
    }
    case TRADING_MODE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMarketConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NewMarketConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMarketConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewMarketConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NewMarketConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NewMarketConfiguration)
    MergeFrom(*source);
  }
}

void NewMarketConfiguration::MergeFrom(const NewMarketConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NewMarketConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.has_instrument()) {
    _internal_mutable_instrument()->::vega::InstrumentConfiguration::MergeFrom(from._internal_instrument());
  }
  if (from.has_price_monitoring_parameters()) {
    _internal_mutable_price_monitoring_parameters()->::vega::PriceMonitoringParameters::MergeFrom(from._internal_price_monitoring_parameters());
  }
  if (from.has_liquidity_monitoring_parameters()) {
    _internal_mutable_liquidity_monitoring_parameters()->::vega::LiquidityMonitoringParameters::MergeFrom(from._internal_liquidity_monitoring_parameters());
  }
  if (from.decimal_places() != 0) {
    _internal_set_decimal_places(from._internal_decimal_places());
  }
  switch (from.risk_parameters_case()) {
    case kSimple: {
      _internal_mutable_simple()->::vega::SimpleModelParams::MergeFrom(from._internal_simple());
      break;
    }
    case kLogNormal: {
      _internal_mutable_log_normal()->::vega::LogNormalRiskModel::MergeFrom(from._internal_log_normal());
      break;
    }
    case RISK_PARAMETERS_NOT_SET: {
      break;
    }
  }
  switch (from.trading_mode_case()) {
    case kContinuous: {
      _internal_mutable_continuous()->::vega::ContinuousTrading::MergeFrom(from._internal_continuous());
      break;
    }
    case kDiscrete: {
      _internal_mutable_discrete()->::vega::DiscreteTrading::MergeFrom(from._internal_discrete());
      break;
    }
    case TRADING_MODE_NOT_SET: {
      break;
    }
  }
}

void NewMarketConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NewMarketConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMarketConfiguration::CopyFrom(const NewMarketConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NewMarketConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMarketConfiguration::IsInitialized() const {
  return true;
}

void NewMarketConfiguration::InternalSwap(NewMarketConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewMarketConfiguration, decimal_places_)
      + sizeof(NewMarketConfiguration::decimal_places_)
      - PROTOBUF_FIELD_OFFSET(NewMarketConfiguration, instrument_)>(
          reinterpret_cast<char*>(&instrument_),
          reinterpret_cast<char*>(&other->instrument_));
  swap(risk_parameters_, other->risk_parameters_);
  swap(trading_mode_, other->trading_mode_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewMarketConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewMarketCommitment::_Internal {
 public:
};

void NewMarketCommitment::clear_sells() {
  sells_.Clear();
}
void NewMarketCommitment::clear_buys() {
  buys_.Clear();
}
NewMarketCommitment::NewMarketCommitment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sells_(arena),
  buys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.NewMarketCommitment)
}
NewMarketCommitment::NewMarketCommitment(const NewMarketCommitment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sells_(from.sells_),
      buys_(from.buys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  commitment_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commitment_amount().empty()) {
    commitment_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commitment_amount(),
      GetArena());
  }
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee().empty()) {
    fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fee(),
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.NewMarketCommitment)
}

void NewMarketCommitment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewMarketCommitment_governance_2eproto.base);
  commitment_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NewMarketCommitment::~NewMarketCommitment() {
  // @@protoc_insertion_point(destructor:vega.NewMarketCommitment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewMarketCommitment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  commitment_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewMarketCommitment::ArenaDtor(void* object) {
  NewMarketCommitment* _this = reinterpret_cast< NewMarketCommitment* >(object);
  (void)_this;
}
void NewMarketCommitment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewMarketCommitment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewMarketCommitment& NewMarketCommitment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewMarketCommitment_governance_2eproto.base);
  return *internal_default_instance();
}


void NewMarketCommitment::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NewMarketCommitment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sells_.Clear();
  buys_.Clear();
  commitment_amount_.ClearToEmpty();
  fee_.ClearToEmpty();
  reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewMarketCommitment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string commitment_amount = 1 [json_name = "commitmentAmount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_commitment_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NewMarketCommitment.commitment_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fee = 2 [json_name = "fee"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NewMarketCommitment.fee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityOrder sells = 3 [json_name = "sells"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityOrder buys = 4 [json_name = "buys"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string reference = 5 [json_name = "reference"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NewMarketCommitment.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewMarketCommitment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NewMarketCommitment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string commitment_amount = 1 [json_name = "commitmentAmount"];
  if (this->commitment_amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commitment_amount().data(), static_cast<int>(this->_internal_commitment_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NewMarketCommitment.commitment_amount");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_commitment_amount(), target);
  }

  // string fee = 2 [json_name = "fee"];
  if (this->fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee().data(), static_cast<int>(this->_internal_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NewMarketCommitment.fee");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fee(), target);
  }

  // repeated .vega.LiquidityOrder sells = 3 [json_name = "sells"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sells(i), target, stream);
  }

  // repeated .vega.LiquidityOrder buys = 4 [json_name = "buys"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_buys(i), target, stream);
  }

  // string reference = 5 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NewMarketCommitment.reference");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NewMarketCommitment)
  return target;
}

size_t NewMarketCommitment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NewMarketCommitment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LiquidityOrder sells = 3 [json_name = "sells"];
  total_size += 1UL * this->_internal_sells_size();
  for (const auto& msg : this->sells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.LiquidityOrder buys = 4 [json_name = "buys"];
  total_size += 1UL * this->_internal_buys_size();
  for (const auto& msg : this->buys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string commitment_amount = 1 [json_name = "commitmentAmount"];
  if (this->commitment_amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commitment_amount());
  }

  // string fee = 2 [json_name = "fee"];
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee());
  }

  // string reference = 5 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMarketCommitment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NewMarketCommitment)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMarketCommitment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewMarketCommitment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NewMarketCommitment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NewMarketCommitment)
    MergeFrom(*source);
  }
}

void NewMarketCommitment::MergeFrom(const NewMarketCommitment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NewMarketCommitment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sells_.MergeFrom(from.sells_);
  buys_.MergeFrom(from.buys_);
  if (from.commitment_amount().size() > 0) {
    _internal_set_commitment_amount(from._internal_commitment_amount());
  }
  if (from.fee().size() > 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void NewMarketCommitment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NewMarketCommitment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMarketCommitment::CopyFrom(const NewMarketCommitment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NewMarketCommitment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMarketCommitment::IsInitialized() const {
  return true;
}

void NewMarketCommitment::InternalSwap(NewMarketCommitment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sells_.InternalSwap(&other->sells_);
  buys_.InternalSwap(&other->buys_);
  commitment_amount_.Swap(&other->commitment_amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fee_.Swap(&other->fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NewMarketCommitment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewMarket::_Internal {
 public:
  static const ::vega::NewMarketConfiguration& changes(const NewMarket* msg);
  static const ::vega::NewMarketCommitment& liquidity_commitment(const NewMarket* msg);
};

const ::vega::NewMarketConfiguration&
NewMarket::_Internal::changes(const NewMarket* msg) {
  return *msg->changes_;
}
const ::vega::NewMarketCommitment&
NewMarket::_Internal::liquidity_commitment(const NewMarket* msg) {
  return *msg->liquidity_commitment_;
}
NewMarket::NewMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.NewMarket)
}
NewMarket::NewMarket(const NewMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_changes()) {
    changes_ = new ::vega::NewMarketConfiguration(*from.changes_);
  } else {
    changes_ = nullptr;
  }
  if (from._internal_has_liquidity_commitment()) {
    liquidity_commitment_ = new ::vega::NewMarketCommitment(*from.liquidity_commitment_);
  } else {
    liquidity_commitment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.NewMarket)
}

void NewMarket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewMarket_governance_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&changes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&liquidity_commitment_) -
      reinterpret_cast<char*>(&changes_)) + sizeof(liquidity_commitment_));
}

NewMarket::~NewMarket() {
  // @@protoc_insertion_point(destructor:vega.NewMarket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewMarket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete changes_;
  if (this != internal_default_instance()) delete liquidity_commitment_;
}

void NewMarket::ArenaDtor(void* object) {
  NewMarket* _this = reinterpret_cast< NewMarket* >(object);
  (void)_this;
}
void NewMarket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewMarket& NewMarket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewMarket_governance_2eproto.base);
  return *internal_default_instance();
}


void NewMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NewMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
  if (GetArena() == nullptr && liquidity_commitment_ != nullptr) {
    delete liquidity_commitment_;
  }
  liquidity_commitment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewMarket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.NewMarketConfiguration changes = 1 [json_name = "changes", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_changes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.NewMarketCommitment liquidity_commitment = 2 [json_name = "liquidityCommitment"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidity_commitment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewMarket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NewMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.NewMarketConfiguration changes = 1 [json_name = "changes", (.validator.field) = {
  if (this->has_changes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::changes(this), target, stream);
  }

  // .vega.NewMarketCommitment liquidity_commitment = 2 [json_name = "liquidityCommitment"];
  if (this->has_liquidity_commitment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::liquidity_commitment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NewMarket)
  return target;
}

size_t NewMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NewMarket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.NewMarketConfiguration changes = 1 [json_name = "changes", (.validator.field) = {
  if (this->has_changes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *changes_);
  }

  // .vega.NewMarketCommitment liquidity_commitment = 2 [json_name = "liquidityCommitment"];
  if (this->has_liquidity_commitment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *liquidity_commitment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMarket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NewMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMarket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NewMarket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NewMarket)
    MergeFrom(*source);
  }
}

void NewMarket::MergeFrom(const NewMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NewMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_changes()) {
    _internal_mutable_changes()->::vega::NewMarketConfiguration::MergeFrom(from._internal_changes());
  }
  if (from.has_liquidity_commitment()) {
    _internal_mutable_liquidity_commitment()->::vega::NewMarketCommitment::MergeFrom(from._internal_liquidity_commitment());
  }
}

void NewMarket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NewMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMarket::CopyFrom(const NewMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NewMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMarket::IsInitialized() const {
  return true;
}

void NewMarket::InternalSwap(NewMarket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewMarket, liquidity_commitment_)
      + sizeof(NewMarket::liquidity_commitment_)
      - PROTOBUF_FIELD_OFFSET(NewMarket, changes_)>(
          reinterpret_cast<char*>(&changes_),
          reinterpret_cast<char*>(&other->changes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewMarket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateMarket::_Internal {
 public:
};

UpdateMarket::UpdateMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.UpdateMarket)
}
UpdateMarket::UpdateMarket(const UpdateMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.UpdateMarket)
}

void UpdateMarket::SharedCtor() {
}

UpdateMarket::~UpdateMarket() {
  // @@protoc_insertion_point(destructor:vega.UpdateMarket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateMarket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateMarket::ArenaDtor(void* object) {
  UpdateMarket* _this = reinterpret_cast< UpdateMarket* >(object);
  (void)_this;
}
void UpdateMarket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMarket& UpdateMarket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMarket_governance_2eproto.base);
  return *internal_default_instance();
}


void UpdateMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.UpdateMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMarket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMarket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.UpdateMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.UpdateMarket)
  return target;
}

size_t UpdateMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.UpdateMarket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMarket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.UpdateMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMarket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.UpdateMarket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.UpdateMarket)
    MergeFrom(*source);
  }
}

void UpdateMarket::MergeFrom(const UpdateMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.UpdateMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateMarket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.UpdateMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMarket::CopyFrom(const UpdateMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.UpdateMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMarket::IsInitialized() const {
  return true;
}

void UpdateMarket::InternalSwap(UpdateMarket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMarket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateNetworkParameter::_Internal {
 public:
  static const ::vega::NetworkParameter& changes(const UpdateNetworkParameter* msg);
};

const ::vega::NetworkParameter&
UpdateNetworkParameter::_Internal::changes(const UpdateNetworkParameter* msg) {
  return *msg->changes_;
}
void UpdateNetworkParameter::clear_changes() {
  if (GetArena() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
}
UpdateNetworkParameter::UpdateNetworkParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.UpdateNetworkParameter)
}
UpdateNetworkParameter::UpdateNetworkParameter(const UpdateNetworkParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_changes()) {
    changes_ = new ::vega::NetworkParameter(*from.changes_);
  } else {
    changes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.UpdateNetworkParameter)
}

void UpdateNetworkParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateNetworkParameter_governance_2eproto.base);
  changes_ = nullptr;
}

UpdateNetworkParameter::~UpdateNetworkParameter() {
  // @@protoc_insertion_point(destructor:vega.UpdateNetworkParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateNetworkParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete changes_;
}

void UpdateNetworkParameter::ArenaDtor(void* object) {
  UpdateNetworkParameter* _this = reinterpret_cast< UpdateNetworkParameter* >(object);
  (void)_this;
}
void UpdateNetworkParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateNetworkParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateNetworkParameter& UpdateNetworkParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateNetworkParameter_governance_2eproto.base);
  return *internal_default_instance();
}


void UpdateNetworkParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.UpdateNetworkParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateNetworkParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.NetworkParameter changes = 1 [json_name = "changes", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_changes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateNetworkParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.UpdateNetworkParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.NetworkParameter changes = 1 [json_name = "changes", (.validator.field) = {
  if (this->has_changes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::changes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.UpdateNetworkParameter)
  return target;
}

size_t UpdateNetworkParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.UpdateNetworkParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.NetworkParameter changes = 1 [json_name = "changes", (.validator.field) = {
  if (this->has_changes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *changes_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateNetworkParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.UpdateNetworkParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateNetworkParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateNetworkParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.UpdateNetworkParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.UpdateNetworkParameter)
    MergeFrom(*source);
  }
}

void UpdateNetworkParameter::MergeFrom(const UpdateNetworkParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.UpdateNetworkParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_changes()) {
    _internal_mutable_changes()->::vega::NetworkParameter::MergeFrom(from._internal_changes());
  }
}

void UpdateNetworkParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.UpdateNetworkParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateNetworkParameter::CopyFrom(const UpdateNetworkParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.UpdateNetworkParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNetworkParameter::IsInitialized() const {
  return true;
}

void UpdateNetworkParameter::InternalSwap(UpdateNetworkParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(changes_, other->changes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateNetworkParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewAsset::_Internal {
 public:
  static const ::vega::AssetDetails& changes(const NewAsset* msg);
};

const ::vega::AssetDetails&
NewAsset::_Internal::changes(const NewAsset* msg) {
  return *msg->changes_;
}
void NewAsset::clear_changes() {
  if (GetArena() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
}
NewAsset::NewAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.NewAsset)
}
NewAsset::NewAsset(const NewAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_changes()) {
    changes_ = new ::vega::AssetDetails(*from.changes_);
  } else {
    changes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.NewAsset)
}

void NewAsset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewAsset_governance_2eproto.base);
  changes_ = nullptr;
}

NewAsset::~NewAsset() {
  // @@protoc_insertion_point(destructor:vega.NewAsset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete changes_;
}

void NewAsset::ArenaDtor(void* object) {
  NewAsset* _this = reinterpret_cast< NewAsset* >(object);
  (void)_this;
}
void NewAsset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewAsset& NewAsset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewAsset_governance_2eproto.base);
  return *internal_default_instance();
}


void NewAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NewAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewAsset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.AssetDetails changes = 1 [json_name = "changes", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_changes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewAsset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NewAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.AssetDetails changes = 1 [json_name = "changes", (.validator.field) = {
  if (this->has_changes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::changes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NewAsset)
  return target;
}

size_t NewAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NewAsset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.AssetDetails changes = 1 [json_name = "changes", (.validator.field) = {
  if (this->has_changes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *changes_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewAsset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NewAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const NewAsset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NewAsset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NewAsset)
    MergeFrom(*source);
  }
}

void NewAsset::MergeFrom(const NewAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NewAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_changes()) {
    _internal_mutable_changes()->::vega::AssetDetails::MergeFrom(from._internal_changes());
  }
}

void NewAsset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NewAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewAsset::CopyFrom(const NewAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NewAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAsset::IsInitialized() const {
  return true;
}

void NewAsset::InternalSwap(NewAsset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(changes_, other->changes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewAsset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProposalTerms::_Internal {
 public:
  static const ::vega::UpdateMarket& update_market(const ProposalTerms* msg);
  static const ::vega::NewMarket& new_market(const ProposalTerms* msg);
  static const ::vega::UpdateNetworkParameter& update_network_parameter(const ProposalTerms* msg);
  static const ::vega::NewAsset& new_asset(const ProposalTerms* msg);
};

const ::vega::UpdateMarket&
ProposalTerms::_Internal::update_market(const ProposalTerms* msg) {
  return *msg->change_.update_market_;
}
const ::vega::NewMarket&
ProposalTerms::_Internal::new_market(const ProposalTerms* msg) {
  return *msg->change_.new_market_;
}
const ::vega::UpdateNetworkParameter&
ProposalTerms::_Internal::update_network_parameter(const ProposalTerms* msg) {
  return *msg->change_.update_network_parameter_;
}
const ::vega::NewAsset&
ProposalTerms::_Internal::new_asset(const ProposalTerms* msg) {
  return *msg->change_.new_asset_;
}
void ProposalTerms::set_allocated_update_market(::vega::UpdateMarket* update_market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (update_market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_market);
    if (message_arena != submessage_arena) {
      update_market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_market, submessage_arena);
    }
    set_has_update_market();
    change_.update_market_ = update_market;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.update_market)
}
void ProposalTerms::set_allocated_new_market(::vega::NewMarket* new_market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (new_market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_market);
    if (message_arena != submessage_arena) {
      new_market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_market, submessage_arena);
    }
    set_has_new_market();
    change_.new_market_ = new_market;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.new_market)
}
void ProposalTerms::set_allocated_update_network_parameter(::vega::UpdateNetworkParameter* update_network_parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (update_network_parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_network_parameter);
    if (message_arena != submessage_arena) {
      update_network_parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_network_parameter, submessage_arena);
    }
    set_has_update_network_parameter();
    change_.update_network_parameter_ = update_network_parameter;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.update_network_parameter)
}
void ProposalTerms::set_allocated_new_asset(::vega::NewAsset* new_asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (new_asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_asset);
    if (message_arena != submessage_arena) {
      new_asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_asset, submessage_arena);
    }
    set_has_new_asset();
    change_.new_asset_ = new_asset;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.new_asset)
}
ProposalTerms::ProposalTerms(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ProposalTerms)
}
ProposalTerms::ProposalTerms(const ProposalTerms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&closing_timestamp_, &from.closing_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&validation_timestamp_) -
    reinterpret_cast<char*>(&closing_timestamp_)) + sizeof(validation_timestamp_));
  clear_has_change();
  switch (from.change_case()) {
    case kUpdateMarket: {
      _internal_mutable_update_market()->::vega::UpdateMarket::MergeFrom(from._internal_update_market());
      break;
    }
    case kNewMarket: {
      _internal_mutable_new_market()->::vega::NewMarket::MergeFrom(from._internal_new_market());
      break;
    }
    case kUpdateNetworkParameter: {
      _internal_mutable_update_network_parameter()->::vega::UpdateNetworkParameter::MergeFrom(from._internal_update_network_parameter());
      break;
    }
    case kNewAsset: {
      _internal_mutable_new_asset()->::vega::NewAsset::MergeFrom(from._internal_new_asset());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.ProposalTerms)
}

void ProposalTerms::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProposalTerms_governance_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&closing_timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&validation_timestamp_) -
      reinterpret_cast<char*>(&closing_timestamp_)) + sizeof(validation_timestamp_));
  clear_has_change();
}

ProposalTerms::~ProposalTerms() {
  // @@protoc_insertion_point(destructor:vega.ProposalTerms)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposalTerms::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_change()) {
    clear_change();
  }
}

void ProposalTerms::ArenaDtor(void* object) {
  ProposalTerms* _this = reinterpret_cast< ProposalTerms* >(object);
  (void)_this;
}
void ProposalTerms::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposalTerms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposalTerms& ProposalTerms::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProposalTerms_governance_2eproto.base);
  return *internal_default_instance();
}


void ProposalTerms::clear_change() {
// @@protoc_insertion_point(one_of_clear_start:vega.ProposalTerms)
  switch (change_case()) {
    case kUpdateMarket: {
      if (GetArena() == nullptr) {
        delete change_.update_market_;
      }
      break;
    }
    case kNewMarket: {
      if (GetArena() == nullptr) {
        delete change_.new_market_;
      }
      break;
    }
    case kUpdateNetworkParameter: {
      if (GetArena() == nullptr) {
        delete change_.update_network_parameter_;
      }
      break;
    }
    case kNewAsset: {
      if (GetArena() == nullptr) {
        delete change_.new_asset_;
      }
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANGE_NOT_SET;
}


void ProposalTerms::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ProposalTerms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&closing_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validation_timestamp_) -
      reinterpret_cast<char*>(&closing_timestamp_)) + sizeof(validation_timestamp_));
  clear_change();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalTerms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 closing_timestamp = 1 [json_name = "closingTimestamp", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          closing_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 enactment_timestamp = 2 [json_name = "enactmentTimestamp", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enactment_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 validation_timestamp = 3 [json_name = "validationTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          validation_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.UpdateMarket update_market = 101 [json_name = "updateMarket"];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.NewMarket new_market = 102 [json_name = "newMarket"];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.UpdateNetworkParameter update_network_parameter = 103 [json_name = "updateNetworkParameter"];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_network_parameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.NewAsset new_asset = 104 [json_name = "newAsset"];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposalTerms::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ProposalTerms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 closing_timestamp = 1 [json_name = "closingTimestamp", (.validator.field) = {
  if (this->closing_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_closing_timestamp(), target);
  }

  // int64 enactment_timestamp = 2 [json_name = "enactmentTimestamp", (.validator.field) = {
  if (this->enactment_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_enactment_timestamp(), target);
  }

  // int64 validation_timestamp = 3 [json_name = "validationTimestamp"];
  if (this->validation_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_validation_timestamp(), target);
  }

  // .vega.UpdateMarket update_market = 101 [json_name = "updateMarket"];
  if (_internal_has_update_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::update_market(this), target, stream);
  }

  // .vega.NewMarket new_market = 102 [json_name = "newMarket"];
  if (_internal_has_new_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::new_market(this), target, stream);
  }

  // .vega.UpdateNetworkParameter update_network_parameter = 103 [json_name = "updateNetworkParameter"];
  if (_internal_has_update_network_parameter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::update_network_parameter(this), target, stream);
  }

  // .vega.NewAsset new_asset = 104 [json_name = "newAsset"];
  if (_internal_has_new_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::new_asset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ProposalTerms)
  return target;
}

size_t ProposalTerms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ProposalTerms)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 closing_timestamp = 1 [json_name = "closingTimestamp", (.validator.field) = {
  if (this->closing_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_closing_timestamp());
  }

  // int64 enactment_timestamp = 2 [json_name = "enactmentTimestamp", (.validator.field) = {
  if (this->enactment_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_enactment_timestamp());
  }

  // int64 validation_timestamp = 3 [json_name = "validationTimestamp"];
  if (this->validation_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_validation_timestamp());
  }

  switch (change_case()) {
    // .vega.UpdateMarket update_market = 101 [json_name = "updateMarket"];
    case kUpdateMarket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.update_market_);
      break;
    }
    // .vega.NewMarket new_market = 102 [json_name = "newMarket"];
    case kNewMarket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.new_market_);
      break;
    }
    // .vega.UpdateNetworkParameter update_network_parameter = 103 [json_name = "updateNetworkParameter"];
    case kUpdateNetworkParameter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.update_network_parameter_);
      break;
    }
    // .vega.NewAsset new_asset = 104 [json_name = "newAsset"];
    case kNewAsset: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.new_asset_);
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalTerms::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ProposalTerms)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalTerms* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposalTerms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ProposalTerms)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ProposalTerms)
    MergeFrom(*source);
  }
}

void ProposalTerms::MergeFrom(const ProposalTerms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ProposalTerms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.closing_timestamp() != 0) {
    _internal_set_closing_timestamp(from._internal_closing_timestamp());
  }
  if (from.enactment_timestamp() != 0) {
    _internal_set_enactment_timestamp(from._internal_enactment_timestamp());
  }
  if (from.validation_timestamp() != 0) {
    _internal_set_validation_timestamp(from._internal_validation_timestamp());
  }
  switch (from.change_case()) {
    case kUpdateMarket: {
      _internal_mutable_update_market()->::vega::UpdateMarket::MergeFrom(from._internal_update_market());
      break;
    }
    case kNewMarket: {
      _internal_mutable_new_market()->::vega::NewMarket::MergeFrom(from._internal_new_market());
      break;
    }
    case kUpdateNetworkParameter: {
      _internal_mutable_update_network_parameter()->::vega::UpdateNetworkParameter::MergeFrom(from._internal_update_network_parameter());
      break;
    }
    case kNewAsset: {
      _internal_mutable_new_asset()->::vega::NewAsset::MergeFrom(from._internal_new_asset());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
}

void ProposalTerms::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ProposalTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalTerms::CopyFrom(const ProposalTerms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ProposalTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalTerms::IsInitialized() const {
  return true;
}

void ProposalTerms::InternalSwap(ProposalTerms* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProposalTerms, validation_timestamp_)
      + sizeof(ProposalTerms::validation_timestamp_)
      - PROTOBUF_FIELD_OFFSET(ProposalTerms, closing_timestamp_)>(
          reinterpret_cast<char*>(&closing_timestamp_),
          reinterpret_cast<char*>(&other->closing_timestamp_));
  swap(change_, other->change_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalTerms::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GovernanceData_YesPartyEntry_DoNotUse::GovernanceData_YesPartyEntry_DoNotUse() {}
GovernanceData_YesPartyEntry_DoNotUse::GovernanceData_YesPartyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GovernanceData_YesPartyEntry_DoNotUse::MergeFrom(const GovernanceData_YesPartyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GovernanceData_YesPartyEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GovernanceData_YesPartyEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GovernanceData_NoPartyEntry_DoNotUse::GovernanceData_NoPartyEntry_DoNotUse() {}
GovernanceData_NoPartyEntry_DoNotUse::GovernanceData_NoPartyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GovernanceData_NoPartyEntry_DoNotUse::MergeFrom(const GovernanceData_NoPartyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GovernanceData_NoPartyEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GovernanceData_NoPartyEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class GovernanceData::_Internal {
 public:
  static const ::vega::Proposal& proposal(const GovernanceData* msg);
};

const ::vega::Proposal&
GovernanceData::_Internal::proposal(const GovernanceData* msg) {
  return *msg->proposal_;
}
GovernanceData::GovernanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  yes_(arena),
  no_(arena),
  yes_party_(arena),
  no_party_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.GovernanceData)
}
GovernanceData::GovernanceData(const GovernanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      yes_(from.yes_),
      no_(from.no_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  yes_party_.MergeFrom(from.yes_party_);
  no_party_.MergeFrom(from.no_party_);
  if (from._internal_has_proposal()) {
    proposal_ = new ::vega::Proposal(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.GovernanceData)
}

void GovernanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GovernanceData_governance_2eproto.base);
  proposal_ = nullptr;
}

GovernanceData::~GovernanceData() {
  // @@protoc_insertion_point(destructor:vega.GovernanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GovernanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete proposal_;
}

void GovernanceData::ArenaDtor(void* object) {
  GovernanceData* _this = reinterpret_cast< GovernanceData* >(object);
  (void)_this;
}
void GovernanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GovernanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GovernanceData& GovernanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GovernanceData_governance_2eproto.base);
  return *internal_default_instance();
}


void GovernanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.GovernanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yes_.Clear();
  no_.Clear();
  yes_party_.Clear();
  no_party_.Clear();
  if (GetArena() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GovernanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Proposal proposal = 1 [json_name = "proposal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.Vote yes = 2 [json_name = "yes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_yes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.Vote no = 3 [json_name = "no"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_no(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .vega.Vote> yes_party = 4 [json_name = "yesParty"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&yes_party_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .vega.Vote> no_party = 5 [json_name = "noParty"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&no_party_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GovernanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.GovernanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Proposal proposal = 1 [json_name = "proposal"];
  if (this->has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::proposal(this), target, stream);
  }

  // repeated .vega.Vote yes = 2 [json_name = "yes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_yes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_yes(i), target, stream);
  }

  // repeated .vega.Vote no = 3 [json_name = "no"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_no_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_no(i), target, stream);
  }

  // map<string, .vega.Vote> yes_party = 4 [json_name = "yesParty"];
  if (!this->_internal_yes_party().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::Vote >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vega.GovernanceData.YesPartyEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_yes_party().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_yes_party().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::Vote >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::Vote >::const_iterator
          it = this->_internal_yes_party().begin();
          it != this->_internal_yes_party().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GovernanceData_YesPartyEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::Vote >::const_iterator
          it = this->_internal_yes_party().begin();
          it != this->_internal_yes_party().end(); ++it) {
        target = GovernanceData_YesPartyEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .vega.Vote> no_party = 5 [json_name = "noParty"];
  if (!this->_internal_no_party().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::Vote >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vega.GovernanceData.NoPartyEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_no_party().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_no_party().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::Vote >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::Vote >::const_iterator
          it = this->_internal_no_party().begin();
          it != this->_internal_no_party().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GovernanceData_NoPartyEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::Vote >::const_iterator
          it = this->_internal_no_party().begin();
          it != this->_internal_no_party().end(); ++it) {
        target = GovernanceData_NoPartyEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.GovernanceData)
  return target;
}

size_t GovernanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.GovernanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Vote yes = 2 [json_name = "yes"];
  total_size += 1UL * this->_internal_yes_size();
  for (const auto& msg : this->yes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.Vote no = 3 [json_name = "no"];
  total_size += 1UL * this->_internal_no_size();
  for (const auto& msg : this->no_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .vega.Vote> yes_party = 4 [json_name = "yesParty"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_yes_party_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::Vote >::const_iterator
      it = this->_internal_yes_party().begin();
      it != this->_internal_yes_party().end(); ++it) {
    total_size += GovernanceData_YesPartyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .vega.Vote> no_party = 5 [json_name = "noParty"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_no_party_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::Vote >::const_iterator
      it = this->_internal_no_party().begin();
      it != this->_internal_no_party().end(); ++it) {
    total_size += GovernanceData_NoPartyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .vega.Proposal proposal = 1 [json_name = "proposal"];
  if (this->has_proposal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GovernanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.GovernanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const GovernanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GovernanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.GovernanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.GovernanceData)
    MergeFrom(*source);
  }
}

void GovernanceData::MergeFrom(const GovernanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.GovernanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yes_.MergeFrom(from.yes_);
  no_.MergeFrom(from.no_);
  yes_party_.MergeFrom(from.yes_party_);
  no_party_.MergeFrom(from.no_party_);
  if (from.has_proposal()) {
    _internal_mutable_proposal()->::vega::Proposal::MergeFrom(from._internal_proposal());
  }
}

void GovernanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.GovernanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GovernanceData::CopyFrom(const GovernanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.GovernanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GovernanceData::IsInitialized() const {
  return true;
}

void GovernanceData::InternalSwap(GovernanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  yes_.InternalSwap(&other->yes_);
  no_.InternalSwap(&other->no_);
  yes_party_.Swap(&other->yes_party_);
  no_party_.Swap(&other->no_party_);
  swap(proposal_, other->proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GovernanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Proposal::_Internal {
 public:
  static const ::vega::ProposalTerms& terms(const Proposal* msg);
};

const ::vega::ProposalTerms&
Proposal::_Internal::terms(const Proposal* msg) {
  return *msg->terms_;
}
Proposal::Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  error_details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_details().empty()) {
    error_details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_details(),
      GetArena());
  }
  if (from._internal_has_terms()) {
    terms_ = new ::vega::ProposalTerms(*from.terms_);
  } else {
    terms_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:vega.Proposal)
}

void Proposal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proposal_governance_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&terms_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&terms_)) + sizeof(reason_));
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:vega.Proposal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proposal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_details_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete terms_;
}

void Proposal::ArenaDtor(void* object) {
  Proposal* _this = reinterpret_cast< Proposal* >(object);
  (void)_this;
}
void Proposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proposal& Proposal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proposal_governance_2eproto.base);
  return *internal_default_instance();
}


void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  reference_.ClearToEmpty();
  party_id_.ClearToEmpty();
  error_details_.ClearToEmpty();
  if (GetArena() == nullptr && terms_ != nullptr) {
    delete terms_;
  }
  terms_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Proposal.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 2 [json_name = "reference"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Proposal.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 3 [json_name = "partyId", (.validator.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Proposal.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Proposal.State state = 4 [json_name = "state", (.validator.field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::vega::Proposal_State>(val));
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 5 [json_name = "timestamp"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ProposalTerms terms = 6 [json_name = "terms", (.validator.field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_terms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ProposalError reason = 7 [json_name = "reason"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::vega::ProposalError>(val));
        } else goto handle_unusual;
        continue;
      // string error_details = 8 [json_name = "errorDetails"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_error_details();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Proposal.error_details"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proposal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string reference = 2 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.reference");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reference(), target);
  }

  // string party_id = 3 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.party_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_party_id(), target);
  }

  // .vega.Proposal.State state = 4 [json_name = "state", (.validator.field) = {
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // int64 timestamp = 5 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // .vega.ProposalTerms terms = 6 [json_name = "terms", (.validator.field) = {
  if (this->has_terms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::terms(this), target, stream);
  }

  // .vega.ProposalError reason = 7 [json_name = "reason"];
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_reason(), target);
  }

  // string error_details = 8 [json_name = "errorDetails"];
  if (this->error_details().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_details().data(), static_cast<int>(this->_internal_error_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.error_details");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_error_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Proposal)
  return target;
}

size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Proposal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string reference = 2 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // string party_id = 3 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string error_details = 8 [json_name = "errorDetails"];
  if (this->error_details().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_details());
  }

  // .vega.ProposalTerms terms = 6 [json_name = "terms", (.validator.field) = {
  if (this->has_terms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *terms_);
  }

  // int64 timestamp = 5 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // .vega.Proposal.State state = 4 [json_name = "state", (.validator.field) = {
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .vega.ProposalError reason = 7 [json_name = "reason"];
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proposal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Proposal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Proposal)
    MergeFrom(*source);
  }
}

void Proposal::MergeFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.error_details().size() > 0) {
    _internal_set_error_details(from._internal_error_details());
  }
  if (from.has_terms()) {
    _internal_mutable_terms()->::vega::ProposalTerms::MergeFrom(from._internal_terms());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void Proposal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_details_.Swap(&other->error_details_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proposal, reason_)
      + sizeof(Proposal::reason_)
      - PROTOBUF_FIELD_OFFSET(Proposal, terms_)>(
          reinterpret_cast<char*>(&terms_),
          reinterpret_cast<char*>(&other->terms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vote::_Internal {
 public:
};

Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal_id().empty()) {
    proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposal_id(),
      GetArena());
  }
  total_governance_token_balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_governance_token_balance().empty()) {
    total_governance_token_balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_total_governance_token_balance(),
      GetArena());
  }
  total_governance_token_weight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_governance_token_weight().empty()) {
    total_governance_token_weight_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_total_governance_token_weight(),
      GetArena());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:vega.Vote)
}

void Vote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vote_governance_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_governance_token_balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_governance_token_weight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:vega.Vote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_governance_token_balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_governance_token_weight_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Vote::ArenaDtor(void* object) {
  Vote* _this = reinterpret_cast< Vote* >(object);
  (void)_this;
}
void Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vote& Vote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vote_governance_2eproto.base);
  return *internal_default_instance();
}


void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  proposal_id_.ClearToEmpty();
  total_governance_token_balance_.ClearToEmpty();
  total_governance_token_weight_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Vote.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Vote.Value value = 2 [json_name = "value", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::vega::Vote_Value>(val));
        } else goto handle_unusual;
        continue;
      // string proposal_id = 3 [json_name = "proposalId", (.validator.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_proposal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Vote.proposal_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 4 [json_name = "timestamp"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string total_governance_token_balance = 5 [json_name = "totalGovernanceTokenBalance"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_total_governance_token_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Vote.total_governance_token_balance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string total_governance_token_weight = 6 [json_name = "totalGovernanceTokenWeight"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_total_governance_token_weight();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Vote.total_governance_token_weight"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // .vega.Vote.Value value = 2 [json_name = "value", (.validator.field) = {
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_value(), target);
  }

  // string proposal_id = 3 [json_name = "proposalId", (.validator.field) = {
  if (this->proposal_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposal_id().data(), static_cast<int>(this->_internal_proposal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.proposal_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proposal_id(), target);
  }

  // int64 timestamp = 4 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // string total_governance_token_balance = 5 [json_name = "totalGovernanceTokenBalance"];
  if (this->total_governance_token_balance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_total_governance_token_balance().data(), static_cast<int>(this->_internal_total_governance_token_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.total_governance_token_balance");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_total_governance_token_balance(), target);
  }

  // string total_governance_token_weight = 6 [json_name = "totalGovernanceTokenWeight"];
  if (this->total_governance_token_weight().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_total_governance_token_weight().data(), static_cast<int>(this->_internal_total_governance_token_weight().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.total_governance_token_weight");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_total_governance_token_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string proposal_id = 3 [json_name = "proposalId", (.validator.field) = {
  if (this->proposal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposal_id());
  }

  // string total_governance_token_balance = 5 [json_name = "totalGovernanceTokenBalance"];
  if (this->total_governance_token_balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_total_governance_token_balance());
  }

  // string total_governance_token_weight = 6 [json_name = "totalGovernanceTokenWeight"];
  if (this->total_governance_token_weight().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_total_governance_token_weight());
  }

  // int64 timestamp = 4 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // .vega.Vote.Value value = 2 [json_name = "value", (.validator.field) = {
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const Vote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Vote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Vote)
    MergeFrom(*source);
  }
}

void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.proposal_id().size() > 0) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
  if (from.total_governance_token_balance().size() > 0) {
    _internal_set_total_governance_token_balance(from._internal_total_governance_token_balance());
  }
  if (from.total_governance_token_weight().size() > 0) {
    _internal_set_total_governance_token_weight(from._internal_total_governance_token_weight());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Vote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposal_id_.Swap(&other->proposal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  total_governance_token_balance_.Swap(&other->total_governance_token_balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  total_governance_token_weight_.Swap(&other->total_governance_token_weight_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vote, value_)
      + sizeof(Vote::value_)
      - PROTOBUF_FIELD_OFFSET(Vote, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::FutureProduct* Arena::CreateMaybeMessage< ::vega::FutureProduct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::FutureProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::InstrumentConfiguration* Arena::CreateMaybeMessage< ::vega::InstrumentConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::InstrumentConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NewMarketConfiguration* Arena::CreateMaybeMessage< ::vega::NewMarketConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::NewMarketConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NewMarketCommitment* Arena::CreateMaybeMessage< ::vega::NewMarketCommitment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::NewMarketCommitment >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NewMarket* Arena::CreateMaybeMessage< ::vega::NewMarket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::NewMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::UpdateMarket* Arena::CreateMaybeMessage< ::vega::UpdateMarket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::UpdateMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::UpdateNetworkParameter* Arena::CreateMaybeMessage< ::vega::UpdateNetworkParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::UpdateNetworkParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NewAsset* Arena::CreateMaybeMessage< ::vega::NewAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::NewAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ProposalTerms* Arena::CreateMaybeMessage< ::vega::ProposalTerms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ProposalTerms >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::GovernanceData_YesPartyEntry_DoNotUse* Arena::CreateMaybeMessage< ::vega::GovernanceData_YesPartyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::GovernanceData_YesPartyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::GovernanceData_NoPartyEntry_DoNotUse* Arena::CreateMaybeMessage< ::vega::GovernanceData_NoPartyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::GovernanceData_NoPartyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::GovernanceData* Arena::CreateMaybeMessage< ::vega::GovernanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::GovernanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Proposal* Arena::CreateMaybeMessage< ::vega::Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Vote* Arena::CreateMaybeMessage< ::vega::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Vote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
