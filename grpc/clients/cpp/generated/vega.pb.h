// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vega.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vega_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vega_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "github.com/mwitkow/go-proto-validators/validator.pb.h"
#include "markets.pb.h"
#include "assets.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vega_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vega_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[51]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vega_2eproto;
namespace vega {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AuctionIndicativeState;
class AuctionIndicativeStateDefaultTypeInternal;
extern AuctionIndicativeStateDefaultTypeInternal _AuctionIndicativeState_default_instance_;
class Candle;
class CandleDefaultTypeInternal;
extern CandleDefaultTypeInternal _Candle_default_instance_;
class Delegation;
class DelegationDefaultTypeInternal;
extern DelegationDefaultTypeInternal _Delegation_default_instance_;
class Deposit;
class DepositDefaultTypeInternal;
extern DepositDefaultTypeInternal _Deposit_default_instance_;
class Epoch;
class EpochDefaultTypeInternal;
extern EpochDefaultTypeInternal _Epoch_default_instance_;
class EpochData;
class EpochDataDefaultTypeInternal;
extern EpochDataDefaultTypeInternal _EpochData_default_instance_;
class EpochParticipation;
class EpochParticipationDefaultTypeInternal;
extern EpochParticipationDefaultTypeInternal _EpochParticipation_default_instance_;
class EpochTimestamps;
class EpochTimestampsDefaultTypeInternal;
extern EpochTimestampsDefaultTypeInternal _EpochTimestamps_default_instance_;
class Erc20WithdrawExt;
class Erc20WithdrawExtDefaultTypeInternal;
extern Erc20WithdrawExtDefaultTypeInternal _Erc20WithdrawExt_default_instance_;
class ErrorDetail;
class ErrorDetailDefaultTypeInternal;
extern ErrorDetailDefaultTypeInternal _ErrorDetail_default_instance_;
class EthereumConfig;
class EthereumConfigDefaultTypeInternal;
extern EthereumConfigDefaultTypeInternal _EthereumConfig_default_instance_;
class Fee;
class FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
class FinancialAmount;
class FinancialAmountDefaultTypeInternal;
extern FinancialAmountDefaultTypeInternal _FinancialAmount_default_instance_;
class LedgerEntry;
class LedgerEntryDefaultTypeInternal;
extern LedgerEntryDefaultTypeInternal _LedgerEntry_default_instance_;
class LiquidityOrder;
class LiquidityOrderDefaultTypeInternal;
extern LiquidityOrderDefaultTypeInternal _LiquidityOrder_default_instance_;
class LiquidityOrderReference;
class LiquidityOrderReferenceDefaultTypeInternal;
extern LiquidityOrderReferenceDefaultTypeInternal _LiquidityOrderReference_default_instance_;
class LiquidityProviderFeeShare;
class LiquidityProviderFeeShareDefaultTypeInternal;
extern LiquidityProviderFeeShareDefaultTypeInternal _LiquidityProviderFeeShare_default_instance_;
class LiquidityProvision;
class LiquidityProvisionDefaultTypeInternal;
extern LiquidityProvisionDefaultTypeInternal _LiquidityProvision_default_instance_;
class MarginLevels;
class MarginLevelsDefaultTypeInternal;
extern MarginLevelsDefaultTypeInternal _MarginLevels_default_instance_;
class MarketData;
class MarketDataDefaultTypeInternal;
extern MarketDataDefaultTypeInternal _MarketData_default_instance_;
class MarketDepth;
class MarketDepthDefaultTypeInternal;
extern MarketDepthDefaultTypeInternal _MarketDepth_default_instance_;
class MarketDepthUpdate;
class MarketDepthUpdateDefaultTypeInternal;
extern MarketDepthUpdateDefaultTypeInternal _MarketDepthUpdate_default_instance_;
class NetworkParameter;
class NetworkParameterDefaultTypeInternal;
extern NetworkParameterDefaultTypeInternal _NetworkParameter_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeData;
class NodeDataDefaultTypeInternal;
extern NodeDataDefaultTypeInternal _NodeData_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderCancellationConfirmation;
class OrderCancellationConfirmationDefaultTypeInternal;
extern OrderCancellationConfirmationDefaultTypeInternal _OrderCancellationConfirmation_default_instance_;
class OrderConfirmation;
class OrderConfirmationDefaultTypeInternal;
extern OrderConfirmationDefaultTypeInternal _OrderConfirmation_default_instance_;
class Party;
class PartyDefaultTypeInternal;
extern PartyDefaultTypeInternal _Party_default_instance_;
class PeggedOrder;
class PeggedOrderDefaultTypeInternal;
extern PeggedOrderDefaultTypeInternal _PeggedOrder_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionTrade;
class PositionTradeDefaultTypeInternal;
extern PositionTradeDefaultTypeInternal _PositionTrade_default_instance_;
class Price;
class PriceDefaultTypeInternal;
extern PriceDefaultTypeInternal _Price_default_instance_;
class PriceLevel;
class PriceLevelDefaultTypeInternal;
extern PriceLevelDefaultTypeInternal _PriceLevel_default_instance_;
class PriceMonitoringBounds;
class PriceMonitoringBoundsDefaultTypeInternal;
extern PriceMonitoringBoundsDefaultTypeInternal _PriceMonitoringBounds_default_instance_;
class RewardDetails;
class RewardDetailsDefaultTypeInternal;
extern RewardDetailsDefaultTypeInternal _RewardDetails_default_instance_;
class RewardPerAssetDetail;
class RewardPerAssetDetailDefaultTypeInternal;
extern RewardPerAssetDetailDefaultTypeInternal _RewardPerAssetDetail_default_instance_;
class RiskFactor;
class RiskFactorDefaultTypeInternal;
extern RiskFactorDefaultTypeInternal _RiskFactor_default_instance_;
class RiskResult;
class RiskResultDefaultTypeInternal;
extern RiskResultDefaultTypeInternal _RiskResult_default_instance_;
class RiskResult_PredictedNextRiskFactorsEntry_DoNotUse;
class RiskResult_PredictedNextRiskFactorsEntry_DoNotUseDefaultTypeInternal;
extern RiskResult_PredictedNextRiskFactorsEntry_DoNotUseDefaultTypeInternal _RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_;
class RiskResult_RiskFactorsEntry_DoNotUse;
class RiskResult_RiskFactorsEntry_DoNotUseDefaultTypeInternal;
extern RiskResult_RiskFactorsEntry_DoNotUseDefaultTypeInternal _RiskResult_RiskFactorsEntry_DoNotUse_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class Trade;
class TradeDefaultTypeInternal;
extern TradeDefaultTypeInternal _Trade_default_instance_;
class TradeSet;
class TradeSetDefaultTypeInternal;
extern TradeSetDefaultTypeInternal _TradeSet_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
class TransferBalance;
class TransferBalanceDefaultTypeInternal;
extern TransferBalanceDefaultTypeInternal _TransferBalance_default_instance_;
class TransferRequest;
class TransferRequestDefaultTypeInternal;
extern TransferRequestDefaultTypeInternal _TransferRequest_default_instance_;
class TransferResponse;
class TransferResponseDefaultTypeInternal;
extern TransferResponseDefaultTypeInternal _TransferResponse_default_instance_;
class WithdrawExt;
class WithdrawExtDefaultTypeInternal;
extern WithdrawExtDefaultTypeInternal _WithdrawExt_default_instance_;
class Withdrawal;
class WithdrawalDefaultTypeInternal;
extern WithdrawalDefaultTypeInternal _Withdrawal_default_instance_;
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::Account* Arena::CreateMaybeMessage<::vega::Account>(Arena*);
template<> ::vega::AuctionIndicativeState* Arena::CreateMaybeMessage<::vega::AuctionIndicativeState>(Arena*);
template<> ::vega::Candle* Arena::CreateMaybeMessage<::vega::Candle>(Arena*);
template<> ::vega::Delegation* Arena::CreateMaybeMessage<::vega::Delegation>(Arena*);
template<> ::vega::Deposit* Arena::CreateMaybeMessage<::vega::Deposit>(Arena*);
template<> ::vega::Epoch* Arena::CreateMaybeMessage<::vega::Epoch>(Arena*);
template<> ::vega::EpochData* Arena::CreateMaybeMessage<::vega::EpochData>(Arena*);
template<> ::vega::EpochParticipation* Arena::CreateMaybeMessage<::vega::EpochParticipation>(Arena*);
template<> ::vega::EpochTimestamps* Arena::CreateMaybeMessage<::vega::EpochTimestamps>(Arena*);
template<> ::vega::Erc20WithdrawExt* Arena::CreateMaybeMessage<::vega::Erc20WithdrawExt>(Arena*);
template<> ::vega::ErrorDetail* Arena::CreateMaybeMessage<::vega::ErrorDetail>(Arena*);
template<> ::vega::EthereumConfig* Arena::CreateMaybeMessage<::vega::EthereumConfig>(Arena*);
template<> ::vega::Fee* Arena::CreateMaybeMessage<::vega::Fee>(Arena*);
template<> ::vega::FinancialAmount* Arena::CreateMaybeMessage<::vega::FinancialAmount>(Arena*);
template<> ::vega::LedgerEntry* Arena::CreateMaybeMessage<::vega::LedgerEntry>(Arena*);
template<> ::vega::LiquidityOrder* Arena::CreateMaybeMessage<::vega::LiquidityOrder>(Arena*);
template<> ::vega::LiquidityOrderReference* Arena::CreateMaybeMessage<::vega::LiquidityOrderReference>(Arena*);
template<> ::vega::LiquidityProviderFeeShare* Arena::CreateMaybeMessage<::vega::LiquidityProviderFeeShare>(Arena*);
template<> ::vega::LiquidityProvision* Arena::CreateMaybeMessage<::vega::LiquidityProvision>(Arena*);
template<> ::vega::MarginLevels* Arena::CreateMaybeMessage<::vega::MarginLevels>(Arena*);
template<> ::vega::MarketData* Arena::CreateMaybeMessage<::vega::MarketData>(Arena*);
template<> ::vega::MarketDepth* Arena::CreateMaybeMessage<::vega::MarketDepth>(Arena*);
template<> ::vega::MarketDepthUpdate* Arena::CreateMaybeMessage<::vega::MarketDepthUpdate>(Arena*);
template<> ::vega::NetworkParameter* Arena::CreateMaybeMessage<::vega::NetworkParameter>(Arena*);
template<> ::vega::Node* Arena::CreateMaybeMessage<::vega::Node>(Arena*);
template<> ::vega::NodeData* Arena::CreateMaybeMessage<::vega::NodeData>(Arena*);
template<> ::vega::Order* Arena::CreateMaybeMessage<::vega::Order>(Arena*);
template<> ::vega::OrderCancellationConfirmation* Arena::CreateMaybeMessage<::vega::OrderCancellationConfirmation>(Arena*);
template<> ::vega::OrderConfirmation* Arena::CreateMaybeMessage<::vega::OrderConfirmation>(Arena*);
template<> ::vega::Party* Arena::CreateMaybeMessage<::vega::Party>(Arena*);
template<> ::vega::PeggedOrder* Arena::CreateMaybeMessage<::vega::PeggedOrder>(Arena*);
template<> ::vega::Position* Arena::CreateMaybeMessage<::vega::Position>(Arena*);
template<> ::vega::PositionTrade* Arena::CreateMaybeMessage<::vega::PositionTrade>(Arena*);
template<> ::vega::Price* Arena::CreateMaybeMessage<::vega::Price>(Arena*);
template<> ::vega::PriceLevel* Arena::CreateMaybeMessage<::vega::PriceLevel>(Arena*);
template<> ::vega::PriceMonitoringBounds* Arena::CreateMaybeMessage<::vega::PriceMonitoringBounds>(Arena*);
template<> ::vega::RewardDetails* Arena::CreateMaybeMessage<::vega::RewardDetails>(Arena*);
template<> ::vega::RewardPerAssetDetail* Arena::CreateMaybeMessage<::vega::RewardPerAssetDetail>(Arena*);
template<> ::vega::RiskFactor* Arena::CreateMaybeMessage<::vega::RiskFactor>(Arena*);
template<> ::vega::RiskResult* Arena::CreateMaybeMessage<::vega::RiskResult>(Arena*);
template<> ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage<::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse>(Arena*);
template<> ::vega::RiskResult_RiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage<::vega::RiskResult_RiskFactorsEntry_DoNotUse>(Arena*);
template<> ::vega::Timestamp* Arena::CreateMaybeMessage<::vega::Timestamp>(Arena*);
template<> ::vega::Trade* Arena::CreateMaybeMessage<::vega::Trade>(Arena*);
template<> ::vega::TradeSet* Arena::CreateMaybeMessage<::vega::TradeSet>(Arena*);
template<> ::vega::Transfer* Arena::CreateMaybeMessage<::vega::Transfer>(Arena*);
template<> ::vega::TransferBalance* Arena::CreateMaybeMessage<::vega::TransferBalance>(Arena*);
template<> ::vega::TransferRequest* Arena::CreateMaybeMessage<::vega::TransferRequest>(Arena*);
template<> ::vega::TransferResponse* Arena::CreateMaybeMessage<::vega::TransferResponse>(Arena*);
template<> ::vega::WithdrawExt* Arena::CreateMaybeMessage<::vega::WithdrawExt>(Arena*);
template<> ::vega::Withdrawal* Arena::CreateMaybeMessage<::vega::Withdrawal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {

enum Order_TimeInForce : int {
  Order_TimeInForce_TIME_IN_FORCE_UNSPECIFIED = 0,
  Order_TimeInForce_TIME_IN_FORCE_GTC = 1,
  Order_TimeInForce_TIME_IN_FORCE_GTT = 2,
  Order_TimeInForce_TIME_IN_FORCE_IOC = 3,
  Order_TimeInForce_TIME_IN_FORCE_FOK = 4,
  Order_TimeInForce_TIME_IN_FORCE_GFA = 5,
  Order_TimeInForce_TIME_IN_FORCE_GFN = 6,
  Order_TimeInForce_Order_TimeInForce_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Order_TimeInForce_Order_TimeInForce_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Order_TimeInForce_IsValid(int value);
constexpr Order_TimeInForce Order_TimeInForce_TimeInForce_MIN = Order_TimeInForce_TIME_IN_FORCE_UNSPECIFIED;
constexpr Order_TimeInForce Order_TimeInForce_TimeInForce_MAX = Order_TimeInForce_TIME_IN_FORCE_GFN;
constexpr int Order_TimeInForce_TimeInForce_ARRAYSIZE = Order_TimeInForce_TimeInForce_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_TimeInForce_descriptor();
template<typename T>
inline const std::string& Order_TimeInForce_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_TimeInForce>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_TimeInForce_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_TimeInForce_descriptor(), enum_t_value);
}
inline bool Order_TimeInForce_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_TimeInForce* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_TimeInForce>(
    Order_TimeInForce_descriptor(), name, value);
}
enum Order_Type : int {
  Order_Type_TYPE_UNSPECIFIED = 0,
  Order_Type_TYPE_LIMIT = 1,
  Order_Type_TYPE_MARKET = 2,
  Order_Type_TYPE_NETWORK = 3,
  Order_Type_Order_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Order_Type_Order_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Order_Type_IsValid(int value);
constexpr Order_Type Order_Type_Type_MIN = Order_Type_TYPE_UNSPECIFIED;
constexpr Order_Type Order_Type_Type_MAX = Order_Type_TYPE_NETWORK;
constexpr int Order_Type_Type_ARRAYSIZE = Order_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Type_descriptor();
template<typename T>
inline const std::string& Order_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_Type_descriptor(), enum_t_value);
}
inline bool Order_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_Type>(
    Order_Type_descriptor(), name, value);
}
enum Order_Status : int {
  Order_Status_STATUS_UNSPECIFIED = 0,
  Order_Status_STATUS_ACTIVE = 1,
  Order_Status_STATUS_EXPIRED = 2,
  Order_Status_STATUS_CANCELLED = 3,
  Order_Status_STATUS_STOPPED = 4,
  Order_Status_STATUS_FILLED = 5,
  Order_Status_STATUS_REJECTED = 6,
  Order_Status_STATUS_PARTIALLY_FILLED = 7,
  Order_Status_STATUS_PARKED = 8,
  Order_Status_Order_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Order_Status_Order_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Order_Status_IsValid(int value);
constexpr Order_Status Order_Status_Status_MIN = Order_Status_STATUS_UNSPECIFIED;
constexpr Order_Status Order_Status_Status_MAX = Order_Status_STATUS_PARKED;
constexpr int Order_Status_Status_ARRAYSIZE = Order_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Status_descriptor();
template<typename T>
inline const std::string& Order_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_Status_descriptor(), enum_t_value);
}
inline bool Order_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_Status>(
    Order_Status_descriptor(), name, value);
}
enum Trade_Type : int {
  Trade_Type_TYPE_UNSPECIFIED = 0,
  Trade_Type_TYPE_DEFAULT = 1,
  Trade_Type_TYPE_NETWORK_CLOSE_OUT_GOOD = 2,
  Trade_Type_TYPE_NETWORK_CLOSE_OUT_BAD = 3,
  Trade_Type_Trade_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Trade_Type_Trade_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Trade_Type_IsValid(int value);
constexpr Trade_Type Trade_Type_Type_MIN = Trade_Type_TYPE_UNSPECIFIED;
constexpr Trade_Type Trade_Type_Type_MAX = Trade_Type_TYPE_NETWORK_CLOSE_OUT_BAD;
constexpr int Trade_Type_Type_ARRAYSIZE = Trade_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trade_Type_descriptor();
template<typename T>
inline const std::string& Trade_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Trade_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Trade_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Trade_Type_descriptor(), enum_t_value);
}
inline bool Trade_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Trade_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Trade_Type>(
    Trade_Type_descriptor(), name, value);
}
enum Deposit_Status : int {
  Deposit_Status_STATUS_UNSPECIFIED = 0,
  Deposit_Status_STATUS_OPEN = 1,
  Deposit_Status_STATUS_CANCELLED = 2,
  Deposit_Status_STATUS_FINALIZED = 3,
  Deposit_Status_Deposit_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Deposit_Status_Deposit_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Deposit_Status_IsValid(int value);
constexpr Deposit_Status Deposit_Status_Status_MIN = Deposit_Status_STATUS_UNSPECIFIED;
constexpr Deposit_Status Deposit_Status_Status_MAX = Deposit_Status_STATUS_FINALIZED;
constexpr int Deposit_Status_Status_ARRAYSIZE = Deposit_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Deposit_Status_descriptor();
template<typename T>
inline const std::string& Deposit_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Deposit_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Deposit_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Deposit_Status_descriptor(), enum_t_value);
}
inline bool Deposit_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Deposit_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Deposit_Status>(
    Deposit_Status_descriptor(), name, value);
}
enum Withdrawal_Status : int {
  Withdrawal_Status_STATUS_UNSPECIFIED = 0,
  Withdrawal_Status_STATUS_OPEN = 1,
  Withdrawal_Status_STATUS_CANCELLED = 2,
  Withdrawal_Status_STATUS_FINALIZED = 3,
  Withdrawal_Status_Withdrawal_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Withdrawal_Status_Withdrawal_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Withdrawal_Status_IsValid(int value);
constexpr Withdrawal_Status Withdrawal_Status_Status_MIN = Withdrawal_Status_STATUS_UNSPECIFIED;
constexpr Withdrawal_Status Withdrawal_Status_Status_MAX = Withdrawal_Status_STATUS_FINALIZED;
constexpr int Withdrawal_Status_Status_ARRAYSIZE = Withdrawal_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Withdrawal_Status_descriptor();
template<typename T>
inline const std::string& Withdrawal_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Withdrawal_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Withdrawal_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Withdrawal_Status_descriptor(), enum_t_value);
}
inline bool Withdrawal_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Withdrawal_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Withdrawal_Status>(
    Withdrawal_Status_descriptor(), name, value);
}
enum LiquidityProvision_Status : int {
  LiquidityProvision_Status_STATUS_UNSPECIFIED = 0,
  LiquidityProvision_Status_STATUS_ACTIVE = 1,
  LiquidityProvision_Status_STATUS_STOPPED = 2,
  LiquidityProvision_Status_STATUS_CANCELLED = 3,
  LiquidityProvision_Status_STATUS_REJECTED = 4,
  LiquidityProvision_Status_STATUS_UNDEPLOYED = 5,
  LiquidityProvision_Status_STATUS_PENDING = 6,
  LiquidityProvision_Status_LiquidityProvision_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LiquidityProvision_Status_LiquidityProvision_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LiquidityProvision_Status_IsValid(int value);
constexpr LiquidityProvision_Status LiquidityProvision_Status_Status_MIN = LiquidityProvision_Status_STATUS_UNSPECIFIED;
constexpr LiquidityProvision_Status LiquidityProvision_Status_Status_MAX = LiquidityProvision_Status_STATUS_PENDING;
constexpr int LiquidityProvision_Status_Status_ARRAYSIZE = LiquidityProvision_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiquidityProvision_Status_descriptor();
template<typename T>
inline const std::string& LiquidityProvision_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LiquidityProvision_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LiquidityProvision_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LiquidityProvision_Status_descriptor(), enum_t_value);
}
inline bool LiquidityProvision_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LiquidityProvision_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LiquidityProvision_Status>(
    LiquidityProvision_Status_descriptor(), name, value);
}
enum Side : int {
  SIDE_UNSPECIFIED = 0,
  SIDE_BUY = 1,
  SIDE_SELL = 2,
  Side_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Side_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Side_IsValid(int value);
constexpr Side Side_MIN = SIDE_UNSPECIFIED;
constexpr Side Side_MAX = SIDE_SELL;
constexpr int Side_ARRAYSIZE = Side_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor();
template<typename T>
inline const std::string& Side_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Side>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Side_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Side_descriptor(), enum_t_value);
}
inline bool Side_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Side>(
    Side_descriptor(), name, value);
}
enum Interval : int {
  INTERVAL_UNSPECIFIED = 0,
  INTERVAL_I1M = 60,
  INTERVAL_I5M = 300,
  INTERVAL_I15M = 900,
  INTERVAL_I1H = 3600,
  INTERVAL_I6H = 21600,
  INTERVAL_I1D = 86400,
  Interval_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Interval_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Interval_IsValid(int value);
constexpr Interval Interval_MIN = INTERVAL_UNSPECIFIED;
constexpr Interval Interval_MAX = INTERVAL_I1D;
constexpr int Interval_ARRAYSIZE = Interval_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Interval_descriptor();
template<typename T>
inline const std::string& Interval_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Interval>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Interval_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Interval_descriptor(), enum_t_value);
}
inline bool Interval_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Interval* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Interval>(
    Interval_descriptor(), name, value);
}
enum AuctionTrigger : int {
  AUCTION_TRIGGER_UNSPECIFIED = 0,
  AUCTION_TRIGGER_BATCH = 1,
  AUCTION_TRIGGER_OPENING = 2,
  AUCTION_TRIGGER_PRICE = 3,
  AUCTION_TRIGGER_LIQUIDITY = 4,
  AuctionTrigger_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AuctionTrigger_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AuctionTrigger_IsValid(int value);
constexpr AuctionTrigger AuctionTrigger_MIN = AUCTION_TRIGGER_UNSPECIFIED;
constexpr AuctionTrigger AuctionTrigger_MAX = AUCTION_TRIGGER_LIQUIDITY;
constexpr int AuctionTrigger_ARRAYSIZE = AuctionTrigger_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuctionTrigger_descriptor();
template<typename T>
inline const std::string& AuctionTrigger_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuctionTrigger>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuctionTrigger_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuctionTrigger_descriptor(), enum_t_value);
}
inline bool AuctionTrigger_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuctionTrigger* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuctionTrigger>(
    AuctionTrigger_descriptor(), name, value);
}
enum PeggedReference : int {
  PEGGED_REFERENCE_UNSPECIFIED = 0,
  PEGGED_REFERENCE_MID = 1,
  PEGGED_REFERENCE_BEST_BID = 2,
  PEGGED_REFERENCE_BEST_ASK = 3,
  PeggedReference_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PeggedReference_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PeggedReference_IsValid(int value);
constexpr PeggedReference PeggedReference_MIN = PEGGED_REFERENCE_UNSPECIFIED;
constexpr PeggedReference PeggedReference_MAX = PEGGED_REFERENCE_BEST_ASK;
constexpr int PeggedReference_ARRAYSIZE = PeggedReference_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeggedReference_descriptor();
template<typename T>
inline const std::string& PeggedReference_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeggedReference>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeggedReference_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeggedReference_descriptor(), enum_t_value);
}
inline bool PeggedReference_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeggedReference* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeggedReference>(
    PeggedReference_descriptor(), name, value);
}
enum OrderError : int {
  ORDER_ERROR_UNSPECIFIED = 0,
  ORDER_ERROR_INVALID_MARKET_ID = 1,
  ORDER_ERROR_INVALID_ORDER_ID = 2,
  ORDER_ERROR_OUT_OF_SEQUENCE = 3,
  ORDER_ERROR_INVALID_REMAINING_SIZE = 4,
  ORDER_ERROR_TIME_FAILURE = 5,
  ORDER_ERROR_REMOVAL_FAILURE = 6,
  ORDER_ERROR_INVALID_EXPIRATION_DATETIME = 7,
  ORDER_ERROR_INVALID_ORDER_REFERENCE = 8,
  ORDER_ERROR_EDIT_NOT_ALLOWED = 9,
  ORDER_ERROR_AMEND_FAILURE = 10,
  ORDER_ERROR_NOT_FOUND = 11,
  ORDER_ERROR_INVALID_PARTY_ID = 12,
  ORDER_ERROR_MARKET_CLOSED = 13,
  ORDER_ERROR_MARGIN_CHECK_FAILED = 14,
  ORDER_ERROR_MISSING_GENERAL_ACCOUNT = 15,
  ORDER_ERROR_INTERNAL_ERROR = 16,
  ORDER_ERROR_INVALID_SIZE = 17,
  ORDER_ERROR_INVALID_PERSISTENCE = 18,
  ORDER_ERROR_INVALID_TYPE = 19,
  ORDER_ERROR_SELF_TRADING = 20,
  ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES = 21,
  ORDER_ERROR_INCORRECT_MARKET_TYPE = 22,
  ORDER_ERROR_INVALID_TIME_IN_FORCE = 23,
  ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION = 24,
  ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING = 25,
  ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT = 26,
  ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT = 27,
  ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT = 28,
  ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC = 29,
  ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN = 30,
  ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN = 31,
  ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION = 32,
  ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION = 33,
  ORDER_ERROR_MUST_BE_LIMIT_ORDER = 34,
  ORDER_ERROR_MUST_BE_GTT_OR_GTC = 35,
  ORDER_ERROR_WITHOUT_REFERENCE_PRICE = 36,
  ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE = 37,
  ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO = 38,
  ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO = 39,
  ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO = 40,
  ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE = 41,
  ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO = 42,
  ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE = 43,
  ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER = 44,
  ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER = 45,
  ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER = 46,
  ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS = 47,
  OrderError_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderError_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderError_IsValid(int value);
constexpr OrderError OrderError_MIN = ORDER_ERROR_UNSPECIFIED;
constexpr OrderError OrderError_MAX = ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS;
constexpr int OrderError_ARRAYSIZE = OrderError_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderError_descriptor();
template<typename T>
inline const std::string& OrderError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderError_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderError_descriptor(), enum_t_value);
}
inline bool OrderError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderError>(
    OrderError_descriptor(), name, value);
}
enum ChainStatus : int {
  CHAIN_STATUS_UNSPECIFIED = 0,
  CHAIN_STATUS_DISCONNECTED = 1,
  CHAIN_STATUS_REPLAYING = 2,
  CHAIN_STATUS_CONNECTED = 3,
  ChainStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChainStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChainStatus_IsValid(int value);
constexpr ChainStatus ChainStatus_MIN = CHAIN_STATUS_UNSPECIFIED;
constexpr ChainStatus ChainStatus_MAX = CHAIN_STATUS_CONNECTED;
constexpr int ChainStatus_ARRAYSIZE = ChainStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChainStatus_descriptor();
template<typename T>
inline const std::string& ChainStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChainStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChainStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChainStatus_descriptor(), enum_t_value);
}
inline bool ChainStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChainStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChainStatus>(
    ChainStatus_descriptor(), name, value);
}
enum AccountType : int {
  ACCOUNT_TYPE_UNSPECIFIED = 0,
  ACCOUNT_TYPE_INSURANCE = 1,
  ACCOUNT_TYPE_SETTLEMENT = 2,
  ACCOUNT_TYPE_MARGIN = 3,
  ACCOUNT_TYPE_GENERAL = 4,
  ACCOUNT_TYPE_FEES_INFRASTRUCTURE = 5,
  ACCOUNT_TYPE_FEES_LIQUIDITY = 6,
  ACCOUNT_TYPE_FEES_MAKER = 7,
  ACCOUNT_TYPE_LOCK_WITHDRAW = 8,
  ACCOUNT_TYPE_BOND = 9,
  ACCOUNT_TYPE_EXTERNAL = 10,
  ACCOUNT_TYPE_GLOBAL_INSURANCE = 11,
  ACCOUNT_TYPE_GLOBAL_REWARD = 12,
  AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AccountType_IsValid(int value);
constexpr AccountType AccountType_MIN = ACCOUNT_TYPE_UNSPECIFIED;
constexpr AccountType AccountType_MAX = ACCOUNT_TYPE_GLOBAL_REWARD;
constexpr int AccountType_ARRAYSIZE = AccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor();
template<typename T>
inline const std::string& AccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountType_descriptor(), enum_t_value);
}
inline bool AccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountType>(
    AccountType_descriptor(), name, value);
}
enum TransferType : int {
  TRANSFER_TYPE_UNSPECIFIED = 0,
  TRANSFER_TYPE_LOSS = 1,
  TRANSFER_TYPE_WIN = 2,
  TRANSFER_TYPE_CLOSE = 3,
  TRANSFER_TYPE_MTM_LOSS = 4,
  TRANSFER_TYPE_MTM_WIN = 5,
  TRANSFER_TYPE_MARGIN_LOW = 6,
  TRANSFER_TYPE_MARGIN_HIGH = 7,
  TRANSFER_TYPE_MARGIN_CONFISCATED = 8,
  TRANSFER_TYPE_MAKER_FEE_PAY = 9,
  TRANSFER_TYPE_MAKER_FEE_RECEIVE = 10,
  TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY = 11,
  TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE = 12,
  TRANSFER_TYPE_LIQUIDITY_FEE_PAY = 13,
  TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE = 14,
  TRANSFER_TYPE_BOND_LOW = 15,
  TRANSFER_TYPE_BOND_HIGH = 16,
  TRANSFER_TYPE_WITHDRAW_LOCK = 17,
  TRANSFER_TYPE_WITHDRAW = 18,
  TRANSFER_TYPE_DEPOSIT = 19,
  TRANSFER_TYPE_BOND_SLASHING = 20,
  TRANSFER_TYPE_STAKE_REWARD = 21,
  TransferType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransferType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransferType_IsValid(int value);
constexpr TransferType TransferType_MIN = TRANSFER_TYPE_UNSPECIFIED;
constexpr TransferType TransferType_MAX = TRANSFER_TYPE_STAKE_REWARD;
constexpr int TransferType_ARRAYSIZE = TransferType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferType_descriptor();
template<typename T>
inline const std::string& TransferType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransferType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransferType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransferType_descriptor(), enum_t_value);
}
inline bool TransferType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransferType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransferType>(
    TransferType_descriptor(), name, value);
}
enum NodeStatus : int {
  NODE_STATUS_UNSPECIFIED = 0,
  NODE_STATUS_VALIDATOR = 1,
  NODE_STATUS_NON_VALIDATOR = 2,
  NodeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NodeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NodeStatus_IsValid(int value);
constexpr NodeStatus NodeStatus_MIN = NODE_STATUS_UNSPECIFIED;
constexpr NodeStatus NodeStatus_MAX = NODE_STATUS_NON_VALIDATOR;
constexpr int NodeStatus_ARRAYSIZE = NodeStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeStatus_descriptor();
template<typename T>
inline const std::string& NodeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeStatus_descriptor(), enum_t_value);
}
inline bool NodeStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeStatus>(
    NodeStatus_descriptor(), name, value);
}
// ===================================================================

class Price PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Price) */ {
 public:
  inline Price() : Price(nullptr) {}
  virtual ~Price();

  Price(const Price& from);
  Price(Price&& from) noexcept
    : Price() {
    *this = ::std::move(from);
  }

  inline Price& operator=(const Price& from) {
    CopyFrom(from);
    return *this;
  }
  inline Price& operator=(Price&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Price& default_instance();

  static inline const Price* internal_default_instance() {
    return reinterpret_cast<const Price*>(
               &_Price_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Price& a, Price& b) {
    a.Swap(&b);
  }
  inline void Swap(Price* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Price* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Price* New() const final {
    return CreateMaybeMessage<Price>(nullptr);
  }

  Price* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Price>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Price& from);
  void MergeFrom(const Price& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Price* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Price";
  }
  protected:
  explicit Price(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1 [json_name = "value"];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Price)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Timestamp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timestamp& default_instance();

  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1 [json_name = "value"];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Party PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Party) */ {
 public:
  inline Party() : Party(nullptr) {}
  virtual ~Party();

  Party(const Party& from);
  Party(Party&& from) noexcept
    : Party() {
    *this = ::std::move(from);
  }

  inline Party& operator=(const Party& from) {
    CopyFrom(from);
    return *this;
  }
  inline Party& operator=(Party&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Party& default_instance();

  static inline const Party* internal_default_instance() {
    return reinterpret_cast<const Party*>(
               &_Party_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Party& a, Party& b) {
    a.Swap(&b);
  }
  inline void Swap(Party* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Party* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Party* New() const final {
    return CreateMaybeMessage<Party>(nullptr);
  }

  Party* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Party>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Party& from);
  void MergeFrom(const Party& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Party* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Party";
  }
  protected:
  explicit Party(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegationsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .vega.Delegation delegations = 2 [json_name = "delegations"];
  int delegations_size() const;
  private:
  int _internal_delegations_size() const;
  public:
  void clear_delegations();
  ::vega::Delegation* mutable_delegations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >*
      mutable_delegations();
  private:
  const ::vega::Delegation& _internal_delegations(int index) const;
  ::vega::Delegation* _internal_add_delegations();
  public:
  const ::vega::Delegation& delegations(int index) const;
  ::vega::Delegation* add_delegations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >&
      delegations() const;

  // string id = 1 [json_name = "id", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:vega.Party)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation > delegations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class RiskFactor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.RiskFactor) */ {
 public:
  inline RiskFactor() : RiskFactor(nullptr) {}
  virtual ~RiskFactor();

  RiskFactor(const RiskFactor& from);
  RiskFactor(RiskFactor&& from) noexcept
    : RiskFactor() {
    *this = ::std::move(from);
  }

  inline RiskFactor& operator=(const RiskFactor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RiskFactor& operator=(RiskFactor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RiskFactor& default_instance();

  static inline const RiskFactor* internal_default_instance() {
    return reinterpret_cast<const RiskFactor*>(
               &_RiskFactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RiskFactor& a, RiskFactor& b) {
    a.Swap(&b);
  }
  inline void Swap(RiskFactor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RiskFactor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RiskFactor* New() const final {
    return CreateMaybeMessage<RiskFactor>(nullptr);
  }

  RiskFactor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RiskFactor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RiskFactor& from);
  void MergeFrom(const RiskFactor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RiskFactor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.RiskFactor";
  }
  protected:
  explicit RiskFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
    kShortFieldNumber = 2,
    kLongFieldNumber = 3,
  };
  // string market = 1 [json_name = "market"];
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // double short = 2 [json_name = "short"];
  void clear_short_();
  double short_() const;
  void set_short_(double value);
  private:
  double _internal_short_() const;
  void _internal_set_short_(double value);
  public:

  // double long = 3 [json_name = "long"];
  void clear_long_();
  double long_() const;
  void set_long_(double value);
  private:
  double _internal_long_() const;
  void _internal_set_long_(double value);
  public:

  // @@protoc_insertion_point(class_scope:vega.RiskFactor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  double short__;
  double long__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class RiskResult_RiskFactorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RiskResult_RiskFactorsEntry_DoNotUse,
    std::string, ::vega::RiskFactor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RiskResult_RiskFactorsEntry_DoNotUse,
    std::string, ::vega::RiskFactor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RiskResult_RiskFactorsEntry_DoNotUse();
  explicit RiskResult_RiskFactorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RiskResult_RiskFactorsEntry_DoNotUse& other);
  static const RiskResult_RiskFactorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RiskResult_RiskFactorsEntry_DoNotUse*>(&_RiskResult_RiskFactorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vega.RiskResult.RiskFactorsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class RiskResult_PredictedNextRiskFactorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse,
    std::string, ::vega::RiskFactor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse,
    std::string, ::vega::RiskFactor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RiskResult_PredictedNextRiskFactorsEntry_DoNotUse();
  explicit RiskResult_PredictedNextRiskFactorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse& other);
  static const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse*>(&_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vega.RiskResult.PredictedNextRiskFactorsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class RiskResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.RiskResult) */ {
 public:
  inline RiskResult() : RiskResult(nullptr) {}
  virtual ~RiskResult();

  RiskResult(const RiskResult& from);
  RiskResult(RiskResult&& from) noexcept
    : RiskResult() {
    *this = ::std::move(from);
  }

  inline RiskResult& operator=(const RiskResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RiskResult& operator=(RiskResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RiskResult& default_instance();

  static inline const RiskResult* internal_default_instance() {
    return reinterpret_cast<const RiskResult*>(
               &_RiskResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RiskResult& a, RiskResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RiskResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RiskResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RiskResult* New() const final {
    return CreateMaybeMessage<RiskResult>(nullptr);
  }

  RiskResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RiskResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RiskResult& from);
  void MergeFrom(const RiskResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RiskResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.RiskResult";
  }
  protected:
  explicit RiskResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRiskFactorsFieldNumber = 2,
    kPredictedNextRiskFactorsFieldNumber = 4,
    kUpdatedTimestampFieldNumber = 1,
    kNextUpdateTimestampFieldNumber = 3,
  };
  // map<string, .vega.RiskFactor> risk_factors = 2 [json_name = "riskFactors"];
  int risk_factors_size() const;
  private:
  int _internal_risk_factors_size() const;
  public:
  void clear_risk_factors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
      _internal_risk_factors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
      _internal_mutable_risk_factors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
      risk_factors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
      mutable_risk_factors();

  // map<string, .vega.RiskFactor> predicted_next_risk_factors = 4 [json_name = "predictedNextRiskFactors"];
  int predicted_next_risk_factors_size() const;
  private:
  int _internal_predicted_next_risk_factors_size() const;
  public:
  void clear_predicted_next_risk_factors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
      _internal_predicted_next_risk_factors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
      _internal_mutable_predicted_next_risk_factors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
      predicted_next_risk_factors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
      mutable_predicted_next_risk_factors();

  // int64 updated_timestamp = 1 [json_name = "updatedTimestamp"];
  void clear_updated_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_timestamp() const;
  void set_updated_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_timestamp() const;
  void _internal_set_updated_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 next_update_timestamp = 3 [json_name = "nextUpdateTimestamp"];
  void clear_next_update_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 next_update_timestamp() const;
  void set_next_update_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_next_update_timestamp() const;
  void _internal_set_next_update_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.RiskResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RiskResult_RiskFactorsEntry_DoNotUse,
      std::string, ::vega::RiskFactor,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> risk_factors_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RiskResult_PredictedNextRiskFactorsEntry_DoNotUse,
      std::string, ::vega::RiskFactor,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> predicted_next_risk_factors_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 next_update_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class PeggedOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.PeggedOrder) */ {
 public:
  inline PeggedOrder() : PeggedOrder(nullptr) {}
  virtual ~PeggedOrder();

  PeggedOrder(const PeggedOrder& from);
  PeggedOrder(PeggedOrder&& from) noexcept
    : PeggedOrder() {
    *this = ::std::move(from);
  }

  inline PeggedOrder& operator=(const PeggedOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeggedOrder& operator=(PeggedOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeggedOrder& default_instance();

  static inline const PeggedOrder* internal_default_instance() {
    return reinterpret_cast<const PeggedOrder*>(
               &_PeggedOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PeggedOrder& a, PeggedOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(PeggedOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeggedOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeggedOrder* New() const final {
    return CreateMaybeMessage<PeggedOrder>(nullptr);
  }

  PeggedOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeggedOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeggedOrder& from);
  void MergeFrom(const PeggedOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeggedOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.PeggedOrder";
  }
  protected:
  explicit PeggedOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kReferenceFieldNumber = 1,
  };
  // int64 offset = 2 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  void clear_reference();
  ::vega::PeggedReference reference() const;
  void set_reference(::vega::PeggedReference value);
  private:
  ::vega::PeggedReference _internal_reference() const;
  void _internal_set_reference(::vega::PeggedReference value);
  public:

  // @@protoc_insertion_point(class_scope:vega.PeggedOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  int reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  virtual ~Order();

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance();

  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Order_TimeInForce TimeInForce;
  static constexpr TimeInForce TIME_IN_FORCE_UNSPECIFIED =
    Order_TimeInForce_TIME_IN_FORCE_UNSPECIFIED;
  static constexpr TimeInForce TIME_IN_FORCE_GTC =
    Order_TimeInForce_TIME_IN_FORCE_GTC;
  static constexpr TimeInForce TIME_IN_FORCE_GTT =
    Order_TimeInForce_TIME_IN_FORCE_GTT;
  static constexpr TimeInForce TIME_IN_FORCE_IOC =
    Order_TimeInForce_TIME_IN_FORCE_IOC;
  static constexpr TimeInForce TIME_IN_FORCE_FOK =
    Order_TimeInForce_TIME_IN_FORCE_FOK;
  static constexpr TimeInForce TIME_IN_FORCE_GFA =
    Order_TimeInForce_TIME_IN_FORCE_GFA;
  static constexpr TimeInForce TIME_IN_FORCE_GFN =
    Order_TimeInForce_TIME_IN_FORCE_GFN;
  static inline bool TimeInForce_IsValid(int value) {
    return Order_TimeInForce_IsValid(value);
  }
  static constexpr TimeInForce TimeInForce_MIN =
    Order_TimeInForce_TimeInForce_MIN;
  static constexpr TimeInForce TimeInForce_MAX =
    Order_TimeInForce_TimeInForce_MAX;
  static constexpr int TimeInForce_ARRAYSIZE =
    Order_TimeInForce_TimeInForce_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TimeInForce_descriptor() {
    return Order_TimeInForce_descriptor();
  }
  template<typename T>
  static inline const std::string& TimeInForce_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TimeInForce>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TimeInForce_Name.");
    return Order_TimeInForce_Name(enum_t_value);
  }
  static inline bool TimeInForce_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TimeInForce* value) {
    return Order_TimeInForce_Parse(name, value);
  }

  typedef Order_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    Order_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_LIMIT =
    Order_Type_TYPE_LIMIT;
  static constexpr Type TYPE_MARKET =
    Order_Type_TYPE_MARKET;
  static constexpr Type TYPE_NETWORK =
    Order_Type_TYPE_NETWORK;
  static inline bool Type_IsValid(int value) {
    return Order_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Order_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Order_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Order_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Order_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Order_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Order_Type_Parse(name, value);
  }

  typedef Order_Status Status;
  static constexpr Status STATUS_UNSPECIFIED =
    Order_Status_STATUS_UNSPECIFIED;
  static constexpr Status STATUS_ACTIVE =
    Order_Status_STATUS_ACTIVE;
  static constexpr Status STATUS_EXPIRED =
    Order_Status_STATUS_EXPIRED;
  static constexpr Status STATUS_CANCELLED =
    Order_Status_STATUS_CANCELLED;
  static constexpr Status STATUS_STOPPED =
    Order_Status_STATUS_STOPPED;
  static constexpr Status STATUS_FILLED =
    Order_Status_STATUS_FILLED;
  static constexpr Status STATUS_REJECTED =
    Order_Status_STATUS_REJECTED;
  static constexpr Status STATUS_PARTIALLY_FILLED =
    Order_Status_STATUS_PARTIALLY_FILLED;
  static constexpr Status STATUS_PARKED =
    Order_Status_STATUS_PARKED;
  static inline bool Status_IsValid(int value) {
    return Order_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Order_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Order_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Order_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Order_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Order_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Order_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kPartyIdFieldNumber = 3,
    kReferenceFieldNumber = 13,
    kLiquidityProvisionIdFieldNumber = 19,
    kPeggedOrderFieldNumber = 18,
    kPriceFieldNumber = 5,
    kSizeFieldNumber = 6,
    kSideFieldNumber = 4,
    kTimeInForceFieldNumber = 8,
    kRemainingFieldNumber = 7,
    kCreatedAtFieldNumber = 10,
    kTypeFieldNumber = 9,
    kStatusFieldNumber = 11,
    kExpiresAtFieldNumber = 12,
    kUpdatedAtFieldNumber = 15,
    kVersionFieldNumber = 16,
    kBatchIdFieldNumber = 17,
    kReasonFieldNumber = 14,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string party_id = 3 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string reference = 13 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // string liquidity_provision_id = 19 [json_name = "liquidityProvisionId"];
  void clear_liquidity_provision_id();
  const std::string& liquidity_provision_id() const;
  void set_liquidity_provision_id(const std::string& value);
  void set_liquidity_provision_id(std::string&& value);
  void set_liquidity_provision_id(const char* value);
  void set_liquidity_provision_id(const char* value, size_t size);
  std::string* mutable_liquidity_provision_id();
  std::string* release_liquidity_provision_id();
  void set_allocated_liquidity_provision_id(std::string* liquidity_provision_id);
  private:
  const std::string& _internal_liquidity_provision_id() const;
  void _internal_set_liquidity_provision_id(const std::string& value);
  std::string* _internal_mutable_liquidity_provision_id();
  public:

  // .vega.PeggedOrder pegged_order = 18 [json_name = "peggedOrder"];
  bool has_pegged_order() const;
  private:
  bool _internal_has_pegged_order() const;
  public:
  void clear_pegged_order();
  const ::vega::PeggedOrder& pegged_order() const;
  ::vega::PeggedOrder* release_pegged_order();
  ::vega::PeggedOrder* mutable_pegged_order();
  void set_allocated_pegged_order(::vega::PeggedOrder* pegged_order);
  private:
  const ::vega::PeggedOrder& _internal_pegged_order() const;
  ::vega::PeggedOrder* _internal_mutable_pegged_order();
  public:
  void unsafe_arena_set_allocated_pegged_order(
      ::vega::PeggedOrder* pegged_order);
  ::vega::PeggedOrder* unsafe_arena_release_pegged_order();

  // uint64 price = 5 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 6 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.Side side = 4 [json_name = "side"];
  void clear_side();
  ::vega::Side side() const;
  void set_side(::vega::Side value);
  private:
  ::vega::Side _internal_side() const;
  void _internal_set_side(::vega::Side value);
  public:

  // .vega.Order.TimeInForce time_in_force = 8 [json_name = "timeInForce"];
  void clear_time_in_force();
  ::vega::Order_TimeInForce time_in_force() const;
  void set_time_in_force(::vega::Order_TimeInForce value);
  private:
  ::vega::Order_TimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::vega::Order_TimeInForce value);
  public:

  // uint64 remaining = 7 [json_name = "remaining"];
  void clear_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining() const;
  void set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remaining() const;
  void _internal_set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 created_at = 10 [json_name = "createdAt"];
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Order.Type type = 9 [json_name = "type"];
  void clear_type();
  ::vega::Order_Type type() const;
  void set_type(::vega::Order_Type value);
  private:
  ::vega::Order_Type _internal_type() const;
  void _internal_set_type(::vega::Order_Type value);
  public:

  // .vega.Order.Status status = 11 [json_name = "status"];
  void clear_status();
  ::vega::Order_Status status() const;
  void set_status(::vega::Order_Status value);
  private:
  ::vega::Order_Status _internal_status() const;
  void _internal_set_status(::vega::Order_Status value);
  public:

  // int64 expires_at = 12 [json_name = "expiresAt"];
  void clear_expires_at();
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at() const;
  void set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expires_at() const;
  void _internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updated_at = 15 [json_name = "updatedAt"];
  void clear_updated_at();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at() const;
  void set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_at() const;
  void _internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 version = 16 [json_name = "version"];
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 batch_id = 17 [json_name = "batchId"];
  void clear_batch_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 batch_id() const;
  void set_batch_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_batch_id() const;
  void _internal_set_batch_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.OrderError reason = 14 [json_name = "reason"];
  void clear_reason();
  ::vega::OrderError reason() const;
  void set_reason(::vega::OrderError value);
  private:
  ::vega::OrderError _internal_reason() const;
  void _internal_set_reason(::vega::OrderError value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr liquidity_provision_id_;
  ::vega::PeggedOrder* pegged_order_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  int side_;
  int time_in_force_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  int type_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 batch_id_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class OrderCancellationConfirmation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.OrderCancellationConfirmation) */ {
 public:
  inline OrderCancellationConfirmation() : OrderCancellationConfirmation(nullptr) {}
  virtual ~OrderCancellationConfirmation();

  OrderCancellationConfirmation(const OrderCancellationConfirmation& from);
  OrderCancellationConfirmation(OrderCancellationConfirmation&& from) noexcept
    : OrderCancellationConfirmation() {
    *this = ::std::move(from);
  }

  inline OrderCancellationConfirmation& operator=(const OrderCancellationConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderCancellationConfirmation& operator=(OrderCancellationConfirmation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderCancellationConfirmation& default_instance();

  static inline const OrderCancellationConfirmation* internal_default_instance() {
    return reinterpret_cast<const OrderCancellationConfirmation*>(
               &_OrderCancellationConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OrderCancellationConfirmation& a, OrderCancellationConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderCancellationConfirmation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderCancellationConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderCancellationConfirmation* New() const final {
    return CreateMaybeMessage<OrderCancellationConfirmation>(nullptr);
  }

  OrderCancellationConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderCancellationConfirmation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderCancellationConfirmation& from);
  void MergeFrom(const OrderCancellationConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderCancellationConfirmation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.OrderCancellationConfirmation";
  }
  protected:
  explicit OrderCancellationConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:vega.OrderCancellationConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class OrderConfirmation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.OrderConfirmation) */ {
 public:
  inline OrderConfirmation() : OrderConfirmation(nullptr) {}
  virtual ~OrderConfirmation();

  OrderConfirmation(const OrderConfirmation& from);
  OrderConfirmation(OrderConfirmation&& from) noexcept
    : OrderConfirmation() {
    *this = ::std::move(from);
  }

  inline OrderConfirmation& operator=(const OrderConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderConfirmation& operator=(OrderConfirmation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderConfirmation& default_instance();

  static inline const OrderConfirmation* internal_default_instance() {
    return reinterpret_cast<const OrderConfirmation*>(
               &_OrderConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OrderConfirmation& a, OrderConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderConfirmation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderConfirmation* New() const final {
    return CreateMaybeMessage<OrderConfirmation>(nullptr);
  }

  OrderConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderConfirmation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderConfirmation& from);
  void MergeFrom(const OrderConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderConfirmation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.OrderConfirmation";
  }
  protected:
  explicit OrderConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 2,
    kPassiveOrdersAffectedFieldNumber = 3,
    kOrderFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 2 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // repeated .vega.Order passive_orders_affected = 3 [json_name = "passiveOrdersAffected"];
  int passive_orders_affected_size() const;
  private:
  int _internal_passive_orders_affected_size() const;
  public:
  void clear_passive_orders_affected();
  ::vega::Order* mutable_passive_orders_affected(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
      mutable_passive_orders_affected();
  private:
  const ::vega::Order& _internal_passive_orders_affected(int index) const;
  ::vega::Order* _internal_add_passive_orders_affected();
  public:
  const ::vega::Order& passive_orders_affected(int index) const;
  ::vega::Order* add_passive_orders_affected();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
      passive_orders_affected() const;

  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:vega.OrderConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order > passive_orders_affected_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class AuctionIndicativeState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.AuctionIndicativeState) */ {
 public:
  inline AuctionIndicativeState() : AuctionIndicativeState(nullptr) {}
  virtual ~AuctionIndicativeState();

  AuctionIndicativeState(const AuctionIndicativeState& from);
  AuctionIndicativeState(AuctionIndicativeState&& from) noexcept
    : AuctionIndicativeState() {
    *this = ::std::move(from);
  }

  inline AuctionIndicativeState& operator=(const AuctionIndicativeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuctionIndicativeState& operator=(AuctionIndicativeState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuctionIndicativeState& default_instance();

  static inline const AuctionIndicativeState* internal_default_instance() {
    return reinterpret_cast<const AuctionIndicativeState*>(
               &_AuctionIndicativeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AuctionIndicativeState& a, AuctionIndicativeState& b) {
    a.Swap(&b);
  }
  inline void Swap(AuctionIndicativeState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuctionIndicativeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuctionIndicativeState* New() const final {
    return CreateMaybeMessage<AuctionIndicativeState>(nullptr);
  }

  AuctionIndicativeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuctionIndicativeState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuctionIndicativeState& from);
  void MergeFrom(const AuctionIndicativeState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuctionIndicativeState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.AuctionIndicativeState";
  }
  protected:
  explicit AuctionIndicativeState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kIndicativePriceFieldNumber = 2,
    kIndicativeVolumeFieldNumber = 3,
    kAuctionStartFieldNumber = 4,
    kAuctionEndFieldNumber = 5,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // uint64 indicative_price = 2 [json_name = "indicativePrice"];
  void clear_indicative_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 indicative_price() const;
  void set_indicative_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_indicative_price() const;
  void _internal_set_indicative_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 indicative_volume = 3 [json_name = "indicativeVolume"];
  void clear_indicative_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 indicative_volume() const;
  void set_indicative_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_indicative_volume() const;
  void _internal_set_indicative_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 auction_start = 4 [json_name = "auctionStart"];
  void clear_auction_start();
  ::PROTOBUF_NAMESPACE_ID::int64 auction_start() const;
  void set_auction_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auction_start() const;
  void _internal_set_auction_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 auction_end = 5 [json_name = "auctionEnd"];
  void clear_auction_end();
  ::PROTOBUF_NAMESPACE_ID::int64 auction_end() const;
  void set_auction_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auction_end() const;
  void _internal_set_auction_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.AuctionIndicativeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 indicative_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 indicative_volume_;
  ::PROTOBUF_NAMESPACE_ID::int64 auction_start_;
  ::PROTOBUF_NAMESPACE_ID::int64 auction_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Trade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Trade) */ {
 public:
  inline Trade() : Trade(nullptr) {}
  virtual ~Trade();

  Trade(const Trade& from);
  Trade(Trade&& from) noexcept
    : Trade() {
    *this = ::std::move(from);
  }

  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trade& operator=(Trade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trade& default_instance();

  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
               &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Trade& a, Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(Trade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trade* New() const final {
    return CreateMaybeMessage<Trade>(nullptr);
  }

  Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trade& from);
  void MergeFrom(const Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Trade";
  }
  protected:
  explicit Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Trade_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    Trade_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_DEFAULT =
    Trade_Type_TYPE_DEFAULT;
  static constexpr Type TYPE_NETWORK_CLOSE_OUT_GOOD =
    Trade_Type_TYPE_NETWORK_CLOSE_OUT_GOOD;
  static constexpr Type TYPE_NETWORK_CLOSE_OUT_BAD =
    Trade_Type_TYPE_NETWORK_CLOSE_OUT_BAD;
  static inline bool Type_IsValid(int value) {
    return Trade_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Trade_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Trade_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Trade_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Trade_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Trade_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Trade_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kBuyerFieldNumber = 5,
    kSellerFieldNumber = 6,
    kBuyOrderFieldNumber = 8,
    kSellOrderFieldNumber = 9,
    kBuyerFeeFieldNumber = 12,
    kSellerFeeFieldNumber = 13,
    kPriceFieldNumber = 3,
    kSizeFieldNumber = 4,
    kAggressorFieldNumber = 7,
    kTypeFieldNumber = 11,
    kTimestampFieldNumber = 10,
    kBuyerAuctionBatchFieldNumber = 14,
    kSellerAuctionBatchFieldNumber = 15,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string buyer = 5 [json_name = "buyer"];
  void clear_buyer();
  const std::string& buyer() const;
  void set_buyer(const std::string& value);
  void set_buyer(std::string&& value);
  void set_buyer(const char* value);
  void set_buyer(const char* value, size_t size);
  std::string* mutable_buyer();
  std::string* release_buyer();
  void set_allocated_buyer(std::string* buyer);
  private:
  const std::string& _internal_buyer() const;
  void _internal_set_buyer(const std::string& value);
  std::string* _internal_mutable_buyer();
  public:

  // string seller = 6 [json_name = "seller"];
  void clear_seller();
  const std::string& seller() const;
  void set_seller(const std::string& value);
  void set_seller(std::string&& value);
  void set_seller(const char* value);
  void set_seller(const char* value, size_t size);
  std::string* mutable_seller();
  std::string* release_seller();
  void set_allocated_seller(std::string* seller);
  private:
  const std::string& _internal_seller() const;
  void _internal_set_seller(const std::string& value);
  std::string* _internal_mutable_seller();
  public:

  // string buy_order = 8 [json_name = "buyOrder"];
  void clear_buy_order();
  const std::string& buy_order() const;
  void set_buy_order(const std::string& value);
  void set_buy_order(std::string&& value);
  void set_buy_order(const char* value);
  void set_buy_order(const char* value, size_t size);
  std::string* mutable_buy_order();
  std::string* release_buy_order();
  void set_allocated_buy_order(std::string* buy_order);
  private:
  const std::string& _internal_buy_order() const;
  void _internal_set_buy_order(const std::string& value);
  std::string* _internal_mutable_buy_order();
  public:

  // string sell_order = 9 [json_name = "sellOrder"];
  void clear_sell_order();
  const std::string& sell_order() const;
  void set_sell_order(const std::string& value);
  void set_sell_order(std::string&& value);
  void set_sell_order(const char* value);
  void set_sell_order(const char* value, size_t size);
  std::string* mutable_sell_order();
  std::string* release_sell_order();
  void set_allocated_sell_order(std::string* sell_order);
  private:
  const std::string& _internal_sell_order() const;
  void _internal_set_sell_order(const std::string& value);
  std::string* _internal_mutable_sell_order();
  public:

  // .vega.Fee buyer_fee = 12 [json_name = "buyerFee"];
  bool has_buyer_fee() const;
  private:
  bool _internal_has_buyer_fee() const;
  public:
  void clear_buyer_fee();
  const ::vega::Fee& buyer_fee() const;
  ::vega::Fee* release_buyer_fee();
  ::vega::Fee* mutable_buyer_fee();
  void set_allocated_buyer_fee(::vega::Fee* buyer_fee);
  private:
  const ::vega::Fee& _internal_buyer_fee() const;
  ::vega::Fee* _internal_mutable_buyer_fee();
  public:
  void unsafe_arena_set_allocated_buyer_fee(
      ::vega::Fee* buyer_fee);
  ::vega::Fee* unsafe_arena_release_buyer_fee();

  // .vega.Fee seller_fee = 13 [json_name = "sellerFee"];
  bool has_seller_fee() const;
  private:
  bool _internal_has_seller_fee() const;
  public:
  void clear_seller_fee();
  const ::vega::Fee& seller_fee() const;
  ::vega::Fee* release_seller_fee();
  ::vega::Fee* mutable_seller_fee();
  void set_allocated_seller_fee(::vega::Fee* seller_fee);
  private:
  const ::vega::Fee& _internal_seller_fee() const;
  ::vega::Fee* _internal_mutable_seller_fee();
  public:
  void unsafe_arena_set_allocated_seller_fee(
      ::vega::Fee* seller_fee);
  ::vega::Fee* unsafe_arena_release_seller_fee();

  // uint64 price = 3 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 4 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.Side aggressor = 7 [json_name = "aggressor"];
  void clear_aggressor();
  ::vega::Side aggressor() const;
  void set_aggressor(::vega::Side value);
  private:
  ::vega::Side _internal_aggressor() const;
  void _internal_set_aggressor(::vega::Side value);
  public:

  // .vega.Trade.Type type = 11 [json_name = "type"];
  void clear_type();
  ::vega::Trade_Type type() const;
  void set_type(::vega::Trade_Type value);
  private:
  ::vega::Trade_Type _internal_type() const;
  void _internal_set_type(::vega::Trade_Type value);
  public:

  // int64 timestamp = 10 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 buyer_auction_batch = 14 [json_name = "buyerAuctionBatch"];
  void clear_buyer_auction_batch();
  ::PROTOBUF_NAMESPACE_ID::uint64 buyer_auction_batch() const;
  void set_buyer_auction_batch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_buyer_auction_batch() const;
  void _internal_set_buyer_auction_batch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 seller_auction_batch = 15 [json_name = "sellerAuctionBatch"];
  void clear_seller_auction_batch();
  ::PROTOBUF_NAMESPACE_ID::uint64 seller_auction_batch() const;
  void set_seller_auction_batch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seller_auction_batch() const;
  void _internal_set_seller_auction_batch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Trade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seller_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_order_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_order_;
  ::vega::Fee* buyer_fee_;
  ::vega::Fee* seller_fee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  int aggressor_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buyer_auction_batch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seller_auction_batch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Fee PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Fee) */ {
 public:
  inline Fee() : Fee(nullptr) {}
  virtual ~Fee();

  Fee(const Fee& from);
  Fee(Fee&& from) noexcept
    : Fee() {
    *this = ::std::move(from);
  }

  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fee& operator=(Fee&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fee& default_instance();

  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
               &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Fee& a, Fee& b) {
    a.Swap(&b);
  }
  inline void Swap(Fee* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fee* New() const final {
    return CreateMaybeMessage<Fee>(nullptr);
  }

  Fee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fee& from);
  void MergeFrom(const Fee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Fee";
  }
  protected:
  explicit Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMakerFeeFieldNumber = 1,
    kInfrastructureFeeFieldNumber = 2,
    kLiquidityFeeFieldNumber = 3,
  };
  // uint64 maker_fee = 1 [json_name = "makerFee"];
  void clear_maker_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 maker_fee() const;
  void set_maker_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maker_fee() const;
  void _internal_set_maker_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 infrastructure_fee = 2 [json_name = "infrastructureFee"];
  void clear_infrastructure_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 infrastructure_fee() const;
  void set_infrastructure_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_infrastructure_fee() const;
  void _internal_set_infrastructure_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 liquidity_fee = 3 [json_name = "liquidityFee"];
  void clear_liquidity_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 liquidity_fee() const;
  void set_liquidity_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_liquidity_fee() const;
  void _internal_set_liquidity_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Fee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maker_fee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 infrastructure_fee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 liquidity_fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class TradeSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TradeSet) */ {
 public:
  inline TradeSet() : TradeSet(nullptr) {}
  virtual ~TradeSet();

  TradeSet(const TradeSet& from);
  TradeSet(TradeSet&& from) noexcept
    : TradeSet() {
    *this = ::std::move(from);
  }

  inline TradeSet& operator=(const TradeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeSet& operator=(TradeSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeSet& default_instance();

  static inline const TradeSet* internal_default_instance() {
    return reinterpret_cast<const TradeSet*>(
               &_TradeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TradeSet& a, TradeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeSet* New() const final {
    return CreateMaybeMessage<TradeSet>(nullptr);
  }

  TradeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeSet& from);
  void MergeFrom(const TradeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TradeSet";
  }
  protected:
  explicit TradeSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:vega.TradeSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Candle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Candle) */ {
 public:
  inline Candle() : Candle(nullptr) {}
  virtual ~Candle();

  Candle(const Candle& from);
  Candle(Candle&& from) noexcept
    : Candle() {
    *this = ::std::move(from);
  }

  inline Candle& operator=(const Candle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candle& operator=(Candle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Candle& default_instance();

  static inline const Candle* internal_default_instance() {
    return reinterpret_cast<const Candle*>(
               &_Candle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Candle& a, Candle& b) {
    a.Swap(&b);
  }
  inline void Swap(Candle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Candle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Candle* New() const final {
    return CreateMaybeMessage<Candle>(nullptr);
  }

  Candle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Candle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Candle& from);
  void MergeFrom(const Candle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Candle";
  }
  protected:
  explicit Candle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatetimeFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kHighFieldNumber = 3,
    kLowFieldNumber = 4,
    kOpenFieldNumber = 5,
    kCloseFieldNumber = 6,
    kVolumeFieldNumber = 7,
    kIntervalFieldNumber = 8,
  };
  // string datetime = 2 [json_name = "datetime"];
  void clear_datetime();
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);
  private:
  const std::string& _internal_datetime() const;
  void _internal_set_datetime(const std::string& value);
  std::string* _internal_mutable_datetime();
  public:

  // int64 timestamp = 1 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 high = 3 [json_name = "high"];
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 low = 4 [json_name = "low"];
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 open = 5 [json_name = "open"];
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::uint64 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 close = 6 [json_name = "close"];
  void clear_close();
  ::PROTOBUF_NAMESPACE_ID::uint64 close() const;
  void set_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_close() const;
  void _internal_set_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 volume = 7 [json_name = "volume"];
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.Interval interval = 8 [json_name = "interval"];
  void clear_interval();
  ::vega::Interval interval() const;
  void set_interval(::vega::Interval value);
  private:
  ::vega::Interval _internal_interval() const;
  void _internal_set_interval(::vega::Interval value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Candle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_;
  ::PROTOBUF_NAMESPACE_ID::uint64 close_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_;
  int interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class PriceLevel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.PriceLevel) */ {
 public:
  inline PriceLevel() : PriceLevel(nullptr) {}
  virtual ~PriceLevel();

  PriceLevel(const PriceLevel& from);
  PriceLevel(PriceLevel&& from) noexcept
    : PriceLevel() {
    *this = ::std::move(from);
  }

  inline PriceLevel& operator=(const PriceLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceLevel& operator=(PriceLevel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceLevel& default_instance();

  static inline const PriceLevel* internal_default_instance() {
    return reinterpret_cast<const PriceLevel*>(
               &_PriceLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PriceLevel& a, PriceLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceLevel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceLevel* New() const final {
    return CreateMaybeMessage<PriceLevel>(nullptr);
  }

  PriceLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceLevel& from);
  void MergeFrom(const PriceLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.PriceLevel";
  }
  protected:
  explicit PriceLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kNumberOfOrdersFieldNumber = 2,
    kVolumeFieldNumber = 3,
  };
  // uint64 price = 1 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 number_of_orders = 2 [json_name = "numberOfOrders"];
  void clear_number_of_orders();
  ::PROTOBUF_NAMESPACE_ID::uint64 number_of_orders() const;
  void set_number_of_orders(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_number_of_orders() const;
  void _internal_set_number_of_orders(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 volume = 3 [json_name = "volume"];
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.PriceLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 number_of_orders_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class MarketDepth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.MarketDepth) */ {
 public:
  inline MarketDepth() : MarketDepth(nullptr) {}
  virtual ~MarketDepth();

  MarketDepth(const MarketDepth& from);
  MarketDepth(MarketDepth&& from) noexcept
    : MarketDepth() {
    *this = ::std::move(from);
  }

  inline MarketDepth& operator=(const MarketDepth& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepth& operator=(MarketDepth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepth& default_instance();

  static inline const MarketDepth* internal_default_instance() {
    return reinterpret_cast<const MarketDepth*>(
               &_MarketDepth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MarketDepth& a, MarketDepth& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepth* New() const final {
    return CreateMaybeMessage<MarketDepth>(nullptr);
  }

  MarketDepth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepth& from);
  void MergeFrom(const MarketDepth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.MarketDepth";
  }
  protected:
  explicit MarketDepth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 2,
    kSellFieldNumber = 3,
    kMarketIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 4,
  };
  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  int buy_size() const;
  private:
  int _internal_buy_size() const;
  public:
  void clear_buy();
  ::vega::PriceLevel* mutable_buy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_buy();
  private:
  const ::vega::PriceLevel& _internal_buy(int index) const;
  ::vega::PriceLevel* _internal_add_buy();
  public:
  const ::vega::PriceLevel& buy(int index) const;
  ::vega::PriceLevel* add_buy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      buy() const;

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  int sell_size() const;
  private:
  int _internal_sell_size() const;
  public:
  void clear_sell();
  ::vega::PriceLevel* mutable_sell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_sell();
  private:
  const ::vega::PriceLevel& _internal_sell(int index) const;
  ::vega::PriceLevel* _internal_add_sell();
  public:
  const ::vega::PriceLevel& sell(int index) const;
  ::vega::PriceLevel* add_sell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      sell() const;

  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // uint64 sequence_number = 4 [json_name = "sequenceNumber"];
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.MarketDepth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > buy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > sell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.MarketDepthUpdate) */ {
 public:
  inline MarketDepthUpdate() : MarketDepthUpdate(nullptr) {}
  virtual ~MarketDepthUpdate();

  MarketDepthUpdate(const MarketDepthUpdate& from);
  MarketDepthUpdate(MarketDepthUpdate&& from) noexcept
    : MarketDepthUpdate() {
    *this = ::std::move(from);
  }

  inline MarketDepthUpdate& operator=(const MarketDepthUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthUpdate& operator=(MarketDepthUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthUpdate& default_instance();

  static inline const MarketDepthUpdate* internal_default_instance() {
    return reinterpret_cast<const MarketDepthUpdate*>(
               &_MarketDepthUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MarketDepthUpdate& a, MarketDepthUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthUpdate* New() const final {
    return CreateMaybeMessage<MarketDepthUpdate>(nullptr);
  }

  MarketDepthUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthUpdate& from);
  void MergeFrom(const MarketDepthUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.MarketDepthUpdate";
  }
  protected:
  explicit MarketDepthUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 2,
    kSellFieldNumber = 3,
    kMarketIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 4,
  };
  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  int buy_size() const;
  private:
  int _internal_buy_size() const;
  public:
  void clear_buy();
  ::vega::PriceLevel* mutable_buy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_buy();
  private:
  const ::vega::PriceLevel& _internal_buy(int index) const;
  ::vega::PriceLevel* _internal_add_buy();
  public:
  const ::vega::PriceLevel& buy(int index) const;
  ::vega::PriceLevel* add_buy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      buy() const;

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  int sell_size() const;
  private:
  int _internal_sell_size() const;
  public:
  void clear_sell();
  ::vega::PriceLevel* mutable_sell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_sell();
  private:
  const ::vega::PriceLevel& _internal_sell(int index) const;
  ::vega::PriceLevel* _internal_add_sell();
  public:
  const ::vega::PriceLevel& sell(int index) const;
  ::vega::PriceLevel* add_sell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      sell() const;

  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // uint64 sequence_number = 4 [json_name = "sequenceNumber"];
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.MarketDepthUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > buy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > sell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kOpenVolumeFieldNumber = 3,
    kRealisedPnlFieldNumber = 4,
    kUnrealisedPnlFieldNumber = 5,
    kAverageEntryPriceFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // int64 open_volume = 3 [json_name = "openVolume"];
  void clear_open_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 open_volume() const;
  void set_open_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_open_volume() const;
  void _internal_set_open_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 realised_pnl = 4 [json_name = "realisedPnl"];
  void clear_realised_pnl();
  ::PROTOBUF_NAMESPACE_ID::int64 realised_pnl() const;
  void set_realised_pnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_realised_pnl() const;
  void _internal_set_realised_pnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 unrealised_pnl = 5 [json_name = "unrealisedPnl"];
  void clear_unrealised_pnl();
  ::PROTOBUF_NAMESPACE_ID::int64 unrealised_pnl() const;
  void set_unrealised_pnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unrealised_pnl() const;
  void _internal_set_unrealised_pnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 average_entry_price = 6 [json_name = "averageEntryPrice"];
  void clear_average_entry_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 average_entry_price() const;
  void set_average_entry_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_average_entry_price() const;
  void _internal_set_average_entry_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 updated_at = 7 [json_name = "updatedAt"];
  void clear_updated_at();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at() const;
  void set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_at() const;
  void _internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 open_volume_;
  ::PROTOBUF_NAMESPACE_ID::int64 realised_pnl_;
  ::PROTOBUF_NAMESPACE_ID::int64 unrealised_pnl_;
  ::PROTOBUF_NAMESPACE_ID::uint64 average_entry_price_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class PositionTrade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.PositionTrade) */ {
 public:
  inline PositionTrade() : PositionTrade(nullptr) {}
  virtual ~PositionTrade();

  PositionTrade(const PositionTrade& from);
  PositionTrade(PositionTrade&& from) noexcept
    : PositionTrade() {
    *this = ::std::move(from);
  }

  inline PositionTrade& operator=(const PositionTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionTrade& operator=(PositionTrade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionTrade& default_instance();

  static inline const PositionTrade* internal_default_instance() {
    return reinterpret_cast<const PositionTrade*>(
               &_PositionTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PositionTrade& a, PositionTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionTrade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionTrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionTrade* New() const final {
    return CreateMaybeMessage<PositionTrade>(nullptr);
  }

  PositionTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionTrade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionTrade& from);
  void MergeFrom(const PositionTrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionTrade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.PositionTrade";
  }
  protected:
  explicit PositionTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // int64 volume = 1 [json_name = "volume"];
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 price = 2 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.PositionTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Deposit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Deposit) */ {
 public:
  inline Deposit() : Deposit(nullptr) {}
  virtual ~Deposit();

  Deposit(const Deposit& from);
  Deposit(Deposit&& from) noexcept
    : Deposit() {
    *this = ::std::move(from);
  }

  inline Deposit& operator=(const Deposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deposit& operator=(Deposit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Deposit& default_instance();

  static inline const Deposit* internal_default_instance() {
    return reinterpret_cast<const Deposit*>(
               &_Deposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Deposit& a, Deposit& b) {
    a.Swap(&b);
  }
  inline void Swap(Deposit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deposit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Deposit* New() const final {
    return CreateMaybeMessage<Deposit>(nullptr);
  }

  Deposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Deposit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Deposit& from);
  void MergeFrom(const Deposit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deposit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Deposit";
  }
  protected:
  explicit Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Deposit_Status Status;
  static constexpr Status STATUS_UNSPECIFIED =
    Deposit_Status_STATUS_UNSPECIFIED;
  static constexpr Status STATUS_OPEN =
    Deposit_Status_STATUS_OPEN;
  static constexpr Status STATUS_CANCELLED =
    Deposit_Status_STATUS_CANCELLED;
  static constexpr Status STATUS_FINALIZED =
    Deposit_Status_STATUS_FINALIZED;
  static inline bool Status_IsValid(int value) {
    return Deposit_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Deposit_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Deposit_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Deposit_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Deposit_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Deposit_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Deposit_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPartyIdFieldNumber = 3,
    kAssetFieldNumber = 4,
    kAmountFieldNumber = 5,
    kTxHashFieldNumber = 6,
    kCreditedTimestampFieldNumber = 7,
    kCreatedTimestampFieldNumber = 8,
    kStatusFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string party_id = 3 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string asset = 4 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string amount = 5 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string tx_hash = 6 [json_name = "txHash"];
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // int64 credited_timestamp = 7 [json_name = "creditedTimestamp"];
  void clear_credited_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 credited_timestamp() const;
  void set_credited_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_credited_timestamp() const;
  void _internal_set_credited_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 created_timestamp = 8 [json_name = "createdTimestamp"];
  void clear_created_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 created_timestamp() const;
  void set_created_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_timestamp() const;
  void _internal_set_created_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Deposit.Status status = 2 [json_name = "status"];
  void clear_status();
  ::vega::Deposit_Status status() const;
  void set_status(::vega::Deposit_Status value);
  private:
  ::vega::Deposit_Status _internal_status() const;
  void _internal_set_status(::vega::Deposit_Status value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Deposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 credited_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_timestamp_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Withdrawal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Withdrawal) */ {
 public:
  inline Withdrawal() : Withdrawal(nullptr) {}
  virtual ~Withdrawal();

  Withdrawal(const Withdrawal& from);
  Withdrawal(Withdrawal&& from) noexcept
    : Withdrawal() {
    *this = ::std::move(from);
  }

  inline Withdrawal& operator=(const Withdrawal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Withdrawal& operator=(Withdrawal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Withdrawal& default_instance();

  static inline const Withdrawal* internal_default_instance() {
    return reinterpret_cast<const Withdrawal*>(
               &_Withdrawal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Withdrawal& a, Withdrawal& b) {
    a.Swap(&b);
  }
  inline void Swap(Withdrawal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Withdrawal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Withdrawal* New() const final {
    return CreateMaybeMessage<Withdrawal>(nullptr);
  }

  Withdrawal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Withdrawal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Withdrawal& from);
  void MergeFrom(const Withdrawal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Withdrawal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Withdrawal";
  }
  protected:
  explicit Withdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Withdrawal_Status Status;
  static constexpr Status STATUS_UNSPECIFIED =
    Withdrawal_Status_STATUS_UNSPECIFIED;
  static constexpr Status STATUS_OPEN =
    Withdrawal_Status_STATUS_OPEN;
  static constexpr Status STATUS_CANCELLED =
    Withdrawal_Status_STATUS_CANCELLED;
  static constexpr Status STATUS_FINALIZED =
    Withdrawal_Status_STATUS_FINALIZED;
  static inline bool Status_IsValid(int value) {
    return Withdrawal_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Withdrawal_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Withdrawal_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Withdrawal_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Withdrawal_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Withdrawal_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Withdrawal_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kAssetFieldNumber = 4,
    kRefFieldNumber = 6,
    kTxHashFieldNumber = 8,
    kExtFieldNumber = 11,
    kAmountFieldNumber = 3,
    kExpiryFieldNumber = 7,
    kCreatedTimestampFieldNumber = 9,
    kWithdrawnTimestampFieldNumber = 10,
    kStatusFieldNumber = 5,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string asset = 4 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string ref = 6 [json_name = "ref"];
  void clear_ref();
  const std::string& ref() const;
  void set_ref(const std::string& value);
  void set_ref(std::string&& value);
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  std::string* mutable_ref();
  std::string* release_ref();
  void set_allocated_ref(std::string* ref);
  private:
  const std::string& _internal_ref() const;
  void _internal_set_ref(const std::string& value);
  std::string* _internal_mutable_ref();
  public:

  // string tx_hash = 8 [json_name = "txHash"];
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // .vega.WithdrawExt ext = 11 [json_name = "ext"];
  bool has_ext() const;
  private:
  bool _internal_has_ext() const;
  public:
  void clear_ext();
  const ::vega::WithdrawExt& ext() const;
  ::vega::WithdrawExt* release_ext();
  ::vega::WithdrawExt* mutable_ext();
  void set_allocated_ext(::vega::WithdrawExt* ext);
  private:
  const ::vega::WithdrawExt& _internal_ext() const;
  ::vega::WithdrawExt* _internal_mutable_ext();
  public:
  void unsafe_arena_set_allocated_ext(
      ::vega::WithdrawExt* ext);
  ::vega::WithdrawExt* unsafe_arena_release_ext();

  // uint64 amount = 3 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 expiry = 7 [json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 created_timestamp = 9 [json_name = "createdTimestamp"];
  void clear_created_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 created_timestamp() const;
  void set_created_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_timestamp() const;
  void _internal_set_created_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 withdrawn_timestamp = 10 [json_name = "withdrawnTimestamp"];
  void clear_withdrawn_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawn_timestamp() const;
  void set_withdrawn_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_withdrawn_timestamp() const;
  void _internal_set_withdrawn_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Withdrawal.Status status = 5 [json_name = "status"];
  void clear_status();
  ::vega::Withdrawal_Status status() const;
  void set_status(::vega::Withdrawal_Status value);
  private:
  ::vega::Withdrawal_Status _internal_status() const;
  void _internal_set_status(::vega::Withdrawal_Status value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Withdrawal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  ::vega::WithdrawExt* ext_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawn_timestamp_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class WithdrawExt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.WithdrawExt) */ {
 public:
  inline WithdrawExt() : WithdrawExt(nullptr) {}
  virtual ~WithdrawExt();

  WithdrawExt(const WithdrawExt& from);
  WithdrawExt(WithdrawExt&& from) noexcept
    : WithdrawExt() {
    *this = ::std::move(from);
  }

  inline WithdrawExt& operator=(const WithdrawExt& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawExt& operator=(WithdrawExt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawExt& default_instance();

  enum ExtCase {
    kErc20 = 1,
    EXT_NOT_SET = 0,
  };

  static inline const WithdrawExt* internal_default_instance() {
    return reinterpret_cast<const WithdrawExt*>(
               &_WithdrawExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WithdrawExt& a, WithdrawExt& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawExt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawExt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawExt* New() const final {
    return CreateMaybeMessage<WithdrawExt>(nullptr);
  }

  WithdrawExt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawExt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawExt& from);
  void MergeFrom(const WithdrawExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawExt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.WithdrawExt";
  }
  protected:
  explicit WithdrawExt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErc20FieldNumber = 1,
  };
  // .vega.Erc20WithdrawExt erc20 = 1 [json_name = "erc20"];
  bool has_erc20() const;
  private:
  bool _internal_has_erc20() const;
  public:
  void clear_erc20();
  const ::vega::Erc20WithdrawExt& erc20() const;
  ::vega::Erc20WithdrawExt* release_erc20();
  ::vega::Erc20WithdrawExt* mutable_erc20();
  void set_allocated_erc20(::vega::Erc20WithdrawExt* erc20);
  private:
  const ::vega::Erc20WithdrawExt& _internal_erc20() const;
  ::vega::Erc20WithdrawExt* _internal_mutable_erc20();
  public:
  void unsafe_arena_set_allocated_erc20(
      ::vega::Erc20WithdrawExt* erc20);
  ::vega::Erc20WithdrawExt* unsafe_arena_release_erc20();

  void clear_ext();
  ExtCase ext_case() const;
  // @@protoc_insertion_point(class_scope:vega.WithdrawExt)
 private:
  class _Internal;
  void set_has_erc20();

  inline bool has_ext() const;
  inline void clear_has_ext();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ExtUnion {
    ExtUnion() {}
    ::vega::Erc20WithdrawExt* erc20_;
  } ext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Erc20WithdrawExt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Erc20WithdrawExt) */ {
 public:
  inline Erc20WithdrawExt() : Erc20WithdrawExt(nullptr) {}
  virtual ~Erc20WithdrawExt();

  Erc20WithdrawExt(const Erc20WithdrawExt& from);
  Erc20WithdrawExt(Erc20WithdrawExt&& from) noexcept
    : Erc20WithdrawExt() {
    *this = ::std::move(from);
  }

  inline Erc20WithdrawExt& operator=(const Erc20WithdrawExt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Erc20WithdrawExt& operator=(Erc20WithdrawExt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Erc20WithdrawExt& default_instance();

  static inline const Erc20WithdrawExt* internal_default_instance() {
    return reinterpret_cast<const Erc20WithdrawExt*>(
               &_Erc20WithdrawExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Erc20WithdrawExt& a, Erc20WithdrawExt& b) {
    a.Swap(&b);
  }
  inline void Swap(Erc20WithdrawExt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Erc20WithdrawExt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Erc20WithdrawExt* New() const final {
    return CreateMaybeMessage<Erc20WithdrawExt>(nullptr);
  }

  Erc20WithdrawExt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Erc20WithdrawExt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Erc20WithdrawExt& from);
  void MergeFrom(const Erc20WithdrawExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Erc20WithdrawExt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Erc20WithdrawExt";
  }
  protected:
  explicit Erc20WithdrawExt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverAddressFieldNumber = 1,
  };
  // string receiver_address = 1 [json_name = "receiverAddress"];
  void clear_receiver_address();
  const std::string& receiver_address() const;
  void set_receiver_address(const std::string& value);
  void set_receiver_address(std::string&& value);
  void set_receiver_address(const char* value);
  void set_receiver_address(const char* value, size_t size);
  std::string* mutable_receiver_address();
  std::string* release_receiver_address();
  void set_allocated_receiver_address(std::string* receiver_address);
  private:
  const std::string& _internal_receiver_address() const;
  void _internal_set_receiver_address(const std::string& value);
  std::string* _internal_mutable_receiver_address();
  public:

  // @@protoc_insertion_point(class_scope:vega.Erc20WithdrawExt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kAssetFieldNumber = 4,
    kMarketIdFieldNumber = 5,
    kBalanceFieldNumber = 3,
    kTypeFieldNumber = 6,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string owner = 2 [json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string asset = 4 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string market_id = 5 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // uint64 balance = 3 [json_name = "balance"];
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.AccountType type = 6 [json_name = "type"];
  void clear_type();
  ::vega::AccountType type() const;
  void set_type(::vega::AccountType value);
  private:
  ::vega::AccountType _internal_type() const;
  void _internal_set_type(::vega::AccountType value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 balance_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class FinancialAmount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.FinancialAmount) */ {
 public:
  inline FinancialAmount() : FinancialAmount(nullptr) {}
  virtual ~FinancialAmount();

  FinancialAmount(const FinancialAmount& from);
  FinancialAmount(FinancialAmount&& from) noexcept
    : FinancialAmount() {
    *this = ::std::move(from);
  }

  inline FinancialAmount& operator=(const FinancialAmount& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinancialAmount& operator=(FinancialAmount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FinancialAmount& default_instance();

  static inline const FinancialAmount* internal_default_instance() {
    return reinterpret_cast<const FinancialAmount*>(
               &_FinancialAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(FinancialAmount& a, FinancialAmount& b) {
    a.Swap(&b);
  }
  inline void Swap(FinancialAmount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinancialAmount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinancialAmount* New() const final {
    return CreateMaybeMessage<FinancialAmount>(nullptr);
  }

  FinancialAmount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinancialAmount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FinancialAmount& from);
  void MergeFrom(const FinancialAmount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinancialAmount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.FinancialAmount";
  }
  protected:
  explicit FinancialAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 2,
    kAmountFieldNumber = 1,
  };
  // string asset = 2 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // uint64 amount = 1 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.FinancialAmount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  virtual ~Transfer();

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transfer& default_instance();

  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kAmountFieldNumber = 2,
    kMinAmountFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string owner = 1 [json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // .vega.FinancialAmount amount = 2 [json_name = "amount"];
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::vega::FinancialAmount& amount() const;
  ::vega::FinancialAmount* release_amount();
  ::vega::FinancialAmount* mutable_amount();
  void set_allocated_amount(::vega::FinancialAmount* amount);
  private:
  const ::vega::FinancialAmount& _internal_amount() const;
  ::vega::FinancialAmount* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::vega::FinancialAmount* amount);
  ::vega::FinancialAmount* unsafe_arena_release_amount();

  // uint64 min_amount = 4 [json_name = "minAmount"];
  void clear_min_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_amount() const;
  void set_min_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_amount() const;
  void _internal_set_min_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.TransferType type = 3 [json_name = "type"];
  void clear_type();
  ::vega::TransferType type() const;
  void set_type(::vega::TransferType value);
  private:
  ::vega::TransferType _internal_type() const;
  void _internal_set_type(::vega::TransferType value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::vega::FinancialAmount* amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_amount_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class TransferRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TransferRequest) */ {
 public:
  inline TransferRequest() : TransferRequest(nullptr) {}
  virtual ~TransferRequest();

  TransferRequest(const TransferRequest& from);
  TransferRequest(TransferRequest&& from) noexcept
    : TransferRequest() {
    *this = ::std::move(from);
  }

  inline TransferRequest& operator=(const TransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferRequest& operator=(TransferRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferRequest& default_instance();

  static inline const TransferRequest* internal_default_instance() {
    return reinterpret_cast<const TransferRequest*>(
               &_TransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TransferRequest& a, TransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferRequest* New() const final {
    return CreateMaybeMessage<TransferRequest>(nullptr);
  }

  TransferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferRequest& from);
  void MergeFrom(const TransferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TransferRequest";
  }
  protected:
  explicit TransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAccountFieldNumber = 1,
    kToAccountFieldNumber = 2,
    kAssetFieldNumber = 5,
    kReferenceFieldNumber = 6,
    kAmountFieldNumber = 3,
    kMinAmountFieldNumber = 4,
  };
  // repeated .vega.Account from_account = 1 [json_name = "fromAccount"];
  int from_account_size() const;
  private:
  int _internal_from_account_size() const;
  public:
  void clear_from_account();
  ::vega::Account* mutable_from_account(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
      mutable_from_account();
  private:
  const ::vega::Account& _internal_from_account(int index) const;
  ::vega::Account* _internal_add_from_account();
  public:
  const ::vega::Account& from_account(int index) const;
  ::vega::Account* add_from_account();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
      from_account() const;

  // repeated .vega.Account to_account = 2 [json_name = "toAccount"];
  int to_account_size() const;
  private:
  int _internal_to_account_size() const;
  public:
  void clear_to_account();
  ::vega::Account* mutable_to_account(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
      mutable_to_account();
  private:
  const ::vega::Account& _internal_to_account(int index) const;
  ::vega::Account* _internal_add_to_account();
  public:
  const ::vega::Account& to_account(int index) const;
  ::vega::Account* add_to_account();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
      to_account() const;

  // string asset = 5 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string reference = 6 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // uint64 amount = 3 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 min_amount = 4 [json_name = "minAmount"];
  void clear_min_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_amount() const;
  void set_min_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_amount() const;
  void _internal_set_min_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.TransferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account > from_account_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account > to_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class LedgerEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LedgerEntry) */ {
 public:
  inline LedgerEntry() : LedgerEntry(nullptr) {}
  virtual ~LedgerEntry();

  LedgerEntry(const LedgerEntry& from);
  LedgerEntry(LedgerEntry&& from) noexcept
    : LedgerEntry() {
    *this = ::std::move(from);
  }

  inline LedgerEntry& operator=(const LedgerEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LedgerEntry& operator=(LedgerEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LedgerEntry& default_instance();

  static inline const LedgerEntry* internal_default_instance() {
    return reinterpret_cast<const LedgerEntry*>(
               &_LedgerEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(LedgerEntry& a, LedgerEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LedgerEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LedgerEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LedgerEntry* New() const final {
    return CreateMaybeMessage<LedgerEntry>(nullptr);
  }

  LedgerEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LedgerEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LedgerEntry& from);
  void MergeFrom(const LedgerEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LedgerEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LedgerEntry";
  }
  protected:
  explicit LedgerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAccountFieldNumber = 1,
    kToAccountFieldNumber = 2,
    kReferenceFieldNumber = 4,
    kTypeFieldNumber = 5,
    kAmountFieldNumber = 3,
    kTimestampFieldNumber = 6,
  };
  // string from_account = 1 [json_name = "fromAccount"];
  void clear_from_account();
  const std::string& from_account() const;
  void set_from_account(const std::string& value);
  void set_from_account(std::string&& value);
  void set_from_account(const char* value);
  void set_from_account(const char* value, size_t size);
  std::string* mutable_from_account();
  std::string* release_from_account();
  void set_allocated_from_account(std::string* from_account);
  private:
  const std::string& _internal_from_account() const;
  void _internal_set_from_account(const std::string& value);
  std::string* _internal_mutable_from_account();
  public:

  // string to_account = 2 [json_name = "toAccount"];
  void clear_to_account();
  const std::string& to_account() const;
  void set_to_account(const std::string& value);
  void set_to_account(std::string&& value);
  void set_to_account(const char* value);
  void set_to_account(const char* value, size_t size);
  std::string* mutable_to_account();
  std::string* release_to_account();
  void set_allocated_to_account(std::string* to_account);
  private:
  const std::string& _internal_to_account() const;
  void _internal_set_to_account(const std::string& value);
  std::string* _internal_mutable_to_account();
  public:

  // string reference = 4 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // string type = 5 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint64 amount = 3 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 timestamp = 6 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.LedgerEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class TransferBalance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TransferBalance) */ {
 public:
  inline TransferBalance() : TransferBalance(nullptr) {}
  virtual ~TransferBalance();

  TransferBalance(const TransferBalance& from);
  TransferBalance(TransferBalance&& from) noexcept
    : TransferBalance() {
    *this = ::std::move(from);
  }

  inline TransferBalance& operator=(const TransferBalance& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferBalance& operator=(TransferBalance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferBalance& default_instance();

  static inline const TransferBalance* internal_default_instance() {
    return reinterpret_cast<const TransferBalance*>(
               &_TransferBalance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TransferBalance& a, TransferBalance& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferBalance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferBalance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferBalance* New() const final {
    return CreateMaybeMessage<TransferBalance>(nullptr);
  }

  TransferBalance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferBalance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferBalance& from);
  void MergeFrom(const TransferBalance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferBalance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TransferBalance";
  }
  protected:
  explicit TransferBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kBalanceFieldNumber = 2,
  };
  // .vega.Account account = 1 [json_name = "account"];
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::vega::Account& account() const;
  ::vega::Account* release_account();
  ::vega::Account* mutable_account();
  void set_allocated_account(::vega::Account* account);
  private:
  const ::vega::Account& _internal_account() const;
  ::vega::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::vega::Account* account);
  ::vega::Account* unsafe_arena_release_account();

  // uint64 balance = 2 [json_name = "balance"];
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.TransferBalance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Account* account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class TransferResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TransferResponse) */ {
 public:
  inline TransferResponse() : TransferResponse(nullptr) {}
  virtual ~TransferResponse();

  TransferResponse(const TransferResponse& from);
  TransferResponse(TransferResponse&& from) noexcept
    : TransferResponse() {
    *this = ::std::move(from);
  }

  inline TransferResponse& operator=(const TransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferResponse& operator=(TransferResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferResponse& default_instance();

  static inline const TransferResponse* internal_default_instance() {
    return reinterpret_cast<const TransferResponse*>(
               &_TransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TransferResponse& a, TransferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferResponse* New() const final {
    return CreateMaybeMessage<TransferResponse>(nullptr);
  }

  TransferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferResponse& from);
  void MergeFrom(const TransferResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TransferResponse";
  }
  protected:
  explicit TransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransfersFieldNumber = 1,
    kBalancesFieldNumber = 2,
  };
  // repeated .vega.LedgerEntry transfers = 1 [json_name = "transfers"];
  int transfers_size() const;
  private:
  int _internal_transfers_size() const;
  public:
  void clear_transfers();
  ::vega::LedgerEntry* mutable_transfers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LedgerEntry >*
      mutable_transfers();
  private:
  const ::vega::LedgerEntry& _internal_transfers(int index) const;
  ::vega::LedgerEntry* _internal_add_transfers();
  public:
  const ::vega::LedgerEntry& transfers(int index) const;
  ::vega::LedgerEntry* add_transfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LedgerEntry >&
      transfers() const;

  // repeated .vega.TransferBalance balances = 2 [json_name = "balances"];
  int balances_size() const;
  private:
  int _internal_balances_size() const;
  public:
  void clear_balances();
  ::vega::TransferBalance* mutable_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferBalance >*
      mutable_balances();
  private:
  const ::vega::TransferBalance& _internal_balances(int index) const;
  ::vega::TransferBalance* _internal_add_balances();
  public:
  const ::vega::TransferBalance& balances(int index) const;
  ::vega::TransferBalance* add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferBalance >&
      balances() const;

  // @@protoc_insertion_point(class_scope:vega.TransferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LedgerEntry > transfers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferBalance > balances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class MarginLevels PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.MarginLevels) */ {
 public:
  inline MarginLevels() : MarginLevels(nullptr) {}
  virtual ~MarginLevels();

  MarginLevels(const MarginLevels& from);
  MarginLevels(MarginLevels&& from) noexcept
    : MarginLevels() {
    *this = ::std::move(from);
  }

  inline MarginLevels& operator=(const MarginLevels& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginLevels& operator=(MarginLevels&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginLevels& default_instance();

  static inline const MarginLevels* internal_default_instance() {
    return reinterpret_cast<const MarginLevels*>(
               &_MarginLevels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(MarginLevels& a, MarginLevels& b) {
    a.Swap(&b);
  }
  inline void Swap(MarginLevels* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarginLevels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarginLevels* New() const final {
    return CreateMaybeMessage<MarginLevels>(nullptr);
  }

  MarginLevels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginLevels>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginLevels& from);
  void MergeFrom(const MarginLevels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginLevels* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.MarginLevels";
  }
  protected:
  explicit MarginLevels(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 5,
    kMarketIdFieldNumber = 6,
    kAssetFieldNumber = 7,
    kMaintenanceMarginFieldNumber = 1,
    kSearchLevelFieldNumber = 2,
    kInitialMarginFieldNumber = 3,
    kCollateralReleaseLevelFieldNumber = 4,
    kTimestampFieldNumber = 8,
  };
  // string party_id = 5 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string market_id = 6 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string asset = 7 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // uint64 maintenance_margin = 1 [json_name = "maintenanceMargin"];
  void clear_maintenance_margin();
  ::PROTOBUF_NAMESPACE_ID::uint64 maintenance_margin() const;
  void set_maintenance_margin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maintenance_margin() const;
  void _internal_set_maintenance_margin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 search_level = 2 [json_name = "searchLevel"];
  void clear_search_level();
  ::PROTOBUF_NAMESPACE_ID::uint64 search_level() const;
  void set_search_level(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_search_level() const;
  void _internal_set_search_level(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 initial_margin = 3 [json_name = "initialMargin"];
  void clear_initial_margin();
  ::PROTOBUF_NAMESPACE_ID::uint64 initial_margin() const;
  void set_initial_margin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_initial_margin() const;
  void _internal_set_initial_margin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 collateral_release_level = 4 [json_name = "collateralReleaseLevel"];
  void clear_collateral_release_level();
  ::PROTOBUF_NAMESPACE_ID::uint64 collateral_release_level() const;
  void set_collateral_release_level(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_collateral_release_level() const;
  void _internal_set_collateral_release_level(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 timestamp = 8 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.MarginLevels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maintenance_margin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 search_level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 initial_margin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 collateral_release_level_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class MarketData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.MarketData) */ {
 public:
  inline MarketData() : MarketData(nullptr) {}
  virtual ~MarketData();

  MarketData(const MarketData& from);
  MarketData(MarketData&& from) noexcept
    : MarketData() {
    *this = ::std::move(from);
  }

  inline MarketData& operator=(const MarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketData& operator=(MarketData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketData& default_instance();

  static inline const MarketData* internal_default_instance() {
    return reinterpret_cast<const MarketData*>(
               &_MarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(MarketData& a, MarketData& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketData* New() const final {
    return CreateMaybeMessage<MarketData>(nullptr);
  }

  MarketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketData& from);
  void MergeFrom(const MarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.MarketData";
  }
  protected:
  explicit MarketData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceMonitoringBoundsFieldNumber = 24,
    kLiquidityProviderFeeShareFieldNumber = 26,
    kMarketFieldNumber = 12,
    kTargetStakeFieldNumber = 22,
    kSuppliedStakeFieldNumber = 23,
    kMarketValueProxyFieldNumber = 25,
    kMarkPriceFieldNumber = 1,
    kBestBidPriceFieldNumber = 2,
    kBestBidVolumeFieldNumber = 3,
    kBestOfferPriceFieldNumber = 4,
    kBestOfferVolumeFieldNumber = 5,
    kBestStaticBidPriceFieldNumber = 6,
    kBestStaticBidVolumeFieldNumber = 7,
    kBestStaticOfferPriceFieldNumber = 8,
    kBestStaticOfferVolumeFieldNumber = 9,
    kMidPriceFieldNumber = 10,
    kStaticMidPriceFieldNumber = 11,
    kTimestampFieldNumber = 13,
    kOpenInterestFieldNumber = 14,
    kAuctionEndFieldNumber = 15,
    kAuctionStartFieldNumber = 16,
    kIndicativePriceFieldNumber = 17,
    kIndicativeVolumeFieldNumber = 18,
    kMarketTradingModeFieldNumber = 19,
    kTriggerFieldNumber = 20,
    kExtensionTriggerFieldNumber = 21,
  };
  // repeated .vega.PriceMonitoringBounds price_monitoring_bounds = 24 [json_name = "priceMonitoringBounds"];
  int price_monitoring_bounds_size() const;
  private:
  int _internal_price_monitoring_bounds_size() const;
  public:
  void clear_price_monitoring_bounds();
  ::vega::PriceMonitoringBounds* mutable_price_monitoring_bounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceMonitoringBounds >*
      mutable_price_monitoring_bounds();
  private:
  const ::vega::PriceMonitoringBounds& _internal_price_monitoring_bounds(int index) const;
  ::vega::PriceMonitoringBounds* _internal_add_price_monitoring_bounds();
  public:
  const ::vega::PriceMonitoringBounds& price_monitoring_bounds(int index) const;
  ::vega::PriceMonitoringBounds* add_price_monitoring_bounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceMonitoringBounds >&
      price_monitoring_bounds() const;

  // repeated .vega.LiquidityProviderFeeShare liquidity_provider_fee_share = 26 [json_name = "liquidityProviderFeeShare"];
  int liquidity_provider_fee_share_size() const;
  private:
  int _internal_liquidity_provider_fee_share_size() const;
  public:
  void clear_liquidity_provider_fee_share();
  ::vega::LiquidityProviderFeeShare* mutable_liquidity_provider_fee_share(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProviderFeeShare >*
      mutable_liquidity_provider_fee_share();
  private:
  const ::vega::LiquidityProviderFeeShare& _internal_liquidity_provider_fee_share(int index) const;
  ::vega::LiquidityProviderFeeShare* _internal_add_liquidity_provider_fee_share();
  public:
  const ::vega::LiquidityProviderFeeShare& liquidity_provider_fee_share(int index) const;
  ::vega::LiquidityProviderFeeShare* add_liquidity_provider_fee_share();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProviderFeeShare >&
      liquidity_provider_fee_share() const;

  // string market = 12 [json_name = "market"];
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string target_stake = 22 [json_name = "targetStake"];
  void clear_target_stake();
  const std::string& target_stake() const;
  void set_target_stake(const std::string& value);
  void set_target_stake(std::string&& value);
  void set_target_stake(const char* value);
  void set_target_stake(const char* value, size_t size);
  std::string* mutable_target_stake();
  std::string* release_target_stake();
  void set_allocated_target_stake(std::string* target_stake);
  private:
  const std::string& _internal_target_stake() const;
  void _internal_set_target_stake(const std::string& value);
  std::string* _internal_mutable_target_stake();
  public:

  // string supplied_stake = 23 [json_name = "suppliedStake"];
  void clear_supplied_stake();
  const std::string& supplied_stake() const;
  void set_supplied_stake(const std::string& value);
  void set_supplied_stake(std::string&& value);
  void set_supplied_stake(const char* value);
  void set_supplied_stake(const char* value, size_t size);
  std::string* mutable_supplied_stake();
  std::string* release_supplied_stake();
  void set_allocated_supplied_stake(std::string* supplied_stake);
  private:
  const std::string& _internal_supplied_stake() const;
  void _internal_set_supplied_stake(const std::string& value);
  std::string* _internal_mutable_supplied_stake();
  public:

  // string market_value_proxy = 25 [json_name = "marketValueProxy"];
  void clear_market_value_proxy();
  const std::string& market_value_proxy() const;
  void set_market_value_proxy(const std::string& value);
  void set_market_value_proxy(std::string&& value);
  void set_market_value_proxy(const char* value);
  void set_market_value_proxy(const char* value, size_t size);
  std::string* mutable_market_value_proxy();
  std::string* release_market_value_proxy();
  void set_allocated_market_value_proxy(std::string* market_value_proxy);
  private:
  const std::string& _internal_market_value_proxy() const;
  void _internal_set_market_value_proxy(const std::string& value);
  std::string* _internal_mutable_market_value_proxy();
  public:

  // uint64 mark_price = 1 [json_name = "markPrice"];
  void clear_mark_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 mark_price() const;
  void set_mark_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mark_price() const;
  void _internal_set_mark_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 best_bid_price = 2 [json_name = "bestBidPrice"];
  void clear_best_bid_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 best_bid_price() const;
  void set_best_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_best_bid_price() const;
  void _internal_set_best_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 best_bid_volume = 3 [json_name = "bestBidVolume"];
  void clear_best_bid_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 best_bid_volume() const;
  void set_best_bid_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_best_bid_volume() const;
  void _internal_set_best_bid_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 best_offer_price = 4 [json_name = "bestOfferPrice"];
  void clear_best_offer_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 best_offer_price() const;
  void set_best_offer_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_best_offer_price() const;
  void _internal_set_best_offer_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 best_offer_volume = 5 [json_name = "bestOfferVolume"];
  void clear_best_offer_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 best_offer_volume() const;
  void set_best_offer_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_best_offer_volume() const;
  void _internal_set_best_offer_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 best_static_bid_price = 6 [json_name = "bestStaticBidPrice"];
  void clear_best_static_bid_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 best_static_bid_price() const;
  void set_best_static_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_best_static_bid_price() const;
  void _internal_set_best_static_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 best_static_bid_volume = 7 [json_name = "bestStaticBidVolume"];
  void clear_best_static_bid_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 best_static_bid_volume() const;
  void set_best_static_bid_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_best_static_bid_volume() const;
  void _internal_set_best_static_bid_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 best_static_offer_price = 8 [json_name = "bestStaticOfferPrice"];
  void clear_best_static_offer_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 best_static_offer_price() const;
  void set_best_static_offer_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_best_static_offer_price() const;
  void _internal_set_best_static_offer_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 best_static_offer_volume = 9 [json_name = "bestStaticOfferVolume"];
  void clear_best_static_offer_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 best_static_offer_volume() const;
  void set_best_static_offer_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_best_static_offer_volume() const;
  void _internal_set_best_static_offer_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mid_price = 10 [json_name = "midPrice"];
  void clear_mid_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 mid_price() const;
  void set_mid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mid_price() const;
  void _internal_set_mid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 static_mid_price = 11 [json_name = "staticMidPrice"];
  void clear_static_mid_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 static_mid_price() const;
  void set_static_mid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_static_mid_price() const;
  void _internal_set_static_mid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 timestamp = 13 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 open_interest = 14 [json_name = "openInterest"];
  void clear_open_interest();
  ::PROTOBUF_NAMESPACE_ID::uint64 open_interest() const;
  void set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_open_interest() const;
  void _internal_set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 auction_end = 15 [json_name = "auctionEnd"];
  void clear_auction_end();
  ::PROTOBUF_NAMESPACE_ID::int64 auction_end() const;
  void set_auction_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auction_end() const;
  void _internal_set_auction_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 auction_start = 16 [json_name = "auctionStart"];
  void clear_auction_start();
  ::PROTOBUF_NAMESPACE_ID::int64 auction_start() const;
  void set_auction_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auction_start() const;
  void _internal_set_auction_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 indicative_price = 17 [json_name = "indicativePrice"];
  void clear_indicative_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 indicative_price() const;
  void set_indicative_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_indicative_price() const;
  void _internal_set_indicative_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 indicative_volume = 18 [json_name = "indicativeVolume"];
  void clear_indicative_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 indicative_volume() const;
  void set_indicative_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_indicative_volume() const;
  void _internal_set_indicative_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.Market.TradingMode market_trading_mode = 19 [json_name = "marketTradingMode"];
  void clear_market_trading_mode();
  ::vega::Market_TradingMode market_trading_mode() const;
  void set_market_trading_mode(::vega::Market_TradingMode value);
  private:
  ::vega::Market_TradingMode _internal_market_trading_mode() const;
  void _internal_set_market_trading_mode(::vega::Market_TradingMode value);
  public:

  // .vega.AuctionTrigger trigger = 20 [json_name = "trigger"];
  void clear_trigger();
  ::vega::AuctionTrigger trigger() const;
  void set_trigger(::vega::AuctionTrigger value);
  private:
  ::vega::AuctionTrigger _internal_trigger() const;
  void _internal_set_trigger(::vega::AuctionTrigger value);
  public:

  // .vega.AuctionTrigger extension_trigger = 21 [json_name = "extensionTrigger"];
  void clear_extension_trigger();
  ::vega::AuctionTrigger extension_trigger() const;
  void set_extension_trigger(::vega::AuctionTrigger value);
  private:
  ::vega::AuctionTrigger _internal_extension_trigger() const;
  void _internal_set_extension_trigger(::vega::AuctionTrigger value);
  public:

  // @@protoc_insertion_point(class_scope:vega.MarketData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceMonitoringBounds > price_monitoring_bounds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProviderFeeShare > liquidity_provider_fee_share_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_stake_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supplied_stake_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_value_proxy_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mark_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 best_bid_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 best_bid_volume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 best_offer_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 best_offer_volume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 best_static_bid_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 best_static_bid_volume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 best_static_offer_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 best_static_offer_volume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mid_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 static_mid_price_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_interest_;
  ::PROTOBUF_NAMESPACE_ID::int64 auction_end_;
  ::PROTOBUF_NAMESPACE_ID::int64 auction_start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 indicative_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 indicative_volume_;
  int market_trading_mode_;
  int trigger_;
  int extension_trigger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class LiquidityProviderFeeShare PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LiquidityProviderFeeShare) */ {
 public:
  inline LiquidityProviderFeeShare() : LiquidityProviderFeeShare(nullptr) {}
  virtual ~LiquidityProviderFeeShare();

  LiquidityProviderFeeShare(const LiquidityProviderFeeShare& from);
  LiquidityProviderFeeShare(LiquidityProviderFeeShare&& from) noexcept
    : LiquidityProviderFeeShare() {
    *this = ::std::move(from);
  }

  inline LiquidityProviderFeeShare& operator=(const LiquidityProviderFeeShare& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityProviderFeeShare& operator=(LiquidityProviderFeeShare&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityProviderFeeShare& default_instance();

  static inline const LiquidityProviderFeeShare* internal_default_instance() {
    return reinterpret_cast<const LiquidityProviderFeeShare*>(
               &_LiquidityProviderFeeShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(LiquidityProviderFeeShare& a, LiquidityProviderFeeShare& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityProviderFeeShare* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityProviderFeeShare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityProviderFeeShare* New() const final {
    return CreateMaybeMessage<LiquidityProviderFeeShare>(nullptr);
  }

  LiquidityProviderFeeShare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityProviderFeeShare>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityProviderFeeShare& from);
  void MergeFrom(const LiquidityProviderFeeShare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityProviderFeeShare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LiquidityProviderFeeShare";
  }
  protected:
  explicit LiquidityProviderFeeShare(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
    kEquityLikeShareFieldNumber = 2,
    kAverageEntryValuationFieldNumber = 3,
  };
  // string party = 1 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string equity_like_share = 2 [json_name = "equityLikeShare"];
  void clear_equity_like_share();
  const std::string& equity_like_share() const;
  void set_equity_like_share(const std::string& value);
  void set_equity_like_share(std::string&& value);
  void set_equity_like_share(const char* value);
  void set_equity_like_share(const char* value, size_t size);
  std::string* mutable_equity_like_share();
  std::string* release_equity_like_share();
  void set_allocated_equity_like_share(std::string* equity_like_share);
  private:
  const std::string& _internal_equity_like_share() const;
  void _internal_set_equity_like_share(const std::string& value);
  std::string* _internal_mutable_equity_like_share();
  public:

  // string average_entry_valuation = 3 [json_name = "averageEntryValuation"];
  void clear_average_entry_valuation();
  const std::string& average_entry_valuation() const;
  void set_average_entry_valuation(const std::string& value);
  void set_average_entry_valuation(std::string&& value);
  void set_average_entry_valuation(const char* value);
  void set_average_entry_valuation(const char* value, size_t size);
  std::string* mutable_average_entry_valuation();
  std::string* release_average_entry_valuation();
  void set_allocated_average_entry_valuation(std::string* average_entry_valuation);
  private:
  const std::string& _internal_average_entry_valuation() const;
  void _internal_set_average_entry_valuation(const std::string& value);
  std::string* _internal_mutable_average_entry_valuation();
  public:

  // @@protoc_insertion_point(class_scope:vega.LiquidityProviderFeeShare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equity_like_share_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr average_entry_valuation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class PriceMonitoringBounds PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.PriceMonitoringBounds) */ {
 public:
  inline PriceMonitoringBounds() : PriceMonitoringBounds(nullptr) {}
  virtual ~PriceMonitoringBounds();

  PriceMonitoringBounds(const PriceMonitoringBounds& from);
  PriceMonitoringBounds(PriceMonitoringBounds&& from) noexcept
    : PriceMonitoringBounds() {
    *this = ::std::move(from);
  }

  inline PriceMonitoringBounds& operator=(const PriceMonitoringBounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceMonitoringBounds& operator=(PriceMonitoringBounds&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceMonitoringBounds& default_instance();

  static inline const PriceMonitoringBounds* internal_default_instance() {
    return reinterpret_cast<const PriceMonitoringBounds*>(
               &_PriceMonitoringBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PriceMonitoringBounds& a, PriceMonitoringBounds& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceMonitoringBounds* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceMonitoringBounds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceMonitoringBounds* New() const final {
    return CreateMaybeMessage<PriceMonitoringBounds>(nullptr);
  }

  PriceMonitoringBounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceMonitoringBounds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceMonitoringBounds& from);
  void MergeFrom(const PriceMonitoringBounds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceMonitoringBounds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.PriceMonitoringBounds";
  }
  protected:
  explicit PriceMonitoringBounds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerFieldNumber = 3,
    kMinValidPriceFieldNumber = 1,
    kMaxValidPriceFieldNumber = 2,
    kReferencePriceFieldNumber = 4,
  };
  // .vega.PriceMonitoringTrigger trigger = 3 [json_name = "trigger"];
  bool has_trigger() const;
  private:
  bool _internal_has_trigger() const;
  public:
  void clear_trigger();
  const ::vega::PriceMonitoringTrigger& trigger() const;
  ::vega::PriceMonitoringTrigger* release_trigger();
  ::vega::PriceMonitoringTrigger* mutable_trigger();
  void set_allocated_trigger(::vega::PriceMonitoringTrigger* trigger);
  private:
  const ::vega::PriceMonitoringTrigger& _internal_trigger() const;
  ::vega::PriceMonitoringTrigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::vega::PriceMonitoringTrigger* trigger);
  ::vega::PriceMonitoringTrigger* unsafe_arena_release_trigger();

  // uint64 min_valid_price = 1 [json_name = "minValidPrice"];
  void clear_min_valid_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_valid_price() const;
  void set_min_valid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_valid_price() const;
  void _internal_set_min_valid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_valid_price = 2 [json_name = "maxValidPrice"];
  void clear_max_valid_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_valid_price() const;
  void set_max_valid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_valid_price() const;
  void _internal_set_max_valid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double reference_price = 4 [json_name = "referencePrice"];
  void clear_reference_price();
  double reference_price() const;
  void set_reference_price(double value);
  private:
  double _internal_reference_price() const;
  void _internal_set_reference_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:vega.PriceMonitoringBounds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::PriceMonitoringTrigger* trigger_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_valid_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_valid_price_;
  double reference_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class ErrorDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.ErrorDetail) */ {
 public:
  inline ErrorDetail() : ErrorDetail(nullptr) {}
  virtual ~ErrorDetail();

  ErrorDetail(const ErrorDetail& from);
  ErrorDetail(ErrorDetail&& from) noexcept
    : ErrorDetail() {
    *this = ::std::move(from);
  }

  inline ErrorDetail& operator=(const ErrorDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorDetail& operator=(ErrorDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorDetail& default_instance();

  static inline const ErrorDetail* internal_default_instance() {
    return reinterpret_cast<const ErrorDetail*>(
               &_ErrorDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ErrorDetail& a, ErrorDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorDetail* New() const final {
    return CreateMaybeMessage<ErrorDetail>(nullptr);
  }

  ErrorDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorDetail& from);
  void MergeFrom(const ErrorDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.ErrorDetail";
  }
  protected:
  explicit ErrorDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kInnerFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string inner = 3 [json_name = "inner"];
  void clear_inner();
  const std::string& inner() const;
  void set_inner(const std::string& value);
  void set_inner(std::string&& value);
  void set_inner(const char* value);
  void set_inner(const char* value, size_t size);
  std::string* mutable_inner();
  std::string* release_inner();
  void set_allocated_inner(std::string* inner);
  private:
  const std::string& _internal_inner() const;
  void _internal_set_inner(const std::string& value);
  std::string* _internal_mutable_inner();
  public:

  // int32 code = 1 [json_name = "code"];
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.ErrorDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class NetworkParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.NetworkParameter) */ {
 public:
  inline NetworkParameter() : NetworkParameter(nullptr) {}
  virtual ~NetworkParameter();

  NetworkParameter(const NetworkParameter& from);
  NetworkParameter(NetworkParameter&& from) noexcept
    : NetworkParameter() {
    *this = ::std::move(from);
  }

  inline NetworkParameter& operator=(const NetworkParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParameter& operator=(NetworkParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkParameter& default_instance();

  static inline const NetworkParameter* internal_default_instance() {
    return reinterpret_cast<const NetworkParameter*>(
               &_NetworkParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(NetworkParameter& a, NetworkParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkParameter* New() const final {
    return CreateMaybeMessage<NetworkParameter>(nullptr);
  }

  NetworkParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkParameter& from);
  void MergeFrom(const NetworkParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.NetworkParameter";
  }
  protected:
  explicit NetworkParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1 [json_name = "key"];
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:vega.NetworkParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class LiquidityOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LiquidityOrder) */ {
 public:
  inline LiquidityOrder() : LiquidityOrder(nullptr) {}
  virtual ~LiquidityOrder();

  LiquidityOrder(const LiquidityOrder& from);
  LiquidityOrder(LiquidityOrder&& from) noexcept
    : LiquidityOrder() {
    *this = ::std::move(from);
  }

  inline LiquidityOrder& operator=(const LiquidityOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityOrder& operator=(LiquidityOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityOrder& default_instance();

  static inline const LiquidityOrder* internal_default_instance() {
    return reinterpret_cast<const LiquidityOrder*>(
               &_LiquidityOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(LiquidityOrder& a, LiquidityOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityOrder* New() const final {
    return CreateMaybeMessage<LiquidityOrder>(nullptr);
  }

  LiquidityOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityOrder& from);
  void MergeFrom(const LiquidityOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LiquidityOrder";
  }
  protected:
  explicit LiquidityOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 1,
    kProportionFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  void clear_reference();
  ::vega::PeggedReference reference() const;
  void set_reference(::vega::PeggedReference value);
  private:
  ::vega::PeggedReference _internal_reference() const;
  void _internal_set_reference(::vega::PeggedReference value);
  public:

  // uint32 proportion = 2 [json_name = "proportion"];
  void clear_proportion();
  ::PROTOBUF_NAMESPACE_ID::uint32 proportion() const;
  void set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proportion() const;
  void _internal_set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 offset = 3 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.LiquidityOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int reference_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proportion_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class LiquidityOrderReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LiquidityOrderReference) */ {
 public:
  inline LiquidityOrderReference() : LiquidityOrderReference(nullptr) {}
  virtual ~LiquidityOrderReference();

  LiquidityOrderReference(const LiquidityOrderReference& from);
  LiquidityOrderReference(LiquidityOrderReference&& from) noexcept
    : LiquidityOrderReference() {
    *this = ::std::move(from);
  }

  inline LiquidityOrderReference& operator=(const LiquidityOrderReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityOrderReference& operator=(LiquidityOrderReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityOrderReference& default_instance();

  static inline const LiquidityOrderReference* internal_default_instance() {
    return reinterpret_cast<const LiquidityOrderReference*>(
               &_LiquidityOrderReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(LiquidityOrderReference& a, LiquidityOrderReference& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityOrderReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityOrderReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityOrderReference* New() const final {
    return CreateMaybeMessage<LiquidityOrderReference>(nullptr);
  }

  LiquidityOrderReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityOrderReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityOrderReference& from);
  void MergeFrom(const LiquidityOrderReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityOrderReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LiquidityOrderReference";
  }
  protected:
  explicit LiquidityOrderReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kLiquidityOrderFieldNumber = 2,
  };
  // string order_id = 1 [json_name = "orderId"];
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // .vega.LiquidityOrder liquidity_order = 2 [json_name = "liquidityOrder"];
  bool has_liquidity_order() const;
  private:
  bool _internal_has_liquidity_order() const;
  public:
  void clear_liquidity_order();
  const ::vega::LiquidityOrder& liquidity_order() const;
  ::vega::LiquidityOrder* release_liquidity_order();
  ::vega::LiquidityOrder* mutable_liquidity_order();
  void set_allocated_liquidity_order(::vega::LiquidityOrder* liquidity_order);
  private:
  const ::vega::LiquidityOrder& _internal_liquidity_order() const;
  ::vega::LiquidityOrder* _internal_mutable_liquidity_order();
  public:
  void unsafe_arena_set_allocated_liquidity_order(
      ::vega::LiquidityOrder* liquidity_order);
  ::vega::LiquidityOrder* unsafe_arena_release_liquidity_order();

  // @@protoc_insertion_point(class_scope:vega.LiquidityOrderReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::vega::LiquidityOrder* liquidity_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class LiquidityProvision PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LiquidityProvision) */ {
 public:
  inline LiquidityProvision() : LiquidityProvision(nullptr) {}
  virtual ~LiquidityProvision();

  LiquidityProvision(const LiquidityProvision& from);
  LiquidityProvision(LiquidityProvision&& from) noexcept
    : LiquidityProvision() {
    *this = ::std::move(from);
  }

  inline LiquidityProvision& operator=(const LiquidityProvision& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityProvision& operator=(LiquidityProvision&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityProvision& default_instance();

  static inline const LiquidityProvision* internal_default_instance() {
    return reinterpret_cast<const LiquidityProvision*>(
               &_LiquidityProvision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(LiquidityProvision& a, LiquidityProvision& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityProvision* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityProvision* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityProvision* New() const final {
    return CreateMaybeMessage<LiquidityProvision>(nullptr);
  }

  LiquidityProvision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityProvision>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityProvision& from);
  void MergeFrom(const LiquidityProvision& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityProvision* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LiquidityProvision";
  }
  protected:
  explicit LiquidityProvision(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LiquidityProvision_Status Status;
  static constexpr Status STATUS_UNSPECIFIED =
    LiquidityProvision_Status_STATUS_UNSPECIFIED;
  static constexpr Status STATUS_ACTIVE =
    LiquidityProvision_Status_STATUS_ACTIVE;
  static constexpr Status STATUS_STOPPED =
    LiquidityProvision_Status_STATUS_STOPPED;
  static constexpr Status STATUS_CANCELLED =
    LiquidityProvision_Status_STATUS_CANCELLED;
  static constexpr Status STATUS_REJECTED =
    LiquidityProvision_Status_STATUS_REJECTED;
  static constexpr Status STATUS_UNDEPLOYED =
    LiquidityProvision_Status_STATUS_UNDEPLOYED;
  static constexpr Status STATUS_PENDING =
    LiquidityProvision_Status_STATUS_PENDING;
  static inline bool Status_IsValid(int value) {
    return LiquidityProvision_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    LiquidityProvision_Status_Status_MIN;
  static constexpr Status Status_MAX =
    LiquidityProvision_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    LiquidityProvision_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return LiquidityProvision_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return LiquidityProvision_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return LiquidityProvision_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSellsFieldNumber = 8,
    kBuysFieldNumber = 9,
    kIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kMarketIdFieldNumber = 5,
    kFeeFieldNumber = 7,
    kVersionFieldNumber = 10,
    kReferenceFieldNumber = 12,
    kCreatedAtFieldNumber = 3,
    kUpdatedAtFieldNumber = 4,
    kCommitmentAmountFieldNumber = 6,
    kStatusFieldNumber = 11,
  };
  // repeated .vega.LiquidityOrderReference sells = 8 [json_name = "sells"];
  int sells_size() const;
  private:
  int _internal_sells_size() const;
  public:
  void clear_sells();
  ::vega::LiquidityOrderReference* mutable_sells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >*
      mutable_sells();
  private:
  const ::vega::LiquidityOrderReference& _internal_sells(int index) const;
  ::vega::LiquidityOrderReference* _internal_add_sells();
  public:
  const ::vega::LiquidityOrderReference& sells(int index) const;
  ::vega::LiquidityOrderReference* add_sells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >&
      sells() const;

  // repeated .vega.LiquidityOrderReference buys = 9 [json_name = "buys"];
  int buys_size() const;
  private:
  int _internal_buys_size() const;
  public:
  void clear_buys();
  ::vega::LiquidityOrderReference* mutable_buys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >*
      mutable_buys();
  private:
  const ::vega::LiquidityOrderReference& _internal_buys(int index) const;
  ::vega::LiquidityOrderReference* _internal_add_buys();
  public:
  const ::vega::LiquidityOrderReference& buys(int index) const;
  ::vega::LiquidityOrderReference* add_buys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >&
      buys() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string market_id = 5 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string fee = 7 [json_name = "fee"];
  void clear_fee();
  const std::string& fee() const;
  void set_fee(const std::string& value);
  void set_fee(std::string&& value);
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  std::string* mutable_fee();
  std::string* release_fee();
  void set_allocated_fee(std::string* fee);
  private:
  const std::string& _internal_fee() const;
  void _internal_set_fee(const std::string& value);
  std::string* _internal_mutable_fee();
  public:

  // string version = 10 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string reference = 12 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // int64 created_at = 3 [json_name = "createdAt"];
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updated_at = 4 [json_name = "updatedAt"];
  void clear_updated_at();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at() const;
  void set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_at() const;
  void _internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 commitment_amount = 6 [json_name = "commitmentAmount"];
  void clear_commitment_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 commitment_amount() const;
  void set_commitment_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commitment_amount() const;
  void _internal_set_commitment_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.LiquidityProvision.Status status = 11 [json_name = "status"];
  void clear_status();
  ::vega::LiquidityProvision_Status status() const;
  void set_status(::vega::LiquidityProvision_Status value);
  private:
  ::vega::LiquidityProvision_Status _internal_status() const;
  void _internal_set_status(::vega::LiquidityProvision_Status value);
  public:

  // @@protoc_insertion_point(class_scope:vega.LiquidityProvision)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference > sells_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference > buys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commitment_amount_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class EthereumConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.EthereumConfig) */ {
 public:
  inline EthereumConfig() : EthereumConfig(nullptr) {}
  virtual ~EthereumConfig();

  EthereumConfig(const EthereumConfig& from);
  EthereumConfig(EthereumConfig&& from) noexcept
    : EthereumConfig() {
    *this = ::std::move(from);
  }

  inline EthereumConfig& operator=(const EthereumConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthereumConfig& operator=(EthereumConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EthereumConfig& default_instance();

  static inline const EthereumConfig* internal_default_instance() {
    return reinterpret_cast<const EthereumConfig*>(
               &_EthereumConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(EthereumConfig& a, EthereumConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EthereumConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EthereumConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EthereumConfig* New() const final {
    return CreateMaybeMessage<EthereumConfig>(nullptr);
  }

  EthereumConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EthereumConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EthereumConfig& from);
  void MergeFrom(const EthereumConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthereumConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.EthereumConfig";
  }
  protected:
  explicit EthereumConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakingBridgeAddressesFieldNumber = 5,
    kNetworkIdFieldNumber = 1,
    kChainIdFieldNumber = 2,
    kBridgeAddressFieldNumber = 3,
    kConfirmationsFieldNumber = 4,
  };
  // repeated string staking_bridge_addresses = 5 [json_name = "stakingBridgeAddresses"];
  int staking_bridge_addresses_size() const;
  private:
  int _internal_staking_bridge_addresses_size() const;
  public:
  void clear_staking_bridge_addresses();
  const std::string& staking_bridge_addresses(int index) const;
  std::string* mutable_staking_bridge_addresses(int index);
  void set_staking_bridge_addresses(int index, const std::string& value);
  void set_staking_bridge_addresses(int index, std::string&& value);
  void set_staking_bridge_addresses(int index, const char* value);
  void set_staking_bridge_addresses(int index, const char* value, size_t size);
  std::string* add_staking_bridge_addresses();
  void add_staking_bridge_addresses(const std::string& value);
  void add_staking_bridge_addresses(std::string&& value);
  void add_staking_bridge_addresses(const char* value);
  void add_staking_bridge_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& staking_bridge_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_staking_bridge_addresses();
  private:
  const std::string& _internal_staking_bridge_addresses(int index) const;
  std::string* _internal_add_staking_bridge_addresses();
  public:

  // string network_id = 1 [json_name = "networkId"];
  void clear_network_id();
  const std::string& network_id() const;
  void set_network_id(const std::string& value);
  void set_network_id(std::string&& value);
  void set_network_id(const char* value);
  void set_network_id(const char* value, size_t size);
  std::string* mutable_network_id();
  std::string* release_network_id();
  void set_allocated_network_id(std::string* network_id);
  private:
  const std::string& _internal_network_id() const;
  void _internal_set_network_id(const std::string& value);
  std::string* _internal_mutable_network_id();
  public:

  // string chain_id = 2 [json_name = "chainId"];
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // string bridge_address = 3 [json_name = "bridgeAddress"];
  void clear_bridge_address();
  const std::string& bridge_address() const;
  void set_bridge_address(const std::string& value);
  void set_bridge_address(std::string&& value);
  void set_bridge_address(const char* value);
  void set_bridge_address(const char* value, size_t size);
  std::string* mutable_bridge_address();
  std::string* release_bridge_address();
  void set_allocated_bridge_address(std::string* bridge_address);
  private:
  const std::string& _internal_bridge_address() const;
  void _internal_set_bridge_address(const std::string& value);
  std::string* _internal_mutable_bridge_address();
  public:

  // uint32 confirmations = 4 [json_name = "confirmations"];
  void clear_confirmations();
  ::PROTOBUF_NAMESPACE_ID::uint32 confirmations() const;
  void set_confirmations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confirmations() const;
  void _internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.EthereumConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> staking_bridge_addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bridge_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confirmations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class EpochTimestamps PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.EpochTimestamps) */ {
 public:
  inline EpochTimestamps() : EpochTimestamps(nullptr) {}
  virtual ~EpochTimestamps();

  EpochTimestamps(const EpochTimestamps& from);
  EpochTimestamps(EpochTimestamps&& from) noexcept
    : EpochTimestamps() {
    *this = ::std::move(from);
  }

  inline EpochTimestamps& operator=(const EpochTimestamps& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpochTimestamps& operator=(EpochTimestamps&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EpochTimestamps& default_instance();

  static inline const EpochTimestamps* internal_default_instance() {
    return reinterpret_cast<const EpochTimestamps*>(
               &_EpochTimestamps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(EpochTimestamps& a, EpochTimestamps& b) {
    a.Swap(&b);
  }
  inline void Swap(EpochTimestamps* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpochTimestamps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EpochTimestamps* New() const final {
    return CreateMaybeMessage<EpochTimestamps>(nullptr);
  }

  EpochTimestamps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EpochTimestamps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EpochTimestamps& from);
  void MergeFrom(const EpochTimestamps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpochTimestamps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.EpochTimestamps";
  }
  protected:
  explicit EpochTimestamps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kFirstBlockFieldNumber = 3,
    kLastBlockFieldNumber = 4,
  };
  // int64 start_time = 1 [json_name = "startTime"];
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 2 [json_name = "endTime"];
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 first_block = 3 [json_name = "firstBlock"];
  void clear_first_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_block() const;
  void set_first_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_first_block() const;
  void _internal_set_first_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_block = 4 [json_name = "lastBlock"];
  void clear_last_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_block() const;
  void set_last_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_block() const;
  void _internal_set_last_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.EpochTimestamps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_block_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Epoch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Epoch) */ {
 public:
  inline Epoch() : Epoch(nullptr) {}
  virtual ~Epoch();

  Epoch(const Epoch& from);
  Epoch(Epoch&& from) noexcept
    : Epoch() {
    *this = ::std::move(from);
  }

  inline Epoch& operator=(const Epoch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Epoch& operator=(Epoch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Epoch& default_instance();

  static inline const Epoch* internal_default_instance() {
    return reinterpret_cast<const Epoch*>(
               &_Epoch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Epoch& a, Epoch& b) {
    a.Swap(&b);
  }
  inline void Swap(Epoch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Epoch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Epoch* New() const final {
    return CreateMaybeMessage<Epoch>(nullptr);
  }

  Epoch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Epoch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Epoch& from);
  void MergeFrom(const Epoch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Epoch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Epoch";
  }
  protected:
  explicit Epoch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorsFieldNumber = 3,
    kDelegationsFieldNumber = 4,
    kTimestampsFieldNumber = 2,
    kSeqFieldNumber = 1,
  };
  // repeated .vega.Node validators = 3 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;
  public:
  void clear_validators();
  ::vega::Node* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Node >*
      mutable_validators();
  private:
  const ::vega::Node& _internal_validators(int index) const;
  ::vega::Node* _internal_add_validators();
  public:
  const ::vega::Node& validators(int index) const;
  ::vega::Node* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Node >&
      validators() const;

  // repeated .vega.Delegation delegations = 4 [json_name = "delegations"];
  int delegations_size() const;
  private:
  int _internal_delegations_size() const;
  public:
  void clear_delegations();
  ::vega::Delegation* mutable_delegations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >*
      mutable_delegations();
  private:
  const ::vega::Delegation& _internal_delegations(int index) const;
  ::vega::Delegation* _internal_add_delegations();
  public:
  const ::vega::Delegation& delegations(int index) const;
  ::vega::Delegation* add_delegations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >&
      delegations() const;

  // .vega.EpochTimestamps timestamps = 2 [json_name = "timestamps", (.validator.field) = {
  bool has_timestamps() const;
  private:
  bool _internal_has_timestamps() const;
  public:
  void clear_timestamps();
  const ::vega::EpochTimestamps& timestamps() const;
  ::vega::EpochTimestamps* release_timestamps();
  ::vega::EpochTimestamps* mutable_timestamps();
  void set_allocated_timestamps(::vega::EpochTimestamps* timestamps);
  private:
  const ::vega::EpochTimestamps& _internal_timestamps() const;
  ::vega::EpochTimestamps* _internal_mutable_timestamps();
  public:
  void unsafe_arena_set_allocated_timestamps(
      ::vega::EpochTimestamps* timestamps);
  ::vega::EpochTimestamps* unsafe_arena_release_timestamps();

  // uint64 seq = 1 [json_name = "seq"];
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Epoch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Node > validators_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation > delegations_;
  ::vega::EpochTimestamps* timestamps_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class EpochParticipation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.EpochParticipation) */ {
 public:
  inline EpochParticipation() : EpochParticipation(nullptr) {}
  virtual ~EpochParticipation();

  EpochParticipation(const EpochParticipation& from);
  EpochParticipation(EpochParticipation&& from) noexcept
    : EpochParticipation() {
    *this = ::std::move(from);
  }

  inline EpochParticipation& operator=(const EpochParticipation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpochParticipation& operator=(EpochParticipation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EpochParticipation& default_instance();

  static inline const EpochParticipation* internal_default_instance() {
    return reinterpret_cast<const EpochParticipation*>(
               &_EpochParticipation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(EpochParticipation& a, EpochParticipation& b) {
    a.Swap(&b);
  }
  inline void Swap(EpochParticipation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpochParticipation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EpochParticipation* New() const final {
    return CreateMaybeMessage<EpochParticipation>(nullptr);
  }

  EpochParticipation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EpochParticipation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EpochParticipation& from);
  void MergeFrom(const EpochParticipation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpochParticipation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.EpochParticipation";
  }
  protected:
  explicit EpochParticipation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochFieldNumber = 1,
    kOfflineFieldNumber = 2,
    kOnlineFieldNumber = 3,
    kTotalRewardsFieldNumber = 4,
  };
  // .vega.Epoch epoch = 1 [json_name = "epoch", (.validator.field) = {
  bool has_epoch() const;
  private:
  bool _internal_has_epoch() const;
  public:
  void clear_epoch();
  const ::vega::Epoch& epoch() const;
  ::vega::Epoch* release_epoch();
  ::vega::Epoch* mutable_epoch();
  void set_allocated_epoch(::vega::Epoch* epoch);
  private:
  const ::vega::Epoch& _internal_epoch() const;
  ::vega::Epoch* _internal_mutable_epoch();
  public:
  void unsafe_arena_set_allocated_epoch(
      ::vega::Epoch* epoch);
  ::vega::Epoch* unsafe_arena_release_epoch();

  // uint64 offline = 2 [json_name = "offline"];
  void clear_offline();
  ::PROTOBUF_NAMESPACE_ID::uint64 offline() const;
  void set_offline(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offline() const;
  void _internal_set_offline(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 online = 3 [json_name = "online"];
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::uint64 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_online() const;
  void _internal_set_online(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double total_rewards = 4 [json_name = "totalRewards"];
  void clear_total_rewards();
  double total_rewards() const;
  void set_total_rewards(double value);
  private:
  double _internal_total_rewards() const;
  void _internal_set_total_rewards(double value);
  public:

  // @@protoc_insertion_point(class_scope:vega.EpochParticipation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Epoch* epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offline_;
  ::PROTOBUF_NAMESPACE_ID::uint64 online_;
  double total_rewards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class EpochData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.EpochData) */ {
 public:
  inline EpochData() : EpochData(nullptr) {}
  virtual ~EpochData();

  EpochData(const EpochData& from);
  EpochData(EpochData&& from) noexcept
    : EpochData() {
    *this = ::std::move(from);
  }

  inline EpochData& operator=(const EpochData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpochData& operator=(EpochData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EpochData& default_instance();

  static inline const EpochData* internal_default_instance() {
    return reinterpret_cast<const EpochData*>(
               &_EpochData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(EpochData& a, EpochData& b) {
    a.Swap(&b);
  }
  inline void Swap(EpochData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpochData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EpochData* New() const final {
    return CreateMaybeMessage<EpochData>(nullptr);
  }

  EpochData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EpochData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EpochData& from);
  void MergeFrom(const EpochData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpochData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.EpochData";
  }
  protected:
  explicit EpochData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kOfflineFieldNumber = 2,
    kOnlineFieldNumber = 3,
  };
  // int32 total = 1 [json_name = "total"];
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 offline = 2 [json_name = "offline"];
  void clear_offline();
  ::PROTOBUF_NAMESPACE_ID::int32 offline() const;
  void set_offline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offline() const;
  void _internal_set_offline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 online = 3 [json_name = "online"];
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online() const;
  void _internal_set_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.EpochData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 offline_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelagationsFieldNumber = 12,
    kIdFieldNumber = 1,
    kPubKeyFieldNumber = 2,
    kInfoUrlFieldNumber = 3,
    kLocationFieldNumber = 4,
    kStakedByOperatorFieldNumber = 5,
    kStakedByDelegatesFieldNumber = 6,
    kStakedTotalFieldNumber = 7,
    kMaxIntendedStakeFieldNumber = 8,
    kPendingStakeFieldNumber = 9,
    kEpochDataFieldNumber = 10,
    kStatusFieldNumber = 11,
  };
  // repeated .vega.Delegation delagations = 12 [json_name = "delagations"];
  int delagations_size() const;
  private:
  int _internal_delagations_size() const;
  public:
  void clear_delagations();
  ::vega::Delegation* mutable_delagations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >*
      mutable_delagations();
  private:
  const ::vega::Delegation& _internal_delagations(int index) const;
  ::vega::Delegation* _internal_add_delagations();
  public:
  const ::vega::Delegation& delagations(int index) const;
  ::vega::Delegation* add_delagations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >&
      delagations() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pub_key = 2 [json_name = "pubKey", (.validator.field) = {
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // string info_url = 3 [json_name = "infoUrl"];
  void clear_info_url();
  const std::string& info_url() const;
  void set_info_url(const std::string& value);
  void set_info_url(std::string&& value);
  void set_info_url(const char* value);
  void set_info_url(const char* value, size_t size);
  std::string* mutable_info_url();
  std::string* release_info_url();
  void set_allocated_info_url(std::string* info_url);
  private:
  const std::string& _internal_info_url() const;
  void _internal_set_info_url(const std::string& value);
  std::string* _internal_mutable_info_url();
  public:

  // string location = 4 [json_name = "location"];
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string staked_by_operator = 5 [json_name = "stakedByOperator"];
  void clear_staked_by_operator();
  const std::string& staked_by_operator() const;
  void set_staked_by_operator(const std::string& value);
  void set_staked_by_operator(std::string&& value);
  void set_staked_by_operator(const char* value);
  void set_staked_by_operator(const char* value, size_t size);
  std::string* mutable_staked_by_operator();
  std::string* release_staked_by_operator();
  void set_allocated_staked_by_operator(std::string* staked_by_operator);
  private:
  const std::string& _internal_staked_by_operator() const;
  void _internal_set_staked_by_operator(const std::string& value);
  std::string* _internal_mutable_staked_by_operator();
  public:

  // string staked_by_delegates = 6 [json_name = "stakedByDelegates"];
  void clear_staked_by_delegates();
  const std::string& staked_by_delegates() const;
  void set_staked_by_delegates(const std::string& value);
  void set_staked_by_delegates(std::string&& value);
  void set_staked_by_delegates(const char* value);
  void set_staked_by_delegates(const char* value, size_t size);
  std::string* mutable_staked_by_delegates();
  std::string* release_staked_by_delegates();
  void set_allocated_staked_by_delegates(std::string* staked_by_delegates);
  private:
  const std::string& _internal_staked_by_delegates() const;
  void _internal_set_staked_by_delegates(const std::string& value);
  std::string* _internal_mutable_staked_by_delegates();
  public:

  // string staked_total = 7 [json_name = "stakedTotal"];
  void clear_staked_total();
  const std::string& staked_total() const;
  void set_staked_total(const std::string& value);
  void set_staked_total(std::string&& value);
  void set_staked_total(const char* value);
  void set_staked_total(const char* value, size_t size);
  std::string* mutable_staked_total();
  std::string* release_staked_total();
  void set_allocated_staked_total(std::string* staked_total);
  private:
  const std::string& _internal_staked_total() const;
  void _internal_set_staked_total(const std::string& value);
  std::string* _internal_mutable_staked_total();
  public:

  // string max_intended_stake = 8 [json_name = "maxIntendedStake"];
  void clear_max_intended_stake();
  const std::string& max_intended_stake() const;
  void set_max_intended_stake(const std::string& value);
  void set_max_intended_stake(std::string&& value);
  void set_max_intended_stake(const char* value);
  void set_max_intended_stake(const char* value, size_t size);
  std::string* mutable_max_intended_stake();
  std::string* release_max_intended_stake();
  void set_allocated_max_intended_stake(std::string* max_intended_stake);
  private:
  const std::string& _internal_max_intended_stake() const;
  void _internal_set_max_intended_stake(const std::string& value);
  std::string* _internal_mutable_max_intended_stake();
  public:

  // string pending_stake = 9 [json_name = "pendingStake"];
  void clear_pending_stake();
  const std::string& pending_stake() const;
  void set_pending_stake(const std::string& value);
  void set_pending_stake(std::string&& value);
  void set_pending_stake(const char* value);
  void set_pending_stake(const char* value, size_t size);
  std::string* mutable_pending_stake();
  std::string* release_pending_stake();
  void set_allocated_pending_stake(std::string* pending_stake);
  private:
  const std::string& _internal_pending_stake() const;
  void _internal_set_pending_stake(const std::string& value);
  std::string* _internal_mutable_pending_stake();
  public:

  // .vega.EpochData epoch_data = 10 [json_name = "epochData", (.validator.field) = {
  bool has_epoch_data() const;
  private:
  bool _internal_has_epoch_data() const;
  public:
  void clear_epoch_data();
  const ::vega::EpochData& epoch_data() const;
  ::vega::EpochData* release_epoch_data();
  ::vega::EpochData* mutable_epoch_data();
  void set_allocated_epoch_data(::vega::EpochData* epoch_data);
  private:
  const ::vega::EpochData& _internal_epoch_data() const;
  ::vega::EpochData* _internal_mutable_epoch_data();
  public:
  void unsafe_arena_set_allocated_epoch_data(
      ::vega::EpochData* epoch_data);
  ::vega::EpochData* unsafe_arena_release_epoch_data();

  // .vega.NodeStatus status = 11 [json_name = "status", (.validator.field) = {
  void clear_status();
  ::vega::NodeStatus status() const;
  void set_status(::vega::NodeStatus value);
  private:
  ::vega::NodeStatus _internal_status() const;
  void _internal_set_status(::vega::NodeStatus value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation > delagations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr staked_by_operator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr staked_by_delegates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr staked_total_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_intended_stake_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pending_stake_;
  ::vega::EpochData* epoch_data_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class NodeData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.NodeData) */ {
 public:
  inline NodeData() : NodeData(nullptr) {}
  virtual ~NodeData();

  NodeData(const NodeData& from);
  NodeData(NodeData&& from) noexcept
    : NodeData() {
    *this = ::std::move(from);
  }

  inline NodeData& operator=(const NodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeData& operator=(NodeData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeData& default_instance();

  static inline const NodeData* internal_default_instance() {
    return reinterpret_cast<const NodeData*>(
               &_NodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(NodeData& a, NodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeData* New() const final {
    return CreateMaybeMessage<NodeData>(nullptr);
  }

  NodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeData& from);
  void MergeFrom(const NodeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.NodeData";
  }
  protected:
  explicit NodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakedTotalFieldNumber = 1,
    kTotalNodesFieldNumber = 2,
    kInactiveNodesFieldNumber = 3,
    kValidatingNodesFieldNumber = 4,
    kUptimeFieldNumber = 5,
  };
  // string staked_total = 1 [json_name = "stakedTotal"];
  void clear_staked_total();
  const std::string& staked_total() const;
  void set_staked_total(const std::string& value);
  void set_staked_total(std::string&& value);
  void set_staked_total(const char* value);
  void set_staked_total(const char* value, size_t size);
  std::string* mutable_staked_total();
  std::string* release_staked_total();
  void set_allocated_staked_total(std::string* staked_total);
  private:
  const std::string& _internal_staked_total() const;
  void _internal_set_staked_total(const std::string& value);
  std::string* _internal_mutable_staked_total();
  public:

  // uint32 total_nodes = 2 [json_name = "totalNodes"];
  void clear_total_nodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_nodes() const;
  void set_total_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_nodes() const;
  void _internal_set_total_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 inactive_nodes = 3 [json_name = "inactiveNodes"];
  void clear_inactive_nodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 inactive_nodes() const;
  void set_inactive_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inactive_nodes() const;
  void _internal_set_inactive_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 validating_nodes = 4 [json_name = "validatingNodes"];
  void clear_validating_nodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 validating_nodes() const;
  void set_validating_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_validating_nodes() const;
  void _internal_set_validating_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float uptime = 5 [json_name = "uptime"];
  void clear_uptime();
  float uptime() const;
  void set_uptime(float value);
  private:
  float _internal_uptime() const;
  void _internal_set_uptime(float value);
  public:

  // @@protoc_insertion_point(class_scope:vega.NodeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr staked_total_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_nodes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inactive_nodes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 validating_nodes_;
  float uptime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Delegation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Delegation) */ {
 public:
  inline Delegation() : Delegation(nullptr) {}
  virtual ~Delegation();

  Delegation(const Delegation& from);
  Delegation(Delegation&& from) noexcept
    : Delegation() {
    *this = ::std::move(from);
  }

  inline Delegation& operator=(const Delegation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Delegation& operator=(Delegation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Delegation& default_instance();

  static inline const Delegation* internal_default_instance() {
    return reinterpret_cast<const Delegation*>(
               &_Delegation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Delegation& a, Delegation& b) {
    a.Swap(&b);
  }
  inline void Swap(Delegation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Delegation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Delegation* New() const final {
    return CreateMaybeMessage<Delegation>(nullptr);
  }

  Delegation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Delegation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Delegation& from);
  void MergeFrom(const Delegation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Delegation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Delegation";
  }
  protected:
  explicit Delegation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kAmountFieldNumber = 3,
    kEpochSeqFieldNumber = 4,
  };
  // string party = 1 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string node_id = 2 [json_name = "nodeId"];
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // string amount = 3 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string epoch_seq = 4 [json_name = "epochSeq"];
  void clear_epoch_seq();
  const std::string& epoch_seq() const;
  void set_epoch_seq(const std::string& value);
  void set_epoch_seq(std::string&& value);
  void set_epoch_seq(const char* value);
  void set_epoch_seq(const char* value, size_t size);
  std::string* mutable_epoch_seq();
  std::string* release_epoch_seq();
  void set_allocated_epoch_seq(std::string* epoch_seq);
  private:
  const std::string& _internal_epoch_seq() const;
  void _internal_set_epoch_seq(const std::string& value);
  std::string* _internal_mutable_epoch_seq();
  public:

  // @@protoc_insertion_point(class_scope:vega.Delegation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr epoch_seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class RewardDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.RewardDetails) */ {
 public:
  inline RewardDetails() : RewardDetails(nullptr) {}
  virtual ~RewardDetails();

  RewardDetails(const RewardDetails& from);
  RewardDetails(RewardDetails&& from) noexcept
    : RewardDetails() {
    *this = ::std::move(from);
  }

  inline RewardDetails& operator=(const RewardDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardDetails& operator=(RewardDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardDetails& default_instance();

  static inline const RewardDetails* internal_default_instance() {
    return reinterpret_cast<const RewardDetails*>(
               &_RewardDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(RewardDetails& a, RewardDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardDetails* New() const final {
    return CreateMaybeMessage<RewardDetails>(nullptr);
  }

  RewardDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardDetails& from);
  void MergeFrom(const RewardDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.RewardDetails";
  }
  protected:
  explicit RewardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kAmountFieldNumber = 4,
    kPercentageOfTotalFieldNumber = 5,
    kEpochFieldNumber = 3,
    kReceivedAtFieldNumber = 6,
  };
  // string asset_id = 1 [json_name = "assetId"];
  void clear_asset_id();
  const std::string& asset_id() const;
  void set_asset_id(const std::string& value);
  void set_asset_id(std::string&& value);
  void set_asset_id(const char* value);
  void set_asset_id(const char* value, size_t size);
  std::string* mutable_asset_id();
  std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string amount = 4 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string percentage_of_total = 5 [json_name = "percentageOfTotal"];
  void clear_percentage_of_total();
  const std::string& percentage_of_total() const;
  void set_percentage_of_total(const std::string& value);
  void set_percentage_of_total(std::string&& value);
  void set_percentage_of_total(const char* value);
  void set_percentage_of_total(const char* value, size_t size);
  std::string* mutable_percentage_of_total();
  std::string* release_percentage_of_total();
  void set_allocated_percentage_of_total(std::string* percentage_of_total);
  private:
  const std::string& _internal_percentage_of_total() const;
  void _internal_set_percentage_of_total(const std::string& value);
  std::string* _internal_mutable_percentage_of_total();
  public:

  // uint64 epoch = 3 [json_name = "epoch"];
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint64 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 received_at = 6 [json_name = "receivedAt"];
  void clear_received_at();
  ::PROTOBUF_NAMESPACE_ID::int64 received_at() const;
  void set_received_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_received_at() const;
  void _internal_set_received_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.RewardDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr percentage_of_total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 epoch_;
  ::PROTOBUF_NAMESPACE_ID::int64 received_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class RewardPerAssetDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.RewardPerAssetDetail) */ {
 public:
  inline RewardPerAssetDetail() : RewardPerAssetDetail(nullptr) {}
  virtual ~RewardPerAssetDetail();

  RewardPerAssetDetail(const RewardPerAssetDetail& from);
  RewardPerAssetDetail(RewardPerAssetDetail&& from) noexcept
    : RewardPerAssetDetail() {
    *this = ::std::move(from);
  }

  inline RewardPerAssetDetail& operator=(const RewardPerAssetDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardPerAssetDetail& operator=(RewardPerAssetDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardPerAssetDetail& default_instance();

  static inline const RewardPerAssetDetail* internal_default_instance() {
    return reinterpret_cast<const RewardPerAssetDetail*>(
               &_RewardPerAssetDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(RewardPerAssetDetail& a, RewardPerAssetDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardPerAssetDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardPerAssetDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardPerAssetDetail* New() const final {
    return CreateMaybeMessage<RewardPerAssetDetail>(nullptr);
  }

  RewardPerAssetDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardPerAssetDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardPerAssetDetail& from);
  void MergeFrom(const RewardPerAssetDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardPerAssetDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.RewardPerAssetDetail";
  }
  protected:
  explicit RewardPerAssetDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 2,
    kAssetFieldNumber = 1,
    kTotalForAssetFieldNumber = 3,
  };
  // repeated .vega.RewardDetails details = 2 [json_name = "details"];
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  ::vega::RewardDetails* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::RewardDetails >*
      mutable_details();
  private:
  const ::vega::RewardDetails& _internal_details(int index) const;
  ::vega::RewardDetails* _internal_add_details();
  public:
  const ::vega::RewardDetails& details(int index) const;
  ::vega::RewardDetails* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::RewardDetails >&
      details() const;

  // string asset = 1 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string total_for_asset = 3 [json_name = "totalForAsset"];
  void clear_total_for_asset();
  const std::string& total_for_asset() const;
  void set_total_for_asset(const std::string& value);
  void set_total_for_asset(std::string&& value);
  void set_total_for_asset(const char* value);
  void set_total_for_asset(const char* value, size_t size);
  std::string* mutable_total_for_asset();
  std::string* release_total_for_asset();
  void set_allocated_total_for_asset(std::string* total_for_asset);
  private:
  const std::string& _internal_total_for_asset() const;
  void _internal_set_total_for_asset(const std::string& value);
  std::string* _internal_mutable_total_for_asset();
  public:

  // @@protoc_insertion_point(class_scope:vega.RewardPerAssetDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::RewardDetails > details_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_for_asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Price

// uint64 value = 1 [json_name = "value"];
inline void Price::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Price::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Price::value() const {
  // @@protoc_insertion_point(field_get:vega.Price.value)
  return _internal_value();
}
inline void Price::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  value_ = value;
}
inline void Price::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:vega.Price.value)
}

// -------------------------------------------------------------------

// Timestamp

// int64 value = 1 [json_name = "value"];
inline void Timestamp::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::value() const {
  // @@protoc_insertion_point(field_get:vega.Timestamp.value)
  return _internal_value();
}
inline void Timestamp::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {

  value_ = value;
}
inline void Timestamp::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:vega.Timestamp.value)
}

// -------------------------------------------------------------------

// Party

// string id = 1 [json_name = "id", (.validator.field) = {
inline void Party::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Party::id() const {
  // @@protoc_insertion_point(field_get:vega.Party.id)
  return _internal_id();
}
inline void Party::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Party.id)
}
inline std::string* Party::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Party.id)
  return _internal_mutable_id();
}
inline const std::string& Party::_internal_id() const {
  return id_.Get();
}
inline void Party::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Party::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Party.id)
}
inline void Party::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Party.id)
}
inline void Party::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Party.id)
}
inline std::string* Party::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Party::release_id() {
  // @@protoc_insertion_point(field_release:vega.Party.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Party.id)
}

// repeated .vega.Delegation delegations = 2 [json_name = "delegations"];
inline int Party::_internal_delegations_size() const {
  return delegations_.size();
}
inline int Party::delegations_size() const {
  return _internal_delegations_size();
}
inline void Party::clear_delegations() {
  delegations_.Clear();
}
inline ::vega::Delegation* Party::mutable_delegations(int index) {
  // @@protoc_insertion_point(field_mutable:vega.Party.delegations)
  return delegations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >*
Party::mutable_delegations() {
  // @@protoc_insertion_point(field_mutable_list:vega.Party.delegations)
  return &delegations_;
}
inline const ::vega::Delegation& Party::_internal_delegations(int index) const {
  return delegations_.Get(index);
}
inline const ::vega::Delegation& Party::delegations(int index) const {
  // @@protoc_insertion_point(field_get:vega.Party.delegations)
  return _internal_delegations(index);
}
inline ::vega::Delegation* Party::_internal_add_delegations() {
  return delegations_.Add();
}
inline ::vega::Delegation* Party::add_delegations() {
  // @@protoc_insertion_point(field_add:vega.Party.delegations)
  return _internal_add_delegations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >&
Party::delegations() const {
  // @@protoc_insertion_point(field_list:vega.Party.delegations)
  return delegations_;
}

// -------------------------------------------------------------------

// RiskFactor

// string market = 1 [json_name = "market"];
inline void RiskFactor::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& RiskFactor::market() const {
  // @@protoc_insertion_point(field_get:vega.RiskFactor.market)
  return _internal_market();
}
inline void RiskFactor::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:vega.RiskFactor.market)
}
inline std::string* RiskFactor::mutable_market() {
  // @@protoc_insertion_point(field_mutable:vega.RiskFactor.market)
  return _internal_mutable_market();
}
inline const std::string& RiskFactor::_internal_market() const {
  return market_.Get();
}
inline void RiskFactor::_internal_set_market(const std::string& value) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RiskFactor::set_market(std::string&& value) {

  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.RiskFactor.market)
}
inline void RiskFactor::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.RiskFactor.market)
}
inline void RiskFactor::set_market(const char* value,
    size_t size) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.RiskFactor.market)
}
inline std::string* RiskFactor::_internal_mutable_market() {

  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RiskFactor::release_market() {
  // @@protoc_insertion_point(field_release:vega.RiskFactor.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RiskFactor::set_allocated_market(std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.RiskFactor.market)
}

// double short = 2 [json_name = "short"];
inline void RiskFactor::clear_short_() {
  short__ = 0;
}
inline double RiskFactor::_internal_short_() const {
  return short__;
}
inline double RiskFactor::short_() const {
  // @@protoc_insertion_point(field_get:vega.RiskFactor.short)
  return _internal_short_();
}
inline void RiskFactor::_internal_set_short_(double value) {

  short__ = value;
}
inline void RiskFactor::set_short_(double value) {
  _internal_set_short_(value);
  // @@protoc_insertion_point(field_set:vega.RiskFactor.short)
}

// double long = 3 [json_name = "long"];
inline void RiskFactor::clear_long_() {
  long__ = 0;
}
inline double RiskFactor::_internal_long_() const {
  return long__;
}
inline double RiskFactor::long_() const {
  // @@protoc_insertion_point(field_get:vega.RiskFactor.long)
  return _internal_long_();
}
inline void RiskFactor::_internal_set_long_(double value) {

  long__ = value;
}
inline void RiskFactor::set_long_(double value) {
  _internal_set_long_(value);
  // @@protoc_insertion_point(field_set:vega.RiskFactor.long)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RiskResult

// int64 updated_timestamp = 1 [json_name = "updatedTimestamp"];
inline void RiskResult::clear_updated_timestamp() {
  updated_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RiskResult::_internal_updated_timestamp() const {
  return updated_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RiskResult::updated_timestamp() const {
  // @@protoc_insertion_point(field_get:vega.RiskResult.updated_timestamp)
  return _internal_updated_timestamp();
}
inline void RiskResult::_internal_set_updated_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  updated_timestamp_ = value;
}
inline void RiskResult::set_updated_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.RiskResult.updated_timestamp)
}

// map<string, .vega.RiskFactor> risk_factors = 2 [json_name = "riskFactors"];
inline int RiskResult::_internal_risk_factors_size() const {
  return risk_factors_.size();
}
inline int RiskResult::risk_factors_size() const {
  return _internal_risk_factors_size();
}
inline void RiskResult::clear_risk_factors() {
  risk_factors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
RiskResult::_internal_risk_factors() const {
  return risk_factors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
RiskResult::risk_factors() const {
  // @@protoc_insertion_point(field_map:vega.RiskResult.risk_factors)
  return _internal_risk_factors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
RiskResult::_internal_mutable_risk_factors() {
  return risk_factors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
RiskResult::mutable_risk_factors() {
  // @@protoc_insertion_point(field_mutable_map:vega.RiskResult.risk_factors)
  return _internal_mutable_risk_factors();
}

// int64 next_update_timestamp = 3 [json_name = "nextUpdateTimestamp"];
inline void RiskResult::clear_next_update_timestamp() {
  next_update_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RiskResult::_internal_next_update_timestamp() const {
  return next_update_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RiskResult::next_update_timestamp() const {
  // @@protoc_insertion_point(field_get:vega.RiskResult.next_update_timestamp)
  return _internal_next_update_timestamp();
}
inline void RiskResult::_internal_set_next_update_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  next_update_timestamp_ = value;
}
inline void RiskResult::set_next_update_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_next_update_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.RiskResult.next_update_timestamp)
}

// map<string, .vega.RiskFactor> predicted_next_risk_factors = 4 [json_name = "predictedNextRiskFactors"];
inline int RiskResult::_internal_predicted_next_risk_factors_size() const {
  return predicted_next_risk_factors_.size();
}
inline int RiskResult::predicted_next_risk_factors_size() const {
  return _internal_predicted_next_risk_factors_size();
}
inline void RiskResult::clear_predicted_next_risk_factors() {
  predicted_next_risk_factors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
RiskResult::_internal_predicted_next_risk_factors() const {
  return predicted_next_risk_factors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
RiskResult::predicted_next_risk_factors() const {
  // @@protoc_insertion_point(field_map:vega.RiskResult.predicted_next_risk_factors)
  return _internal_predicted_next_risk_factors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
RiskResult::_internal_mutable_predicted_next_risk_factors() {
  return predicted_next_risk_factors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
RiskResult::mutable_predicted_next_risk_factors() {
  // @@protoc_insertion_point(field_mutable_map:vega.RiskResult.predicted_next_risk_factors)
  return _internal_mutable_predicted_next_risk_factors();
}

// -------------------------------------------------------------------

// PeggedOrder

// .vega.PeggedReference reference = 1 [json_name = "reference"];
inline void PeggedOrder::clear_reference() {
  reference_ = 0;
}
inline ::vega::PeggedReference PeggedOrder::_internal_reference() const {
  return static_cast< ::vega::PeggedReference >(reference_);
}
inline ::vega::PeggedReference PeggedOrder::reference() const {
  // @@protoc_insertion_point(field_get:vega.PeggedOrder.reference)
  return _internal_reference();
}
inline void PeggedOrder::_internal_set_reference(::vega::PeggedReference value) {

  reference_ = value;
}
inline void PeggedOrder::set_reference(::vega::PeggedReference value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.PeggedOrder.reference)
}

// int64 offset = 2 [json_name = "offset"];
inline void PeggedOrder::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PeggedOrder::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PeggedOrder::offset() const {
  // @@protoc_insertion_point(field_get:vega.PeggedOrder.offset)
  return _internal_offset();
}
inline void PeggedOrder::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {

  offset_ = value;
}
inline void PeggedOrder::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:vega.PeggedOrder.offset)
}

// -------------------------------------------------------------------

// Order

// string id = 1 [json_name = "id"];
inline void Order::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Order::id() const {
  // @@protoc_insertion_point(field_get:vega.Order.id)
  return _internal_id();
}
inline void Order::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Order.id)
}
inline std::string* Order::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Order.id)
  return _internal_mutable_id();
}
inline const std::string& Order::_internal_id() const {
  return id_.Get();
}
inline void Order::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.id)
}
inline void Order::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Order.id)
}
inline void Order::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Order.id)
}
inline std::string* Order::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_id() {
  // @@protoc_insertion_point(field_release:vega.Order.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Order.id)
}

// string market_id = 2 [json_name = "marketId"];
inline void Order::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& Order::market_id() const {
  // @@protoc_insertion_point(field_get:vega.Order.market_id)
  return _internal_market_id();
}
inline void Order::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.Order.market_id)
}
inline std::string* Order::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.Order.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& Order::_internal_market_id() const {
  return market_id_.Get();
}
inline void Order::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.market_id)
}
inline void Order::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Order.market_id)
}
inline void Order::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Order.market_id)
}
inline std::string* Order::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.Order.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Order.market_id)
}

// string party_id = 3 [json_name = "partyId"];
inline void Order::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& Order::party_id() const {
  // @@protoc_insertion_point(field_get:vega.Order.party_id)
  return _internal_party_id();
}
inline void Order::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.Order.party_id)
}
inline std::string* Order::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.Order.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& Order::_internal_party_id() const {
  return party_id_.Get();
}
inline void Order::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.party_id)
}
inline void Order::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Order.party_id)
}
inline void Order::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Order.party_id)
}
inline std::string* Order::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.Order.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Order.party_id)
}

// .vega.Side side = 4 [json_name = "side"];
inline void Order::clear_side() {
  side_ = 0;
}
inline ::vega::Side Order::_internal_side() const {
  return static_cast< ::vega::Side >(side_);
}
inline ::vega::Side Order::side() const {
  // @@protoc_insertion_point(field_get:vega.Order.side)
  return _internal_side();
}
inline void Order::_internal_set_side(::vega::Side value) {

  side_ = value;
}
inline void Order::set_side(::vega::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:vega.Order.side)
}

// uint64 price = 5 [json_name = "price"];
inline void Order::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::price() const {
  // @@protoc_insertion_point(field_get:vega.Order.price)
  return _internal_price();
}
inline void Order::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void Order::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.Order.price)
}

// uint64 size = 6 [json_name = "size"];
inline void Order::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::size() const {
  // @@protoc_insertion_point(field_get:vega.Order.size)
  return _internal_size();
}
inline void Order::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  size_ = value;
}
inline void Order::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:vega.Order.size)
}

// uint64 remaining = 7 [json_name = "remaining"];
inline void Order::clear_remaining() {
  remaining_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_remaining() const {
  return remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::remaining() const {
  // @@protoc_insertion_point(field_get:vega.Order.remaining)
  return _internal_remaining();
}
inline void Order::_internal_set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  remaining_ = value;
}
inline void Order::set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remaining(value);
  // @@protoc_insertion_point(field_set:vega.Order.remaining)
}

// .vega.Order.TimeInForce time_in_force = 8 [json_name = "timeInForce"];
inline void Order::clear_time_in_force() {
  time_in_force_ = 0;
}
inline ::vega::Order_TimeInForce Order::_internal_time_in_force() const {
  return static_cast< ::vega::Order_TimeInForce >(time_in_force_);
}
inline ::vega::Order_TimeInForce Order::time_in_force() const {
  // @@protoc_insertion_point(field_get:vega.Order.time_in_force)
  return _internal_time_in_force();
}
inline void Order::_internal_set_time_in_force(::vega::Order_TimeInForce value) {

  time_in_force_ = value;
}
inline void Order::set_time_in_force(::vega::Order_TimeInForce value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:vega.Order.time_in_force)
}

// .vega.Order.Type type = 9 [json_name = "type"];
inline void Order::clear_type() {
  type_ = 0;
}
inline ::vega::Order_Type Order::_internal_type() const {
  return static_cast< ::vega::Order_Type >(type_);
}
inline ::vega::Order_Type Order::type() const {
  // @@protoc_insertion_point(field_get:vega.Order.type)
  return _internal_type();
}
inline void Order::_internal_set_type(::vega::Order_Type value) {

  type_ = value;
}
inline void Order::set_type(::vega::Order_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.Order.type)
}

// int64 created_at = 10 [json_name = "createdAt"];
inline void Order::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::created_at() const {
  // @@protoc_insertion_point(field_get:vega.Order.created_at)
  return _internal_created_at();
}
inline void Order::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  created_at_ = value;
}
inline void Order::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:vega.Order.created_at)
}

// .vega.Order.Status status = 11 [json_name = "status"];
inline void Order::clear_status() {
  status_ = 0;
}
inline ::vega::Order_Status Order::_internal_status() const {
  return static_cast< ::vega::Order_Status >(status_);
}
inline ::vega::Order_Status Order::status() const {
  // @@protoc_insertion_point(field_get:vega.Order.status)
  return _internal_status();
}
inline void Order::_internal_set_status(::vega::Order_Status value) {

  status_ = value;
}
inline void Order::set_status(::vega::Order_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.Order.status)
}

// int64 expires_at = 12 [json_name = "expiresAt"];
inline void Order::clear_expires_at() {
  expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_expires_at() const {
  return expires_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::expires_at() const {
  // @@protoc_insertion_point(field_get:vega.Order.expires_at)
  return _internal_expires_at();
}
inline void Order::_internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  expires_at_ = value;
}
inline void Order::set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expires_at(value);
  // @@protoc_insertion_point(field_set:vega.Order.expires_at)
}

// string reference = 13 [json_name = "reference"];
inline void Order::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& Order::reference() const {
  // @@protoc_insertion_point(field_get:vega.Order.reference)
  return _internal_reference();
}
inline void Order::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.Order.reference)
}
inline std::string* Order::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.Order.reference)
  return _internal_mutable_reference();
}
inline const std::string& Order::_internal_reference() const {
  return reference_.Get();
}
inline void Order::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.reference)
}
inline void Order::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Order.reference)
}
inline void Order::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Order.reference)
}
inline std::string* Order::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_reference() {
  // @@protoc_insertion_point(field_release:vega.Order.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Order.reference)
}

// .vega.OrderError reason = 14 [json_name = "reason"];
inline void Order::clear_reason() {
  reason_ = 0;
}
inline ::vega::OrderError Order::_internal_reason() const {
  return static_cast< ::vega::OrderError >(reason_);
}
inline ::vega::OrderError Order::reason() const {
  // @@protoc_insertion_point(field_get:vega.Order.reason)
  return _internal_reason();
}
inline void Order::_internal_set_reason(::vega::OrderError value) {

  reason_ = value;
}
inline void Order::set_reason(::vega::OrderError value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:vega.Order.reason)
}

// int64 updated_at = 15 [json_name = "updatedAt"];
inline void Order::clear_updated_at() {
  updated_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_updated_at() const {
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::updated_at() const {
  // @@protoc_insertion_point(field_get:vega.Order.updated_at)
  return _internal_updated_at();
}
inline void Order::_internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  updated_at_ = value;
}
inline void Order::set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:vega.Order.updated_at)
}

// uint64 version = 16 [json_name = "version"];
inline void Order::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::version() const {
  // @@protoc_insertion_point(field_get:vega.Order.version)
  return _internal_version();
}
inline void Order::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  version_ = value;
}
inline void Order::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:vega.Order.version)
}

// uint64 batch_id = 17 [json_name = "batchId"];
inline void Order::clear_batch_id() {
  batch_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_batch_id() const {
  return batch_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::batch_id() const {
  // @@protoc_insertion_point(field_get:vega.Order.batch_id)
  return _internal_batch_id();
}
inline void Order::_internal_set_batch_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  batch_id_ = value;
}
inline void Order::set_batch_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:vega.Order.batch_id)
}

// .vega.PeggedOrder pegged_order = 18 [json_name = "peggedOrder"];
inline bool Order::_internal_has_pegged_order() const {
  return this != internal_default_instance() && pegged_order_ != nullptr;
}
inline bool Order::has_pegged_order() const {
  return _internal_has_pegged_order();
}
inline void Order::clear_pegged_order() {
  if (GetArena() == nullptr && pegged_order_ != nullptr) {
    delete pegged_order_;
  }
  pegged_order_ = nullptr;
}
inline const ::vega::PeggedOrder& Order::_internal_pegged_order() const {
  const ::vega::PeggedOrder* p = pegged_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::PeggedOrder&>(
      ::vega::_PeggedOrder_default_instance_);
}
inline const ::vega::PeggedOrder& Order::pegged_order() const {
  // @@protoc_insertion_point(field_get:vega.Order.pegged_order)
  return _internal_pegged_order();
}
inline void Order::unsafe_arena_set_allocated_pegged_order(
    ::vega::PeggedOrder* pegged_order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pegged_order_);
  }
  pegged_order_ = pegged_order;
  if (pegged_order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Order.pegged_order)
}
inline ::vega::PeggedOrder* Order::release_pegged_order() {

  ::vega::PeggedOrder* temp = pegged_order_;
  pegged_order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::PeggedOrder* Order::unsafe_arena_release_pegged_order() {
  // @@protoc_insertion_point(field_release:vega.Order.pegged_order)

  ::vega::PeggedOrder* temp = pegged_order_;
  pegged_order_ = nullptr;
  return temp;
}
inline ::vega::PeggedOrder* Order::_internal_mutable_pegged_order() {

  if (pegged_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::PeggedOrder>(GetArena());
    pegged_order_ = p;
  }
  return pegged_order_;
}
inline ::vega::PeggedOrder* Order::mutable_pegged_order() {
  // @@protoc_insertion_point(field_mutable:vega.Order.pegged_order)
  return _internal_mutable_pegged_order();
}
inline void Order::set_allocated_pegged_order(::vega::PeggedOrder* pegged_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pegged_order_;
  }
  if (pegged_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pegged_order);
    if (message_arena != submessage_arena) {
      pegged_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pegged_order, submessage_arena);
    }

  } else {

  }
  pegged_order_ = pegged_order;
  // @@protoc_insertion_point(field_set_allocated:vega.Order.pegged_order)
}

// string liquidity_provision_id = 19 [json_name = "liquidityProvisionId"];
inline void Order::clear_liquidity_provision_id() {
  liquidity_provision_id_.ClearToEmpty();
}
inline const std::string& Order::liquidity_provision_id() const {
  // @@protoc_insertion_point(field_get:vega.Order.liquidity_provision_id)
  return _internal_liquidity_provision_id();
}
inline void Order::set_liquidity_provision_id(const std::string& value) {
  _internal_set_liquidity_provision_id(value);
  // @@protoc_insertion_point(field_set:vega.Order.liquidity_provision_id)
}
inline std::string* Order::mutable_liquidity_provision_id() {
  // @@protoc_insertion_point(field_mutable:vega.Order.liquidity_provision_id)
  return _internal_mutable_liquidity_provision_id();
}
inline const std::string& Order::_internal_liquidity_provision_id() const {
  return liquidity_provision_id_.Get();
}
inline void Order::_internal_set_liquidity_provision_id(const std::string& value) {

  liquidity_provision_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_liquidity_provision_id(std::string&& value) {

  liquidity_provision_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.liquidity_provision_id)
}
inline void Order::set_liquidity_provision_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  liquidity_provision_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Order.liquidity_provision_id)
}
inline void Order::set_liquidity_provision_id(const char* value,
    size_t size) {

  liquidity_provision_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Order.liquidity_provision_id)
}
inline std::string* Order::_internal_mutable_liquidity_provision_id() {

  return liquidity_provision_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_liquidity_provision_id() {
  // @@protoc_insertion_point(field_release:vega.Order.liquidity_provision_id)
  return liquidity_provision_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_liquidity_provision_id(std::string* liquidity_provision_id) {
  if (liquidity_provision_id != nullptr) {

  } else {

  }
  liquidity_provision_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), liquidity_provision_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Order.liquidity_provision_id)
}

// -------------------------------------------------------------------

// OrderCancellationConfirmation

// .vega.Order order = 1 [json_name = "order"];
inline bool OrderCancellationConfirmation::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool OrderCancellationConfirmation::has_order() const {
  return _internal_has_order();
}
inline void OrderCancellationConfirmation::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::vega::Order& OrderCancellationConfirmation::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& OrderCancellationConfirmation::order() const {
  // @@protoc_insertion_point(field_get:vega.OrderCancellationConfirmation.order)
  return _internal_order();
}
inline void OrderCancellationConfirmation::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.OrderCancellationConfirmation.order)
}
inline ::vega::Order* OrderCancellationConfirmation::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* OrderCancellationConfirmation::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:vega.OrderCancellationConfirmation.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderCancellationConfirmation::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* OrderCancellationConfirmation::mutable_order() {
  // @@protoc_insertion_point(field_mutable:vega.OrderCancellationConfirmation.order)
  return _internal_mutable_order();
}
inline void OrderCancellationConfirmation::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderCancellationConfirmation.order)
}

// -------------------------------------------------------------------

// OrderConfirmation

// .vega.Order order = 1 [json_name = "order"];
inline bool OrderConfirmation::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool OrderConfirmation::has_order() const {
  return _internal_has_order();
}
inline void OrderConfirmation::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::vega::Order& OrderConfirmation::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& OrderConfirmation::order() const {
  // @@protoc_insertion_point(field_get:vega.OrderConfirmation.order)
  return _internal_order();
}
inline void OrderConfirmation::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.OrderConfirmation.order)
}
inline ::vega::Order* OrderConfirmation::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* OrderConfirmation::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:vega.OrderConfirmation.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderConfirmation::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* OrderConfirmation::mutable_order() {
  // @@protoc_insertion_point(field_mutable:vega.OrderConfirmation.order)
  return _internal_mutable_order();
}
inline void OrderConfirmation::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderConfirmation.order)
}

// repeated .vega.Trade trades = 2 [json_name = "trades"];
inline int OrderConfirmation::_internal_trades_size() const {
  return trades_.size();
}
inline int OrderConfirmation::trades_size() const {
  return _internal_trades_size();
}
inline void OrderConfirmation::clear_trades() {
  trades_.Clear();
}
inline ::vega::Trade* OrderConfirmation::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:vega.OrderConfirmation.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
OrderConfirmation::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:vega.OrderConfirmation.trades)
  return &trades_;
}
inline const ::vega::Trade& OrderConfirmation::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& OrderConfirmation::trades(int index) const {
  // @@protoc_insertion_point(field_get:vega.OrderConfirmation.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* OrderConfirmation::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* OrderConfirmation::add_trades() {
  // @@protoc_insertion_point(field_add:vega.OrderConfirmation.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
OrderConfirmation::trades() const {
  // @@protoc_insertion_point(field_list:vega.OrderConfirmation.trades)
  return trades_;
}

// repeated .vega.Order passive_orders_affected = 3 [json_name = "passiveOrdersAffected"];
inline int OrderConfirmation::_internal_passive_orders_affected_size() const {
  return passive_orders_affected_.size();
}
inline int OrderConfirmation::passive_orders_affected_size() const {
  return _internal_passive_orders_affected_size();
}
inline void OrderConfirmation::clear_passive_orders_affected() {
  passive_orders_affected_.Clear();
}
inline ::vega::Order* OrderConfirmation::mutable_passive_orders_affected(int index) {
  // @@protoc_insertion_point(field_mutable:vega.OrderConfirmation.passive_orders_affected)
  return passive_orders_affected_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
OrderConfirmation::mutable_passive_orders_affected() {
  // @@protoc_insertion_point(field_mutable_list:vega.OrderConfirmation.passive_orders_affected)
  return &passive_orders_affected_;
}
inline const ::vega::Order& OrderConfirmation::_internal_passive_orders_affected(int index) const {
  return passive_orders_affected_.Get(index);
}
inline const ::vega::Order& OrderConfirmation::passive_orders_affected(int index) const {
  // @@protoc_insertion_point(field_get:vega.OrderConfirmation.passive_orders_affected)
  return _internal_passive_orders_affected(index);
}
inline ::vega::Order* OrderConfirmation::_internal_add_passive_orders_affected() {
  return passive_orders_affected_.Add();
}
inline ::vega::Order* OrderConfirmation::add_passive_orders_affected() {
  // @@protoc_insertion_point(field_add:vega.OrderConfirmation.passive_orders_affected)
  return _internal_add_passive_orders_affected();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
OrderConfirmation::passive_orders_affected() const {
  // @@protoc_insertion_point(field_list:vega.OrderConfirmation.passive_orders_affected)
  return passive_orders_affected_;
}

// -------------------------------------------------------------------

// AuctionIndicativeState

// string market_id = 1 [json_name = "marketId"];
inline void AuctionIndicativeState::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& AuctionIndicativeState::market_id() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.market_id)
  return _internal_market_id();
}
inline void AuctionIndicativeState::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.market_id)
}
inline std::string* AuctionIndicativeState::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.AuctionIndicativeState.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& AuctionIndicativeState::_internal_market_id() const {
  return market_id_.Get();
}
inline void AuctionIndicativeState::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuctionIndicativeState::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.AuctionIndicativeState.market_id)
}
inline void AuctionIndicativeState::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.AuctionIndicativeState.market_id)
}
inline void AuctionIndicativeState::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.AuctionIndicativeState.market_id)
}
inline std::string* AuctionIndicativeState::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuctionIndicativeState::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.AuctionIndicativeState.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuctionIndicativeState::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.AuctionIndicativeState.market_id)
}

// uint64 indicative_price = 2 [json_name = "indicativePrice"];
inline void AuctionIndicativeState::clear_indicative_price() {
  indicative_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionIndicativeState::_internal_indicative_price() const {
  return indicative_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionIndicativeState::indicative_price() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.indicative_price)
  return _internal_indicative_price();
}
inline void AuctionIndicativeState::_internal_set_indicative_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  indicative_price_ = value;
}
inline void AuctionIndicativeState::set_indicative_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_indicative_price(value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.indicative_price)
}

// uint64 indicative_volume = 3 [json_name = "indicativeVolume"];
inline void AuctionIndicativeState::clear_indicative_volume() {
  indicative_volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionIndicativeState::_internal_indicative_volume() const {
  return indicative_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionIndicativeState::indicative_volume() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.indicative_volume)
  return _internal_indicative_volume();
}
inline void AuctionIndicativeState::_internal_set_indicative_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  indicative_volume_ = value;
}
inline void AuctionIndicativeState::set_indicative_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_indicative_volume(value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.indicative_volume)
}

// int64 auction_start = 4 [json_name = "auctionStart"];
inline void AuctionIndicativeState::clear_auction_start() {
  auction_start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionIndicativeState::_internal_auction_start() const {
  return auction_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionIndicativeState::auction_start() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.auction_start)
  return _internal_auction_start();
}
inline void AuctionIndicativeState::_internal_set_auction_start(::PROTOBUF_NAMESPACE_ID::int64 value) {

  auction_start_ = value;
}
inline void AuctionIndicativeState::set_auction_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auction_start(value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.auction_start)
}

// int64 auction_end = 5 [json_name = "auctionEnd"];
inline void AuctionIndicativeState::clear_auction_end() {
  auction_end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionIndicativeState::_internal_auction_end() const {
  return auction_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionIndicativeState::auction_end() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.auction_end)
  return _internal_auction_end();
}
inline void AuctionIndicativeState::_internal_set_auction_end(::PROTOBUF_NAMESPACE_ID::int64 value) {

  auction_end_ = value;
}
inline void AuctionIndicativeState::set_auction_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auction_end(value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.auction_end)
}

// -------------------------------------------------------------------

// Trade

// string id = 1 [json_name = "id"];
inline void Trade::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Trade::id() const {
  // @@protoc_insertion_point(field_get:vega.Trade.id)
  return _internal_id();
}
inline void Trade::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Trade.id)
}
inline std::string* Trade::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.id)
  return _internal_mutable_id();
}
inline const std::string& Trade::_internal_id() const {
  return id_.Get();
}
inline void Trade::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.id)
}
inline void Trade::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.id)
}
inline void Trade::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.id)
}
inline std::string* Trade::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_id() {
  // @@protoc_insertion_point(field_release:vega.Trade.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.id)
}

// string market_id = 2 [json_name = "marketId"];
inline void Trade::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& Trade::market_id() const {
  // @@protoc_insertion_point(field_get:vega.Trade.market_id)
  return _internal_market_id();
}
inline void Trade::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.Trade.market_id)
}
inline std::string* Trade::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& Trade::_internal_market_id() const {
  return market_id_.Get();
}
inline void Trade::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.market_id)
}
inline void Trade::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.market_id)
}
inline void Trade::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.market_id)
}
inline std::string* Trade::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.Trade.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.market_id)
}

// uint64 price = 3 [json_name = "price"];
inline void Trade::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::price() const {
  // @@protoc_insertion_point(field_get:vega.Trade.price)
  return _internal_price();
}
inline void Trade::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void Trade::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.Trade.price)
}

// uint64 size = 4 [json_name = "size"];
inline void Trade::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::size() const {
  // @@protoc_insertion_point(field_get:vega.Trade.size)
  return _internal_size();
}
inline void Trade::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  size_ = value;
}
inline void Trade::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:vega.Trade.size)
}

// string buyer = 5 [json_name = "buyer"];
inline void Trade::clear_buyer() {
  buyer_.ClearToEmpty();
}
inline const std::string& Trade::buyer() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buyer)
  return _internal_buyer();
}
inline void Trade::set_buyer(const std::string& value) {
  _internal_set_buyer(value);
  // @@protoc_insertion_point(field_set:vega.Trade.buyer)
}
inline std::string* Trade::mutable_buyer() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.buyer)
  return _internal_mutable_buyer();
}
inline const std::string& Trade::_internal_buyer() const {
  return buyer_.Get();
}
inline void Trade::_internal_set_buyer(const std::string& value) {

  buyer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_buyer(std::string&& value) {

  buyer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.buyer)
}
inline void Trade::set_buyer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  buyer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.buyer)
}
inline void Trade::set_buyer(const char* value,
    size_t size) {

  buyer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.buyer)
}
inline std::string* Trade::_internal_mutable_buyer() {

  return buyer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_buyer() {
  // @@protoc_insertion_point(field_release:vega.Trade.buyer)
  return buyer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_buyer(std::string* buyer) {
  if (buyer != nullptr) {

  } else {

  }
  buyer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.buyer)
}

// string seller = 6 [json_name = "seller"];
inline void Trade::clear_seller() {
  seller_.ClearToEmpty();
}
inline const std::string& Trade::seller() const {
  // @@protoc_insertion_point(field_get:vega.Trade.seller)
  return _internal_seller();
}
inline void Trade::set_seller(const std::string& value) {
  _internal_set_seller(value);
  // @@protoc_insertion_point(field_set:vega.Trade.seller)
}
inline std::string* Trade::mutable_seller() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.seller)
  return _internal_mutable_seller();
}
inline const std::string& Trade::_internal_seller() const {
  return seller_.Get();
}
inline void Trade::_internal_set_seller(const std::string& value) {

  seller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_seller(std::string&& value) {

  seller_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.seller)
}
inline void Trade::set_seller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  seller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.seller)
}
inline void Trade::set_seller(const char* value,
    size_t size) {

  seller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.seller)
}
inline std::string* Trade::_internal_mutable_seller() {

  return seller_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_seller() {
  // @@protoc_insertion_point(field_release:vega.Trade.seller)
  return seller_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_seller(std::string* seller) {
  if (seller != nullptr) {

  } else {

  }
  seller_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seller,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.seller)
}

// .vega.Side aggressor = 7 [json_name = "aggressor"];
inline void Trade::clear_aggressor() {
  aggressor_ = 0;
}
inline ::vega::Side Trade::_internal_aggressor() const {
  return static_cast< ::vega::Side >(aggressor_);
}
inline ::vega::Side Trade::aggressor() const {
  // @@protoc_insertion_point(field_get:vega.Trade.aggressor)
  return _internal_aggressor();
}
inline void Trade::_internal_set_aggressor(::vega::Side value) {

  aggressor_ = value;
}
inline void Trade::set_aggressor(::vega::Side value) {
  _internal_set_aggressor(value);
  // @@protoc_insertion_point(field_set:vega.Trade.aggressor)
}

// string buy_order = 8 [json_name = "buyOrder"];
inline void Trade::clear_buy_order() {
  buy_order_.ClearToEmpty();
}
inline const std::string& Trade::buy_order() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buy_order)
  return _internal_buy_order();
}
inline void Trade::set_buy_order(const std::string& value) {
  _internal_set_buy_order(value);
  // @@protoc_insertion_point(field_set:vega.Trade.buy_order)
}
inline std::string* Trade::mutable_buy_order() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.buy_order)
  return _internal_mutable_buy_order();
}
inline const std::string& Trade::_internal_buy_order() const {
  return buy_order_.Get();
}
inline void Trade::_internal_set_buy_order(const std::string& value) {

  buy_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_buy_order(std::string&& value) {

  buy_order_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.buy_order)
}
inline void Trade::set_buy_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  buy_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.buy_order)
}
inline void Trade::set_buy_order(const char* value,
    size_t size) {

  buy_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.buy_order)
}
inline std::string* Trade::_internal_mutable_buy_order() {

  return buy_order_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_buy_order() {
  // @@protoc_insertion_point(field_release:vega.Trade.buy_order)
  return buy_order_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_buy_order(std::string* buy_order) {
  if (buy_order != nullptr) {

  } else {

  }
  buy_order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_order,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.buy_order)
}

// string sell_order = 9 [json_name = "sellOrder"];
inline void Trade::clear_sell_order() {
  sell_order_.ClearToEmpty();
}
inline const std::string& Trade::sell_order() const {
  // @@protoc_insertion_point(field_get:vega.Trade.sell_order)
  return _internal_sell_order();
}
inline void Trade::set_sell_order(const std::string& value) {
  _internal_set_sell_order(value);
  // @@protoc_insertion_point(field_set:vega.Trade.sell_order)
}
inline std::string* Trade::mutable_sell_order() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.sell_order)
  return _internal_mutable_sell_order();
}
inline const std::string& Trade::_internal_sell_order() const {
  return sell_order_.Get();
}
inline void Trade::_internal_set_sell_order(const std::string& value) {

  sell_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_sell_order(std::string&& value) {

  sell_order_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.sell_order)
}
inline void Trade::set_sell_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  sell_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.sell_order)
}
inline void Trade::set_sell_order(const char* value,
    size_t size) {

  sell_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.sell_order)
}
inline std::string* Trade::_internal_mutable_sell_order() {

  return sell_order_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_sell_order() {
  // @@protoc_insertion_point(field_release:vega.Trade.sell_order)
  return sell_order_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_sell_order(std::string* sell_order) {
  if (sell_order != nullptr) {

  } else {

  }
  sell_order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_order,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.sell_order)
}

// int64 timestamp = 10 [json_name = "timestamp"];
inline void Trade::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Trade::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Trade::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.Trade.timestamp)
  return _internal_timestamp();
}
inline void Trade::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void Trade::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.Trade.timestamp)
}

// .vega.Trade.Type type = 11 [json_name = "type"];
inline void Trade::clear_type() {
  type_ = 0;
}
inline ::vega::Trade_Type Trade::_internal_type() const {
  return static_cast< ::vega::Trade_Type >(type_);
}
inline ::vega::Trade_Type Trade::type() const {
  // @@protoc_insertion_point(field_get:vega.Trade.type)
  return _internal_type();
}
inline void Trade::_internal_set_type(::vega::Trade_Type value) {

  type_ = value;
}
inline void Trade::set_type(::vega::Trade_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.Trade.type)
}

// .vega.Fee buyer_fee = 12 [json_name = "buyerFee"];
inline bool Trade::_internal_has_buyer_fee() const {
  return this != internal_default_instance() && buyer_fee_ != nullptr;
}
inline bool Trade::has_buyer_fee() const {
  return _internal_has_buyer_fee();
}
inline void Trade::clear_buyer_fee() {
  if (GetArena() == nullptr && buyer_fee_ != nullptr) {
    delete buyer_fee_;
  }
  buyer_fee_ = nullptr;
}
inline const ::vega::Fee& Trade::_internal_buyer_fee() const {
  const ::vega::Fee* p = buyer_fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Fee&>(
      ::vega::_Fee_default_instance_);
}
inline const ::vega::Fee& Trade::buyer_fee() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buyer_fee)
  return _internal_buyer_fee();
}
inline void Trade::unsafe_arena_set_allocated_buyer_fee(
    ::vega::Fee* buyer_fee) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buyer_fee_);
  }
  buyer_fee_ = buyer_fee;
  if (buyer_fee) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Trade.buyer_fee)
}
inline ::vega::Fee* Trade::release_buyer_fee() {

  ::vega::Fee* temp = buyer_fee_;
  buyer_fee_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Fee* Trade::unsafe_arena_release_buyer_fee() {
  // @@protoc_insertion_point(field_release:vega.Trade.buyer_fee)

  ::vega::Fee* temp = buyer_fee_;
  buyer_fee_ = nullptr;
  return temp;
}
inline ::vega::Fee* Trade::_internal_mutable_buyer_fee() {

  if (buyer_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Fee>(GetArena());
    buyer_fee_ = p;
  }
  return buyer_fee_;
}
inline ::vega::Fee* Trade::mutable_buyer_fee() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.buyer_fee)
  return _internal_mutable_buyer_fee();
}
inline void Trade::set_allocated_buyer_fee(::vega::Fee* buyer_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete buyer_fee_;
  }
  if (buyer_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(buyer_fee);
    if (message_arena != submessage_arena) {
      buyer_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buyer_fee, submessage_arena);
    }

  } else {

  }
  buyer_fee_ = buyer_fee;
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.buyer_fee)
}

// .vega.Fee seller_fee = 13 [json_name = "sellerFee"];
inline bool Trade::_internal_has_seller_fee() const {
  return this != internal_default_instance() && seller_fee_ != nullptr;
}
inline bool Trade::has_seller_fee() const {
  return _internal_has_seller_fee();
}
inline void Trade::clear_seller_fee() {
  if (GetArena() == nullptr && seller_fee_ != nullptr) {
    delete seller_fee_;
  }
  seller_fee_ = nullptr;
}
inline const ::vega::Fee& Trade::_internal_seller_fee() const {
  const ::vega::Fee* p = seller_fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Fee&>(
      ::vega::_Fee_default_instance_);
}
inline const ::vega::Fee& Trade::seller_fee() const {
  // @@protoc_insertion_point(field_get:vega.Trade.seller_fee)
  return _internal_seller_fee();
}
inline void Trade::unsafe_arena_set_allocated_seller_fee(
    ::vega::Fee* seller_fee) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seller_fee_);
  }
  seller_fee_ = seller_fee;
  if (seller_fee) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Trade.seller_fee)
}
inline ::vega::Fee* Trade::release_seller_fee() {

  ::vega::Fee* temp = seller_fee_;
  seller_fee_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Fee* Trade::unsafe_arena_release_seller_fee() {
  // @@protoc_insertion_point(field_release:vega.Trade.seller_fee)

  ::vega::Fee* temp = seller_fee_;
  seller_fee_ = nullptr;
  return temp;
}
inline ::vega::Fee* Trade::_internal_mutable_seller_fee() {

  if (seller_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Fee>(GetArena());
    seller_fee_ = p;
  }
  return seller_fee_;
}
inline ::vega::Fee* Trade::mutable_seller_fee() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.seller_fee)
  return _internal_mutable_seller_fee();
}
inline void Trade::set_allocated_seller_fee(::vega::Fee* seller_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete seller_fee_;
  }
  if (seller_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(seller_fee);
    if (message_arena != submessage_arena) {
      seller_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seller_fee, submessage_arena);
    }

  } else {

  }
  seller_fee_ = seller_fee;
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.seller_fee)
}

// uint64 buyer_auction_batch = 14 [json_name = "buyerAuctionBatch"];
inline void Trade::clear_buyer_auction_batch() {
  buyer_auction_batch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::_internal_buyer_auction_batch() const {
  return buyer_auction_batch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::buyer_auction_batch() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buyer_auction_batch)
  return _internal_buyer_auction_batch();
}
inline void Trade::_internal_set_buyer_auction_batch(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  buyer_auction_batch_ = value;
}
inline void Trade::set_buyer_auction_batch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_buyer_auction_batch(value);
  // @@protoc_insertion_point(field_set:vega.Trade.buyer_auction_batch)
}

// uint64 seller_auction_batch = 15 [json_name = "sellerAuctionBatch"];
inline void Trade::clear_seller_auction_batch() {
  seller_auction_batch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::_internal_seller_auction_batch() const {
  return seller_auction_batch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::seller_auction_batch() const {
  // @@protoc_insertion_point(field_get:vega.Trade.seller_auction_batch)
  return _internal_seller_auction_batch();
}
inline void Trade::_internal_set_seller_auction_batch(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  seller_auction_batch_ = value;
}
inline void Trade::set_seller_auction_batch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seller_auction_batch(value);
  // @@protoc_insertion_point(field_set:vega.Trade.seller_auction_batch)
}

// -------------------------------------------------------------------

// Fee

// uint64 maker_fee = 1 [json_name = "makerFee"];
inline void Fee::clear_maker_fee() {
  maker_fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::_internal_maker_fee() const {
  return maker_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::maker_fee() const {
  // @@protoc_insertion_point(field_get:vega.Fee.maker_fee)
  return _internal_maker_fee();
}
inline void Fee::_internal_set_maker_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  maker_fee_ = value;
}
inline void Fee::set_maker_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maker_fee(value);
  // @@protoc_insertion_point(field_set:vega.Fee.maker_fee)
}

// uint64 infrastructure_fee = 2 [json_name = "infrastructureFee"];
inline void Fee::clear_infrastructure_fee() {
  infrastructure_fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::_internal_infrastructure_fee() const {
  return infrastructure_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::infrastructure_fee() const {
  // @@protoc_insertion_point(field_get:vega.Fee.infrastructure_fee)
  return _internal_infrastructure_fee();
}
inline void Fee::_internal_set_infrastructure_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  infrastructure_fee_ = value;
}
inline void Fee::set_infrastructure_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_infrastructure_fee(value);
  // @@protoc_insertion_point(field_set:vega.Fee.infrastructure_fee)
}

// uint64 liquidity_fee = 3 [json_name = "liquidityFee"];
inline void Fee::clear_liquidity_fee() {
  liquidity_fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::_internal_liquidity_fee() const {
  return liquidity_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::liquidity_fee() const {
  // @@protoc_insertion_point(field_get:vega.Fee.liquidity_fee)
  return _internal_liquidity_fee();
}
inline void Fee::_internal_set_liquidity_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  liquidity_fee_ = value;
}
inline void Fee::set_liquidity_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_liquidity_fee(value);
  // @@protoc_insertion_point(field_set:vega.Fee.liquidity_fee)
}

// -------------------------------------------------------------------

// TradeSet

// repeated .vega.Trade trades = 1 [json_name = "trades"];
inline int TradeSet::_internal_trades_size() const {
  return trades_.size();
}
inline int TradeSet::trades_size() const {
  return _internal_trades_size();
}
inline void TradeSet::clear_trades() {
  trades_.Clear();
}
inline ::vega::Trade* TradeSet::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TradeSet.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
TradeSet::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:vega.TradeSet.trades)
  return &trades_;
}
inline const ::vega::Trade& TradeSet::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& TradeSet::trades(int index) const {
  // @@protoc_insertion_point(field_get:vega.TradeSet.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* TradeSet::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* TradeSet::add_trades() {
  // @@protoc_insertion_point(field_add:vega.TradeSet.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
TradeSet::trades() const {
  // @@protoc_insertion_point(field_list:vega.TradeSet.trades)
  return trades_;
}

// -------------------------------------------------------------------

// Candle

// int64 timestamp = 1 [json_name = "timestamp"];
inline void Candle::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.Candle.timestamp)
  return _internal_timestamp();
}
inline void Candle::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void Candle::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.Candle.timestamp)
}

// string datetime = 2 [json_name = "datetime"];
inline void Candle::clear_datetime() {
  datetime_.ClearToEmpty();
}
inline const std::string& Candle::datetime() const {
  // @@protoc_insertion_point(field_get:vega.Candle.datetime)
  return _internal_datetime();
}
inline void Candle::set_datetime(const std::string& value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:vega.Candle.datetime)
}
inline std::string* Candle::mutable_datetime() {
  // @@protoc_insertion_point(field_mutable:vega.Candle.datetime)
  return _internal_mutable_datetime();
}
inline const std::string& Candle::_internal_datetime() const {
  return datetime_.Get();
}
inline void Candle::_internal_set_datetime(const std::string& value) {

  datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Candle::set_datetime(std::string&& value) {

  datetime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Candle.datetime)
}
inline void Candle::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Candle.datetime)
}
inline void Candle::set_datetime(const char* value,
    size_t size) {

  datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Candle.datetime)
}
inline std::string* Candle::_internal_mutable_datetime() {

  return datetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Candle::release_datetime() {
  // @@protoc_insertion_point(field_release:vega.Candle.datetime)
  return datetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Candle::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {

  } else {

  }
  datetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Candle.datetime)
}

// uint64 high = 3 [json_name = "high"];
inline void Candle::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::high() const {
  // @@protoc_insertion_point(field_get:vega.Candle.high)
  return _internal_high();
}
inline void Candle::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  high_ = value;
}
inline void Candle::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:vega.Candle.high)
}

// uint64 low = 4 [json_name = "low"];
inline void Candle::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::low() const {
  // @@protoc_insertion_point(field_get:vega.Candle.low)
  return _internal_low();
}
inline void Candle::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  low_ = value;
}
inline void Candle::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:vega.Candle.low)
}

// uint64 open = 5 [json_name = "open"];
inline void Candle::clear_open() {
  open_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::open() const {
  // @@protoc_insertion_point(field_get:vega.Candle.open)
  return _internal_open();
}
inline void Candle::_internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  open_ = value;
}
inline void Candle::set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:vega.Candle.open)
}

// uint64 close = 6 [json_name = "close"];
inline void Candle::clear_close() {
  close_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::_internal_close() const {
  return close_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::close() const {
  // @@protoc_insertion_point(field_get:vega.Candle.close)
  return _internal_close();
}
inline void Candle::_internal_set_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  close_ = value;
}
inline void Candle::set_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:vega.Candle.close)
}

// uint64 volume = 7 [json_name = "volume"];
inline void Candle::clear_volume() {
  volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::volume() const {
  // @@protoc_insertion_point(field_get:vega.Candle.volume)
  return _internal_volume();
}
inline void Candle::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  volume_ = value;
}
inline void Candle::set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:vega.Candle.volume)
}

// .vega.Interval interval = 8 [json_name = "interval"];
inline void Candle::clear_interval() {
  interval_ = 0;
}
inline ::vega::Interval Candle::_internal_interval() const {
  return static_cast< ::vega::Interval >(interval_);
}
inline ::vega::Interval Candle::interval() const {
  // @@protoc_insertion_point(field_get:vega.Candle.interval)
  return _internal_interval();
}
inline void Candle::_internal_set_interval(::vega::Interval value) {

  interval_ = value;
}
inline void Candle::set_interval(::vega::Interval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:vega.Candle.interval)
}

// -------------------------------------------------------------------

// PriceLevel

// uint64 price = 1 [json_name = "price"];
inline void PriceLevel::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::price() const {
  // @@protoc_insertion_point(field_get:vega.PriceLevel.price)
  return _internal_price();
}
inline void PriceLevel::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void PriceLevel::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.PriceLevel.price)
}

// uint64 number_of_orders = 2 [json_name = "numberOfOrders"];
inline void PriceLevel::clear_number_of_orders() {
  number_of_orders_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::_internal_number_of_orders() const {
  return number_of_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::number_of_orders() const {
  // @@protoc_insertion_point(field_get:vega.PriceLevel.number_of_orders)
  return _internal_number_of_orders();
}
inline void PriceLevel::_internal_set_number_of_orders(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  number_of_orders_ = value;
}
inline void PriceLevel::set_number_of_orders(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_number_of_orders(value);
  // @@protoc_insertion_point(field_set:vega.PriceLevel.number_of_orders)
}

// uint64 volume = 3 [json_name = "volume"];
inline void PriceLevel::clear_volume() {
  volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::volume() const {
  // @@protoc_insertion_point(field_get:vega.PriceLevel.volume)
  return _internal_volume();
}
inline void PriceLevel::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  volume_ = value;
}
inline void PriceLevel::set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:vega.PriceLevel.volume)
}

// -------------------------------------------------------------------

// MarketDepth

// string market_id = 1 [json_name = "marketId"];
inline void MarketDepth::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketDepth::market_id() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.market_id)
  return _internal_market_id();
}
inline void MarketDepth::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.MarketDepth.market_id)
}
inline std::string* MarketDepth::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepth.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketDepth::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketDepth::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepth::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketDepth.market_id)
}
inline void MarketDepth::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketDepth.market_id)
}
inline void MarketDepth::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketDepth.market_id)
}
inline std::string* MarketDepth::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepth::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.MarketDepth.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepth::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketDepth.market_id)
}

// repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
inline int MarketDepth::_internal_buy_size() const {
  return buy_.size();
}
inline int MarketDepth::buy_size() const {
  return _internal_buy_size();
}
inline void MarketDepth::clear_buy() {
  buy_.Clear();
}
inline ::vega::PriceLevel* MarketDepth::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepth.buy)
  return buy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepth::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepth.buy)
  return &buy_;
}
inline const ::vega::PriceLevel& MarketDepth::_internal_buy(int index) const {
  return buy_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepth::buy(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.buy)
  return _internal_buy(index);
}
inline ::vega::PriceLevel* MarketDepth::_internal_add_buy() {
  return buy_.Add();
}
inline ::vega::PriceLevel* MarketDepth::add_buy() {
  // @@protoc_insertion_point(field_add:vega.MarketDepth.buy)
  return _internal_add_buy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepth::buy() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepth.buy)
  return buy_;
}

// repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
inline int MarketDepth::_internal_sell_size() const {
  return sell_.size();
}
inline int MarketDepth::sell_size() const {
  return _internal_sell_size();
}
inline void MarketDepth::clear_sell() {
  sell_.Clear();
}
inline ::vega::PriceLevel* MarketDepth::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepth.sell)
  return sell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepth::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepth.sell)
  return &sell_;
}
inline const ::vega::PriceLevel& MarketDepth::_internal_sell(int index) const {
  return sell_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepth::sell(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.sell)
  return _internal_sell(index);
}
inline ::vega::PriceLevel* MarketDepth::_internal_add_sell() {
  return sell_.Add();
}
inline ::vega::PriceLevel* MarketDepth::add_sell() {
  // @@protoc_insertion_point(field_add:vega.MarketDepth.sell)
  return _internal_add_sell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepth::sell() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepth.sell)
  return sell_;
}

// uint64 sequence_number = 4 [json_name = "sequenceNumber"];
inline void MarketDepth::clear_sequence_number() {
  sequence_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepth::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepth::sequence_number() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.sequence_number)
  return _internal_sequence_number();
}
inline void MarketDepth::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  sequence_number_ = value;
}
inline void MarketDepth::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:vega.MarketDepth.sequence_number)
}

// -------------------------------------------------------------------

// MarketDepthUpdate

// string market_id = 1 [json_name = "marketId"];
inline void MarketDepthUpdate::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketDepthUpdate::market_id() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.market_id)
  return _internal_market_id();
}
inline void MarketDepthUpdate::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.MarketDepthUpdate.market_id)
}
inline std::string* MarketDepthUpdate::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepthUpdate.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketDepthUpdate::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketDepthUpdate::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepthUpdate::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketDepthUpdate.market_id)
}
inline void MarketDepthUpdate::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketDepthUpdate.market_id)
}
inline void MarketDepthUpdate::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketDepthUpdate.market_id)
}
inline std::string* MarketDepthUpdate::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepthUpdate::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.MarketDepthUpdate.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepthUpdate::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketDepthUpdate.market_id)
}

// repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
inline int MarketDepthUpdate::_internal_buy_size() const {
  return buy_.size();
}
inline int MarketDepthUpdate::buy_size() const {
  return _internal_buy_size();
}
inline void MarketDepthUpdate::clear_buy() {
  buy_.Clear();
}
inline ::vega::PriceLevel* MarketDepthUpdate::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepthUpdate.buy)
  return buy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepthUpdate::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepthUpdate.buy)
  return &buy_;
}
inline const ::vega::PriceLevel& MarketDepthUpdate::_internal_buy(int index) const {
  return buy_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepthUpdate::buy(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.buy)
  return _internal_buy(index);
}
inline ::vega::PriceLevel* MarketDepthUpdate::_internal_add_buy() {
  return buy_.Add();
}
inline ::vega::PriceLevel* MarketDepthUpdate::add_buy() {
  // @@protoc_insertion_point(field_add:vega.MarketDepthUpdate.buy)
  return _internal_add_buy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepthUpdate::buy() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepthUpdate.buy)
  return buy_;
}

// repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
inline int MarketDepthUpdate::_internal_sell_size() const {
  return sell_.size();
}
inline int MarketDepthUpdate::sell_size() const {
  return _internal_sell_size();
}
inline void MarketDepthUpdate::clear_sell() {
  sell_.Clear();
}
inline ::vega::PriceLevel* MarketDepthUpdate::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepthUpdate.sell)
  return sell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepthUpdate::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepthUpdate.sell)
  return &sell_;
}
inline const ::vega::PriceLevel& MarketDepthUpdate::_internal_sell(int index) const {
  return sell_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepthUpdate::sell(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.sell)
  return _internal_sell(index);
}
inline ::vega::PriceLevel* MarketDepthUpdate::_internal_add_sell() {
  return sell_.Add();
}
inline ::vega::PriceLevel* MarketDepthUpdate::add_sell() {
  // @@protoc_insertion_point(field_add:vega.MarketDepthUpdate.sell)
  return _internal_add_sell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepthUpdate::sell() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepthUpdate.sell)
  return sell_;
}

// uint64 sequence_number = 4 [json_name = "sequenceNumber"];
inline void MarketDepthUpdate::clear_sequence_number() {
  sequence_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthUpdate::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthUpdate::sequence_number() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.sequence_number)
  return _internal_sequence_number();
}
inline void MarketDepthUpdate::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  sequence_number_ = value;
}
inline void MarketDepthUpdate::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:vega.MarketDepthUpdate.sequence_number)
}

// -------------------------------------------------------------------

// Position

// string market_id = 1 [json_name = "marketId"];
inline void Position::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& Position::market_id() const {
  // @@protoc_insertion_point(field_get:vega.Position.market_id)
  return _internal_market_id();
}
inline void Position::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.Position.market_id)
}
inline std::string* Position::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.Position.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& Position::_internal_market_id() const {
  return market_id_.Get();
}
inline void Position::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Position::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Position.market_id)
}
inline void Position::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Position.market_id)
}
inline void Position::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Position.market_id)
}
inline std::string* Position::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Position::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.Position.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Position::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Position.market_id)
}

// string party_id = 2 [json_name = "partyId"];
inline void Position::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& Position::party_id() const {
  // @@protoc_insertion_point(field_get:vega.Position.party_id)
  return _internal_party_id();
}
inline void Position::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.Position.party_id)
}
inline std::string* Position::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.Position.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& Position::_internal_party_id() const {
  return party_id_.Get();
}
inline void Position::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Position::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Position.party_id)
}
inline void Position::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Position.party_id)
}
inline void Position::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Position.party_id)
}
inline std::string* Position::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Position::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.Position.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Position::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Position.party_id)
}

// int64 open_volume = 3 [json_name = "openVolume"];
inline void Position::clear_open_volume() {
  open_volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::_internal_open_volume() const {
  return open_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::open_volume() const {
  // @@protoc_insertion_point(field_get:vega.Position.open_volume)
  return _internal_open_volume();
}
inline void Position::_internal_set_open_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {

  open_volume_ = value;
}
inline void Position::set_open_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_open_volume(value);
  // @@protoc_insertion_point(field_set:vega.Position.open_volume)
}

// int64 realised_pnl = 4 [json_name = "realisedPnl"];
inline void Position::clear_realised_pnl() {
  realised_pnl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::_internal_realised_pnl() const {
  return realised_pnl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::realised_pnl() const {
  // @@protoc_insertion_point(field_get:vega.Position.realised_pnl)
  return _internal_realised_pnl();
}
inline void Position::_internal_set_realised_pnl(::PROTOBUF_NAMESPACE_ID::int64 value) {

  realised_pnl_ = value;
}
inline void Position::set_realised_pnl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_realised_pnl(value);
  // @@protoc_insertion_point(field_set:vega.Position.realised_pnl)
}

// int64 unrealised_pnl = 5 [json_name = "unrealisedPnl"];
inline void Position::clear_unrealised_pnl() {
  unrealised_pnl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::_internal_unrealised_pnl() const {
  return unrealised_pnl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::unrealised_pnl() const {
  // @@protoc_insertion_point(field_get:vega.Position.unrealised_pnl)
  return _internal_unrealised_pnl();
}
inline void Position::_internal_set_unrealised_pnl(::PROTOBUF_NAMESPACE_ID::int64 value) {

  unrealised_pnl_ = value;
}
inline void Position::set_unrealised_pnl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unrealised_pnl(value);
  // @@protoc_insertion_point(field_set:vega.Position.unrealised_pnl)
}

// uint64 average_entry_price = 6 [json_name = "averageEntryPrice"];
inline void Position::clear_average_entry_price() {
  average_entry_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Position::_internal_average_entry_price() const {
  return average_entry_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Position::average_entry_price() const {
  // @@protoc_insertion_point(field_get:vega.Position.average_entry_price)
  return _internal_average_entry_price();
}
inline void Position::_internal_set_average_entry_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  average_entry_price_ = value;
}
inline void Position::set_average_entry_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_average_entry_price(value);
  // @@protoc_insertion_point(field_set:vega.Position.average_entry_price)
}

// int64 updated_at = 7 [json_name = "updatedAt"];
inline void Position::clear_updated_at() {
  updated_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::_internal_updated_at() const {
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::updated_at() const {
  // @@protoc_insertion_point(field_get:vega.Position.updated_at)
  return _internal_updated_at();
}
inline void Position::_internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  updated_at_ = value;
}
inline void Position::set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:vega.Position.updated_at)
}

// -------------------------------------------------------------------

// PositionTrade

// int64 volume = 1 [json_name = "volume"];
inline void PositionTrade::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionTrade::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionTrade::volume() const {
  // @@protoc_insertion_point(field_get:vega.PositionTrade.volume)
  return _internal_volume();
}
inline void PositionTrade::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {

  volume_ = value;
}
inline void PositionTrade::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:vega.PositionTrade.volume)
}

// uint64 price = 2 [json_name = "price"];
inline void PositionTrade::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionTrade::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionTrade::price() const {
  // @@protoc_insertion_point(field_get:vega.PositionTrade.price)
  return _internal_price();
}
inline void PositionTrade::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void PositionTrade::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.PositionTrade.price)
}

// -------------------------------------------------------------------

// Deposit

// string id = 1 [json_name = "id"];
inline void Deposit::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Deposit::id() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.id)
  return _internal_id();
}
inline void Deposit::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.id)
}
inline std::string* Deposit::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Deposit.id)
  return _internal_mutable_id();
}
inline const std::string& Deposit::_internal_id() const {
  return id_.Get();
}
inline void Deposit::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Deposit::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.id)
}
inline void Deposit::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Deposit.id)
}
inline void Deposit::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.id)
}
inline std::string* Deposit::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Deposit::release_id() {
  // @@protoc_insertion_point(field_release:vega.Deposit.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deposit::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.id)
}

// .vega.Deposit.Status status = 2 [json_name = "status"];
inline void Deposit::clear_status() {
  status_ = 0;
}
inline ::vega::Deposit_Status Deposit::_internal_status() const {
  return static_cast< ::vega::Deposit_Status >(status_);
}
inline ::vega::Deposit_Status Deposit::status() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.status)
  return _internal_status();
}
inline void Deposit::_internal_set_status(::vega::Deposit_Status value) {

  status_ = value;
}
inline void Deposit::set_status(::vega::Deposit_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.status)
}

// string party_id = 3 [json_name = "partyId"];
inline void Deposit::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& Deposit::party_id() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.party_id)
  return _internal_party_id();
}
inline void Deposit::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.party_id)
}
inline std::string* Deposit::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.Deposit.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& Deposit::_internal_party_id() const {
  return party_id_.Get();
}
inline void Deposit::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Deposit::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.party_id)
}
inline void Deposit::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Deposit.party_id)
}
inline void Deposit::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.party_id)
}
inline std::string* Deposit::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Deposit::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.Deposit.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deposit::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.party_id)
}

// string asset = 4 [json_name = "asset"];
inline void Deposit::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& Deposit::asset() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.asset)
  return _internal_asset();
}
inline void Deposit::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.asset)
}
inline std::string* Deposit::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.Deposit.asset)
  return _internal_mutable_asset();
}
inline const std::string& Deposit::_internal_asset() const {
  return asset_.Get();
}
inline void Deposit::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Deposit::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.asset)
}
inline void Deposit::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Deposit.asset)
}
inline void Deposit::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.asset)
}
inline std::string* Deposit::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Deposit::release_asset() {
  // @@protoc_insertion_point(field_release:vega.Deposit.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deposit::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.asset)
}

// string amount = 5 [json_name = "amount"];
inline void Deposit::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Deposit::amount() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.amount)
  return _internal_amount();
}
inline void Deposit::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.amount)
}
inline std::string* Deposit::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.Deposit.amount)
  return _internal_mutable_amount();
}
inline const std::string& Deposit::_internal_amount() const {
  return amount_.Get();
}
inline void Deposit::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Deposit::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.amount)
}
inline void Deposit::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Deposit.amount)
}
inline void Deposit::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.amount)
}
inline std::string* Deposit::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Deposit::release_amount() {
  // @@protoc_insertion_point(field_release:vega.Deposit.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deposit::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.amount)
}

// string tx_hash = 6 [json_name = "txHash"];
inline void Deposit::clear_tx_hash() {
  tx_hash_.ClearToEmpty();
}
inline const std::string& Deposit::tx_hash() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.tx_hash)
  return _internal_tx_hash();
}
inline void Deposit::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.tx_hash)
}
inline std::string* Deposit::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:vega.Deposit.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& Deposit::_internal_tx_hash() const {
  return tx_hash_.Get();
}
inline void Deposit::_internal_set_tx_hash(const std::string& value) {

  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Deposit::set_tx_hash(std::string&& value) {

  tx_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.tx_hash)
}
inline void Deposit::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Deposit.tx_hash)
}
inline void Deposit::set_tx_hash(const char* value,
    size_t size) {

  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.tx_hash)
}
inline std::string* Deposit::_internal_mutable_tx_hash() {

  return tx_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Deposit::release_tx_hash() {
  // @@protoc_insertion_point(field_release:vega.Deposit.tx_hash)
  return tx_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deposit::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {

  } else {

  }
  tx_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.tx_hash)
}

// int64 credited_timestamp = 7 [json_name = "creditedTimestamp"];
inline void Deposit::clear_credited_timestamp() {
  credited_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Deposit::_internal_credited_timestamp() const {
  return credited_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Deposit::credited_timestamp() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.credited_timestamp)
  return _internal_credited_timestamp();
}
inline void Deposit::_internal_set_credited_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  credited_timestamp_ = value;
}
inline void Deposit::set_credited_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_credited_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.credited_timestamp)
}

// int64 created_timestamp = 8 [json_name = "createdTimestamp"];
inline void Deposit::clear_created_timestamp() {
  created_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Deposit::_internal_created_timestamp() const {
  return created_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Deposit::created_timestamp() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.created_timestamp)
  return _internal_created_timestamp();
}
inline void Deposit::_internal_set_created_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  created_timestamp_ = value;
}
inline void Deposit::set_created_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.created_timestamp)
}

// -------------------------------------------------------------------

// Withdrawal

// string id = 1 [json_name = "id"];
inline void Withdrawal::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Withdrawal::id() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.id)
  return _internal_id();
}
inline void Withdrawal::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.id)
}
inline std::string* Withdrawal::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.id)
  return _internal_mutable_id();
}
inline const std::string& Withdrawal::_internal_id() const {
  return id_.Get();
}
inline void Withdrawal::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Withdrawal::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.id)
}
inline void Withdrawal::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.id)
}
inline void Withdrawal::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.id)
}
inline std::string* Withdrawal::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Withdrawal::release_id() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Withdrawal::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.id)
}

// string party_id = 2 [json_name = "partyId"];
inline void Withdrawal::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& Withdrawal::party_id() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.party_id)
  return _internal_party_id();
}
inline void Withdrawal::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.party_id)
}
inline std::string* Withdrawal::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& Withdrawal::_internal_party_id() const {
  return party_id_.Get();
}
inline void Withdrawal::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Withdrawal::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.party_id)
}
inline void Withdrawal::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.party_id)
}
inline void Withdrawal::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.party_id)
}
inline std::string* Withdrawal::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Withdrawal::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Withdrawal::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.party_id)
}

// uint64 amount = 3 [json_name = "amount"];
inline void Withdrawal::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Withdrawal::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Withdrawal::amount() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.amount)
  return _internal_amount();
}
inline void Withdrawal::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void Withdrawal::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.amount)
}

// string asset = 4 [json_name = "asset"];
inline void Withdrawal::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& Withdrawal::asset() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.asset)
  return _internal_asset();
}
inline void Withdrawal::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.asset)
}
inline std::string* Withdrawal::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.asset)
  return _internal_mutable_asset();
}
inline const std::string& Withdrawal::_internal_asset() const {
  return asset_.Get();
}
inline void Withdrawal::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Withdrawal::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.asset)
}
inline void Withdrawal::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.asset)
}
inline void Withdrawal::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.asset)
}
inline std::string* Withdrawal::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Withdrawal::release_asset() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Withdrawal::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.asset)
}

// .vega.Withdrawal.Status status = 5 [json_name = "status"];
inline void Withdrawal::clear_status() {
  status_ = 0;
}
inline ::vega::Withdrawal_Status Withdrawal::_internal_status() const {
  return static_cast< ::vega::Withdrawal_Status >(status_);
}
inline ::vega::Withdrawal_Status Withdrawal::status() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.status)
  return _internal_status();
}
inline void Withdrawal::_internal_set_status(::vega::Withdrawal_Status value) {

  status_ = value;
}
inline void Withdrawal::set_status(::vega::Withdrawal_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.status)
}

// string ref = 6 [json_name = "ref"];
inline void Withdrawal::clear_ref() {
  ref_.ClearToEmpty();
}
inline const std::string& Withdrawal::ref() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.ref)
  return _internal_ref();
}
inline void Withdrawal::set_ref(const std::string& value) {
  _internal_set_ref(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.ref)
}
inline std::string* Withdrawal::mutable_ref() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.ref)
  return _internal_mutable_ref();
}
inline const std::string& Withdrawal::_internal_ref() const {
  return ref_.Get();
}
inline void Withdrawal::_internal_set_ref(const std::string& value) {

  ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Withdrawal::set_ref(std::string&& value) {

  ref_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.ref)
}
inline void Withdrawal::set_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.ref)
}
inline void Withdrawal::set_ref(const char* value,
    size_t size) {

  ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.ref)
}
inline std::string* Withdrawal::_internal_mutable_ref() {

  return ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Withdrawal::release_ref() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.ref)
  return ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Withdrawal::set_allocated_ref(std::string* ref) {
  if (ref != nullptr) {

  } else {

  }
  ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.ref)
}

// int64 expiry = 7 [json_name = "expiry"];
inline void Withdrawal::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::expiry() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.expiry)
  return _internal_expiry();
}
inline void Withdrawal::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {

  expiry_ = value;
}
inline void Withdrawal::set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.expiry)
}

// string tx_hash = 8 [json_name = "txHash"];
inline void Withdrawal::clear_tx_hash() {
  tx_hash_.ClearToEmpty();
}
inline const std::string& Withdrawal::tx_hash() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.tx_hash)
  return _internal_tx_hash();
}
inline void Withdrawal::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.tx_hash)
}
inline std::string* Withdrawal::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& Withdrawal::_internal_tx_hash() const {
  return tx_hash_.Get();
}
inline void Withdrawal::_internal_set_tx_hash(const std::string& value) {

  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Withdrawal::set_tx_hash(std::string&& value) {

  tx_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.tx_hash)
}
inline void Withdrawal::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.tx_hash)
}
inline void Withdrawal::set_tx_hash(const char* value,
    size_t size) {

  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.tx_hash)
}
inline std::string* Withdrawal::_internal_mutable_tx_hash() {

  return tx_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Withdrawal::release_tx_hash() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.tx_hash)
  return tx_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Withdrawal::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {

  } else {

  }
  tx_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.tx_hash)
}

// int64 created_timestamp = 9 [json_name = "createdTimestamp"];
inline void Withdrawal::clear_created_timestamp() {
  created_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::_internal_created_timestamp() const {
  return created_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::created_timestamp() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.created_timestamp)
  return _internal_created_timestamp();
}
inline void Withdrawal::_internal_set_created_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  created_timestamp_ = value;
}
inline void Withdrawal::set_created_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.created_timestamp)
}

// int64 withdrawn_timestamp = 10 [json_name = "withdrawnTimestamp"];
inline void Withdrawal::clear_withdrawn_timestamp() {
  withdrawn_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::_internal_withdrawn_timestamp() const {
  return withdrawn_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::withdrawn_timestamp() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.withdrawn_timestamp)
  return _internal_withdrawn_timestamp();
}
inline void Withdrawal::_internal_set_withdrawn_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  withdrawn_timestamp_ = value;
}
inline void Withdrawal::set_withdrawn_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_withdrawn_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.withdrawn_timestamp)
}

// .vega.WithdrawExt ext = 11 [json_name = "ext"];
inline bool Withdrawal::_internal_has_ext() const {
  return this != internal_default_instance() && ext_ != nullptr;
}
inline bool Withdrawal::has_ext() const {
  return _internal_has_ext();
}
inline void Withdrawal::clear_ext() {
  if (GetArena() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
}
inline const ::vega::WithdrawExt& Withdrawal::_internal_ext() const {
  const ::vega::WithdrawExt* p = ext_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::WithdrawExt&>(
      ::vega::_WithdrawExt_default_instance_);
}
inline const ::vega::WithdrawExt& Withdrawal::ext() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.ext)
  return _internal_ext();
}
inline void Withdrawal::unsafe_arena_set_allocated_ext(
    ::vega::WithdrawExt* ext) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_);
  }
  ext_ = ext;
  if (ext) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Withdrawal.ext)
}
inline ::vega::WithdrawExt* Withdrawal::release_ext() {

  ::vega::WithdrawExt* temp = ext_;
  ext_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::WithdrawExt* Withdrawal::unsafe_arena_release_ext() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.ext)

  ::vega::WithdrawExt* temp = ext_;
  ext_ = nullptr;
  return temp;
}
inline ::vega::WithdrawExt* Withdrawal::_internal_mutable_ext() {

  if (ext_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::WithdrawExt>(GetArena());
    ext_ = p;
  }
  return ext_;
}
inline ::vega::WithdrawExt* Withdrawal::mutable_ext() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.ext)
  return _internal_mutable_ext();
}
inline void Withdrawal::set_allocated_ext(::vega::WithdrawExt* ext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ext_;
  }
  if (ext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ext);
    if (message_arena != submessage_arena) {
      ext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext, submessage_arena);
    }

  } else {

  }
  ext_ = ext;
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.ext)
}

// -------------------------------------------------------------------

// WithdrawExt

// .vega.Erc20WithdrawExt erc20 = 1 [json_name = "erc20"];
inline bool WithdrawExt::_internal_has_erc20() const {
  return ext_case() == kErc20;
}
inline bool WithdrawExt::has_erc20() const {
  return _internal_has_erc20();
}
inline void WithdrawExt::set_has_erc20() {
  _oneof_case_[0] = kErc20;
}
inline void WithdrawExt::clear_erc20() {
  if (_internal_has_erc20()) {
    if (GetArena() == nullptr) {
      delete ext_.erc20_;
    }
    clear_has_ext();
  }
}
inline ::vega::Erc20WithdrawExt* WithdrawExt::release_erc20() {
  // @@protoc_insertion_point(field_release:vega.WithdrawExt.erc20)
  if (_internal_has_erc20()) {
    clear_has_ext();
      ::vega::Erc20WithdrawExt* temp = ext_.erc20_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ext_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Erc20WithdrawExt& WithdrawExt::_internal_erc20() const {
  return _internal_has_erc20()
      ? *ext_.erc20_
      : reinterpret_cast< ::vega::Erc20WithdrawExt&>(::vega::_Erc20WithdrawExt_default_instance_);
}
inline const ::vega::Erc20WithdrawExt& WithdrawExt::erc20() const {
  // @@protoc_insertion_point(field_get:vega.WithdrawExt.erc20)
  return _internal_erc20();
}
inline ::vega::Erc20WithdrawExt* WithdrawExt::unsafe_arena_release_erc20() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.WithdrawExt.erc20)
  if (_internal_has_erc20()) {
    clear_has_ext();
    ::vega::Erc20WithdrawExt* temp = ext_.erc20_;
    ext_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WithdrawExt::unsafe_arena_set_allocated_erc20(::vega::Erc20WithdrawExt* erc20) {
  clear_ext();
  if (erc20) {
    set_has_erc20();
    ext_.erc20_ = erc20;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.WithdrawExt.erc20)
}
inline ::vega::Erc20WithdrawExt* WithdrawExt::_internal_mutable_erc20() {
  if (!_internal_has_erc20()) {
    clear_ext();
    set_has_erc20();
    ext_.erc20_ = CreateMaybeMessage< ::vega::Erc20WithdrawExt >(GetArena());
  }
  return ext_.erc20_;
}
inline ::vega::Erc20WithdrawExt* WithdrawExt::mutable_erc20() {
  // @@protoc_insertion_point(field_mutable:vega.WithdrawExt.erc20)
  return _internal_mutable_erc20();
}

inline bool WithdrawExt::has_ext() const {
  return ext_case() != EXT_NOT_SET;
}
inline void WithdrawExt::clear_has_ext() {
  _oneof_case_[0] = EXT_NOT_SET;
}
inline WithdrawExt::ExtCase WithdrawExt::ext_case() const {
  return WithdrawExt::ExtCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Erc20WithdrawExt

// string receiver_address = 1 [json_name = "receiverAddress"];
inline void Erc20WithdrawExt::clear_receiver_address() {
  receiver_address_.ClearToEmpty();
}
inline const std::string& Erc20WithdrawExt::receiver_address() const {
  // @@protoc_insertion_point(field_get:vega.Erc20WithdrawExt.receiver_address)
  return _internal_receiver_address();
}
inline void Erc20WithdrawExt::set_receiver_address(const std::string& value) {
  _internal_set_receiver_address(value);
  // @@protoc_insertion_point(field_set:vega.Erc20WithdrawExt.receiver_address)
}
inline std::string* Erc20WithdrawExt::mutable_receiver_address() {
  // @@protoc_insertion_point(field_mutable:vega.Erc20WithdrawExt.receiver_address)
  return _internal_mutable_receiver_address();
}
inline const std::string& Erc20WithdrawExt::_internal_receiver_address() const {
  return receiver_address_.Get();
}
inline void Erc20WithdrawExt::_internal_set_receiver_address(const std::string& value) {

  receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Erc20WithdrawExt::set_receiver_address(std::string&& value) {

  receiver_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Erc20WithdrawExt.receiver_address)
}
inline void Erc20WithdrawExt::set_receiver_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Erc20WithdrawExt.receiver_address)
}
inline void Erc20WithdrawExt::set_receiver_address(const char* value,
    size_t size) {

  receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Erc20WithdrawExt.receiver_address)
}
inline std::string* Erc20WithdrawExt::_internal_mutable_receiver_address() {

  return receiver_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Erc20WithdrawExt::release_receiver_address() {
  // @@protoc_insertion_point(field_release:vega.Erc20WithdrawExt.receiver_address)
  return receiver_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Erc20WithdrawExt::set_allocated_receiver_address(std::string* receiver_address) {
  if (receiver_address != nullptr) {

  } else {

  }
  receiver_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Erc20WithdrawExt.receiver_address)
}

// -------------------------------------------------------------------

// Account

// string id = 1 [json_name = "id"];
inline void Account::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Account::id() const {
  // @@protoc_insertion_point(field_get:vega.Account.id)
  return _internal_id();
}
inline void Account::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Account.id)
}
inline std::string* Account::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Account.id)
  return _internal_mutable_id();
}
inline const std::string& Account::_internal_id() const {
  return id_.Get();
}
inline void Account::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.id)
}
inline void Account::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Account.id)
}
inline void Account::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Account.id)
}
inline std::string* Account::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_id() {
  // @@protoc_insertion_point(field_release:vega.Account.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Account.id)
}

// string owner = 2 [json_name = "owner"];
inline void Account::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& Account::owner() const {
  // @@protoc_insertion_point(field_get:vega.Account.owner)
  return _internal_owner();
}
inline void Account::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:vega.Account.owner)
}
inline std::string* Account::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:vega.Account.owner)
  return _internal_mutable_owner();
}
inline const std::string& Account::_internal_owner() const {
  return owner_.Get();
}
inline void Account::_internal_set_owner(const std::string& value) {

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_owner(std::string&& value) {

  owner_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.owner)
}
inline void Account::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Account.owner)
}
inline void Account::set_owner(const char* value,
    size_t size) {

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Account.owner)
}
inline std::string* Account::_internal_mutable_owner() {

  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_owner() {
  // @@protoc_insertion_point(field_release:vega.Account.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {

  } else {

  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Account.owner)
}

// uint64 balance = 3 [json_name = "balance"];
inline void Account::clear_balance() {
  balance_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Account::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Account::balance() const {
  // @@protoc_insertion_point(field_get:vega.Account.balance)
  return _internal_balance();
}
inline void Account::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  balance_ = value;
}
inline void Account::set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:vega.Account.balance)
}

// string asset = 4 [json_name = "asset"];
inline void Account::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& Account::asset() const {
  // @@protoc_insertion_point(field_get:vega.Account.asset)
  return _internal_asset();
}
inline void Account::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.Account.asset)
}
inline std::string* Account::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.Account.asset)
  return _internal_mutable_asset();
}
inline const std::string& Account::_internal_asset() const {
  return asset_.Get();
}
inline void Account::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.asset)
}
inline void Account::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Account.asset)
}
inline void Account::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Account.asset)
}
inline std::string* Account::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_asset() {
  // @@protoc_insertion_point(field_release:vega.Account.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Account.asset)
}

// string market_id = 5 [json_name = "marketId"];
inline void Account::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& Account::market_id() const {
  // @@protoc_insertion_point(field_get:vega.Account.market_id)
  return _internal_market_id();
}
inline void Account::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.Account.market_id)
}
inline std::string* Account::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.Account.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& Account::_internal_market_id() const {
  return market_id_.Get();
}
inline void Account::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.market_id)
}
inline void Account::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Account.market_id)
}
inline void Account::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Account.market_id)
}
inline std::string* Account::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.Account.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Account.market_id)
}

// .vega.AccountType type = 6 [json_name = "type"];
inline void Account::clear_type() {
  type_ = 0;
}
inline ::vega::AccountType Account::_internal_type() const {
  return static_cast< ::vega::AccountType >(type_);
}
inline ::vega::AccountType Account::type() const {
  // @@protoc_insertion_point(field_get:vega.Account.type)
  return _internal_type();
}
inline void Account::_internal_set_type(::vega::AccountType value) {

  type_ = value;
}
inline void Account::set_type(::vega::AccountType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.Account.type)
}

// -------------------------------------------------------------------

// FinancialAmount

// uint64 amount = 1 [json_name = "amount"];
inline void FinancialAmount::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FinancialAmount::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FinancialAmount::amount() const {
  // @@protoc_insertion_point(field_get:vega.FinancialAmount.amount)
  return _internal_amount();
}
inline void FinancialAmount::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void FinancialAmount::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.FinancialAmount.amount)
}

// string asset = 2 [json_name = "asset"];
inline void FinancialAmount::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& FinancialAmount::asset() const {
  // @@protoc_insertion_point(field_get:vega.FinancialAmount.asset)
  return _internal_asset();
}
inline void FinancialAmount::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.FinancialAmount.asset)
}
inline std::string* FinancialAmount::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.FinancialAmount.asset)
  return _internal_mutable_asset();
}
inline const std::string& FinancialAmount::_internal_asset() const {
  return asset_.Get();
}
inline void FinancialAmount::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FinancialAmount::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.FinancialAmount.asset)
}
inline void FinancialAmount::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.FinancialAmount.asset)
}
inline void FinancialAmount::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.FinancialAmount.asset)
}
inline std::string* FinancialAmount::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FinancialAmount::release_asset() {
  // @@protoc_insertion_point(field_release:vega.FinancialAmount.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FinancialAmount::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.FinancialAmount.asset)
}

// -------------------------------------------------------------------

// Transfer

// string owner = 1 [json_name = "owner"];
inline void Transfer::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& Transfer::owner() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.owner)
  return _internal_owner();
}
inline void Transfer::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:vega.Transfer.owner)
}
inline std::string* Transfer::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:vega.Transfer.owner)
  return _internal_mutable_owner();
}
inline const std::string& Transfer::_internal_owner() const {
  return owner_.Get();
}
inline void Transfer::_internal_set_owner(const std::string& value) {

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transfer::set_owner(std::string&& value) {

  owner_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Transfer.owner)
}
inline void Transfer::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Transfer.owner)
}
inline void Transfer::set_owner(const char* value,
    size_t size) {

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Transfer.owner)
}
inline std::string* Transfer::_internal_mutable_owner() {

  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transfer::release_owner() {
  // @@protoc_insertion_point(field_release:vega.Transfer.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {

  } else {

  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Transfer.owner)
}

// .vega.FinancialAmount amount = 2 [json_name = "amount"];
inline bool Transfer::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool Transfer::has_amount() const {
  return _internal_has_amount();
}
inline void Transfer::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::vega::FinancialAmount& Transfer::_internal_amount() const {
  const ::vega::FinancialAmount* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::FinancialAmount&>(
      ::vega::_FinancialAmount_default_instance_);
}
inline const ::vega::FinancialAmount& Transfer::amount() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.amount)
  return _internal_amount();
}
inline void Transfer::unsafe_arena_set_allocated_amount(
    ::vega::FinancialAmount* amount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Transfer.amount)
}
inline ::vega::FinancialAmount* Transfer::release_amount() {

  ::vega::FinancialAmount* temp = amount_;
  amount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::FinancialAmount* Transfer::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:vega.Transfer.amount)

  ::vega::FinancialAmount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::vega::FinancialAmount* Transfer::_internal_mutable_amount() {

  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::FinancialAmount>(GetArena());
    amount_ = p;
  }
  return amount_;
}
inline ::vega::FinancialAmount* Transfer::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.Transfer.amount)
  return _internal_mutable_amount();
}
inline void Transfer::set_allocated_amount(::vega::FinancialAmount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }

  } else {

  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:vega.Transfer.amount)
}

// .vega.TransferType type = 3 [json_name = "type"];
inline void Transfer::clear_type() {
  type_ = 0;
}
inline ::vega::TransferType Transfer::_internal_type() const {
  return static_cast< ::vega::TransferType >(type_);
}
inline ::vega::TransferType Transfer::type() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.type)
  return _internal_type();
}
inline void Transfer::_internal_set_type(::vega::TransferType value) {

  type_ = value;
}
inline void Transfer::set_type(::vega::TransferType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.Transfer.type)
}

// uint64 min_amount = 4 [json_name = "minAmount"];
inline void Transfer::clear_min_amount() {
  min_amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transfer::_internal_min_amount() const {
  return min_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transfer::min_amount() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.min_amount)
  return _internal_min_amount();
}
inline void Transfer::_internal_set_min_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  min_amount_ = value;
}
inline void Transfer::set_min_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_amount(value);
  // @@protoc_insertion_point(field_set:vega.Transfer.min_amount)
}

// -------------------------------------------------------------------

// TransferRequest

// repeated .vega.Account from_account = 1 [json_name = "fromAccount"];
inline int TransferRequest::_internal_from_account_size() const {
  return from_account_.size();
}
inline int TransferRequest::from_account_size() const {
  return _internal_from_account_size();
}
inline void TransferRequest::clear_from_account() {
  from_account_.Clear();
}
inline ::vega::Account* TransferRequest::mutable_from_account(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.from_account)
  return from_account_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
TransferRequest::mutable_from_account() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferRequest.from_account)
  return &from_account_;
}
inline const ::vega::Account& TransferRequest::_internal_from_account(int index) const {
  return from_account_.Get(index);
}
inline const ::vega::Account& TransferRequest::from_account(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.from_account)
  return _internal_from_account(index);
}
inline ::vega::Account* TransferRequest::_internal_add_from_account() {
  return from_account_.Add();
}
inline ::vega::Account* TransferRequest::add_from_account() {
  // @@protoc_insertion_point(field_add:vega.TransferRequest.from_account)
  return _internal_add_from_account();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
TransferRequest::from_account() const {
  // @@protoc_insertion_point(field_list:vega.TransferRequest.from_account)
  return from_account_;
}

// repeated .vega.Account to_account = 2 [json_name = "toAccount"];
inline int TransferRequest::_internal_to_account_size() const {
  return to_account_.size();
}
inline int TransferRequest::to_account_size() const {
  return _internal_to_account_size();
}
inline void TransferRequest::clear_to_account() {
  to_account_.Clear();
}
inline ::vega::Account* TransferRequest::mutable_to_account(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.to_account)
  return to_account_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
TransferRequest::mutable_to_account() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferRequest.to_account)
  return &to_account_;
}
inline const ::vega::Account& TransferRequest::_internal_to_account(int index) const {
  return to_account_.Get(index);
}
inline const ::vega::Account& TransferRequest::to_account(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.to_account)
  return _internal_to_account(index);
}
inline ::vega::Account* TransferRequest::_internal_add_to_account() {
  return to_account_.Add();
}
inline ::vega::Account* TransferRequest::add_to_account() {
  // @@protoc_insertion_point(field_add:vega.TransferRequest.to_account)
  return _internal_add_to_account();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
TransferRequest::to_account() const {
  // @@protoc_insertion_point(field_list:vega.TransferRequest.to_account)
  return to_account_;
}

// uint64 amount = 3 [json_name = "amount"];
inline void TransferRequest::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::amount() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.amount)
  return _internal_amount();
}
inline void TransferRequest::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void TransferRequest::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.TransferRequest.amount)
}

// uint64 min_amount = 4 [json_name = "minAmount"];
inline void TransferRequest::clear_min_amount() {
  min_amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::_internal_min_amount() const {
  return min_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::min_amount() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.min_amount)
  return _internal_min_amount();
}
inline void TransferRequest::_internal_set_min_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  min_amount_ = value;
}
inline void TransferRequest::set_min_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_amount(value);
  // @@protoc_insertion_point(field_set:vega.TransferRequest.min_amount)
}

// string asset = 5 [json_name = "asset"];
inline void TransferRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& TransferRequest::asset() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.asset)
  return _internal_asset();
}
inline void TransferRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.TransferRequest.asset)
}
inline std::string* TransferRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& TransferRequest::_internal_asset() const {
  return asset_.Get();
}
inline void TransferRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.TransferRequest.asset)
}
inline void TransferRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.TransferRequest.asset)
}
inline void TransferRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.TransferRequest.asset)
}
inline std::string* TransferRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferRequest::release_asset() {
  // @@protoc_insertion_point(field_release:vega.TransferRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.TransferRequest.asset)
}

// string reference = 6 [json_name = "reference"];
inline void TransferRequest::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& TransferRequest::reference() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.reference)
  return _internal_reference();
}
inline void TransferRequest::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.TransferRequest.reference)
}
inline std::string* TransferRequest::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.reference)
  return _internal_mutable_reference();
}
inline const std::string& TransferRequest::_internal_reference() const {
  return reference_.Get();
}
inline void TransferRequest::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferRequest::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.TransferRequest.reference)
}
inline void TransferRequest::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.TransferRequest.reference)
}
inline void TransferRequest::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.TransferRequest.reference)
}
inline std::string* TransferRequest::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferRequest::release_reference() {
  // @@protoc_insertion_point(field_release:vega.TransferRequest.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferRequest::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.TransferRequest.reference)
}

// -------------------------------------------------------------------

// LedgerEntry

// string from_account = 1 [json_name = "fromAccount"];
inline void LedgerEntry::clear_from_account() {
  from_account_.ClearToEmpty();
}
inline const std::string& LedgerEntry::from_account() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.from_account)
  return _internal_from_account();
}
inline void LedgerEntry::set_from_account(const std::string& value) {
  _internal_set_from_account(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.from_account)
}
inline std::string* LedgerEntry::mutable_from_account() {
  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.from_account)
  return _internal_mutable_from_account();
}
inline const std::string& LedgerEntry::_internal_from_account() const {
  return from_account_.Get();
}
inline void LedgerEntry::_internal_set_from_account(const std::string& value) {

  from_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LedgerEntry::set_from_account(std::string&& value) {

  from_account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.from_account)
}
inline void LedgerEntry::set_from_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  from_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.from_account)
}
inline void LedgerEntry::set_from_account(const char* value,
    size_t size) {

  from_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.from_account)
}
inline std::string* LedgerEntry::_internal_mutable_from_account() {

  return from_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LedgerEntry::release_from_account() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.from_account)
  return from_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LedgerEntry::set_allocated_from_account(std::string* from_account) {
  if (from_account != nullptr) {

  } else {

  }
  from_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.from_account)
}

// string to_account = 2 [json_name = "toAccount"];
inline void LedgerEntry::clear_to_account() {
  to_account_.ClearToEmpty();
}
inline const std::string& LedgerEntry::to_account() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.to_account)
  return _internal_to_account();
}
inline void LedgerEntry::set_to_account(const std::string& value) {
  _internal_set_to_account(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.to_account)
}
inline std::string* LedgerEntry::mutable_to_account() {
  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.to_account)
  return _internal_mutable_to_account();
}
inline const std::string& LedgerEntry::_internal_to_account() const {
  return to_account_.Get();
}
inline void LedgerEntry::_internal_set_to_account(const std::string& value) {

  to_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LedgerEntry::set_to_account(std::string&& value) {

  to_account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.to_account)
}
inline void LedgerEntry::set_to_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  to_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.to_account)
}
inline void LedgerEntry::set_to_account(const char* value,
    size_t size) {

  to_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.to_account)
}
inline std::string* LedgerEntry::_internal_mutable_to_account() {

  return to_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LedgerEntry::release_to_account() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.to_account)
  return to_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LedgerEntry::set_allocated_to_account(std::string* to_account) {
  if (to_account != nullptr) {

  } else {

  }
  to_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.to_account)
}

// uint64 amount = 3 [json_name = "amount"];
inline void LedgerEntry::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LedgerEntry::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LedgerEntry::amount() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.amount)
  return _internal_amount();
}
inline void LedgerEntry::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void LedgerEntry::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.amount)
}

// string reference = 4 [json_name = "reference"];
inline void LedgerEntry::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& LedgerEntry::reference() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.reference)
  return _internal_reference();
}
inline void LedgerEntry::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.reference)
}
inline std::string* LedgerEntry::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.reference)
  return _internal_mutable_reference();
}
inline const std::string& LedgerEntry::_internal_reference() const {
  return reference_.Get();
}
inline void LedgerEntry::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LedgerEntry::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.reference)
}
inline void LedgerEntry::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.reference)
}
inline void LedgerEntry::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.reference)
}
inline std::string* LedgerEntry::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LedgerEntry::release_reference() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LedgerEntry::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.reference)
}

// string type = 5 [json_name = "type"];
inline void LedgerEntry::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& LedgerEntry::type() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.type)
  return _internal_type();
}
inline void LedgerEntry::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.type)
}
inline std::string* LedgerEntry::mutable_type() {
  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.type)
  return _internal_mutable_type();
}
inline const std::string& LedgerEntry::_internal_type() const {
  return type_.Get();
}
inline void LedgerEntry::_internal_set_type(const std::string& value) {

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LedgerEntry::set_type(std::string&& value) {

  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.type)
}
inline void LedgerEntry::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.type)
}
inline void LedgerEntry::set_type(const char* value,
    size_t size) {

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.type)
}
inline std::string* LedgerEntry::_internal_mutable_type() {

  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LedgerEntry::release_type() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LedgerEntry::set_allocated_type(std::string* type) {
  if (type != nullptr) {

  } else {

  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.type)
}

// int64 timestamp = 6 [json_name = "timestamp"];
inline void LedgerEntry::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LedgerEntry::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LedgerEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.timestamp)
  return _internal_timestamp();
}
inline void LedgerEntry::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void LedgerEntry::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.timestamp)
}

// -------------------------------------------------------------------

// TransferBalance

// .vega.Account account = 1 [json_name = "account"];
inline bool TransferBalance::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool TransferBalance::has_account() const {
  return _internal_has_account();
}
inline void TransferBalance::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::vega::Account& TransferBalance::_internal_account() const {
  const ::vega::Account* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Account&>(
      ::vega::_Account_default_instance_);
}
inline const ::vega::Account& TransferBalance::account() const {
  // @@protoc_insertion_point(field_get:vega.TransferBalance.account)
  return _internal_account();
}
inline void TransferBalance::unsafe_arena_set_allocated_account(
    ::vega::Account* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.TransferBalance.account)
}
inline ::vega::Account* TransferBalance::release_account() {

  ::vega::Account* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Account* TransferBalance::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:vega.TransferBalance.account)

  ::vega::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::vega::Account* TransferBalance::_internal_mutable_account() {

  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Account>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::vega::Account* TransferBalance::mutable_account() {
  // @@protoc_insertion_point(field_mutable:vega.TransferBalance.account)
  return _internal_mutable_account();
}
inline void TransferBalance::set_allocated_account(::vega::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }

  } else {

  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:vega.TransferBalance.account)
}

// uint64 balance = 2 [json_name = "balance"];
inline void TransferBalance::clear_balance() {
  balance_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferBalance::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferBalance::balance() const {
  // @@protoc_insertion_point(field_get:vega.TransferBalance.balance)
  return _internal_balance();
}
inline void TransferBalance::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  balance_ = value;
}
inline void TransferBalance::set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:vega.TransferBalance.balance)
}

// -------------------------------------------------------------------

// TransferResponse

// repeated .vega.LedgerEntry transfers = 1 [json_name = "transfers"];
inline int TransferResponse::_internal_transfers_size() const {
  return transfers_.size();
}
inline int TransferResponse::transfers_size() const {
  return _internal_transfers_size();
}
inline void TransferResponse::clear_transfers() {
  transfers_.Clear();
}
inline ::vega::LedgerEntry* TransferResponse::mutable_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferResponse.transfers)
  return transfers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LedgerEntry >*
TransferResponse::mutable_transfers() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferResponse.transfers)
  return &transfers_;
}
inline const ::vega::LedgerEntry& TransferResponse::_internal_transfers(int index) const {
  return transfers_.Get(index);
}
inline const ::vega::LedgerEntry& TransferResponse::transfers(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferResponse.transfers)
  return _internal_transfers(index);
}
inline ::vega::LedgerEntry* TransferResponse::_internal_add_transfers() {
  return transfers_.Add();
}
inline ::vega::LedgerEntry* TransferResponse::add_transfers() {
  // @@protoc_insertion_point(field_add:vega.TransferResponse.transfers)
  return _internal_add_transfers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LedgerEntry >&
TransferResponse::transfers() const {
  // @@protoc_insertion_point(field_list:vega.TransferResponse.transfers)
  return transfers_;
}

// repeated .vega.TransferBalance balances = 2 [json_name = "balances"];
inline int TransferResponse::_internal_balances_size() const {
  return balances_.size();
}
inline int TransferResponse::balances_size() const {
  return _internal_balances_size();
}
inline void TransferResponse::clear_balances() {
  balances_.Clear();
}
inline ::vega::TransferBalance* TransferResponse::mutable_balances(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferResponse.balances)
  return balances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferBalance >*
TransferResponse::mutable_balances() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferResponse.balances)
  return &balances_;
}
inline const ::vega::TransferBalance& TransferResponse::_internal_balances(int index) const {
  return balances_.Get(index);
}
inline const ::vega::TransferBalance& TransferResponse::balances(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferResponse.balances)
  return _internal_balances(index);
}
inline ::vega::TransferBalance* TransferResponse::_internal_add_balances() {
  return balances_.Add();
}
inline ::vega::TransferBalance* TransferResponse::add_balances() {
  // @@protoc_insertion_point(field_add:vega.TransferResponse.balances)
  return _internal_add_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferBalance >&
TransferResponse::balances() const {
  // @@protoc_insertion_point(field_list:vega.TransferResponse.balances)
  return balances_;
}

// -------------------------------------------------------------------

// MarginLevels

// uint64 maintenance_margin = 1 [json_name = "maintenanceMargin"];
inline void MarginLevels::clear_maintenance_margin() {
  maintenance_margin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::_internal_maintenance_margin() const {
  return maintenance_margin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::maintenance_margin() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.maintenance_margin)
  return _internal_maintenance_margin();
}
inline void MarginLevels::_internal_set_maintenance_margin(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  maintenance_margin_ = value;
}
inline void MarginLevels::set_maintenance_margin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maintenance_margin(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.maintenance_margin)
}

// uint64 search_level = 2 [json_name = "searchLevel"];
inline void MarginLevels::clear_search_level() {
  search_level_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::_internal_search_level() const {
  return search_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::search_level() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.search_level)
  return _internal_search_level();
}
inline void MarginLevels::_internal_set_search_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  search_level_ = value;
}
inline void MarginLevels::set_search_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_search_level(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.search_level)
}

// uint64 initial_margin = 3 [json_name = "initialMargin"];
inline void MarginLevels::clear_initial_margin() {
  initial_margin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::_internal_initial_margin() const {
  return initial_margin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::initial_margin() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.initial_margin)
  return _internal_initial_margin();
}
inline void MarginLevels::_internal_set_initial_margin(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  initial_margin_ = value;
}
inline void MarginLevels::set_initial_margin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_initial_margin(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.initial_margin)
}

// uint64 collateral_release_level = 4 [json_name = "collateralReleaseLevel"];
inline void MarginLevels::clear_collateral_release_level() {
  collateral_release_level_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::_internal_collateral_release_level() const {
  return collateral_release_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::collateral_release_level() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.collateral_release_level)
  return _internal_collateral_release_level();
}
inline void MarginLevels::_internal_set_collateral_release_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  collateral_release_level_ = value;
}
inline void MarginLevels::set_collateral_release_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_collateral_release_level(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.collateral_release_level)
}

// string party_id = 5 [json_name = "partyId"];
inline void MarginLevels::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& MarginLevels::party_id() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.party_id)
  return _internal_party_id();
}
inline void MarginLevels::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.party_id)
}
inline std::string* MarginLevels::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.MarginLevels.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& MarginLevels::_internal_party_id() const {
  return party_id_.Get();
}
inline void MarginLevels::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevels::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarginLevels.party_id)
}
inline void MarginLevels::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarginLevels.party_id)
}
inline void MarginLevels::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarginLevels.party_id)
}
inline std::string* MarginLevels::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevels::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.MarginLevels.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevels::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarginLevels.party_id)
}

// string market_id = 6 [json_name = "marketId"];
inline void MarginLevels::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarginLevels::market_id() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.market_id)
  return _internal_market_id();
}
inline void MarginLevels::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.market_id)
}
inline std::string* MarginLevels::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.MarginLevels.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarginLevels::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarginLevels::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevels::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarginLevels.market_id)
}
inline void MarginLevels::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarginLevels.market_id)
}
inline void MarginLevels::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarginLevels.market_id)
}
inline std::string* MarginLevels::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevels::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.MarginLevels.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevels::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarginLevels.market_id)
}

// string asset = 7 [json_name = "asset"];
inline void MarginLevels::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& MarginLevels::asset() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.asset)
  return _internal_asset();
}
inline void MarginLevels::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.asset)
}
inline std::string* MarginLevels::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.MarginLevels.asset)
  return _internal_mutable_asset();
}
inline const std::string& MarginLevels::_internal_asset() const {
  return asset_.Get();
}
inline void MarginLevels::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevels::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarginLevels.asset)
}
inline void MarginLevels::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarginLevels.asset)
}
inline void MarginLevels::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarginLevels.asset)
}
inline std::string* MarginLevels::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevels::release_asset() {
  // @@protoc_insertion_point(field_release:vega.MarginLevels.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevels::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarginLevels.asset)
}

// int64 timestamp = 8 [json_name = "timestamp"];
inline void MarginLevels::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarginLevels::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarginLevels::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.timestamp)
  return _internal_timestamp();
}
inline void MarginLevels::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void MarginLevels::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.timestamp)
}

// -------------------------------------------------------------------

// MarketData

// uint64 mark_price = 1 [json_name = "markPrice"];
inline void MarketData::clear_mark_price() {
  mark_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_mark_price() const {
  return mark_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::mark_price() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.mark_price)
  return _internal_mark_price();
}
inline void MarketData::_internal_set_mark_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  mark_price_ = value;
}
inline void MarketData::set_mark_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mark_price(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.mark_price)
}

// uint64 best_bid_price = 2 [json_name = "bestBidPrice"];
inline void MarketData::clear_best_bid_price() {
  best_bid_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_best_bid_price() const {
  return best_bid_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::best_bid_price() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.best_bid_price)
  return _internal_best_bid_price();
}
inline void MarketData::_internal_set_best_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  best_bid_price_ = value;
}
inline void MarketData::set_best_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_best_bid_price(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.best_bid_price)
}

// uint64 best_bid_volume = 3 [json_name = "bestBidVolume"];
inline void MarketData::clear_best_bid_volume() {
  best_bid_volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_best_bid_volume() const {
  return best_bid_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::best_bid_volume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.best_bid_volume)
  return _internal_best_bid_volume();
}
inline void MarketData::_internal_set_best_bid_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  best_bid_volume_ = value;
}
inline void MarketData::set_best_bid_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_best_bid_volume(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.best_bid_volume)
}

// uint64 best_offer_price = 4 [json_name = "bestOfferPrice"];
inline void MarketData::clear_best_offer_price() {
  best_offer_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_best_offer_price() const {
  return best_offer_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::best_offer_price() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.best_offer_price)
  return _internal_best_offer_price();
}
inline void MarketData::_internal_set_best_offer_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  best_offer_price_ = value;
}
inline void MarketData::set_best_offer_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_best_offer_price(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.best_offer_price)
}

// uint64 best_offer_volume = 5 [json_name = "bestOfferVolume"];
inline void MarketData::clear_best_offer_volume() {
  best_offer_volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_best_offer_volume() const {
  return best_offer_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::best_offer_volume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.best_offer_volume)
  return _internal_best_offer_volume();
}
inline void MarketData::_internal_set_best_offer_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  best_offer_volume_ = value;
}
inline void MarketData::set_best_offer_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_best_offer_volume(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.best_offer_volume)
}

// uint64 best_static_bid_price = 6 [json_name = "bestStaticBidPrice"];
inline void MarketData::clear_best_static_bid_price() {
  best_static_bid_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_best_static_bid_price() const {
  return best_static_bid_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::best_static_bid_price() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.best_static_bid_price)
  return _internal_best_static_bid_price();
}
inline void MarketData::_internal_set_best_static_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  best_static_bid_price_ = value;
}
inline void MarketData::set_best_static_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_best_static_bid_price(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.best_static_bid_price)
}

// uint64 best_static_bid_volume = 7 [json_name = "bestStaticBidVolume"];
inline void MarketData::clear_best_static_bid_volume() {
  best_static_bid_volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_best_static_bid_volume() const {
  return best_static_bid_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::best_static_bid_volume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.best_static_bid_volume)
  return _internal_best_static_bid_volume();
}
inline void MarketData::_internal_set_best_static_bid_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  best_static_bid_volume_ = value;
}
inline void MarketData::set_best_static_bid_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_best_static_bid_volume(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.best_static_bid_volume)
}

// uint64 best_static_offer_price = 8 [json_name = "bestStaticOfferPrice"];
inline void MarketData::clear_best_static_offer_price() {
  best_static_offer_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_best_static_offer_price() const {
  return best_static_offer_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::best_static_offer_price() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.best_static_offer_price)
  return _internal_best_static_offer_price();
}
inline void MarketData::_internal_set_best_static_offer_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  best_static_offer_price_ = value;
}
inline void MarketData::set_best_static_offer_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_best_static_offer_price(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.best_static_offer_price)
}

// uint64 best_static_offer_volume = 9 [json_name = "bestStaticOfferVolume"];
inline void MarketData::clear_best_static_offer_volume() {
  best_static_offer_volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_best_static_offer_volume() const {
  return best_static_offer_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::best_static_offer_volume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.best_static_offer_volume)
  return _internal_best_static_offer_volume();
}
inline void MarketData::_internal_set_best_static_offer_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  best_static_offer_volume_ = value;
}
inline void MarketData::set_best_static_offer_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_best_static_offer_volume(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.best_static_offer_volume)
}

// uint64 mid_price = 10 [json_name = "midPrice"];
inline void MarketData::clear_mid_price() {
  mid_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_mid_price() const {
  return mid_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::mid_price() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.mid_price)
  return _internal_mid_price();
}
inline void MarketData::_internal_set_mid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  mid_price_ = value;
}
inline void MarketData::set_mid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mid_price(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.mid_price)
}

// uint64 static_mid_price = 11 [json_name = "staticMidPrice"];
inline void MarketData::clear_static_mid_price() {
  static_mid_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_static_mid_price() const {
  return static_mid_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::static_mid_price() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.static_mid_price)
  return _internal_static_mid_price();
}
inline void MarketData::_internal_set_static_mid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  static_mid_price_ = value;
}
inline void MarketData::set_static_mid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_static_mid_price(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.static_mid_price)
}

// string market = 12 [json_name = "market"];
inline void MarketData::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& MarketData::market() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.market)
  return _internal_market();
}
inline void MarketData::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.market)
}
inline std::string* MarketData::mutable_market() {
  // @@protoc_insertion_point(field_mutable:vega.MarketData.market)
  return _internal_mutable_market();
}
inline const std::string& MarketData::_internal_market() const {
  return market_.Get();
}
inline void MarketData::_internal_set_market(const std::string& value) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketData::set_market(std::string&& value) {

  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketData.market)
}
inline void MarketData::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketData.market)
}
inline void MarketData::set_market(const char* value,
    size_t size) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketData.market)
}
inline std::string* MarketData::_internal_mutable_market() {

  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketData::release_market() {
  // @@protoc_insertion_point(field_release:vega.MarketData.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketData::set_allocated_market(std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketData.market)
}

// int64 timestamp = 13 [json_name = "timestamp"];
inline void MarketData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.timestamp)
  return _internal_timestamp();
}
inline void MarketData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void MarketData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.timestamp)
}

// uint64 open_interest = 14 [json_name = "openInterest"];
inline void MarketData::clear_open_interest() {
  open_interest_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_open_interest() const {
  return open_interest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::open_interest() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.open_interest)
  return _internal_open_interest();
}
inline void MarketData::_internal_set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  open_interest_ = value;
}
inline void MarketData::set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.open_interest)
}

// int64 auction_end = 15 [json_name = "auctionEnd"];
inline void MarketData::clear_auction_end() {
  auction_end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::_internal_auction_end() const {
  return auction_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::auction_end() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.auction_end)
  return _internal_auction_end();
}
inline void MarketData::_internal_set_auction_end(::PROTOBUF_NAMESPACE_ID::int64 value) {

  auction_end_ = value;
}
inline void MarketData::set_auction_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auction_end(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.auction_end)
}

// int64 auction_start = 16 [json_name = "auctionStart"];
inline void MarketData::clear_auction_start() {
  auction_start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::_internal_auction_start() const {
  return auction_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::auction_start() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.auction_start)
  return _internal_auction_start();
}
inline void MarketData::_internal_set_auction_start(::PROTOBUF_NAMESPACE_ID::int64 value) {

  auction_start_ = value;
}
inline void MarketData::set_auction_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auction_start(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.auction_start)
}

// uint64 indicative_price = 17 [json_name = "indicativePrice"];
inline void MarketData::clear_indicative_price() {
  indicative_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_indicative_price() const {
  return indicative_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::indicative_price() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.indicative_price)
  return _internal_indicative_price();
}
inline void MarketData::_internal_set_indicative_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  indicative_price_ = value;
}
inline void MarketData::set_indicative_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_indicative_price(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.indicative_price)
}

// uint64 indicative_volume = 18 [json_name = "indicativeVolume"];
inline void MarketData::clear_indicative_volume() {
  indicative_volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_indicative_volume() const {
  return indicative_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::indicative_volume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.indicative_volume)
  return _internal_indicative_volume();
}
inline void MarketData::_internal_set_indicative_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  indicative_volume_ = value;
}
inline void MarketData::set_indicative_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_indicative_volume(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.indicative_volume)
}

// .vega.Market.TradingMode market_trading_mode = 19 [json_name = "marketTradingMode"];
inline void MarketData::clear_market_trading_mode() {
  market_trading_mode_ = 0;
}
inline ::vega::Market_TradingMode MarketData::_internal_market_trading_mode() const {
  return static_cast< ::vega::Market_TradingMode >(market_trading_mode_);
}
inline ::vega::Market_TradingMode MarketData::market_trading_mode() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.market_trading_mode)
  return _internal_market_trading_mode();
}
inline void MarketData::_internal_set_market_trading_mode(::vega::Market_TradingMode value) {

  market_trading_mode_ = value;
}
inline void MarketData::set_market_trading_mode(::vega::Market_TradingMode value) {
  _internal_set_market_trading_mode(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.market_trading_mode)
}

// .vega.AuctionTrigger trigger = 20 [json_name = "trigger"];
inline void MarketData::clear_trigger() {
  trigger_ = 0;
}
inline ::vega::AuctionTrigger MarketData::_internal_trigger() const {
  return static_cast< ::vega::AuctionTrigger >(trigger_);
}
inline ::vega::AuctionTrigger MarketData::trigger() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.trigger)
  return _internal_trigger();
}
inline void MarketData::_internal_set_trigger(::vega::AuctionTrigger value) {

  trigger_ = value;
}
inline void MarketData::set_trigger(::vega::AuctionTrigger value) {
  _internal_set_trigger(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.trigger)
}

// .vega.AuctionTrigger extension_trigger = 21 [json_name = "extensionTrigger"];
inline void MarketData::clear_extension_trigger() {
  extension_trigger_ = 0;
}
inline ::vega::AuctionTrigger MarketData::_internal_extension_trigger() const {
  return static_cast< ::vega::AuctionTrigger >(extension_trigger_);
}
inline ::vega::AuctionTrigger MarketData::extension_trigger() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.extension_trigger)
  return _internal_extension_trigger();
}
inline void MarketData::_internal_set_extension_trigger(::vega::AuctionTrigger value) {

  extension_trigger_ = value;
}
inline void MarketData::set_extension_trigger(::vega::AuctionTrigger value) {
  _internal_set_extension_trigger(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.extension_trigger)
}

// string target_stake = 22 [json_name = "targetStake"];
inline void MarketData::clear_target_stake() {
  target_stake_.ClearToEmpty();
}
inline const std::string& MarketData::target_stake() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.target_stake)
  return _internal_target_stake();
}
inline void MarketData::set_target_stake(const std::string& value) {
  _internal_set_target_stake(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.target_stake)
}
inline std::string* MarketData::mutable_target_stake() {
  // @@protoc_insertion_point(field_mutable:vega.MarketData.target_stake)
  return _internal_mutable_target_stake();
}
inline const std::string& MarketData::_internal_target_stake() const {
  return target_stake_.Get();
}
inline void MarketData::_internal_set_target_stake(const std::string& value) {

  target_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketData::set_target_stake(std::string&& value) {

  target_stake_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketData.target_stake)
}
inline void MarketData::set_target_stake(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  target_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketData.target_stake)
}
inline void MarketData::set_target_stake(const char* value,
    size_t size) {

  target_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketData.target_stake)
}
inline std::string* MarketData::_internal_mutable_target_stake() {

  return target_stake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketData::release_target_stake() {
  // @@protoc_insertion_point(field_release:vega.MarketData.target_stake)
  return target_stake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketData::set_allocated_target_stake(std::string* target_stake) {
  if (target_stake != nullptr) {

  } else {

  }
  target_stake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_stake,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketData.target_stake)
}

// string supplied_stake = 23 [json_name = "suppliedStake"];
inline void MarketData::clear_supplied_stake() {
  supplied_stake_.ClearToEmpty();
}
inline const std::string& MarketData::supplied_stake() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.supplied_stake)
  return _internal_supplied_stake();
}
inline void MarketData::set_supplied_stake(const std::string& value) {
  _internal_set_supplied_stake(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.supplied_stake)
}
inline std::string* MarketData::mutable_supplied_stake() {
  // @@protoc_insertion_point(field_mutable:vega.MarketData.supplied_stake)
  return _internal_mutable_supplied_stake();
}
inline const std::string& MarketData::_internal_supplied_stake() const {
  return supplied_stake_.Get();
}
inline void MarketData::_internal_set_supplied_stake(const std::string& value) {

  supplied_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketData::set_supplied_stake(std::string&& value) {

  supplied_stake_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketData.supplied_stake)
}
inline void MarketData::set_supplied_stake(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  supplied_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketData.supplied_stake)
}
inline void MarketData::set_supplied_stake(const char* value,
    size_t size) {

  supplied_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketData.supplied_stake)
}
inline std::string* MarketData::_internal_mutable_supplied_stake() {

  return supplied_stake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketData::release_supplied_stake() {
  // @@protoc_insertion_point(field_release:vega.MarketData.supplied_stake)
  return supplied_stake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketData::set_allocated_supplied_stake(std::string* supplied_stake) {
  if (supplied_stake != nullptr) {

  } else {

  }
  supplied_stake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supplied_stake,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketData.supplied_stake)
}

// repeated .vega.PriceMonitoringBounds price_monitoring_bounds = 24 [json_name = "priceMonitoringBounds"];
inline int MarketData::_internal_price_monitoring_bounds_size() const {
  return price_monitoring_bounds_.size();
}
inline int MarketData::price_monitoring_bounds_size() const {
  return _internal_price_monitoring_bounds_size();
}
inline void MarketData::clear_price_monitoring_bounds() {
  price_monitoring_bounds_.Clear();
}
inline ::vega::PriceMonitoringBounds* MarketData::mutable_price_monitoring_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketData.price_monitoring_bounds)
  return price_monitoring_bounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceMonitoringBounds >*
MarketData::mutable_price_monitoring_bounds() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketData.price_monitoring_bounds)
  return &price_monitoring_bounds_;
}
inline const ::vega::PriceMonitoringBounds& MarketData::_internal_price_monitoring_bounds(int index) const {
  return price_monitoring_bounds_.Get(index);
}
inline const ::vega::PriceMonitoringBounds& MarketData::price_monitoring_bounds(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketData.price_monitoring_bounds)
  return _internal_price_monitoring_bounds(index);
}
inline ::vega::PriceMonitoringBounds* MarketData::_internal_add_price_monitoring_bounds() {
  return price_monitoring_bounds_.Add();
}
inline ::vega::PriceMonitoringBounds* MarketData::add_price_monitoring_bounds() {
  // @@protoc_insertion_point(field_add:vega.MarketData.price_monitoring_bounds)
  return _internal_add_price_monitoring_bounds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceMonitoringBounds >&
MarketData::price_monitoring_bounds() const {
  // @@protoc_insertion_point(field_list:vega.MarketData.price_monitoring_bounds)
  return price_monitoring_bounds_;
}

// string market_value_proxy = 25 [json_name = "marketValueProxy"];
inline void MarketData::clear_market_value_proxy() {
  market_value_proxy_.ClearToEmpty();
}
inline const std::string& MarketData::market_value_proxy() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.market_value_proxy)
  return _internal_market_value_proxy();
}
inline void MarketData::set_market_value_proxy(const std::string& value) {
  _internal_set_market_value_proxy(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.market_value_proxy)
}
inline std::string* MarketData::mutable_market_value_proxy() {
  // @@protoc_insertion_point(field_mutable:vega.MarketData.market_value_proxy)
  return _internal_mutable_market_value_proxy();
}
inline const std::string& MarketData::_internal_market_value_proxy() const {
  return market_value_proxy_.Get();
}
inline void MarketData::_internal_set_market_value_proxy(const std::string& value) {

  market_value_proxy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketData::set_market_value_proxy(std::string&& value) {

  market_value_proxy_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketData.market_value_proxy)
}
inline void MarketData::set_market_value_proxy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_value_proxy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketData.market_value_proxy)
}
inline void MarketData::set_market_value_proxy(const char* value,
    size_t size) {

  market_value_proxy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketData.market_value_proxy)
}
inline std::string* MarketData::_internal_mutable_market_value_proxy() {

  return market_value_proxy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketData::release_market_value_proxy() {
  // @@protoc_insertion_point(field_release:vega.MarketData.market_value_proxy)
  return market_value_proxy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketData::set_allocated_market_value_proxy(std::string* market_value_proxy) {
  if (market_value_proxy != nullptr) {

  } else {

  }
  market_value_proxy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_value_proxy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketData.market_value_proxy)
}

// repeated .vega.LiquidityProviderFeeShare liquidity_provider_fee_share = 26 [json_name = "liquidityProviderFeeShare"];
inline int MarketData::_internal_liquidity_provider_fee_share_size() const {
  return liquidity_provider_fee_share_.size();
}
inline int MarketData::liquidity_provider_fee_share_size() const {
  return _internal_liquidity_provider_fee_share_size();
}
inline void MarketData::clear_liquidity_provider_fee_share() {
  liquidity_provider_fee_share_.Clear();
}
inline ::vega::LiquidityProviderFeeShare* MarketData::mutable_liquidity_provider_fee_share(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketData.liquidity_provider_fee_share)
  return liquidity_provider_fee_share_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProviderFeeShare >*
MarketData::mutable_liquidity_provider_fee_share() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketData.liquidity_provider_fee_share)
  return &liquidity_provider_fee_share_;
}
inline const ::vega::LiquidityProviderFeeShare& MarketData::_internal_liquidity_provider_fee_share(int index) const {
  return liquidity_provider_fee_share_.Get(index);
}
inline const ::vega::LiquidityProviderFeeShare& MarketData::liquidity_provider_fee_share(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketData.liquidity_provider_fee_share)
  return _internal_liquidity_provider_fee_share(index);
}
inline ::vega::LiquidityProviderFeeShare* MarketData::_internal_add_liquidity_provider_fee_share() {
  return liquidity_provider_fee_share_.Add();
}
inline ::vega::LiquidityProviderFeeShare* MarketData::add_liquidity_provider_fee_share() {
  // @@protoc_insertion_point(field_add:vega.MarketData.liquidity_provider_fee_share)
  return _internal_add_liquidity_provider_fee_share();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProviderFeeShare >&
MarketData::liquidity_provider_fee_share() const {
  // @@protoc_insertion_point(field_list:vega.MarketData.liquidity_provider_fee_share)
  return liquidity_provider_fee_share_;
}

// -------------------------------------------------------------------

// LiquidityProviderFeeShare

// string party = 1 [json_name = "party"];
inline void LiquidityProviderFeeShare::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& LiquidityProviderFeeShare::party() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProviderFeeShare.party)
  return _internal_party();
}
inline void LiquidityProviderFeeShare::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProviderFeeShare.party)
}
inline std::string* LiquidityProviderFeeShare::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProviderFeeShare.party)
  return _internal_mutable_party();
}
inline const std::string& LiquidityProviderFeeShare::_internal_party() const {
  return party_.Get();
}
inline void LiquidityProviderFeeShare::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProviderFeeShare::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProviderFeeShare.party)
}
inline void LiquidityProviderFeeShare::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProviderFeeShare.party)
}
inline void LiquidityProviderFeeShare::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProviderFeeShare.party)
}
inline std::string* LiquidityProviderFeeShare::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProviderFeeShare::release_party() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProviderFeeShare.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProviderFeeShare::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProviderFeeShare.party)
}

// string equity_like_share = 2 [json_name = "equityLikeShare"];
inline void LiquidityProviderFeeShare::clear_equity_like_share() {
  equity_like_share_.ClearToEmpty();
}
inline const std::string& LiquidityProviderFeeShare::equity_like_share() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProviderFeeShare.equity_like_share)
  return _internal_equity_like_share();
}
inline void LiquidityProviderFeeShare::set_equity_like_share(const std::string& value) {
  _internal_set_equity_like_share(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProviderFeeShare.equity_like_share)
}
inline std::string* LiquidityProviderFeeShare::mutable_equity_like_share() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProviderFeeShare.equity_like_share)
  return _internal_mutable_equity_like_share();
}
inline const std::string& LiquidityProviderFeeShare::_internal_equity_like_share() const {
  return equity_like_share_.Get();
}
inline void LiquidityProviderFeeShare::_internal_set_equity_like_share(const std::string& value) {

  equity_like_share_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProviderFeeShare::set_equity_like_share(std::string&& value) {

  equity_like_share_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProviderFeeShare.equity_like_share)
}
inline void LiquidityProviderFeeShare::set_equity_like_share(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  equity_like_share_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProviderFeeShare.equity_like_share)
}
inline void LiquidityProviderFeeShare::set_equity_like_share(const char* value,
    size_t size) {

  equity_like_share_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProviderFeeShare.equity_like_share)
}
inline std::string* LiquidityProviderFeeShare::_internal_mutable_equity_like_share() {

  return equity_like_share_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProviderFeeShare::release_equity_like_share() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProviderFeeShare.equity_like_share)
  return equity_like_share_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProviderFeeShare::set_allocated_equity_like_share(std::string* equity_like_share) {
  if (equity_like_share != nullptr) {

  } else {

  }
  equity_like_share_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equity_like_share,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProviderFeeShare.equity_like_share)
}

// string average_entry_valuation = 3 [json_name = "averageEntryValuation"];
inline void LiquidityProviderFeeShare::clear_average_entry_valuation() {
  average_entry_valuation_.ClearToEmpty();
}
inline const std::string& LiquidityProviderFeeShare::average_entry_valuation() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProviderFeeShare.average_entry_valuation)
  return _internal_average_entry_valuation();
}
inline void LiquidityProviderFeeShare::set_average_entry_valuation(const std::string& value) {
  _internal_set_average_entry_valuation(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProviderFeeShare.average_entry_valuation)
}
inline std::string* LiquidityProviderFeeShare::mutable_average_entry_valuation() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProviderFeeShare.average_entry_valuation)
  return _internal_mutable_average_entry_valuation();
}
inline const std::string& LiquidityProviderFeeShare::_internal_average_entry_valuation() const {
  return average_entry_valuation_.Get();
}
inline void LiquidityProviderFeeShare::_internal_set_average_entry_valuation(const std::string& value) {

  average_entry_valuation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProviderFeeShare::set_average_entry_valuation(std::string&& value) {

  average_entry_valuation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProviderFeeShare.average_entry_valuation)
}
inline void LiquidityProviderFeeShare::set_average_entry_valuation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  average_entry_valuation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProviderFeeShare.average_entry_valuation)
}
inline void LiquidityProviderFeeShare::set_average_entry_valuation(const char* value,
    size_t size) {

  average_entry_valuation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProviderFeeShare.average_entry_valuation)
}
inline std::string* LiquidityProviderFeeShare::_internal_mutable_average_entry_valuation() {

  return average_entry_valuation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProviderFeeShare::release_average_entry_valuation() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProviderFeeShare.average_entry_valuation)
  return average_entry_valuation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProviderFeeShare::set_allocated_average_entry_valuation(std::string* average_entry_valuation) {
  if (average_entry_valuation != nullptr) {

  } else {

  }
  average_entry_valuation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), average_entry_valuation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProviderFeeShare.average_entry_valuation)
}

// -------------------------------------------------------------------

// PriceMonitoringBounds

// uint64 min_valid_price = 1 [json_name = "minValidPrice"];
inline void PriceMonitoringBounds::clear_min_valid_price() {
  min_valid_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceMonitoringBounds::_internal_min_valid_price() const {
  return min_valid_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceMonitoringBounds::min_valid_price() const {
  // @@protoc_insertion_point(field_get:vega.PriceMonitoringBounds.min_valid_price)
  return _internal_min_valid_price();
}
inline void PriceMonitoringBounds::_internal_set_min_valid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  min_valid_price_ = value;
}
inline void PriceMonitoringBounds::set_min_valid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_valid_price(value);
  // @@protoc_insertion_point(field_set:vega.PriceMonitoringBounds.min_valid_price)
}

// uint64 max_valid_price = 2 [json_name = "maxValidPrice"];
inline void PriceMonitoringBounds::clear_max_valid_price() {
  max_valid_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceMonitoringBounds::_internal_max_valid_price() const {
  return max_valid_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceMonitoringBounds::max_valid_price() const {
  // @@protoc_insertion_point(field_get:vega.PriceMonitoringBounds.max_valid_price)
  return _internal_max_valid_price();
}
inline void PriceMonitoringBounds::_internal_set_max_valid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  max_valid_price_ = value;
}
inline void PriceMonitoringBounds::set_max_valid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_valid_price(value);
  // @@protoc_insertion_point(field_set:vega.PriceMonitoringBounds.max_valid_price)
}

// .vega.PriceMonitoringTrigger trigger = 3 [json_name = "trigger"];
inline bool PriceMonitoringBounds::_internal_has_trigger() const {
  return this != internal_default_instance() && trigger_ != nullptr;
}
inline bool PriceMonitoringBounds::has_trigger() const {
  return _internal_has_trigger();
}
inline const ::vega::PriceMonitoringTrigger& PriceMonitoringBounds::_internal_trigger() const {
  const ::vega::PriceMonitoringTrigger* p = trigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::PriceMonitoringTrigger&>(
      ::vega::_PriceMonitoringTrigger_default_instance_);
}
inline const ::vega::PriceMonitoringTrigger& PriceMonitoringBounds::trigger() const {
  // @@protoc_insertion_point(field_get:vega.PriceMonitoringBounds.trigger)
  return _internal_trigger();
}
inline void PriceMonitoringBounds::unsafe_arena_set_allocated_trigger(
    ::vega::PriceMonitoringTrigger* trigger) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_);
  }
  trigger_ = trigger;
  if (trigger) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.PriceMonitoringBounds.trigger)
}
inline ::vega::PriceMonitoringTrigger* PriceMonitoringBounds::release_trigger() {

  ::vega::PriceMonitoringTrigger* temp = trigger_;
  trigger_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::PriceMonitoringTrigger* PriceMonitoringBounds::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_release:vega.PriceMonitoringBounds.trigger)

  ::vega::PriceMonitoringTrigger* temp = trigger_;
  trigger_ = nullptr;
  return temp;
}
inline ::vega::PriceMonitoringTrigger* PriceMonitoringBounds::_internal_mutable_trigger() {

  if (trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::PriceMonitoringTrigger>(GetArena());
    trigger_ = p;
  }
  return trigger_;
}
inline ::vega::PriceMonitoringTrigger* PriceMonitoringBounds::mutable_trigger() {
  // @@protoc_insertion_point(field_mutable:vega.PriceMonitoringBounds.trigger)
  return _internal_mutable_trigger();
}
inline void PriceMonitoringBounds::set_allocated_trigger(::vega::PriceMonitoringTrigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_);
  }
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger)->GetArena();
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }

  } else {

  }
  trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:vega.PriceMonitoringBounds.trigger)
}

// double reference_price = 4 [json_name = "referencePrice"];
inline void PriceMonitoringBounds::clear_reference_price() {
  reference_price_ = 0;
}
inline double PriceMonitoringBounds::_internal_reference_price() const {
  return reference_price_;
}
inline double PriceMonitoringBounds::reference_price() const {
  // @@protoc_insertion_point(field_get:vega.PriceMonitoringBounds.reference_price)
  return _internal_reference_price();
}
inline void PriceMonitoringBounds::_internal_set_reference_price(double value) {

  reference_price_ = value;
}
inline void PriceMonitoringBounds::set_reference_price(double value) {
  _internal_set_reference_price(value);
  // @@protoc_insertion_point(field_set:vega.PriceMonitoringBounds.reference_price)
}

// -------------------------------------------------------------------

// ErrorDetail

// int32 code = 1 [json_name = "code"];
inline void ErrorDetail::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorDetail::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorDetail::code() const {
  // @@protoc_insertion_point(field_get:vega.ErrorDetail.code)
  return _internal_code();
}
inline void ErrorDetail::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {

  code_ = value;
}
inline void ErrorDetail::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:vega.ErrorDetail.code)
}

// string message = 2 [json_name = "message"];
inline void ErrorDetail::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ErrorDetail::message() const {
  // @@protoc_insertion_point(field_get:vega.ErrorDetail.message)
  return _internal_message();
}
inline void ErrorDetail::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:vega.ErrorDetail.message)
}
inline std::string* ErrorDetail::mutable_message() {
  // @@protoc_insertion_point(field_mutable:vega.ErrorDetail.message)
  return _internal_mutable_message();
}
inline const std::string& ErrorDetail::_internal_message() const {
  return message_.Get();
}
inline void ErrorDetail::_internal_set_message(const std::string& value) {

  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorDetail::set_message(std::string&& value) {

  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ErrorDetail.message)
}
inline void ErrorDetail::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ErrorDetail.message)
}
inline void ErrorDetail::set_message(const char* value,
    size_t size) {

  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ErrorDetail.message)
}
inline std::string* ErrorDetail::_internal_mutable_message() {

  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorDetail::release_message() {
  // @@protoc_insertion_point(field_release:vega.ErrorDetail.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorDetail::set_allocated_message(std::string* message) {
  if (message != nullptr) {

  } else {

  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ErrorDetail.message)
}

// string inner = 3 [json_name = "inner"];
inline void ErrorDetail::clear_inner() {
  inner_.ClearToEmpty();
}
inline const std::string& ErrorDetail::inner() const {
  // @@protoc_insertion_point(field_get:vega.ErrorDetail.inner)
  return _internal_inner();
}
inline void ErrorDetail::set_inner(const std::string& value) {
  _internal_set_inner(value);
  // @@protoc_insertion_point(field_set:vega.ErrorDetail.inner)
}
inline std::string* ErrorDetail::mutable_inner() {
  // @@protoc_insertion_point(field_mutable:vega.ErrorDetail.inner)
  return _internal_mutable_inner();
}
inline const std::string& ErrorDetail::_internal_inner() const {
  return inner_.Get();
}
inline void ErrorDetail::_internal_set_inner(const std::string& value) {

  inner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorDetail::set_inner(std::string&& value) {

  inner_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ErrorDetail.inner)
}
inline void ErrorDetail::set_inner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  inner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ErrorDetail.inner)
}
inline void ErrorDetail::set_inner(const char* value,
    size_t size) {

  inner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ErrorDetail.inner)
}
inline std::string* ErrorDetail::_internal_mutable_inner() {

  return inner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorDetail::release_inner() {
  // @@protoc_insertion_point(field_release:vega.ErrorDetail.inner)
  return inner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorDetail::set_allocated_inner(std::string* inner) {
  if (inner != nullptr) {

  } else {

  }
  inner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ErrorDetail.inner)
}

// -------------------------------------------------------------------

// NetworkParameter

// string key = 1 [json_name = "key"];
inline void NetworkParameter::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& NetworkParameter::key() const {
  // @@protoc_insertion_point(field_get:vega.NetworkParameter.key)
  return _internal_key();
}
inline void NetworkParameter::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:vega.NetworkParameter.key)
}
inline std::string* NetworkParameter::mutable_key() {
  // @@protoc_insertion_point(field_mutable:vega.NetworkParameter.key)
  return _internal_mutable_key();
}
inline const std::string& NetworkParameter::_internal_key() const {
  return key_.Get();
}
inline void NetworkParameter::_internal_set_key(const std::string& value) {

  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkParameter::set_key(std::string&& value) {

  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NetworkParameter.key)
}
inline void NetworkParameter::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NetworkParameter.key)
}
inline void NetworkParameter::set_key(const char* value,
    size_t size) {

  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NetworkParameter.key)
}
inline std::string* NetworkParameter::_internal_mutable_key() {

  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkParameter::release_key() {
  // @@protoc_insertion_point(field_release:vega.NetworkParameter.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkParameter::set_allocated_key(std::string* key) {
  if (key != nullptr) {

  } else {

  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NetworkParameter.key)
}

// string value = 2 [json_name = "value"];
inline void NetworkParameter::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& NetworkParameter::value() const {
  // @@protoc_insertion_point(field_get:vega.NetworkParameter.value)
  return _internal_value();
}
inline void NetworkParameter::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:vega.NetworkParameter.value)
}
inline std::string* NetworkParameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable:vega.NetworkParameter.value)
  return _internal_mutable_value();
}
inline const std::string& NetworkParameter::_internal_value() const {
  return value_.Get();
}
inline void NetworkParameter::_internal_set_value(const std::string& value) {

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkParameter::set_value(std::string&& value) {

  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NetworkParameter.value)
}
inline void NetworkParameter::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NetworkParameter.value)
}
inline void NetworkParameter::set_value(const char* value,
    size_t size) {

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NetworkParameter.value)
}
inline std::string* NetworkParameter::_internal_mutable_value() {

  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkParameter::release_value() {
  // @@protoc_insertion_point(field_release:vega.NetworkParameter.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkParameter::set_allocated_value(std::string* value) {
  if (value != nullptr) {

  } else {

  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NetworkParameter.value)
}

// -------------------------------------------------------------------

// LiquidityOrder

// .vega.PeggedReference reference = 1 [json_name = "reference"];
inline void LiquidityOrder::clear_reference() {
  reference_ = 0;
}
inline ::vega::PeggedReference LiquidityOrder::_internal_reference() const {
  return static_cast< ::vega::PeggedReference >(reference_);
}
inline ::vega::PeggedReference LiquidityOrder::reference() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityOrder.reference)
  return _internal_reference();
}
inline void LiquidityOrder::_internal_set_reference(::vega::PeggedReference value) {

  reference_ = value;
}
inline void LiquidityOrder::set_reference(::vega::PeggedReference value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityOrder.reference)
}

// uint32 proportion = 2 [json_name = "proportion"];
inline void LiquidityOrder::clear_proportion() {
  proportion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LiquidityOrder::_internal_proportion() const {
  return proportion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LiquidityOrder::proportion() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityOrder.proportion)
  return _internal_proportion();
}
inline void LiquidityOrder::_internal_set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  proportion_ = value;
}
inline void LiquidityOrder::set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proportion(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityOrder.proportion)
}

// int64 offset = 3 [json_name = "offset"];
inline void LiquidityOrder::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityOrder::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityOrder::offset() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityOrder.offset)
  return _internal_offset();
}
inline void LiquidityOrder::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {

  offset_ = value;
}
inline void LiquidityOrder::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityOrder.offset)
}

// -------------------------------------------------------------------

// LiquidityOrderReference

// string order_id = 1 [json_name = "orderId"];
inline void LiquidityOrderReference::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& LiquidityOrderReference::order_id() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityOrderReference.order_id)
  return _internal_order_id();
}
inline void LiquidityOrderReference::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityOrderReference.order_id)
}
inline std::string* LiquidityOrderReference::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityOrderReference.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& LiquidityOrderReference::_internal_order_id() const {
  return order_id_.Get();
}
inline void LiquidityOrderReference::_internal_set_order_id(const std::string& value) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityOrderReference::set_order_id(std::string&& value) {

  order_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityOrderReference.order_id)
}
inline void LiquidityOrderReference::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityOrderReference.order_id)
}
inline void LiquidityOrderReference::set_order_id(const char* value,
    size_t size) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityOrderReference.order_id)
}
inline std::string* LiquidityOrderReference::_internal_mutable_order_id() {

  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityOrderReference::release_order_id() {
  // @@protoc_insertion_point(field_release:vega.LiquidityOrderReference.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityOrderReference::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {

  } else {

  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityOrderReference.order_id)
}

// .vega.LiquidityOrder liquidity_order = 2 [json_name = "liquidityOrder"];
inline bool LiquidityOrderReference::_internal_has_liquidity_order() const {
  return this != internal_default_instance() && liquidity_order_ != nullptr;
}
inline bool LiquidityOrderReference::has_liquidity_order() const {
  return _internal_has_liquidity_order();
}
inline void LiquidityOrderReference::clear_liquidity_order() {
  if (GetArena() == nullptr && liquidity_order_ != nullptr) {
    delete liquidity_order_;
  }
  liquidity_order_ = nullptr;
}
inline const ::vega::LiquidityOrder& LiquidityOrderReference::_internal_liquidity_order() const {
  const ::vega::LiquidityOrder* p = liquidity_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::LiquidityOrder&>(
      ::vega::_LiquidityOrder_default_instance_);
}
inline const ::vega::LiquidityOrder& LiquidityOrderReference::liquidity_order() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityOrderReference.liquidity_order)
  return _internal_liquidity_order();
}
inline void LiquidityOrderReference::unsafe_arena_set_allocated_liquidity_order(
    ::vega::LiquidityOrder* liquidity_order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liquidity_order_);
  }
  liquidity_order_ = liquidity_order;
  if (liquidity_order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.LiquidityOrderReference.liquidity_order)
}
inline ::vega::LiquidityOrder* LiquidityOrderReference::release_liquidity_order() {

  ::vega::LiquidityOrder* temp = liquidity_order_;
  liquidity_order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::LiquidityOrder* LiquidityOrderReference::unsafe_arena_release_liquidity_order() {
  // @@protoc_insertion_point(field_release:vega.LiquidityOrderReference.liquidity_order)

  ::vega::LiquidityOrder* temp = liquidity_order_;
  liquidity_order_ = nullptr;
  return temp;
}
inline ::vega::LiquidityOrder* LiquidityOrderReference::_internal_mutable_liquidity_order() {

  if (liquidity_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::LiquidityOrder>(GetArena());
    liquidity_order_ = p;
  }
  return liquidity_order_;
}
inline ::vega::LiquidityOrder* LiquidityOrderReference::mutable_liquidity_order() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityOrderReference.liquidity_order)
  return _internal_mutable_liquidity_order();
}
inline void LiquidityOrderReference::set_allocated_liquidity_order(::vega::LiquidityOrder* liquidity_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete liquidity_order_;
  }
  if (liquidity_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(liquidity_order);
    if (message_arena != submessage_arena) {
      liquidity_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquidity_order, submessage_arena);
    }

  } else {

  }
  liquidity_order_ = liquidity_order;
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityOrderReference.liquidity_order)
}

// -------------------------------------------------------------------

// LiquidityProvision

// string id = 1 [json_name = "id"];
inline void LiquidityProvision::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::id() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.id)
  return _internal_id();
}
inline void LiquidityProvision::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.id)
}
inline std::string* LiquidityProvision::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.id)
  return _internal_mutable_id();
}
inline const std::string& LiquidityProvision::_internal_id() const {
  return id_.Get();
}
inline void LiquidityProvision::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.id)
}
inline void LiquidityProvision::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.id)
}
inline void LiquidityProvision::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.id)
}
inline std::string* LiquidityProvision::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_id() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.id)
}

// string party_id = 2 [json_name = "partyId"];
inline void LiquidityProvision::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::party_id() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.party_id)
  return _internal_party_id();
}
inline void LiquidityProvision::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.party_id)
}
inline std::string* LiquidityProvision::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& LiquidityProvision::_internal_party_id() const {
  return party_id_.Get();
}
inline void LiquidityProvision::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.party_id)
}
inline void LiquidityProvision::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.party_id)
}
inline void LiquidityProvision::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.party_id)
}
inline std::string* LiquidityProvision::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.party_id)
}

// int64 created_at = 3 [json_name = "createdAt"];
inline void LiquidityProvision::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityProvision::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityProvision::created_at() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.created_at)
  return _internal_created_at();
}
inline void LiquidityProvision::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  created_at_ = value;
}
inline void LiquidityProvision::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.created_at)
}

// int64 updated_at = 4 [json_name = "updatedAt"];
inline void LiquidityProvision::clear_updated_at() {
  updated_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityProvision::_internal_updated_at() const {
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityProvision::updated_at() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.updated_at)
  return _internal_updated_at();
}
inline void LiquidityProvision::_internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  updated_at_ = value;
}
inline void LiquidityProvision::set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.updated_at)
}

// string market_id = 5 [json_name = "marketId", (.validator.field) = {
inline void LiquidityProvision::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::market_id() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.market_id)
  return _internal_market_id();
}
inline void LiquidityProvision::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.market_id)
}
inline std::string* LiquidityProvision::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& LiquidityProvision::_internal_market_id() const {
  return market_id_.Get();
}
inline void LiquidityProvision::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.market_id)
}
inline void LiquidityProvision::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.market_id)
}
inline void LiquidityProvision::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.market_id)
}
inline std::string* LiquidityProvision::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.market_id)
}

// uint64 commitment_amount = 6 [json_name = "commitmentAmount"];
inline void LiquidityProvision::clear_commitment_amount() {
  commitment_amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiquidityProvision::_internal_commitment_amount() const {
  return commitment_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiquidityProvision::commitment_amount() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.commitment_amount)
  return _internal_commitment_amount();
}
inline void LiquidityProvision::_internal_set_commitment_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  commitment_amount_ = value;
}
inline void LiquidityProvision::set_commitment_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commitment_amount(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.commitment_amount)
}

// string fee = 7 [json_name = "fee"];
inline void LiquidityProvision::clear_fee() {
  fee_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::fee() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.fee)
  return _internal_fee();
}
inline void LiquidityProvision::set_fee(const std::string& value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.fee)
}
inline std::string* LiquidityProvision::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.fee)
  return _internal_mutable_fee();
}
inline const std::string& LiquidityProvision::_internal_fee() const {
  return fee_.Get();
}
inline void LiquidityProvision::_internal_set_fee(const std::string& value) {

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_fee(std::string&& value) {

  fee_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.fee)
}
inline void LiquidityProvision::set_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.fee)
}
inline void LiquidityProvision::set_fee(const char* value,
    size_t size) {

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.fee)
}
inline std::string* LiquidityProvision::_internal_mutable_fee() {

  return fee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_fee() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.fee)
  return fee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_fee(std::string* fee) {
  if (fee != nullptr) {

  } else {

  }
  fee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.fee)
}

// repeated .vega.LiquidityOrderReference sells = 8 [json_name = "sells"];
inline int LiquidityProvision::_internal_sells_size() const {
  return sells_.size();
}
inline int LiquidityProvision::sells_size() const {
  return _internal_sells_size();
}
inline void LiquidityProvision::clear_sells() {
  sells_.Clear();
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::mutable_sells(int index) {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.sells)
  return sells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >*
LiquidityProvision::mutable_sells() {
  // @@protoc_insertion_point(field_mutable_list:vega.LiquidityProvision.sells)
  return &sells_;
}
inline const ::vega::LiquidityOrderReference& LiquidityProvision::_internal_sells(int index) const {
  return sells_.Get(index);
}
inline const ::vega::LiquidityOrderReference& LiquidityProvision::sells(int index) const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.sells)
  return _internal_sells(index);
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::_internal_add_sells() {
  return sells_.Add();
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::add_sells() {
  // @@protoc_insertion_point(field_add:vega.LiquidityProvision.sells)
  return _internal_add_sells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >&
LiquidityProvision::sells() const {
  // @@protoc_insertion_point(field_list:vega.LiquidityProvision.sells)
  return sells_;
}

// repeated .vega.LiquidityOrderReference buys = 9 [json_name = "buys"];
inline int LiquidityProvision::_internal_buys_size() const {
  return buys_.size();
}
inline int LiquidityProvision::buys_size() const {
  return _internal_buys_size();
}
inline void LiquidityProvision::clear_buys() {
  buys_.Clear();
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::mutable_buys(int index) {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.buys)
  return buys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >*
LiquidityProvision::mutable_buys() {
  // @@protoc_insertion_point(field_mutable_list:vega.LiquidityProvision.buys)
  return &buys_;
}
inline const ::vega::LiquidityOrderReference& LiquidityProvision::_internal_buys(int index) const {
  return buys_.Get(index);
}
inline const ::vega::LiquidityOrderReference& LiquidityProvision::buys(int index) const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.buys)
  return _internal_buys(index);
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::_internal_add_buys() {
  return buys_.Add();
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::add_buys() {
  // @@protoc_insertion_point(field_add:vega.LiquidityProvision.buys)
  return _internal_add_buys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >&
LiquidityProvision::buys() const {
  // @@protoc_insertion_point(field_list:vega.LiquidityProvision.buys)
  return buys_;
}

// string version = 10 [json_name = "version"];
inline void LiquidityProvision::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::version() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.version)
  return _internal_version();
}
inline void LiquidityProvision::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.version)
}
inline std::string* LiquidityProvision::mutable_version() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.version)
  return _internal_mutable_version();
}
inline const std::string& LiquidityProvision::_internal_version() const {
  return version_.Get();
}
inline void LiquidityProvision::_internal_set_version(const std::string& value) {

  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_version(std::string&& value) {

  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.version)
}
inline void LiquidityProvision::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.version)
}
inline void LiquidityProvision::set_version(const char* value,
    size_t size) {

  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.version)
}
inline std::string* LiquidityProvision::_internal_mutable_version() {

  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_version() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_version(std::string* version) {
  if (version != nullptr) {

  } else {

  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.version)
}

// .vega.LiquidityProvision.Status status = 11 [json_name = "status"];
inline void LiquidityProvision::clear_status() {
  status_ = 0;
}
inline ::vega::LiquidityProvision_Status LiquidityProvision::_internal_status() const {
  return static_cast< ::vega::LiquidityProvision_Status >(status_);
}
inline ::vega::LiquidityProvision_Status LiquidityProvision::status() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.status)
  return _internal_status();
}
inline void LiquidityProvision::_internal_set_status(::vega::LiquidityProvision_Status value) {

  status_ = value;
}
inline void LiquidityProvision::set_status(::vega::LiquidityProvision_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.status)
}

// string reference = 12 [json_name = "reference"];
inline void LiquidityProvision::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::reference() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.reference)
  return _internal_reference();
}
inline void LiquidityProvision::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.reference)
}
inline std::string* LiquidityProvision::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.reference)
  return _internal_mutable_reference();
}
inline const std::string& LiquidityProvision::_internal_reference() const {
  return reference_.Get();
}
inline void LiquidityProvision::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.reference)
}
inline void LiquidityProvision::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.reference)
}
inline void LiquidityProvision::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.reference)
}
inline std::string* LiquidityProvision::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_reference() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.reference)
}

// -------------------------------------------------------------------

// EthereumConfig

// string network_id = 1 [json_name = "networkId"];
inline void EthereumConfig::clear_network_id() {
  network_id_.ClearToEmpty();
}
inline const std::string& EthereumConfig::network_id() const {
  // @@protoc_insertion_point(field_get:vega.EthereumConfig.network_id)
  return _internal_network_id();
}
inline void EthereumConfig::set_network_id(const std::string& value) {
  _internal_set_network_id(value);
  // @@protoc_insertion_point(field_set:vega.EthereumConfig.network_id)
}
inline std::string* EthereumConfig::mutable_network_id() {
  // @@protoc_insertion_point(field_mutable:vega.EthereumConfig.network_id)
  return _internal_mutable_network_id();
}
inline const std::string& EthereumConfig::_internal_network_id() const {
  return network_id_.Get();
}
inline void EthereumConfig::_internal_set_network_id(const std::string& value) {

  network_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EthereumConfig::set_network_id(std::string&& value) {

  network_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.EthereumConfig.network_id)
}
inline void EthereumConfig::set_network_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  network_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.EthereumConfig.network_id)
}
inline void EthereumConfig::set_network_id(const char* value,
    size_t size) {

  network_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.EthereumConfig.network_id)
}
inline std::string* EthereumConfig::_internal_mutable_network_id() {

  return network_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EthereumConfig::release_network_id() {
  // @@protoc_insertion_point(field_release:vega.EthereumConfig.network_id)
  return network_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthereumConfig::set_allocated_network_id(std::string* network_id) {
  if (network_id != nullptr) {

  } else {

  }
  network_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.EthereumConfig.network_id)
}

// string chain_id = 2 [json_name = "chainId"];
inline void EthereumConfig::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& EthereumConfig::chain_id() const {
  // @@protoc_insertion_point(field_get:vega.EthereumConfig.chain_id)
  return _internal_chain_id();
}
inline void EthereumConfig::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:vega.EthereumConfig.chain_id)
}
inline std::string* EthereumConfig::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:vega.EthereumConfig.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& EthereumConfig::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void EthereumConfig::_internal_set_chain_id(const std::string& value) {

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EthereumConfig::set_chain_id(std::string&& value) {

  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.EthereumConfig.chain_id)
}
inline void EthereumConfig::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.EthereumConfig.chain_id)
}
inline void EthereumConfig::set_chain_id(const char* value,
    size_t size) {

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.EthereumConfig.chain_id)
}
inline std::string* EthereumConfig::_internal_mutable_chain_id() {

  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EthereumConfig::release_chain_id() {
  // @@protoc_insertion_point(field_release:vega.EthereumConfig.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthereumConfig::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {

  } else {

  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.EthereumConfig.chain_id)
}

// string bridge_address = 3 [json_name = "bridgeAddress"];
inline void EthereumConfig::clear_bridge_address() {
  bridge_address_.ClearToEmpty();
}
inline const std::string& EthereumConfig::bridge_address() const {
  // @@protoc_insertion_point(field_get:vega.EthereumConfig.bridge_address)
  return _internal_bridge_address();
}
inline void EthereumConfig::set_bridge_address(const std::string& value) {
  _internal_set_bridge_address(value);
  // @@protoc_insertion_point(field_set:vega.EthereumConfig.bridge_address)
}
inline std::string* EthereumConfig::mutable_bridge_address() {
  // @@protoc_insertion_point(field_mutable:vega.EthereumConfig.bridge_address)
  return _internal_mutable_bridge_address();
}
inline const std::string& EthereumConfig::_internal_bridge_address() const {
  return bridge_address_.Get();
}
inline void EthereumConfig::_internal_set_bridge_address(const std::string& value) {

  bridge_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EthereumConfig::set_bridge_address(std::string&& value) {

  bridge_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.EthereumConfig.bridge_address)
}
inline void EthereumConfig::set_bridge_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  bridge_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.EthereumConfig.bridge_address)
}
inline void EthereumConfig::set_bridge_address(const char* value,
    size_t size) {

  bridge_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.EthereumConfig.bridge_address)
}
inline std::string* EthereumConfig::_internal_mutable_bridge_address() {

  return bridge_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EthereumConfig::release_bridge_address() {
  // @@protoc_insertion_point(field_release:vega.EthereumConfig.bridge_address)
  return bridge_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthereumConfig::set_allocated_bridge_address(std::string* bridge_address) {
  if (bridge_address != nullptr) {

  } else {

  }
  bridge_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bridge_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.EthereumConfig.bridge_address)
}

// uint32 confirmations = 4 [json_name = "confirmations"];
inline void EthereumConfig::clear_confirmations() {
  confirmations_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EthereumConfig::_internal_confirmations() const {
  return confirmations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EthereumConfig::confirmations() const {
  // @@protoc_insertion_point(field_get:vega.EthereumConfig.confirmations)
  return _internal_confirmations();
}
inline void EthereumConfig::_internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  confirmations_ = value;
}
inline void EthereumConfig::set_confirmations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confirmations(value);
  // @@protoc_insertion_point(field_set:vega.EthereumConfig.confirmations)
}

// repeated string staking_bridge_addresses = 5 [json_name = "stakingBridgeAddresses"];
inline int EthereumConfig::_internal_staking_bridge_addresses_size() const {
  return staking_bridge_addresses_.size();
}
inline int EthereumConfig::staking_bridge_addresses_size() const {
  return _internal_staking_bridge_addresses_size();
}
inline void EthereumConfig::clear_staking_bridge_addresses() {
  staking_bridge_addresses_.Clear();
}
inline std::string* EthereumConfig::add_staking_bridge_addresses() {
  // @@protoc_insertion_point(field_add_mutable:vega.EthereumConfig.staking_bridge_addresses)
  return _internal_add_staking_bridge_addresses();
}
inline const std::string& EthereumConfig::_internal_staking_bridge_addresses(int index) const {
  return staking_bridge_addresses_.Get(index);
}
inline const std::string& EthereumConfig::staking_bridge_addresses(int index) const {
  // @@protoc_insertion_point(field_get:vega.EthereumConfig.staking_bridge_addresses)
  return _internal_staking_bridge_addresses(index);
}
inline std::string* EthereumConfig::mutable_staking_bridge_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:vega.EthereumConfig.staking_bridge_addresses)
  return staking_bridge_addresses_.Mutable(index);
}
inline void EthereumConfig::set_staking_bridge_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vega.EthereumConfig.staking_bridge_addresses)
  staking_bridge_addresses_.Mutable(index)->assign(value);
}
inline void EthereumConfig::set_staking_bridge_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vega.EthereumConfig.staking_bridge_addresses)
  staking_bridge_addresses_.Mutable(index)->assign(std::move(value));
}
inline void EthereumConfig::set_staking_bridge_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  staking_bridge_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vega.EthereumConfig.staking_bridge_addresses)
}
inline void EthereumConfig::set_staking_bridge_addresses(int index, const char* value, size_t size) {
  staking_bridge_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vega.EthereumConfig.staking_bridge_addresses)
}
inline std::string* EthereumConfig::_internal_add_staking_bridge_addresses() {
  return staking_bridge_addresses_.Add();
}
inline void EthereumConfig::add_staking_bridge_addresses(const std::string& value) {
  staking_bridge_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vega.EthereumConfig.staking_bridge_addresses)
}
inline void EthereumConfig::add_staking_bridge_addresses(std::string&& value) {
  staking_bridge_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vega.EthereumConfig.staking_bridge_addresses)
}
inline void EthereumConfig::add_staking_bridge_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  staking_bridge_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vega.EthereumConfig.staking_bridge_addresses)
}
inline void EthereumConfig::add_staking_bridge_addresses(const char* value, size_t size) {
  staking_bridge_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vega.EthereumConfig.staking_bridge_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EthereumConfig::staking_bridge_addresses() const {
  // @@protoc_insertion_point(field_list:vega.EthereumConfig.staking_bridge_addresses)
  return staking_bridge_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EthereumConfig::mutable_staking_bridge_addresses() {
  // @@protoc_insertion_point(field_mutable_list:vega.EthereumConfig.staking_bridge_addresses)
  return &staking_bridge_addresses_;
}

// -------------------------------------------------------------------

// EpochTimestamps

// int64 start_time = 1 [json_name = "startTime"];
inline void EpochTimestamps::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EpochTimestamps::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EpochTimestamps::start_time() const {
  // @@protoc_insertion_point(field_get:vega.EpochTimestamps.start_time)
  return _internal_start_time();
}
inline void EpochTimestamps::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  start_time_ = value;
}
inline void EpochTimestamps::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:vega.EpochTimestamps.start_time)
}

// int64 end_time = 2 [json_name = "endTime"];
inline void EpochTimestamps::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EpochTimestamps::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EpochTimestamps::end_time() const {
  // @@protoc_insertion_point(field_get:vega.EpochTimestamps.end_time)
  return _internal_end_time();
}
inline void EpochTimestamps::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  end_time_ = value;
}
inline void EpochTimestamps::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:vega.EpochTimestamps.end_time)
}

// uint64 first_block = 3 [json_name = "firstBlock"];
inline void EpochTimestamps::clear_first_block() {
  first_block_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EpochTimestamps::_internal_first_block() const {
  return first_block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EpochTimestamps::first_block() const {
  // @@protoc_insertion_point(field_get:vega.EpochTimestamps.first_block)
  return _internal_first_block();
}
inline void EpochTimestamps::_internal_set_first_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  first_block_ = value;
}
inline void EpochTimestamps::set_first_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_first_block(value);
  // @@protoc_insertion_point(field_set:vega.EpochTimestamps.first_block)
}

// uint64 last_block = 4 [json_name = "lastBlock"];
inline void EpochTimestamps::clear_last_block() {
  last_block_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EpochTimestamps::_internal_last_block() const {
  return last_block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EpochTimestamps::last_block() const {
  // @@protoc_insertion_point(field_get:vega.EpochTimestamps.last_block)
  return _internal_last_block();
}
inline void EpochTimestamps::_internal_set_last_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  last_block_ = value;
}
inline void EpochTimestamps::set_last_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_block(value);
  // @@protoc_insertion_point(field_set:vega.EpochTimestamps.last_block)
}

// -------------------------------------------------------------------

// Epoch

// uint64 seq = 1 [json_name = "seq"];
inline void Epoch::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Epoch::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Epoch::seq() const {
  // @@protoc_insertion_point(field_get:vega.Epoch.seq)
  return _internal_seq();
}
inline void Epoch::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  seq_ = value;
}
inline void Epoch::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:vega.Epoch.seq)
}

// .vega.EpochTimestamps timestamps = 2 [json_name = "timestamps", (.validator.field) = {
inline bool Epoch::_internal_has_timestamps() const {
  return this != internal_default_instance() && timestamps_ != nullptr;
}
inline bool Epoch::has_timestamps() const {
  return _internal_has_timestamps();
}
inline void Epoch::clear_timestamps() {
  if (GetArena() == nullptr && timestamps_ != nullptr) {
    delete timestamps_;
  }
  timestamps_ = nullptr;
}
inline const ::vega::EpochTimestamps& Epoch::_internal_timestamps() const {
  const ::vega::EpochTimestamps* p = timestamps_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::EpochTimestamps&>(
      ::vega::_EpochTimestamps_default_instance_);
}
inline const ::vega::EpochTimestamps& Epoch::timestamps() const {
  // @@protoc_insertion_point(field_get:vega.Epoch.timestamps)
  return _internal_timestamps();
}
inline void Epoch::unsafe_arena_set_allocated_timestamps(
    ::vega::EpochTimestamps* timestamps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamps_);
  }
  timestamps_ = timestamps;
  if (timestamps) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Epoch.timestamps)
}
inline ::vega::EpochTimestamps* Epoch::release_timestamps() {

  ::vega::EpochTimestamps* temp = timestamps_;
  timestamps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::EpochTimestamps* Epoch::unsafe_arena_release_timestamps() {
  // @@protoc_insertion_point(field_release:vega.Epoch.timestamps)

  ::vega::EpochTimestamps* temp = timestamps_;
  timestamps_ = nullptr;
  return temp;
}
inline ::vega::EpochTimestamps* Epoch::_internal_mutable_timestamps() {

  if (timestamps_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::EpochTimestamps>(GetArena());
    timestamps_ = p;
  }
  return timestamps_;
}
inline ::vega::EpochTimestamps* Epoch::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable:vega.Epoch.timestamps)
  return _internal_mutable_timestamps();
}
inline void Epoch::set_allocated_timestamps(::vega::EpochTimestamps* timestamps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timestamps_;
  }
  if (timestamps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timestamps);
    if (message_arena != submessage_arena) {
      timestamps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamps, submessage_arena);
    }

  } else {

  }
  timestamps_ = timestamps;
  // @@protoc_insertion_point(field_set_allocated:vega.Epoch.timestamps)
}

// repeated .vega.Node validators = 3 [json_name = "validators"];
inline int Epoch::_internal_validators_size() const {
  return validators_.size();
}
inline int Epoch::validators_size() const {
  return _internal_validators_size();
}
inline void Epoch::clear_validators() {
  validators_.Clear();
}
inline ::vega::Node* Epoch::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:vega.Epoch.validators)
  return validators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Node >*
Epoch::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:vega.Epoch.validators)
  return &validators_;
}
inline const ::vega::Node& Epoch::_internal_validators(int index) const {
  return validators_.Get(index);
}
inline const ::vega::Node& Epoch::validators(int index) const {
  // @@protoc_insertion_point(field_get:vega.Epoch.validators)
  return _internal_validators(index);
}
inline ::vega::Node* Epoch::_internal_add_validators() {
  return validators_.Add();
}
inline ::vega::Node* Epoch::add_validators() {
  // @@protoc_insertion_point(field_add:vega.Epoch.validators)
  return _internal_add_validators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Node >&
Epoch::validators() const {
  // @@protoc_insertion_point(field_list:vega.Epoch.validators)
  return validators_;
}

// repeated .vega.Delegation delegations = 4 [json_name = "delegations"];
inline int Epoch::_internal_delegations_size() const {
  return delegations_.size();
}
inline int Epoch::delegations_size() const {
  return _internal_delegations_size();
}
inline void Epoch::clear_delegations() {
  delegations_.Clear();
}
inline ::vega::Delegation* Epoch::mutable_delegations(int index) {
  // @@protoc_insertion_point(field_mutable:vega.Epoch.delegations)
  return delegations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >*
Epoch::mutable_delegations() {
  // @@protoc_insertion_point(field_mutable_list:vega.Epoch.delegations)
  return &delegations_;
}
inline const ::vega::Delegation& Epoch::_internal_delegations(int index) const {
  return delegations_.Get(index);
}
inline const ::vega::Delegation& Epoch::delegations(int index) const {
  // @@protoc_insertion_point(field_get:vega.Epoch.delegations)
  return _internal_delegations(index);
}
inline ::vega::Delegation* Epoch::_internal_add_delegations() {
  return delegations_.Add();
}
inline ::vega::Delegation* Epoch::add_delegations() {
  // @@protoc_insertion_point(field_add:vega.Epoch.delegations)
  return _internal_add_delegations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >&
Epoch::delegations() const {
  // @@protoc_insertion_point(field_list:vega.Epoch.delegations)
  return delegations_;
}

// -------------------------------------------------------------------

// EpochParticipation

// .vega.Epoch epoch = 1 [json_name = "epoch", (.validator.field) = {
inline bool EpochParticipation::_internal_has_epoch() const {
  return this != internal_default_instance() && epoch_ != nullptr;
}
inline bool EpochParticipation::has_epoch() const {
  return _internal_has_epoch();
}
inline void EpochParticipation::clear_epoch() {
  if (GetArena() == nullptr && epoch_ != nullptr) {
    delete epoch_;
  }
  epoch_ = nullptr;
}
inline const ::vega::Epoch& EpochParticipation::_internal_epoch() const {
  const ::vega::Epoch* p = epoch_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Epoch&>(
      ::vega::_Epoch_default_instance_);
}
inline const ::vega::Epoch& EpochParticipation::epoch() const {
  // @@protoc_insertion_point(field_get:vega.EpochParticipation.epoch)
  return _internal_epoch();
}
inline void EpochParticipation::unsafe_arena_set_allocated_epoch(
    ::vega::Epoch* epoch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_);
  }
  epoch_ = epoch;
  if (epoch) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.EpochParticipation.epoch)
}
inline ::vega::Epoch* EpochParticipation::release_epoch() {

  ::vega::Epoch* temp = epoch_;
  epoch_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Epoch* EpochParticipation::unsafe_arena_release_epoch() {
  // @@protoc_insertion_point(field_release:vega.EpochParticipation.epoch)

  ::vega::Epoch* temp = epoch_;
  epoch_ = nullptr;
  return temp;
}
inline ::vega::Epoch* EpochParticipation::_internal_mutable_epoch() {

  if (epoch_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Epoch>(GetArena());
    epoch_ = p;
  }
  return epoch_;
}
inline ::vega::Epoch* EpochParticipation::mutable_epoch() {
  // @@protoc_insertion_point(field_mutable:vega.EpochParticipation.epoch)
  return _internal_mutable_epoch();
}
inline void EpochParticipation::set_allocated_epoch(::vega::Epoch* epoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete epoch_;
  }
  if (epoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(epoch);
    if (message_arena != submessage_arena) {
      epoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch, submessage_arena);
    }

  } else {

  }
  epoch_ = epoch;
  // @@protoc_insertion_point(field_set_allocated:vega.EpochParticipation.epoch)
}

// uint64 offline = 2 [json_name = "offline"];
inline void EpochParticipation::clear_offline() {
  offline_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EpochParticipation::_internal_offline() const {
  return offline_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EpochParticipation::offline() const {
  // @@protoc_insertion_point(field_get:vega.EpochParticipation.offline)
  return _internal_offline();
}
inline void EpochParticipation::_internal_set_offline(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  offline_ = value;
}
inline void EpochParticipation::set_offline(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offline(value);
  // @@protoc_insertion_point(field_set:vega.EpochParticipation.offline)
}

// uint64 online = 3 [json_name = "online"];
inline void EpochParticipation::clear_online() {
  online_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EpochParticipation::_internal_online() const {
  return online_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EpochParticipation::online() const {
  // @@protoc_insertion_point(field_get:vega.EpochParticipation.online)
  return _internal_online();
}
inline void EpochParticipation::_internal_set_online(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  online_ = value;
}
inline void EpochParticipation::set_online(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:vega.EpochParticipation.online)
}

// double total_rewards = 4 [json_name = "totalRewards"];
inline void EpochParticipation::clear_total_rewards() {
  total_rewards_ = 0;
}
inline double EpochParticipation::_internal_total_rewards() const {
  return total_rewards_;
}
inline double EpochParticipation::total_rewards() const {
  // @@protoc_insertion_point(field_get:vega.EpochParticipation.total_rewards)
  return _internal_total_rewards();
}
inline void EpochParticipation::_internal_set_total_rewards(double value) {

  total_rewards_ = value;
}
inline void EpochParticipation::set_total_rewards(double value) {
  _internal_set_total_rewards(value);
  // @@protoc_insertion_point(field_set:vega.EpochParticipation.total_rewards)
}

// -------------------------------------------------------------------

// EpochData

// int32 total = 1 [json_name = "total"];
inline void EpochData::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochData::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochData::total() const {
  // @@protoc_insertion_point(field_get:vega.EpochData.total)
  return _internal_total();
}
inline void EpochData::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {

  total_ = value;
}
inline void EpochData::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:vega.EpochData.total)
}

// int32 offline = 2 [json_name = "offline"];
inline void EpochData::clear_offline() {
  offline_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochData::_internal_offline() const {
  return offline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochData::offline() const {
  // @@protoc_insertion_point(field_get:vega.EpochData.offline)
  return _internal_offline();
}
inline void EpochData::_internal_set_offline(::PROTOBUF_NAMESPACE_ID::int32 value) {

  offline_ = value;
}
inline void EpochData::set_offline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offline(value);
  // @@protoc_insertion_point(field_set:vega.EpochData.offline)
}

// int32 online = 3 [json_name = "online"];
inline void EpochData::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochData::_internal_online() const {
  return online_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochData::online() const {
  // @@protoc_insertion_point(field_get:vega.EpochData.online)
  return _internal_online();
}
inline void EpochData::_internal_set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {

  online_ = value;
}
inline void EpochData::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:vega.EpochData.online)
}

// -------------------------------------------------------------------

// Node

// string id = 1 [json_name = "id"];
inline void Node::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:vega.Node.id)
  return _internal_id();
}
inline void Node::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Node.id)
}
inline std::string* Node::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Node.id)
  return _internal_mutable_id();
}
inline const std::string& Node::_internal_id() const {
  return id_.Get();
}
inline void Node::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Node::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Node.id)
}
inline void Node::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Node.id)
}
inline void Node::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Node.id)
}
inline std::string* Node::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:vega.Node.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Node.id)
}

// string pub_key = 2 [json_name = "pubKey", (.validator.field) = {
inline void Node::clear_pub_key() {
  pub_key_.ClearToEmpty();
}
inline const std::string& Node::pub_key() const {
  // @@protoc_insertion_point(field_get:vega.Node.pub_key)
  return _internal_pub_key();
}
inline void Node::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:vega.Node.pub_key)
}
inline std::string* Node::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:vega.Node.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& Node::_internal_pub_key() const {
  return pub_key_.Get();
}
inline void Node::_internal_set_pub_key(const std::string& value) {

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Node::set_pub_key(std::string&& value) {

  pub_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Node.pub_key)
}
inline void Node::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Node.pub_key)
}
inline void Node::set_pub_key(const char* value,
    size_t size) {

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Node.pub_key)
}
inline std::string* Node::_internal_mutable_pub_key() {

  return pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Node::release_pub_key() {
  // @@protoc_insertion_point(field_release:vega.Node.pub_key)
  return pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {

  } else {

  }
  pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Node.pub_key)
}

// string info_url = 3 [json_name = "infoUrl"];
inline void Node::clear_info_url() {
  info_url_.ClearToEmpty();
}
inline const std::string& Node::info_url() const {
  // @@protoc_insertion_point(field_get:vega.Node.info_url)
  return _internal_info_url();
}
inline void Node::set_info_url(const std::string& value) {
  _internal_set_info_url(value);
  // @@protoc_insertion_point(field_set:vega.Node.info_url)
}
inline std::string* Node::mutable_info_url() {
  // @@protoc_insertion_point(field_mutable:vega.Node.info_url)
  return _internal_mutable_info_url();
}
inline const std::string& Node::_internal_info_url() const {
  return info_url_.Get();
}
inline void Node::_internal_set_info_url(const std::string& value) {

  info_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Node::set_info_url(std::string&& value) {

  info_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Node.info_url)
}
inline void Node::set_info_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  info_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Node.info_url)
}
inline void Node::set_info_url(const char* value,
    size_t size) {

  info_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Node.info_url)
}
inline std::string* Node::_internal_mutable_info_url() {

  return info_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Node::release_info_url() {
  // @@protoc_insertion_point(field_release:vega.Node.info_url)
  return info_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_info_url(std::string* info_url) {
  if (info_url != nullptr) {

  } else {

  }
  info_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Node.info_url)
}

// string location = 4 [json_name = "location"];
inline void Node::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& Node::location() const {
  // @@protoc_insertion_point(field_get:vega.Node.location)
  return _internal_location();
}
inline void Node::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:vega.Node.location)
}
inline std::string* Node::mutable_location() {
  // @@protoc_insertion_point(field_mutable:vega.Node.location)
  return _internal_mutable_location();
}
inline const std::string& Node::_internal_location() const {
  return location_.Get();
}
inline void Node::_internal_set_location(const std::string& value) {

  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Node::set_location(std::string&& value) {

  location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Node.location)
}
inline void Node::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Node.location)
}
inline void Node::set_location(const char* value,
    size_t size) {

  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Node.location)
}
inline std::string* Node::_internal_mutable_location() {

  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Node::release_location() {
  // @@protoc_insertion_point(field_release:vega.Node.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_location(std::string* location) {
  if (location != nullptr) {

  } else {

  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Node.location)
}

// string staked_by_operator = 5 [json_name = "stakedByOperator"];
inline void Node::clear_staked_by_operator() {
  staked_by_operator_.ClearToEmpty();
}
inline const std::string& Node::staked_by_operator() const {
  // @@protoc_insertion_point(field_get:vega.Node.staked_by_operator)
  return _internal_staked_by_operator();
}
inline void Node::set_staked_by_operator(const std::string& value) {
  _internal_set_staked_by_operator(value);
  // @@protoc_insertion_point(field_set:vega.Node.staked_by_operator)
}
inline std::string* Node::mutable_staked_by_operator() {
  // @@protoc_insertion_point(field_mutable:vega.Node.staked_by_operator)
  return _internal_mutable_staked_by_operator();
}
inline const std::string& Node::_internal_staked_by_operator() const {
  return staked_by_operator_.Get();
}
inline void Node::_internal_set_staked_by_operator(const std::string& value) {

  staked_by_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Node::set_staked_by_operator(std::string&& value) {

  staked_by_operator_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Node.staked_by_operator)
}
inline void Node::set_staked_by_operator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  staked_by_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Node.staked_by_operator)
}
inline void Node::set_staked_by_operator(const char* value,
    size_t size) {

  staked_by_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Node.staked_by_operator)
}
inline std::string* Node::_internal_mutable_staked_by_operator() {

  return staked_by_operator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Node::release_staked_by_operator() {
  // @@protoc_insertion_point(field_release:vega.Node.staked_by_operator)
  return staked_by_operator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_staked_by_operator(std::string* staked_by_operator) {
  if (staked_by_operator != nullptr) {

  } else {

  }
  staked_by_operator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), staked_by_operator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Node.staked_by_operator)
}

// string staked_by_delegates = 6 [json_name = "stakedByDelegates"];
inline void Node::clear_staked_by_delegates() {
  staked_by_delegates_.ClearToEmpty();
}
inline const std::string& Node::staked_by_delegates() const {
  // @@protoc_insertion_point(field_get:vega.Node.staked_by_delegates)
  return _internal_staked_by_delegates();
}
inline void Node::set_staked_by_delegates(const std::string& value) {
  _internal_set_staked_by_delegates(value);
  // @@protoc_insertion_point(field_set:vega.Node.staked_by_delegates)
}
inline std::string* Node::mutable_staked_by_delegates() {
  // @@protoc_insertion_point(field_mutable:vega.Node.staked_by_delegates)
  return _internal_mutable_staked_by_delegates();
}
inline const std::string& Node::_internal_staked_by_delegates() const {
  return staked_by_delegates_.Get();
}
inline void Node::_internal_set_staked_by_delegates(const std::string& value) {

  staked_by_delegates_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Node::set_staked_by_delegates(std::string&& value) {

  staked_by_delegates_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Node.staked_by_delegates)
}
inline void Node::set_staked_by_delegates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  staked_by_delegates_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Node.staked_by_delegates)
}
inline void Node::set_staked_by_delegates(const char* value,
    size_t size) {

  staked_by_delegates_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Node.staked_by_delegates)
}
inline std::string* Node::_internal_mutable_staked_by_delegates() {

  return staked_by_delegates_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Node::release_staked_by_delegates() {
  // @@protoc_insertion_point(field_release:vega.Node.staked_by_delegates)
  return staked_by_delegates_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_staked_by_delegates(std::string* staked_by_delegates) {
  if (staked_by_delegates != nullptr) {

  } else {

  }
  staked_by_delegates_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), staked_by_delegates,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Node.staked_by_delegates)
}

// string staked_total = 7 [json_name = "stakedTotal"];
inline void Node::clear_staked_total() {
  staked_total_.ClearToEmpty();
}
inline const std::string& Node::staked_total() const {
  // @@protoc_insertion_point(field_get:vega.Node.staked_total)
  return _internal_staked_total();
}
inline void Node::set_staked_total(const std::string& value) {
  _internal_set_staked_total(value);
  // @@protoc_insertion_point(field_set:vega.Node.staked_total)
}
inline std::string* Node::mutable_staked_total() {
  // @@protoc_insertion_point(field_mutable:vega.Node.staked_total)
  return _internal_mutable_staked_total();
}
inline const std::string& Node::_internal_staked_total() const {
  return staked_total_.Get();
}
inline void Node::_internal_set_staked_total(const std::string& value) {

  staked_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Node::set_staked_total(std::string&& value) {

  staked_total_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Node.staked_total)
}
inline void Node::set_staked_total(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  staked_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Node.staked_total)
}
inline void Node::set_staked_total(const char* value,
    size_t size) {

  staked_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Node.staked_total)
}
inline std::string* Node::_internal_mutable_staked_total() {

  return staked_total_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Node::release_staked_total() {
  // @@protoc_insertion_point(field_release:vega.Node.staked_total)
  return staked_total_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_staked_total(std::string* staked_total) {
  if (staked_total != nullptr) {

  } else {

  }
  staked_total_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), staked_total,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Node.staked_total)
}

// string max_intended_stake = 8 [json_name = "maxIntendedStake"];
inline void Node::clear_max_intended_stake() {
  max_intended_stake_.ClearToEmpty();
}
inline const std::string& Node::max_intended_stake() const {
  // @@protoc_insertion_point(field_get:vega.Node.max_intended_stake)
  return _internal_max_intended_stake();
}
inline void Node::set_max_intended_stake(const std::string& value) {
  _internal_set_max_intended_stake(value);
  // @@protoc_insertion_point(field_set:vega.Node.max_intended_stake)
}
inline std::string* Node::mutable_max_intended_stake() {
  // @@protoc_insertion_point(field_mutable:vega.Node.max_intended_stake)
  return _internal_mutable_max_intended_stake();
}
inline const std::string& Node::_internal_max_intended_stake() const {
  return max_intended_stake_.Get();
}
inline void Node::_internal_set_max_intended_stake(const std::string& value) {

  max_intended_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Node::set_max_intended_stake(std::string&& value) {

  max_intended_stake_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Node.max_intended_stake)
}
inline void Node::set_max_intended_stake(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  max_intended_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Node.max_intended_stake)
}
inline void Node::set_max_intended_stake(const char* value,
    size_t size) {

  max_intended_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Node.max_intended_stake)
}
inline std::string* Node::_internal_mutable_max_intended_stake() {

  return max_intended_stake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Node::release_max_intended_stake() {
  // @@protoc_insertion_point(field_release:vega.Node.max_intended_stake)
  return max_intended_stake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_max_intended_stake(std::string* max_intended_stake) {
  if (max_intended_stake != nullptr) {

  } else {

  }
  max_intended_stake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_intended_stake,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Node.max_intended_stake)
}

// string pending_stake = 9 [json_name = "pendingStake"];
inline void Node::clear_pending_stake() {
  pending_stake_.ClearToEmpty();
}
inline const std::string& Node::pending_stake() const {
  // @@protoc_insertion_point(field_get:vega.Node.pending_stake)
  return _internal_pending_stake();
}
inline void Node::set_pending_stake(const std::string& value) {
  _internal_set_pending_stake(value);
  // @@protoc_insertion_point(field_set:vega.Node.pending_stake)
}
inline std::string* Node::mutable_pending_stake() {
  // @@protoc_insertion_point(field_mutable:vega.Node.pending_stake)
  return _internal_mutable_pending_stake();
}
inline const std::string& Node::_internal_pending_stake() const {
  return pending_stake_.Get();
}
inline void Node::_internal_set_pending_stake(const std::string& value) {

  pending_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Node::set_pending_stake(std::string&& value) {

  pending_stake_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Node.pending_stake)
}
inline void Node::set_pending_stake(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pending_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Node.pending_stake)
}
inline void Node::set_pending_stake(const char* value,
    size_t size) {

  pending_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Node.pending_stake)
}
inline std::string* Node::_internal_mutable_pending_stake() {

  return pending_stake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Node::release_pending_stake() {
  // @@protoc_insertion_point(field_release:vega.Node.pending_stake)
  return pending_stake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_pending_stake(std::string* pending_stake) {
  if (pending_stake != nullptr) {

  } else {

  }
  pending_stake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pending_stake,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Node.pending_stake)
}

// .vega.EpochData epoch_data = 10 [json_name = "epochData", (.validator.field) = {
inline bool Node::_internal_has_epoch_data() const {
  return this != internal_default_instance() && epoch_data_ != nullptr;
}
inline bool Node::has_epoch_data() const {
  return _internal_has_epoch_data();
}
inline void Node::clear_epoch_data() {
  if (GetArena() == nullptr && epoch_data_ != nullptr) {
    delete epoch_data_;
  }
  epoch_data_ = nullptr;
}
inline const ::vega::EpochData& Node::_internal_epoch_data() const {
  const ::vega::EpochData* p = epoch_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::EpochData&>(
      ::vega::_EpochData_default_instance_);
}
inline const ::vega::EpochData& Node::epoch_data() const {
  // @@protoc_insertion_point(field_get:vega.Node.epoch_data)
  return _internal_epoch_data();
}
inline void Node::unsafe_arena_set_allocated_epoch_data(
    ::vega::EpochData* epoch_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_data_);
  }
  epoch_data_ = epoch_data;
  if (epoch_data) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Node.epoch_data)
}
inline ::vega::EpochData* Node::release_epoch_data() {

  ::vega::EpochData* temp = epoch_data_;
  epoch_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::EpochData* Node::unsafe_arena_release_epoch_data() {
  // @@protoc_insertion_point(field_release:vega.Node.epoch_data)

  ::vega::EpochData* temp = epoch_data_;
  epoch_data_ = nullptr;
  return temp;
}
inline ::vega::EpochData* Node::_internal_mutable_epoch_data() {

  if (epoch_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::EpochData>(GetArena());
    epoch_data_ = p;
  }
  return epoch_data_;
}
inline ::vega::EpochData* Node::mutable_epoch_data() {
  // @@protoc_insertion_point(field_mutable:vega.Node.epoch_data)
  return _internal_mutable_epoch_data();
}
inline void Node::set_allocated_epoch_data(::vega::EpochData* epoch_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete epoch_data_;
  }
  if (epoch_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(epoch_data);
    if (message_arena != submessage_arena) {
      epoch_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_data, submessage_arena);
    }

  } else {

  }
  epoch_data_ = epoch_data;
  // @@protoc_insertion_point(field_set_allocated:vega.Node.epoch_data)
}

// .vega.NodeStatus status = 11 [json_name = "status", (.validator.field) = {
inline void Node::clear_status() {
  status_ = 0;
}
inline ::vega::NodeStatus Node::_internal_status() const {
  return static_cast< ::vega::NodeStatus >(status_);
}
inline ::vega::NodeStatus Node::status() const {
  // @@protoc_insertion_point(field_get:vega.Node.status)
  return _internal_status();
}
inline void Node::_internal_set_status(::vega::NodeStatus value) {

  status_ = value;
}
inline void Node::set_status(::vega::NodeStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.Node.status)
}

// repeated .vega.Delegation delagations = 12 [json_name = "delagations"];
inline int Node::_internal_delagations_size() const {
  return delagations_.size();
}
inline int Node::delagations_size() const {
  return _internal_delagations_size();
}
inline void Node::clear_delagations() {
  delagations_.Clear();
}
inline ::vega::Delegation* Node::mutable_delagations(int index) {
  // @@protoc_insertion_point(field_mutable:vega.Node.delagations)
  return delagations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >*
Node::mutable_delagations() {
  // @@protoc_insertion_point(field_mutable_list:vega.Node.delagations)
  return &delagations_;
}
inline const ::vega::Delegation& Node::_internal_delagations(int index) const {
  return delagations_.Get(index);
}
inline const ::vega::Delegation& Node::delagations(int index) const {
  // @@protoc_insertion_point(field_get:vega.Node.delagations)
  return _internal_delagations(index);
}
inline ::vega::Delegation* Node::_internal_add_delagations() {
  return delagations_.Add();
}
inline ::vega::Delegation* Node::add_delagations() {
  // @@protoc_insertion_point(field_add:vega.Node.delagations)
  return _internal_add_delagations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Delegation >&
Node::delagations() const {
  // @@protoc_insertion_point(field_list:vega.Node.delagations)
  return delagations_;
}

// -------------------------------------------------------------------

// NodeData

// string staked_total = 1 [json_name = "stakedTotal"];
inline void NodeData::clear_staked_total() {
  staked_total_.ClearToEmpty();
}
inline const std::string& NodeData::staked_total() const {
  // @@protoc_insertion_point(field_get:vega.NodeData.staked_total)
  return _internal_staked_total();
}
inline void NodeData::set_staked_total(const std::string& value) {
  _internal_set_staked_total(value);
  // @@protoc_insertion_point(field_set:vega.NodeData.staked_total)
}
inline std::string* NodeData::mutable_staked_total() {
  // @@protoc_insertion_point(field_mutable:vega.NodeData.staked_total)
  return _internal_mutable_staked_total();
}
inline const std::string& NodeData::_internal_staked_total() const {
  return staked_total_.Get();
}
inline void NodeData::_internal_set_staked_total(const std::string& value) {

  staked_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeData::set_staked_total(std::string&& value) {

  staked_total_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeData.staked_total)
}
inline void NodeData::set_staked_total(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  staked_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NodeData.staked_total)
}
inline void NodeData::set_staked_total(const char* value,
    size_t size) {

  staked_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NodeData.staked_total)
}
inline std::string* NodeData::_internal_mutable_staked_total() {

  return staked_total_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeData::release_staked_total() {
  // @@protoc_insertion_point(field_release:vega.NodeData.staked_total)
  return staked_total_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeData::set_allocated_staked_total(std::string* staked_total) {
  if (staked_total != nullptr) {

  } else {

  }
  staked_total_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), staked_total,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NodeData.staked_total)
}

// uint32 total_nodes = 2 [json_name = "totalNodes"];
inline void NodeData::clear_total_nodes() {
  total_nodes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeData::_internal_total_nodes() const {
  return total_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeData::total_nodes() const {
  // @@protoc_insertion_point(field_get:vega.NodeData.total_nodes)
  return _internal_total_nodes();
}
inline void NodeData::_internal_set_total_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  total_nodes_ = value;
}
inline void NodeData::set_total_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_nodes(value);
  // @@protoc_insertion_point(field_set:vega.NodeData.total_nodes)
}

// uint32 inactive_nodes = 3 [json_name = "inactiveNodes"];
inline void NodeData::clear_inactive_nodes() {
  inactive_nodes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeData::_internal_inactive_nodes() const {
  return inactive_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeData::inactive_nodes() const {
  // @@protoc_insertion_point(field_get:vega.NodeData.inactive_nodes)
  return _internal_inactive_nodes();
}
inline void NodeData::_internal_set_inactive_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  inactive_nodes_ = value;
}
inline void NodeData::set_inactive_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inactive_nodes(value);
  // @@protoc_insertion_point(field_set:vega.NodeData.inactive_nodes)
}

// uint32 validating_nodes = 4 [json_name = "validatingNodes"];
inline void NodeData::clear_validating_nodes() {
  validating_nodes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeData::_internal_validating_nodes() const {
  return validating_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeData::validating_nodes() const {
  // @@protoc_insertion_point(field_get:vega.NodeData.validating_nodes)
  return _internal_validating_nodes();
}
inline void NodeData::_internal_set_validating_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  validating_nodes_ = value;
}
inline void NodeData::set_validating_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_validating_nodes(value);
  // @@protoc_insertion_point(field_set:vega.NodeData.validating_nodes)
}

// float uptime = 5 [json_name = "uptime"];
inline void NodeData::clear_uptime() {
  uptime_ = 0;
}
inline float NodeData::_internal_uptime() const {
  return uptime_;
}
inline float NodeData::uptime() const {
  // @@protoc_insertion_point(field_get:vega.NodeData.uptime)
  return _internal_uptime();
}
inline void NodeData::_internal_set_uptime(float value) {

  uptime_ = value;
}
inline void NodeData::set_uptime(float value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:vega.NodeData.uptime)
}

// -------------------------------------------------------------------

// Delegation

// string party = 1 [json_name = "party"];
inline void Delegation::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& Delegation::party() const {
  // @@protoc_insertion_point(field_get:vega.Delegation.party)
  return _internal_party();
}
inline void Delegation::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.Delegation.party)
}
inline std::string* Delegation::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.Delegation.party)
  return _internal_mutable_party();
}
inline const std::string& Delegation::_internal_party() const {
  return party_.Get();
}
inline void Delegation::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Delegation::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Delegation.party)
}
inline void Delegation::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Delegation.party)
}
inline void Delegation::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Delegation.party)
}
inline std::string* Delegation::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Delegation::release_party() {
  // @@protoc_insertion_point(field_release:vega.Delegation.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Delegation::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Delegation.party)
}

// string node_id = 2 [json_name = "nodeId"];
inline void Delegation::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& Delegation::node_id() const {
  // @@protoc_insertion_point(field_get:vega.Delegation.node_id)
  return _internal_node_id();
}
inline void Delegation::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:vega.Delegation.node_id)
}
inline std::string* Delegation::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:vega.Delegation.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& Delegation::_internal_node_id() const {
  return node_id_.Get();
}
inline void Delegation::_internal_set_node_id(const std::string& value) {

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Delegation::set_node_id(std::string&& value) {

  node_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Delegation.node_id)
}
inline void Delegation::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Delegation.node_id)
}
inline void Delegation::set_node_id(const char* value,
    size_t size) {

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Delegation.node_id)
}
inline std::string* Delegation::_internal_mutable_node_id() {

  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Delegation::release_node_id() {
  // @@protoc_insertion_point(field_release:vega.Delegation.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Delegation::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {

  } else {

  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Delegation.node_id)
}

// string amount = 3 [json_name = "amount"];
inline void Delegation::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Delegation::amount() const {
  // @@protoc_insertion_point(field_get:vega.Delegation.amount)
  return _internal_amount();
}
inline void Delegation::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.Delegation.amount)
}
inline std::string* Delegation::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.Delegation.amount)
  return _internal_mutable_amount();
}
inline const std::string& Delegation::_internal_amount() const {
  return amount_.Get();
}
inline void Delegation::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Delegation::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Delegation.amount)
}
inline void Delegation::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Delegation.amount)
}
inline void Delegation::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Delegation.amount)
}
inline std::string* Delegation::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Delegation::release_amount() {
  // @@protoc_insertion_point(field_release:vega.Delegation.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Delegation::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Delegation.amount)
}

// string epoch_seq = 4 [json_name = "epochSeq"];
inline void Delegation::clear_epoch_seq() {
  epoch_seq_.ClearToEmpty();
}
inline const std::string& Delegation::epoch_seq() const {
  // @@protoc_insertion_point(field_get:vega.Delegation.epoch_seq)
  return _internal_epoch_seq();
}
inline void Delegation::set_epoch_seq(const std::string& value) {
  _internal_set_epoch_seq(value);
  // @@protoc_insertion_point(field_set:vega.Delegation.epoch_seq)
}
inline std::string* Delegation::mutable_epoch_seq() {
  // @@protoc_insertion_point(field_mutable:vega.Delegation.epoch_seq)
  return _internal_mutable_epoch_seq();
}
inline const std::string& Delegation::_internal_epoch_seq() const {
  return epoch_seq_.Get();
}
inline void Delegation::_internal_set_epoch_seq(const std::string& value) {

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Delegation::set_epoch_seq(std::string&& value) {

  epoch_seq_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Delegation.epoch_seq)
}
inline void Delegation::set_epoch_seq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Delegation.epoch_seq)
}
inline void Delegation::set_epoch_seq(const char* value,
    size_t size) {

  epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Delegation.epoch_seq)
}
inline std::string* Delegation::_internal_mutable_epoch_seq() {

  return epoch_seq_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Delegation::release_epoch_seq() {
  // @@protoc_insertion_point(field_release:vega.Delegation.epoch_seq)
  return epoch_seq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Delegation::set_allocated_epoch_seq(std::string* epoch_seq) {
  if (epoch_seq != nullptr) {

  } else {

  }
  epoch_seq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), epoch_seq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Delegation.epoch_seq)
}

// -------------------------------------------------------------------

// RewardDetails

// string asset_id = 1 [json_name = "assetId"];
inline void RewardDetails::clear_asset_id() {
  asset_id_.ClearToEmpty();
}
inline const std::string& RewardDetails::asset_id() const {
  // @@protoc_insertion_point(field_get:vega.RewardDetails.asset_id)
  return _internal_asset_id();
}
inline void RewardDetails::set_asset_id(const std::string& value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:vega.RewardDetails.asset_id)
}
inline std::string* RewardDetails::mutable_asset_id() {
  // @@protoc_insertion_point(field_mutable:vega.RewardDetails.asset_id)
  return _internal_mutable_asset_id();
}
inline const std::string& RewardDetails::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void RewardDetails::_internal_set_asset_id(const std::string& value) {

  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardDetails::set_asset_id(std::string&& value) {

  asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.RewardDetails.asset_id)
}
inline void RewardDetails::set_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.RewardDetails.asset_id)
}
inline void RewardDetails::set_asset_id(const char* value,
    size_t size) {

  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.RewardDetails.asset_id)
}
inline std::string* RewardDetails::_internal_mutable_asset_id() {

  return asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardDetails::release_asset_id() {
  // @@protoc_insertion_point(field_release:vega.RewardDetails.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardDetails::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {

  } else {

  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.RewardDetails.asset_id)
}

// string party_id = 2 [json_name = "partyId"];
inline void RewardDetails::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& RewardDetails::party_id() const {
  // @@protoc_insertion_point(field_get:vega.RewardDetails.party_id)
  return _internal_party_id();
}
inline void RewardDetails::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.RewardDetails.party_id)
}
inline std::string* RewardDetails::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.RewardDetails.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& RewardDetails::_internal_party_id() const {
  return party_id_.Get();
}
inline void RewardDetails::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardDetails::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.RewardDetails.party_id)
}
inline void RewardDetails::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.RewardDetails.party_id)
}
inline void RewardDetails::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.RewardDetails.party_id)
}
inline std::string* RewardDetails::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardDetails::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.RewardDetails.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardDetails::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.RewardDetails.party_id)
}

// uint64 epoch = 3 [json_name = "epoch"];
inline void RewardDetails::clear_epoch() {
  epoch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RewardDetails::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RewardDetails::epoch() const {
  // @@protoc_insertion_point(field_get:vega.RewardDetails.epoch)
  return _internal_epoch();
}
inline void RewardDetails::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  epoch_ = value;
}
inline void RewardDetails::set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:vega.RewardDetails.epoch)
}

// string amount = 4 [json_name = "amount"];
inline void RewardDetails::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& RewardDetails::amount() const {
  // @@protoc_insertion_point(field_get:vega.RewardDetails.amount)
  return _internal_amount();
}
inline void RewardDetails::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.RewardDetails.amount)
}
inline std::string* RewardDetails::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.RewardDetails.amount)
  return _internal_mutable_amount();
}
inline const std::string& RewardDetails::_internal_amount() const {
  return amount_.Get();
}
inline void RewardDetails::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardDetails::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.RewardDetails.amount)
}
inline void RewardDetails::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.RewardDetails.amount)
}
inline void RewardDetails::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.RewardDetails.amount)
}
inline std::string* RewardDetails::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardDetails::release_amount() {
  // @@protoc_insertion_point(field_release:vega.RewardDetails.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardDetails::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.RewardDetails.amount)
}

// string percentage_of_total = 5 [json_name = "percentageOfTotal"];
inline void RewardDetails::clear_percentage_of_total() {
  percentage_of_total_.ClearToEmpty();
}
inline const std::string& RewardDetails::percentage_of_total() const {
  // @@protoc_insertion_point(field_get:vega.RewardDetails.percentage_of_total)
  return _internal_percentage_of_total();
}
inline void RewardDetails::set_percentage_of_total(const std::string& value) {
  _internal_set_percentage_of_total(value);
  // @@protoc_insertion_point(field_set:vega.RewardDetails.percentage_of_total)
}
inline std::string* RewardDetails::mutable_percentage_of_total() {
  // @@protoc_insertion_point(field_mutable:vega.RewardDetails.percentage_of_total)
  return _internal_mutable_percentage_of_total();
}
inline const std::string& RewardDetails::_internal_percentage_of_total() const {
  return percentage_of_total_.Get();
}
inline void RewardDetails::_internal_set_percentage_of_total(const std::string& value) {

  percentage_of_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardDetails::set_percentage_of_total(std::string&& value) {

  percentage_of_total_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.RewardDetails.percentage_of_total)
}
inline void RewardDetails::set_percentage_of_total(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  percentage_of_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.RewardDetails.percentage_of_total)
}
inline void RewardDetails::set_percentage_of_total(const char* value,
    size_t size) {

  percentage_of_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.RewardDetails.percentage_of_total)
}
inline std::string* RewardDetails::_internal_mutable_percentage_of_total() {

  return percentage_of_total_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardDetails::release_percentage_of_total() {
  // @@protoc_insertion_point(field_release:vega.RewardDetails.percentage_of_total)
  return percentage_of_total_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardDetails::set_allocated_percentage_of_total(std::string* percentage_of_total) {
  if (percentage_of_total != nullptr) {

  } else {

  }
  percentage_of_total_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), percentage_of_total,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.RewardDetails.percentage_of_total)
}

// int64 received_at = 6 [json_name = "receivedAt"];
inline void RewardDetails::clear_received_at() {
  received_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RewardDetails::_internal_received_at() const {
  return received_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RewardDetails::received_at() const {
  // @@protoc_insertion_point(field_get:vega.RewardDetails.received_at)
  return _internal_received_at();
}
inline void RewardDetails::_internal_set_received_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  received_at_ = value;
}
inline void RewardDetails::set_received_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_received_at(value);
  // @@protoc_insertion_point(field_set:vega.RewardDetails.received_at)
}

// -------------------------------------------------------------------

// RewardPerAssetDetail

// string asset = 1 [json_name = "asset"];
inline void RewardPerAssetDetail::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& RewardPerAssetDetail::asset() const {
  // @@protoc_insertion_point(field_get:vega.RewardPerAssetDetail.asset)
  return _internal_asset();
}
inline void RewardPerAssetDetail::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.RewardPerAssetDetail.asset)
}
inline std::string* RewardPerAssetDetail::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.RewardPerAssetDetail.asset)
  return _internal_mutable_asset();
}
inline const std::string& RewardPerAssetDetail::_internal_asset() const {
  return asset_.Get();
}
inline void RewardPerAssetDetail::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardPerAssetDetail::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.RewardPerAssetDetail.asset)
}
inline void RewardPerAssetDetail::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.RewardPerAssetDetail.asset)
}
inline void RewardPerAssetDetail::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.RewardPerAssetDetail.asset)
}
inline std::string* RewardPerAssetDetail::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardPerAssetDetail::release_asset() {
  // @@protoc_insertion_point(field_release:vega.RewardPerAssetDetail.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardPerAssetDetail::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.RewardPerAssetDetail.asset)
}

// repeated .vega.RewardDetails details = 2 [json_name = "details"];
inline int RewardPerAssetDetail::_internal_details_size() const {
  return details_.size();
}
inline int RewardPerAssetDetail::details_size() const {
  return _internal_details_size();
}
inline void RewardPerAssetDetail::clear_details() {
  details_.Clear();
}
inline ::vega::RewardDetails* RewardPerAssetDetail::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:vega.RewardPerAssetDetail.details)
  return details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::RewardDetails >*
RewardPerAssetDetail::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:vega.RewardPerAssetDetail.details)
  return &details_;
}
inline const ::vega::RewardDetails& RewardPerAssetDetail::_internal_details(int index) const {
  return details_.Get(index);
}
inline const ::vega::RewardDetails& RewardPerAssetDetail::details(int index) const {
  // @@protoc_insertion_point(field_get:vega.RewardPerAssetDetail.details)
  return _internal_details(index);
}
inline ::vega::RewardDetails* RewardPerAssetDetail::_internal_add_details() {
  return details_.Add();
}
inline ::vega::RewardDetails* RewardPerAssetDetail::add_details() {
  // @@protoc_insertion_point(field_add:vega.RewardPerAssetDetail.details)
  return _internal_add_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::RewardDetails >&
RewardPerAssetDetail::details() const {
  // @@protoc_insertion_point(field_list:vega.RewardPerAssetDetail.details)
  return details_;
}

// string total_for_asset = 3 [json_name = "totalForAsset"];
inline void RewardPerAssetDetail::clear_total_for_asset() {
  total_for_asset_.ClearToEmpty();
}
inline const std::string& RewardPerAssetDetail::total_for_asset() const {
  // @@protoc_insertion_point(field_get:vega.RewardPerAssetDetail.total_for_asset)
  return _internal_total_for_asset();
}
inline void RewardPerAssetDetail::set_total_for_asset(const std::string& value) {
  _internal_set_total_for_asset(value);
  // @@protoc_insertion_point(field_set:vega.RewardPerAssetDetail.total_for_asset)
}
inline std::string* RewardPerAssetDetail::mutable_total_for_asset() {
  // @@protoc_insertion_point(field_mutable:vega.RewardPerAssetDetail.total_for_asset)
  return _internal_mutable_total_for_asset();
}
inline const std::string& RewardPerAssetDetail::_internal_total_for_asset() const {
  return total_for_asset_.Get();
}
inline void RewardPerAssetDetail::_internal_set_total_for_asset(const std::string& value) {

  total_for_asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RewardPerAssetDetail::set_total_for_asset(std::string&& value) {

  total_for_asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.RewardPerAssetDetail.total_for_asset)
}
inline void RewardPerAssetDetail::set_total_for_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  total_for_asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.RewardPerAssetDetail.total_for_asset)
}
inline void RewardPerAssetDetail::set_total_for_asset(const char* value,
    size_t size) {

  total_for_asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.RewardPerAssetDetail.total_for_asset)
}
inline std::string* RewardPerAssetDetail::_internal_mutable_total_for_asset() {

  return total_for_asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RewardPerAssetDetail::release_total_for_asset() {
  // @@protoc_insertion_point(field_release:vega.RewardPerAssetDetail.total_for_asset)
  return total_for_asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardPerAssetDetail::set_allocated_total_for_asset(std::string* total_for_asset) {
  if (total_for_asset != nullptr) {

  } else {

  }
  total_for_asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), total_for_asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.RewardPerAssetDetail.total_for_asset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vega

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vega::Order_TimeInForce> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Order_TimeInForce>() {
  return ::vega::Order_TimeInForce_descriptor();
}
template <> struct is_proto_enum< ::vega::Order_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Order_Type>() {
  return ::vega::Order_Type_descriptor();
}
template <> struct is_proto_enum< ::vega::Order_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Order_Status>() {
  return ::vega::Order_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::Trade_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Trade_Type>() {
  return ::vega::Trade_Type_descriptor();
}
template <> struct is_proto_enum< ::vega::Deposit_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Deposit_Status>() {
  return ::vega::Deposit_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::Withdrawal_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Withdrawal_Status>() {
  return ::vega::Withdrawal_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::LiquidityProvision_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::LiquidityProvision_Status>() {
  return ::vega::LiquidityProvision_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Side>() {
  return ::vega::Side_descriptor();
}
template <> struct is_proto_enum< ::vega::Interval> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Interval>() {
  return ::vega::Interval_descriptor();
}
template <> struct is_proto_enum< ::vega::AuctionTrigger> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::AuctionTrigger>() {
  return ::vega::AuctionTrigger_descriptor();
}
template <> struct is_proto_enum< ::vega::PeggedReference> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::PeggedReference>() {
  return ::vega::PeggedReference_descriptor();
}
template <> struct is_proto_enum< ::vega::OrderError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::OrderError>() {
  return ::vega::OrderError_descriptor();
}
template <> struct is_proto_enum< ::vega::ChainStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::ChainStatus>() {
  return ::vega::ChainStatus_descriptor();
}
template <> struct is_proto_enum< ::vega::AccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::AccountType>() {
  return ::vega::AccountType_descriptor();
}
template <> struct is_proto_enum< ::vega::TransferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::TransferType>() {
  return ::vega::TransferType_descriptor();
}
template <> struct is_proto_enum< ::vega::NodeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::NodeStatus>() {
  return ::vega::NodeStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vega_2eproto
