// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snapshot/v1/snapshot.proto

#include "snapshot/v1/snapshot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_assets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AssetDetails_assets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParameter_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proposal_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snapshot_2fv1_2fsnapshot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssetBalance_snapshot_2fv1_2fsnapshot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snapshot_2fv1_2fsnapshot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssetEntry_snapshot_2fv1_2fsnapshot_2eproto;
namespace vega {
namespace snapshot {
namespace v1 {
class SnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Snapshot> _instance;
} _Snapshot_default_instance_;
class CheckpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Checkpoint> _instance;
} _Checkpoint_default_instance_;
class AssetEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetEntry> _instance;
} _AssetEntry_default_instance_;
class AssetsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Assets> _instance;
} _Assets_default_instance_;
class AssetBalanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetBalance> _instance;
} _AssetBalance_default_instance_;
class CollateralDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Collateral> _instance;
} _Collateral_default_instance_;
class NetParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetParams> _instance;
} _NetParams_default_instance_;
class ProposalsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proposals> _instance;
} _Proposals_default_instance_;
}  // namespace v1
}  // namespace snapshot
}  // namespace vega
static void InitDefaultsscc_info_AssetBalance_snapshot_2fv1_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::snapshot::v1::_AssetBalance_default_instance_;
    new (ptr) ::vega::snapshot::v1::AssetBalance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssetBalance_snapshot_2fv1_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssetBalance_snapshot_2fv1_2fsnapshot_2eproto}, {}};

static void InitDefaultsscc_info_AssetEntry_snapshot_2fv1_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::snapshot::v1::_AssetEntry_default_instance_;
    new (ptr) ::vega::snapshot::v1::AssetEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssetEntry_snapshot_2fv1_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AssetEntry_snapshot_2fv1_2fsnapshot_2eproto}, {
      &scc_info_AssetDetails_assets_2eproto.base,}};

static void InitDefaultsscc_info_Assets_snapshot_2fv1_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::snapshot::v1::_Assets_default_instance_;
    new (ptr) ::vega::snapshot::v1::Assets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Assets_snapshot_2fv1_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Assets_snapshot_2fv1_2fsnapshot_2eproto}, {
      &scc_info_AssetEntry_snapshot_2fv1_2fsnapshot_2eproto.base,}};

static void InitDefaultsscc_info_Checkpoint_snapshot_2fv1_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::snapshot::v1::_Checkpoint_default_instance_;
    new (ptr) ::vega::snapshot::v1::Checkpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Checkpoint_snapshot_2fv1_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Checkpoint_snapshot_2fv1_2fsnapshot_2eproto}, {}};

static void InitDefaultsscc_info_Collateral_snapshot_2fv1_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::snapshot::v1::_Collateral_default_instance_;
    new (ptr) ::vega::snapshot::v1::Collateral();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Collateral_snapshot_2fv1_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Collateral_snapshot_2fv1_2fsnapshot_2eproto}, {
      &scc_info_AssetBalance_snapshot_2fv1_2fsnapshot_2eproto.base,}};

static void InitDefaultsscc_info_NetParams_snapshot_2fv1_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::snapshot::v1::_NetParams_default_instance_;
    new (ptr) ::vega::snapshot::v1::NetParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetParams_snapshot_2fv1_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetParams_snapshot_2fv1_2fsnapshot_2eproto}, {
      &scc_info_NetworkParameter_vega_2eproto.base,}};

static void InitDefaultsscc_info_Proposals_snapshot_2fv1_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::snapshot::v1::_Proposals_default_instance_;
    new (ptr) ::vega::snapshot::v1::Proposals();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proposals_snapshot_2fv1_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Proposals_snapshot_2fv1_2fsnapshot_2eproto}, {
      &scc_info_Proposal_governance_2eproto.base,}};

static void InitDefaultsscc_info_Snapshot_snapshot_2fv1_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::snapshot::v1::_Snapshot_default_instance_;
    new (ptr) ::vega::snapshot::v1::Snapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Snapshot_snapshot_2fv1_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Snapshot_snapshot_2fv1_2fsnapshot_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_snapshot_2fv1_2fsnapshot_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_snapshot_2fv1_2fsnapshot_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_snapshot_2fv1_2fsnapshot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_snapshot_2fv1_2fsnapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Snapshot, hash_),
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Snapshot, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Checkpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Checkpoint, governance_),
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Checkpoint, assets_),
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Checkpoint, collateral_),
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Checkpoint, network_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::AssetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::AssetEntry, id_),
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::AssetEntry, asset_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Assets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Assets, assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::AssetBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::AssetBalance, party_),
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::AssetBalance, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::AssetBalance, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Collateral, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Collateral, balances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::NetParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::NetParams, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Proposals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::snapshot::v1::Proposals, proposals_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::snapshot::v1::Snapshot)},
  { 7, -1, sizeof(::vega::snapshot::v1::Checkpoint)},
  { 16, -1, sizeof(::vega::snapshot::v1::AssetEntry)},
  { 23, -1, sizeof(::vega::snapshot::v1::Assets)},
  { 29, -1, sizeof(::vega::snapshot::v1::AssetBalance)},
  { 37, -1, sizeof(::vega::snapshot::v1::Collateral)},
  { 43, -1, sizeof(::vega::snapshot::v1::NetParams)},
  { 49, -1, sizeof(::vega::snapshot::v1::Proposals)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::snapshot::v1::_Snapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::snapshot::v1::_Checkpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::snapshot::v1::_AssetEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::snapshot::v1::_Assets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::snapshot::v1::_AssetBalance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::snapshot::v1::_Collateral_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::snapshot::v1::_NetParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::snapshot::v1::_Proposals_default_instance_),
};

const char descriptor_table_protodef_snapshot_2fv1_2fsnapshot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032snapshot/v1/snapshot.proto\022\020vega.snaps"
  "hot.v1\032\nvega.proto\032\014assets.proto\032\020govern"
  "ance.proto\"4\n\010Snapshot\022\022\n\004hash\030\001 \001(\014R\004ha"
  "sh\022\024\n\005state\030\002 \001(\014R\005state\"\223\001\n\nCheckpoint\022"
  "\036\n\ngovernance\030\001 \001(\014R\ngovernance\022\026\n\006asset"
  "s\030\002 \001(\014R\006assets\022\036\n\ncollateral\030\003 \001(\014R\ncol"
  "lateral\022-\n\022network_parameters\030\004 \001(\014R\021net"
  "workParameters\"U\n\nAssetEntry\022\016\n\002id\030\001 \001(\t"
  "R\002id\0227\n\rasset_details\030\002 \001(\0132\022.vega.Asset"
  "DetailsR\014assetDetails\">\n\006Assets\0224\n\006asset"
  "s\030\001 \003(\0132\034.vega.snapshot.v1.AssetEntryR\006a"
  "ssets\"T\n\014AssetBalance\022\024\n\005party\030\001 \001(\tR\005pa"
  "rty\022\024\n\005asset\030\002 \001(\tR\005asset\022\030\n\007balance\030\003 \001"
  "(\tR\007balance\"H\n\nCollateral\022:\n\010balances\030\001 "
  "\003(\0132\036.vega.snapshot.v1.AssetBalanceR\010bal"
  "ances\";\n\tNetParams\022.\n\006params\030\001 \003(\0132\026.veg"
  "a.NetworkParameterR\006params\"9\n\tProposals\022"
  ",\n\tproposals\030\001 \003(\0132\016.vega.ProposalR\tprop"
  "osalsBO\n io.vegaprotocol.vega.snapshot.v"
  "1Z+code.vegaprotocol.io/vega/proto/snaps"
  "hot/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_snapshot_2fv1_2fsnapshot_2eproto_deps[3] = {
  &::descriptor_table_assets_2eproto,
  &::descriptor_table_governance_2eproto,
  &::descriptor_table_vega_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_snapshot_2fv1_2fsnapshot_2eproto_sccs[8] = {
  &scc_info_AssetBalance_snapshot_2fv1_2fsnapshot_2eproto.base,
  &scc_info_AssetEntry_snapshot_2fv1_2fsnapshot_2eproto.base,
  &scc_info_Assets_snapshot_2fv1_2fsnapshot_2eproto.base,
  &scc_info_Checkpoint_snapshot_2fv1_2fsnapshot_2eproto.base,
  &scc_info_Collateral_snapshot_2fv1_2fsnapshot_2eproto.base,
  &scc_info_NetParams_snapshot_2fv1_2fsnapshot_2eproto.base,
  &scc_info_Proposals_snapshot_2fv1_2fsnapshot_2eproto.base,
  &scc_info_Snapshot_snapshot_2fv1_2fsnapshot_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_snapshot_2fv1_2fsnapshot_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snapshot_2fv1_2fsnapshot_2eproto = {
  false, false, descriptor_table_protodef_snapshot_2fv1_2fsnapshot_2eproto, "snapshot/v1/snapshot.proto", 814,
  &descriptor_table_snapshot_2fv1_2fsnapshot_2eproto_once, descriptor_table_snapshot_2fv1_2fsnapshot_2eproto_sccs, descriptor_table_snapshot_2fv1_2fsnapshot_2eproto_deps, 8, 3,
  schemas, file_default_instances, TableStruct_snapshot_2fv1_2fsnapshot_2eproto::offsets,
  file_level_metadata_snapshot_2fv1_2fsnapshot_2eproto, 8, file_level_enum_descriptors_snapshot_2fv1_2fsnapshot_2eproto, file_level_service_descriptors_snapshot_2fv1_2fsnapshot_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_snapshot_2fv1_2fsnapshot_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_snapshot_2fv1_2fsnapshot_2eproto)), true);
namespace vega {
namespace snapshot {
namespace v1 {

// ===================================================================

class Snapshot::_Internal {
 public:
};

Snapshot::Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.snapshot.v1.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(),
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.snapshot.v1.Snapshot)
}

void Snapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Snapshot_snapshot_2fv1_2fsnapshot_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:vega.snapshot.v1.Snapshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Snapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Snapshot::ArenaDtor(void* object) {
  Snapshot* _this = reinterpret_cast< Snapshot* >(object);
  (void)_this;
}
void Snapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Snapshot& Snapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Snapshot_snapshot_2fv1_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.snapshot.v1.Snapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  state_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes state = 2 [json_name = "state"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Snapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.snapshot.v1.Snapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1 [json_name = "hash"];
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // bytes state = 2 [json_name = "state"];
  if (this->state().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.snapshot.v1.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.snapshot.v1.Snapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1 [json_name = "hash"];
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes state = 2 [json_name = "state"];
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.snapshot.v1.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Snapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Snapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.snapshot.v1.Snapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.snapshot.v1.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.snapshot.v1.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
}

void Snapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.snapshot.v1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.snapshot.v1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Snapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Checkpoint::_Internal {
 public:
};

Checkpoint::Checkpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.snapshot.v1.Checkpoint)
}
Checkpoint::Checkpoint(const Checkpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  governance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_governance().empty()) {
    governance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_governance(),
      GetArena());
  }
  assets_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assets().empty()) {
    assets_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assets(),
      GetArena());
  }
  collateral_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collateral().empty()) {
    collateral_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collateral(),
      GetArena());
  }
  network_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network_parameters().empty()) {
    network_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_network_parameters(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.snapshot.v1.Checkpoint)
}

void Checkpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Checkpoint_snapshot_2fv1_2fsnapshot_2eproto.base);
  governance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assets_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collateral_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Checkpoint::~Checkpoint() {
  // @@protoc_insertion_point(destructor:vega.snapshot.v1.Checkpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Checkpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  governance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assets_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collateral_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Checkpoint::ArenaDtor(void* object) {
  Checkpoint* _this = reinterpret_cast< Checkpoint* >(object);
  (void)_this;
}
void Checkpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Checkpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Checkpoint& Checkpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Checkpoint_snapshot_2fv1_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void Checkpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.snapshot.v1.Checkpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  governance_.ClearToEmpty();
  assets_.ClearToEmpty();
  collateral_.ClearToEmpty();
  network_parameters_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Checkpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes governance = 1 [json_name = "governance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_governance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes assets = 2 [json_name = "assets"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_assets();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes collateral = 3 [json_name = "collateral"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collateral();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes network_parameters = 4 [json_name = "networkParameters"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_network_parameters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Checkpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.snapshot.v1.Checkpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes governance = 1 [json_name = "governance"];
  if (this->governance().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_governance(), target);
  }

  // bytes assets = 2 [json_name = "assets"];
  if (this->assets().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_assets(), target);
  }

  // bytes collateral = 3 [json_name = "collateral"];
  if (this->collateral().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_collateral(), target);
  }

  // bytes network_parameters = 4 [json_name = "networkParameters"];
  if (this->network_parameters().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_network_parameters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.snapshot.v1.Checkpoint)
  return target;
}

size_t Checkpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.snapshot.v1.Checkpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes governance = 1 [json_name = "governance"];
  if (this->governance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_governance());
  }

  // bytes assets = 2 [json_name = "assets"];
  if (this->assets().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_assets());
  }

  // bytes collateral = 3 [json_name = "collateral"];
  if (this->collateral().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_collateral());
  }

  // bytes network_parameters = 4 [json_name = "networkParameters"];
  if (this->network_parameters().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_network_parameters());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Checkpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.snapshot.v1.Checkpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Checkpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Checkpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.snapshot.v1.Checkpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.snapshot.v1.Checkpoint)
    MergeFrom(*source);
  }
}

void Checkpoint::MergeFrom(const Checkpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.snapshot.v1.Checkpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.governance().size() > 0) {
    _internal_set_governance(from._internal_governance());
  }
  if (from.assets().size() > 0) {
    _internal_set_assets(from._internal_assets());
  }
  if (from.collateral().size() > 0) {
    _internal_set_collateral(from._internal_collateral());
  }
  if (from.network_parameters().size() > 0) {
    _internal_set_network_parameters(from._internal_network_parameters());
  }
}

void Checkpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.snapshot.v1.Checkpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Checkpoint::CopyFrom(const Checkpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.snapshot.v1.Checkpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Checkpoint::IsInitialized() const {
  return true;
}

void Checkpoint::InternalSwap(Checkpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  governance_.Swap(&other->governance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assets_.Swap(&other->assets_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collateral_.Swap(&other->collateral_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  network_parameters_.Swap(&other->network_parameters_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Checkpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetEntry::_Internal {
 public:
  static const ::vega::AssetDetails& asset_details(const AssetEntry* msg);
};

const ::vega::AssetDetails&
AssetEntry::_Internal::asset_details(const AssetEntry* msg) {
  return *msg->asset_details_;
}
void AssetEntry::clear_asset_details() {
  if (GetArena() == nullptr && asset_details_ != nullptr) {
    delete asset_details_;
  }
  asset_details_ = nullptr;
}
AssetEntry::AssetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.snapshot.v1.AssetEntry)
}
AssetEntry::AssetEntry(const AssetEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  if (from._internal_has_asset_details()) {
    asset_details_ = new ::vega::AssetDetails(*from.asset_details_);
  } else {
    asset_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.snapshot.v1.AssetEntry)
}

void AssetEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetEntry_snapshot_2fv1_2fsnapshot_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_details_ = nullptr;
}

AssetEntry::~AssetEntry() {
  // @@protoc_insertion_point(destructor:vega.snapshot.v1.AssetEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete asset_details_;
}

void AssetEntry::ArenaDtor(void* object) {
  AssetEntry* _this = reinterpret_cast< AssetEntry* >(object);
  (void)_this;
}
void AssetEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetEntry& AssetEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetEntry_snapshot_2fv1_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void AssetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.snapshot.v1.AssetEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArena() == nullptr && asset_details_ != nullptr) {
    delete asset_details_;
  }
  asset_details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.snapshot.v1.AssetEntry.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.AssetDetails asset_details = 2 [json_name = "assetDetails"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.snapshot.v1.AssetEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.snapshot.v1.AssetEntry.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .vega.AssetDetails asset_details = 2 [json_name = "assetDetails"];
  if (this->has_asset_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::asset_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.snapshot.v1.AssetEntry)
  return target;
}

size_t AssetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.snapshot.v1.AssetEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .vega.AssetDetails asset_details = 2 [json_name = "assetDetails"];
  if (this->has_asset_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_details_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.snapshot.v1.AssetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.snapshot.v1.AssetEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.snapshot.v1.AssetEntry)
    MergeFrom(*source);
  }
}

void AssetEntry::MergeFrom(const AssetEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.snapshot.v1.AssetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_asset_details()) {
    _internal_mutable_asset_details()->::vega::AssetDetails::MergeFrom(from._internal_asset_details());
  }
}

void AssetEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.snapshot.v1.AssetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetEntry::CopyFrom(const AssetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.snapshot.v1.AssetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetEntry::IsInitialized() const {
  return true;
}

void AssetEntry::InternalSwap(AssetEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(asset_details_, other->asset_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Assets::_Internal {
 public:
};

Assets::Assets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  assets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.snapshot.v1.Assets)
}
Assets::Assets(const Assets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      assets_(from.assets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.snapshot.v1.Assets)
}

void Assets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Assets_snapshot_2fv1_2fsnapshot_2eproto.base);
}

Assets::~Assets() {
  // @@protoc_insertion_point(destructor:vega.snapshot.v1.Assets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Assets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Assets::ArenaDtor(void* object) {
  Assets* _this = reinterpret_cast< Assets* >(object);
  (void)_this;
}
void Assets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Assets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Assets& Assets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Assets_snapshot_2fv1_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void Assets::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.snapshot.v1.Assets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Assets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.snapshot.v1.AssetEntry assets = 1 [json_name = "assets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Assets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.snapshot.v1.Assets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.snapshot.v1.AssetEntry assets = 1 [json_name = "assets"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_assets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.snapshot.v1.Assets)
  return target;
}

size_t Assets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.snapshot.v1.Assets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.snapshot.v1.AssetEntry assets = 1 [json_name = "assets"];
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Assets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.snapshot.v1.Assets)
  GOOGLE_DCHECK_NE(&from, this);
  const Assets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Assets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.snapshot.v1.Assets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.snapshot.v1.Assets)
    MergeFrom(*source);
  }
}

void Assets::MergeFrom(const Assets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.snapshot.v1.Assets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
}

void Assets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.snapshot.v1.Assets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Assets::CopyFrom(const Assets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.snapshot.v1.Assets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Assets::IsInitialized() const {
  return true;
}

void Assets::InternalSwap(Assets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  assets_.InternalSwap(&other->assets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Assets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetBalance::_Internal {
 public:
};

AssetBalance::AssetBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.snapshot.v1.AssetBalance)
}
AssetBalance::AssetBalance(const AssetBalance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_balance().empty()) {
    balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_balance(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.snapshot.v1.AssetBalance)
}

void AssetBalance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetBalance_snapshot_2fv1_2fsnapshot_2eproto.base);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AssetBalance::~AssetBalance() {
  // @@protoc_insertion_point(destructor:vega.snapshot.v1.AssetBalance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetBalance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssetBalance::ArenaDtor(void* object) {
  AssetBalance* _this = reinterpret_cast< AssetBalance* >(object);
  (void)_this;
}
void AssetBalance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetBalance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetBalance& AssetBalance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetBalance_snapshot_2fv1_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void AssetBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.snapshot.v1.AssetBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_.ClearToEmpty();
  asset_.ClearToEmpty();
  balance_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetBalance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.snapshot.v1.AssetBalance.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 2 [json_name = "asset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.snapshot.v1.AssetBalance.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string balance = 3 [json_name = "balance"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.snapshot.v1.AssetBalance.balance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetBalance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.snapshot.v1.AssetBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.snapshot.v1.AssetBalance.party");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party(), target);
  }

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.snapshot.v1.AssetBalance.asset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asset(), target);
  }

  // string balance = 3 [json_name = "balance"];
  if (this->balance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_balance().data(), static_cast<int>(this->_internal_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.snapshot.v1.AssetBalance.balance");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.snapshot.v1.AssetBalance)
  return target;
}

size_t AssetBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.snapshot.v1.AssetBalance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string balance = 3 [json_name = "balance"];
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetBalance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.snapshot.v1.AssetBalance)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetBalance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetBalance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.snapshot.v1.AssetBalance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.snapshot.v1.AssetBalance)
    MergeFrom(*source);
  }
}

void AssetBalance::MergeFrom(const AssetBalance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.snapshot.v1.AssetBalance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.balance().size() > 0) {
    _internal_set_balance(from._internal_balance());
  }
}

void AssetBalance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.snapshot.v1.AssetBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetBalance::CopyFrom(const AssetBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.snapshot.v1.AssetBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetBalance::IsInitialized() const {
  return true;
}

void AssetBalance::InternalSwap(AssetBalance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  balance_.Swap(&other->balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetBalance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Collateral::_Internal {
 public:
};

Collateral::Collateral(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  balances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.snapshot.v1.Collateral)
}
Collateral::Collateral(const Collateral& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      balances_(from.balances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.snapshot.v1.Collateral)
}

void Collateral::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Collateral_snapshot_2fv1_2fsnapshot_2eproto.base);
}

Collateral::~Collateral() {
  // @@protoc_insertion_point(destructor:vega.snapshot.v1.Collateral)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Collateral::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Collateral::ArenaDtor(void* object) {
  Collateral* _this = reinterpret_cast< Collateral* >(object);
  (void)_this;
}
void Collateral::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Collateral::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Collateral& Collateral::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Collateral_snapshot_2fv1_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void Collateral::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.snapshot.v1.Collateral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collateral::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.snapshot.v1.AssetBalance balances = 1 [json_name = "balances"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collateral::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.snapshot.v1.Collateral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.snapshot.v1.AssetBalance balances = 1 [json_name = "balances"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_balances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.snapshot.v1.Collateral)
  return target;
}

size_t Collateral::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.snapshot.v1.Collateral)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.snapshot.v1.AssetBalance balances = 1 [json_name = "balances"];
  total_size += 1UL * this->_internal_balances_size();
  for (const auto& msg : this->balances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collateral::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.snapshot.v1.Collateral)
  GOOGLE_DCHECK_NE(&from, this);
  const Collateral* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collateral>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.snapshot.v1.Collateral)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.snapshot.v1.Collateral)
    MergeFrom(*source);
  }
}

void Collateral::MergeFrom(const Collateral& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.snapshot.v1.Collateral)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balances_.MergeFrom(from.balances_);
}

void Collateral::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.snapshot.v1.Collateral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collateral::CopyFrom(const Collateral& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.snapshot.v1.Collateral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collateral::IsInitialized() const {
  return true;
}

void Collateral::InternalSwap(Collateral* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  balances_.InternalSwap(&other->balances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Collateral::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetParams::_Internal {
 public:
};

void NetParams::clear_params() {
  params_.Clear();
}
NetParams::NetParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.snapshot.v1.NetParams)
}
NetParams::NetParams(const NetParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.snapshot.v1.NetParams)
}

void NetParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetParams_snapshot_2fv1_2fsnapshot_2eproto.base);
}

NetParams::~NetParams() {
  // @@protoc_insertion_point(destructor:vega.snapshot.v1.NetParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetParams::ArenaDtor(void* object) {
  NetParams* _this = reinterpret_cast< NetParams* >(object);
  (void)_this;
}
void NetParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetParams& NetParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetParams_snapshot_2fv1_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void NetParams::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.snapshot.v1.NetParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.NetworkParameter params = 1 [json_name = "params"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.snapshot.v1.NetParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.NetworkParameter params = 1 [json_name = "params"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.snapshot.v1.NetParams)
  return target;
}

size_t NetParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.snapshot.v1.NetParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.NetworkParameter params = 1 [json_name = "params"];
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.snapshot.v1.NetParams)
  GOOGLE_DCHECK_NE(&from, this);
  const NetParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.snapshot.v1.NetParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.snapshot.v1.NetParams)
    MergeFrom(*source);
  }
}

void NetParams::MergeFrom(const NetParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.snapshot.v1.NetParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
}

void NetParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.snapshot.v1.NetParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParams::CopyFrom(const NetParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.snapshot.v1.NetParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParams::IsInitialized() const {
  return true;
}

void NetParams::InternalSwap(NetParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Proposals::_Internal {
 public:
};

void Proposals::clear_proposals() {
  proposals_.Clear();
}
Proposals::Proposals(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proposals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.snapshot.v1.Proposals)
}
Proposals::Proposals(const Proposals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proposals_(from.proposals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.snapshot.v1.Proposals)
}

void Proposals::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proposals_snapshot_2fv1_2fsnapshot_2eproto.base);
}

Proposals::~Proposals() {
  // @@protoc_insertion_point(destructor:vega.snapshot.v1.Proposals)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proposals::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Proposals::ArenaDtor(void* object) {
  Proposals* _this = reinterpret_cast< Proposals* >(object);
  (void)_this;
}
void Proposals::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proposals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proposals& Proposals::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proposals_snapshot_2fv1_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void Proposals::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.snapshot.v1.Proposals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Proposal proposals = 1 [json_name = "proposals"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proposals::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.snapshot.v1.Proposals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Proposal proposals = 1 [json_name = "proposals"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proposals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_proposals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.snapshot.v1.Proposals)
  return target;
}

size_t Proposals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.snapshot.v1.Proposals)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Proposal proposals = 1 [json_name = "proposals"];
  total_size += 1UL * this->_internal_proposals_size();
  for (const auto& msg : this->proposals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proposals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.snapshot.v1.Proposals)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proposals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.snapshot.v1.Proposals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.snapshot.v1.Proposals)
    MergeFrom(*source);
  }
}

void Proposals::MergeFrom(const Proposals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.snapshot.v1.Proposals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proposals_.MergeFrom(from.proposals_);
}

void Proposals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.snapshot.v1.Proposals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposals::CopyFrom(const Proposals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.snapshot.v1.Proposals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposals::IsInitialized() const {
  return true;
}

void Proposals::InternalSwap(Proposals* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposals_.InternalSwap(&other->proposals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposals::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace snapshot
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::snapshot::v1::Snapshot* Arena::CreateMaybeMessage< ::vega::snapshot::v1::Snapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::snapshot::v1::Snapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::snapshot::v1::Checkpoint* Arena::CreateMaybeMessage< ::vega::snapshot::v1::Checkpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::snapshot::v1::Checkpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::snapshot::v1::AssetEntry* Arena::CreateMaybeMessage< ::vega::snapshot::v1::AssetEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::snapshot::v1::AssetEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::snapshot::v1::Assets* Arena::CreateMaybeMessage< ::vega::snapshot::v1::Assets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::snapshot::v1::Assets >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::snapshot::v1::AssetBalance* Arena::CreateMaybeMessage< ::vega::snapshot::v1::AssetBalance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::snapshot::v1::AssetBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::snapshot::v1::Collateral* Arena::CreateMaybeMessage< ::vega::snapshot::v1::Collateral >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::snapshot::v1::Collateral >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::snapshot::v1::NetParams* Arena::CreateMaybeMessage< ::vega::snapshot::v1::NetParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::snapshot::v1::NetParams >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::snapshot::v1::Proposals* Arena::CreateMaybeMessage< ::vega::snapshot::v1::Proposals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::snapshot::v1::Proposals >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
