// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snapshot/v1/snapshot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snapshot_2fv1_2fsnapshot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snapshot_2fv1_2fsnapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vega.pb.h"
#include "assets.pb.h"
#include "governance.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snapshot_2fv1_2fsnapshot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snapshot_2fv1_2fsnapshot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snapshot_2fv1_2fsnapshot_2eproto;
namespace vega {
namespace snapshot {
namespace v1 {
class AssetBalance;
class AssetBalanceDefaultTypeInternal;
extern AssetBalanceDefaultTypeInternal _AssetBalance_default_instance_;
class AssetEntry;
class AssetEntryDefaultTypeInternal;
extern AssetEntryDefaultTypeInternal _AssetEntry_default_instance_;
class Assets;
class AssetsDefaultTypeInternal;
extern AssetsDefaultTypeInternal _Assets_default_instance_;
class Checkpoint;
class CheckpointDefaultTypeInternal;
extern CheckpointDefaultTypeInternal _Checkpoint_default_instance_;
class Collateral;
class CollateralDefaultTypeInternal;
extern CollateralDefaultTypeInternal _Collateral_default_instance_;
class Delegate;
class DelegateDefaultTypeInternal;
extern DelegateDefaultTypeInternal _Delegate_default_instance_;
class DelegateEntry;
class DelegateEntryDefaultTypeInternal;
extern DelegateEntryDefaultTypeInternal _DelegateEntry_default_instance_;
class NetParams;
class NetParamsDefaultTypeInternal;
extern NetParamsDefaultTypeInternal _NetParams_default_instance_;
class Proposals;
class ProposalsDefaultTypeInternal;
extern ProposalsDefaultTypeInternal _Proposals_default_instance_;
class Snapshot;
class SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
}  // namespace v1
}  // namespace snapshot
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::snapshot::v1::AssetBalance* Arena::CreateMaybeMessage<::vega::snapshot::v1::AssetBalance>(Arena*);
template<> ::vega::snapshot::v1::AssetEntry* Arena::CreateMaybeMessage<::vega::snapshot::v1::AssetEntry>(Arena*);
template<> ::vega::snapshot::v1::Assets* Arena::CreateMaybeMessage<::vega::snapshot::v1::Assets>(Arena*);
template<> ::vega::snapshot::v1::Checkpoint* Arena::CreateMaybeMessage<::vega::snapshot::v1::Checkpoint>(Arena*);
template<> ::vega::snapshot::v1::Collateral* Arena::CreateMaybeMessage<::vega::snapshot::v1::Collateral>(Arena*);
template<> ::vega::snapshot::v1::Delegate* Arena::CreateMaybeMessage<::vega::snapshot::v1::Delegate>(Arena*);
template<> ::vega::snapshot::v1::DelegateEntry* Arena::CreateMaybeMessage<::vega::snapshot::v1::DelegateEntry>(Arena*);
template<> ::vega::snapshot::v1::NetParams* Arena::CreateMaybeMessage<::vega::snapshot::v1::NetParams>(Arena*);
template<> ::vega::snapshot::v1::Proposals* Arena::CreateMaybeMessage<::vega::snapshot::v1::Proposals>(Arena*);
template<> ::vega::snapshot::v1::Snapshot* Arena::CreateMaybeMessage<::vega::snapshot::v1::Snapshot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {
namespace snapshot {
namespace v1 {

// ===================================================================

class Snapshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.snapshot.v1.Snapshot) */ {
 public:
  inline Snapshot() : Snapshot(nullptr) {}
  virtual ~Snapshot();

  Snapshot(const Snapshot& from);
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Snapshot& default_instance();

  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(Snapshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Snapshot* New() const final {
    return CreateMaybeMessage<Snapshot>(nullptr);
  }

  Snapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Snapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Snapshot& from);
  void MergeFrom(const Snapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.snapshot.v1.Snapshot";
  }
  protected:
  explicit Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto);
    return ::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // bytes hash = 1 [json_name = "hash"];
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes state = 2 [json_name = "state"];
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const void* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:vega.snapshot.v1.Snapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class Checkpoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.snapshot.v1.Checkpoint) */ {
 public:
  inline Checkpoint() : Checkpoint(nullptr) {}
  virtual ~Checkpoint();

  Checkpoint(const Checkpoint& from);
  Checkpoint(Checkpoint&& from) noexcept
    : Checkpoint() {
    *this = ::std::move(from);
  }

  inline Checkpoint& operator=(const Checkpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Checkpoint& operator=(Checkpoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Checkpoint& default_instance();

  static inline const Checkpoint* internal_default_instance() {
    return reinterpret_cast<const Checkpoint*>(
               &_Checkpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Checkpoint& a, Checkpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Checkpoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Checkpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Checkpoint* New() const final {
    return CreateMaybeMessage<Checkpoint>(nullptr);
  }

  Checkpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Checkpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Checkpoint& from);
  void MergeFrom(const Checkpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Checkpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.snapshot.v1.Checkpoint";
  }
  protected:
  explicit Checkpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto);
    return ::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGovernanceFieldNumber = 1,
    kAssetsFieldNumber = 2,
    kCollateralFieldNumber = 3,
    kNetworkParametersFieldNumber = 4,
    kDelegationFieldNumber = 5,
  };
  // bytes governance = 1 [json_name = "governance"];
  void clear_governance();
  const std::string& governance() const;
  void set_governance(const std::string& value);
  void set_governance(std::string&& value);
  void set_governance(const char* value);
  void set_governance(const void* value, size_t size);
  std::string* mutable_governance();
  std::string* release_governance();
  void set_allocated_governance(std::string* governance);
  private:
  const std::string& _internal_governance() const;
  void _internal_set_governance(const std::string& value);
  std::string* _internal_mutable_governance();
  public:

  // bytes assets = 2 [json_name = "assets"];
  void clear_assets();
  const std::string& assets() const;
  void set_assets(const std::string& value);
  void set_assets(std::string&& value);
  void set_assets(const char* value);
  void set_assets(const void* value, size_t size);
  std::string* mutable_assets();
  std::string* release_assets();
  void set_allocated_assets(std::string* assets);
  private:
  const std::string& _internal_assets() const;
  void _internal_set_assets(const std::string& value);
  std::string* _internal_mutable_assets();
  public:

  // bytes collateral = 3 [json_name = "collateral"];
  void clear_collateral();
  const std::string& collateral() const;
  void set_collateral(const std::string& value);
  void set_collateral(std::string&& value);
  void set_collateral(const char* value);
  void set_collateral(const void* value, size_t size);
  std::string* mutable_collateral();
  std::string* release_collateral();
  void set_allocated_collateral(std::string* collateral);
  private:
  const std::string& _internal_collateral() const;
  void _internal_set_collateral(const std::string& value);
  std::string* _internal_mutable_collateral();
  public:

  // bytes network_parameters = 4 [json_name = "networkParameters"];
  void clear_network_parameters();
  const std::string& network_parameters() const;
  void set_network_parameters(const std::string& value);
  void set_network_parameters(std::string&& value);
  void set_network_parameters(const char* value);
  void set_network_parameters(const void* value, size_t size);
  std::string* mutable_network_parameters();
  std::string* release_network_parameters();
  void set_allocated_network_parameters(std::string* network_parameters);
  private:
  const std::string& _internal_network_parameters() const;
  void _internal_set_network_parameters(const std::string& value);
  std::string* _internal_mutable_network_parameters();
  public:

  // bytes delegation = 5 [json_name = "delegation"];
  void clear_delegation();
  const std::string& delegation() const;
  void set_delegation(const std::string& value);
  void set_delegation(std::string&& value);
  void set_delegation(const char* value);
  void set_delegation(const void* value, size_t size);
  std::string* mutable_delegation();
  std::string* release_delegation();
  void set_allocated_delegation(std::string* delegation);
  private:
  const std::string& _internal_delegation() const;
  void _internal_set_delegation(const std::string& value);
  std::string* _internal_mutable_delegation();
  public:

  // @@protoc_insertion_point(class_scope:vega.snapshot.v1.Checkpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr governance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collateral_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class AssetEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.snapshot.v1.AssetEntry) */ {
 public:
  inline AssetEntry() : AssetEntry(nullptr) {}
  virtual ~AssetEntry();

  AssetEntry(const AssetEntry& from);
  AssetEntry(AssetEntry&& from) noexcept
    : AssetEntry() {
    *this = ::std::move(from);
  }

  inline AssetEntry& operator=(const AssetEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetEntry& operator=(AssetEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetEntry& default_instance();

  static inline const AssetEntry* internal_default_instance() {
    return reinterpret_cast<const AssetEntry*>(
               &_AssetEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AssetEntry& a, AssetEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetEntry* New() const final {
    return CreateMaybeMessage<AssetEntry>(nullptr);
  }

  AssetEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetEntry& from);
  void MergeFrom(const AssetEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.snapshot.v1.AssetEntry";
  }
  protected:
  explicit AssetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto);
    return ::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAssetDetailsFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .vega.AssetDetails asset_details = 2 [json_name = "assetDetails"];
  bool has_asset_details() const;
  private:
  bool _internal_has_asset_details() const;
  public:
  void clear_asset_details();
  const ::vega::AssetDetails& asset_details() const;
  ::vega::AssetDetails* release_asset_details();
  ::vega::AssetDetails* mutable_asset_details();
  void set_allocated_asset_details(::vega::AssetDetails* asset_details);
  private:
  const ::vega::AssetDetails& _internal_asset_details() const;
  ::vega::AssetDetails* _internal_mutable_asset_details();
  public:
  void unsafe_arena_set_allocated_asset_details(
      ::vega::AssetDetails* asset_details);
  ::vega::AssetDetails* unsafe_arena_release_asset_details();

  // @@protoc_insertion_point(class_scope:vega.snapshot.v1.AssetEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::vega::AssetDetails* asset_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class Assets PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.snapshot.v1.Assets) */ {
 public:
  inline Assets() : Assets(nullptr) {}
  virtual ~Assets();

  Assets(const Assets& from);
  Assets(Assets&& from) noexcept
    : Assets() {
    *this = ::std::move(from);
  }

  inline Assets& operator=(const Assets& from) {
    CopyFrom(from);
    return *this;
  }
  inline Assets& operator=(Assets&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Assets& default_instance();

  static inline const Assets* internal_default_instance() {
    return reinterpret_cast<const Assets*>(
               &_Assets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Assets& a, Assets& b) {
    a.Swap(&b);
  }
  inline void Swap(Assets* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Assets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Assets* New() const final {
    return CreateMaybeMessage<Assets>(nullptr);
  }

  Assets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Assets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Assets& from);
  void MergeFrom(const Assets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Assets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.snapshot.v1.Assets";
  }
  protected:
  explicit Assets(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto);
    return ::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
  };
  // repeated .vega.snapshot.v1.AssetEntry assets = 1 [json_name = "assets"];
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  ::vega::snapshot::v1::AssetEntry* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::AssetEntry >*
      mutable_assets();
  private:
  const ::vega::snapshot::v1::AssetEntry& _internal_assets(int index) const;
  ::vega::snapshot::v1::AssetEntry* _internal_add_assets();
  public:
  const ::vega::snapshot::v1::AssetEntry& assets(int index) const;
  ::vega::snapshot::v1::AssetEntry* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::AssetEntry >&
      assets() const;

  // @@protoc_insertion_point(class_scope:vega.snapshot.v1.Assets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::AssetEntry > assets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class AssetBalance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.snapshot.v1.AssetBalance) */ {
 public:
  inline AssetBalance() : AssetBalance(nullptr) {}
  virtual ~AssetBalance();

  AssetBalance(const AssetBalance& from);
  AssetBalance(AssetBalance&& from) noexcept
    : AssetBalance() {
    *this = ::std::move(from);
  }

  inline AssetBalance& operator=(const AssetBalance& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetBalance& operator=(AssetBalance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetBalance& default_instance();

  static inline const AssetBalance* internal_default_instance() {
    return reinterpret_cast<const AssetBalance*>(
               &_AssetBalance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AssetBalance& a, AssetBalance& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetBalance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetBalance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetBalance* New() const final {
    return CreateMaybeMessage<AssetBalance>(nullptr);
  }

  AssetBalance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetBalance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetBalance& from);
  void MergeFrom(const AssetBalance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetBalance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.snapshot.v1.AssetBalance";
  }
  protected:
  explicit AssetBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto);
    return ::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
    kAssetFieldNumber = 2,
    kBalanceFieldNumber = 3,
  };
  // string party = 1 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string asset = 2 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string balance = 3 [json_name = "balance"];
  void clear_balance();
  const std::string& balance() const;
  void set_balance(const std::string& value);
  void set_balance(std::string&& value);
  void set_balance(const char* value);
  void set_balance(const char* value, size_t size);
  std::string* mutable_balance();
  std::string* release_balance();
  void set_allocated_balance(std::string* balance);
  private:
  const std::string& _internal_balance() const;
  void _internal_set_balance(const std::string& value);
  std::string* _internal_mutable_balance();
  public:

  // @@protoc_insertion_point(class_scope:vega.snapshot.v1.AssetBalance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class Collateral PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.snapshot.v1.Collateral) */ {
 public:
  inline Collateral() : Collateral(nullptr) {}
  virtual ~Collateral();

  Collateral(const Collateral& from);
  Collateral(Collateral&& from) noexcept
    : Collateral() {
    *this = ::std::move(from);
  }

  inline Collateral& operator=(const Collateral& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collateral& operator=(Collateral&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collateral& default_instance();

  static inline const Collateral* internal_default_instance() {
    return reinterpret_cast<const Collateral*>(
               &_Collateral_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Collateral& a, Collateral& b) {
    a.Swap(&b);
  }
  inline void Swap(Collateral* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collateral* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collateral* New() const final {
    return CreateMaybeMessage<Collateral>(nullptr);
  }

  Collateral* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collateral>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collateral& from);
  void MergeFrom(const Collateral& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collateral* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.snapshot.v1.Collateral";
  }
  protected:
  explicit Collateral(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto);
    return ::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalancesFieldNumber = 1,
  };
  // repeated .vega.snapshot.v1.AssetBalance balances = 1 [json_name = "balances"];
  int balances_size() const;
  private:
  int _internal_balances_size() const;
  public:
  void clear_balances();
  ::vega::snapshot::v1::AssetBalance* mutable_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::AssetBalance >*
      mutable_balances();
  private:
  const ::vega::snapshot::v1::AssetBalance& _internal_balances(int index) const;
  ::vega::snapshot::v1::AssetBalance* _internal_add_balances();
  public:
  const ::vega::snapshot::v1::AssetBalance& balances(int index) const;
  ::vega::snapshot::v1::AssetBalance* add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::AssetBalance >&
      balances() const;

  // @@protoc_insertion_point(class_scope:vega.snapshot.v1.Collateral)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::AssetBalance > balances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class NetParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.snapshot.v1.NetParams) */ {
 public:
  inline NetParams() : NetParams(nullptr) {}
  virtual ~NetParams();

  NetParams(const NetParams& from);
  NetParams(NetParams&& from) noexcept
    : NetParams() {
    *this = ::std::move(from);
  }

  inline NetParams& operator=(const NetParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetParams& operator=(NetParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetParams& default_instance();

  static inline const NetParams* internal_default_instance() {
    return reinterpret_cast<const NetParams*>(
               &_NetParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NetParams& a, NetParams& b) {
    a.Swap(&b);
  }
  inline void Swap(NetParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetParams* New() const final {
    return CreateMaybeMessage<NetParams>(nullptr);
  }

  NetParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetParams& from);
  void MergeFrom(const NetParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.snapshot.v1.NetParams";
  }
  protected:
  explicit NetParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto);
    return ::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // repeated .vega.NetworkParameter params = 1 [json_name = "params"];
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::vega::NetworkParameter* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >*
      mutable_params();
  private:
  const ::vega::NetworkParameter& _internal_params(int index) const;
  ::vega::NetworkParameter* _internal_add_params();
  public:
  const ::vega::NetworkParameter& params(int index) const;
  ::vega::NetworkParameter* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >&
      params() const;

  // @@protoc_insertion_point(class_scope:vega.snapshot.v1.NetParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter > params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class Proposals PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.snapshot.v1.Proposals) */ {
 public:
  inline Proposals() : Proposals(nullptr) {}
  virtual ~Proposals();

  Proposals(const Proposals& from);
  Proposals(Proposals&& from) noexcept
    : Proposals() {
    *this = ::std::move(from);
  }

  inline Proposals& operator=(const Proposals& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposals& operator=(Proposals&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proposals& default_instance();

  static inline const Proposals* internal_default_instance() {
    return reinterpret_cast<const Proposals*>(
               &_Proposals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Proposals& a, Proposals& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposals* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposals* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proposals* New() const final {
    return CreateMaybeMessage<Proposals>(nullptr);
  }

  Proposals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proposals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proposals& from);
  void MergeFrom(const Proposals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.snapshot.v1.Proposals";
  }
  protected:
  explicit Proposals(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto);
    return ::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalsFieldNumber = 1,
  };
  // repeated .vega.Proposal proposals = 1 [json_name = "proposals"];
  int proposals_size() const;
  private:
  int _internal_proposals_size() const;
  public:
  void clear_proposals();
  ::vega::Proposal* mutable_proposals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Proposal >*
      mutable_proposals();
  private:
  const ::vega::Proposal& _internal_proposals(int index) const;
  ::vega::Proposal* _internal_add_proposals();
  public:
  const ::vega::Proposal& proposals(int index) const;
  ::vega::Proposal* add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Proposal >&
      proposals() const;

  // @@protoc_insertion_point(class_scope:vega.snapshot.v1.Proposals)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Proposal > proposals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class DelegateEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.snapshot.v1.DelegateEntry) */ {
 public:
  inline DelegateEntry() : DelegateEntry(nullptr) {}
  virtual ~DelegateEntry();

  DelegateEntry(const DelegateEntry& from);
  DelegateEntry(DelegateEntry&& from) noexcept
    : DelegateEntry() {
    *this = ::std::move(from);
  }

  inline DelegateEntry& operator=(const DelegateEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegateEntry& operator=(DelegateEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegateEntry& default_instance();

  static inline const DelegateEntry* internal_default_instance() {
    return reinterpret_cast<const DelegateEntry*>(
               &_DelegateEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DelegateEntry& a, DelegateEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegateEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegateEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegateEntry* New() const final {
    return CreateMaybeMessage<DelegateEntry>(nullptr);
  }

  DelegateEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegateEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegateEntry& from);
  void MergeFrom(const DelegateEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegateEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.snapshot.v1.DelegateEntry";
  }
  protected:
  explicit DelegateEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto);
    return ::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
    kNodeFieldNumber = 2,
    kAmountFieldNumber = 3,
    kEpochSeqFieldNumber = 5,
    kUndelegateFieldNumber = 4,
  };
  // string party = 1 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string node = 2 [json_name = "node"];
  void clear_node();
  const std::string& node() const;
  void set_node(const std::string& value);
  void set_node(std::string&& value);
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  std::string* mutable_node();
  std::string* release_node();
  void set_allocated_node(std::string* node);
  private:
  const std::string& _internal_node() const;
  void _internal_set_node(const std::string& value);
  std::string* _internal_mutable_node();
  public:

  // string amount = 3 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // uint64 epoch_seq = 5 [json_name = "epochSeq"];
  void clear_epoch_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 epoch_seq() const;
  void set_epoch_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_epoch_seq() const;
  void _internal_set_epoch_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool undelegate = 4 [json_name = "undelegate"];
  void clear_undelegate();
  bool undelegate() const;
  void set_undelegate(bool value);
  private:
  bool _internal_undelegate() const;
  void _internal_set_undelegate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vega.snapshot.v1.DelegateEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 epoch_seq_;
  bool undelegate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class Delegate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.snapshot.v1.Delegate) */ {
 public:
  inline Delegate() : Delegate(nullptr) {}
  virtual ~Delegate();

  Delegate(const Delegate& from);
  Delegate(Delegate&& from) noexcept
    : Delegate() {
    *this = ::std::move(from);
  }

  inline Delegate& operator=(const Delegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Delegate& operator=(Delegate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Delegate& default_instance();

  static inline const Delegate* internal_default_instance() {
    return reinterpret_cast<const Delegate*>(
               &_Delegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Delegate& a, Delegate& b) {
    a.Swap(&b);
  }
  inline void Swap(Delegate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Delegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Delegate* New() const final {
    return CreateMaybeMessage<Delegate>(nullptr);
  }

  Delegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Delegate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Delegate& from);
  void MergeFrom(const Delegate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Delegate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.snapshot.v1.Delegate";
  }
  protected:
  explicit Delegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto);
    return ::descriptor_table_snapshot_2fv1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveFieldNumber = 1,
    kPendingFieldNumber = 2,
  };
  // repeated .vega.snapshot.v1.DelegateEntry active = 1 [json_name = "active"];
  int active_size() const;
  private:
  int _internal_active_size() const;
  public:
  void clear_active();
  ::vega::snapshot::v1::DelegateEntry* mutable_active(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::DelegateEntry >*
      mutable_active();
  private:
  const ::vega::snapshot::v1::DelegateEntry& _internal_active(int index) const;
  ::vega::snapshot::v1::DelegateEntry* _internal_add_active();
  public:
  const ::vega::snapshot::v1::DelegateEntry& active(int index) const;
  ::vega::snapshot::v1::DelegateEntry* add_active();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::DelegateEntry >&
      active() const;

  // repeated .vega.snapshot.v1.DelegateEntry pending = 2 [json_name = "pending"];
  int pending_size() const;
  private:
  int _internal_pending_size() const;
  public:
  void clear_pending();
  ::vega::snapshot::v1::DelegateEntry* mutable_pending(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::DelegateEntry >*
      mutable_pending();
  private:
  const ::vega::snapshot::v1::DelegateEntry& _internal_pending(int index) const;
  ::vega::snapshot::v1::DelegateEntry* _internal_add_pending();
  public:
  const ::vega::snapshot::v1::DelegateEntry& pending(int index) const;
  ::vega::snapshot::v1::DelegateEntry* add_pending();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::DelegateEntry >&
      pending() const;

  // @@protoc_insertion_point(class_scope:vega.snapshot.v1.Delegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::DelegateEntry > active_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::DelegateEntry > pending_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2fv1_2fsnapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Snapshot

// bytes hash = 1 [json_name = "hash"];
inline void Snapshot::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& Snapshot::hash() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Snapshot.hash)
  return _internal_hash();
}
inline void Snapshot::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.Snapshot.hash)
}
inline std::string* Snapshot::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Snapshot.hash)
  return _internal_mutable_hash();
}
inline const std::string& Snapshot::_internal_hash() const {
  return hash_.Get();
}
inline void Snapshot::_internal_set_hash(const std::string& value) {

  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Snapshot::set_hash(std::string&& value) {

  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.Snapshot.hash)
}
inline void Snapshot::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.Snapshot.hash)
}
inline void Snapshot::set_hash(const void* value,
    size_t size) {

  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.Snapshot.hash)
}
inline std::string* Snapshot::_internal_mutable_hash() {

  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Snapshot::release_hash() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.Snapshot.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Snapshot::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {

  } else {

  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.Snapshot.hash)
}

// bytes state = 2 [json_name = "state"];
inline void Snapshot::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& Snapshot::state() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Snapshot.state)
  return _internal_state();
}
inline void Snapshot::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.Snapshot.state)
}
inline std::string* Snapshot::mutable_state() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Snapshot.state)
  return _internal_mutable_state();
}
inline const std::string& Snapshot::_internal_state() const {
  return state_.Get();
}
inline void Snapshot::_internal_set_state(const std::string& value) {

  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Snapshot::set_state(std::string&& value) {

  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.Snapshot.state)
}
inline void Snapshot::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.Snapshot.state)
}
inline void Snapshot::set_state(const void* value,
    size_t size) {

  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.Snapshot.state)
}
inline std::string* Snapshot::_internal_mutable_state() {

  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Snapshot::release_state() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.Snapshot.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Snapshot::set_allocated_state(std::string* state) {
  if (state != nullptr) {

  } else {

  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.Snapshot.state)
}

// -------------------------------------------------------------------

// Checkpoint

// bytes governance = 1 [json_name = "governance"];
inline void Checkpoint::clear_governance() {
  governance_.ClearToEmpty();
}
inline const std::string& Checkpoint::governance() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Checkpoint.governance)
  return _internal_governance();
}
inline void Checkpoint::set_governance(const std::string& value) {
  _internal_set_governance(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.Checkpoint.governance)
}
inline std::string* Checkpoint::mutable_governance() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Checkpoint.governance)
  return _internal_mutable_governance();
}
inline const std::string& Checkpoint::_internal_governance() const {
  return governance_.Get();
}
inline void Checkpoint::_internal_set_governance(const std::string& value) {

  governance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Checkpoint::set_governance(std::string&& value) {

  governance_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.Checkpoint.governance)
}
inline void Checkpoint::set_governance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  governance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.Checkpoint.governance)
}
inline void Checkpoint::set_governance(const void* value,
    size_t size) {

  governance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.Checkpoint.governance)
}
inline std::string* Checkpoint::_internal_mutable_governance() {

  return governance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Checkpoint::release_governance() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.Checkpoint.governance)
  return governance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Checkpoint::set_allocated_governance(std::string* governance) {
  if (governance != nullptr) {

  } else {

  }
  governance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), governance,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.Checkpoint.governance)
}

// bytes assets = 2 [json_name = "assets"];
inline void Checkpoint::clear_assets() {
  assets_.ClearToEmpty();
}
inline const std::string& Checkpoint::assets() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Checkpoint.assets)
  return _internal_assets();
}
inline void Checkpoint::set_assets(const std::string& value) {
  _internal_set_assets(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.Checkpoint.assets)
}
inline std::string* Checkpoint::mutable_assets() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Checkpoint.assets)
  return _internal_mutable_assets();
}
inline const std::string& Checkpoint::_internal_assets() const {
  return assets_.Get();
}
inline void Checkpoint::_internal_set_assets(const std::string& value) {

  assets_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Checkpoint::set_assets(std::string&& value) {

  assets_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.Checkpoint.assets)
}
inline void Checkpoint::set_assets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  assets_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.Checkpoint.assets)
}
inline void Checkpoint::set_assets(const void* value,
    size_t size) {

  assets_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.Checkpoint.assets)
}
inline std::string* Checkpoint::_internal_mutable_assets() {

  return assets_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Checkpoint::release_assets() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.Checkpoint.assets)
  return assets_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Checkpoint::set_allocated_assets(std::string* assets) {
  if (assets != nullptr) {

  } else {

  }
  assets_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assets,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.Checkpoint.assets)
}

// bytes collateral = 3 [json_name = "collateral"];
inline void Checkpoint::clear_collateral() {
  collateral_.ClearToEmpty();
}
inline const std::string& Checkpoint::collateral() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Checkpoint.collateral)
  return _internal_collateral();
}
inline void Checkpoint::set_collateral(const std::string& value) {
  _internal_set_collateral(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.Checkpoint.collateral)
}
inline std::string* Checkpoint::mutable_collateral() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Checkpoint.collateral)
  return _internal_mutable_collateral();
}
inline const std::string& Checkpoint::_internal_collateral() const {
  return collateral_.Get();
}
inline void Checkpoint::_internal_set_collateral(const std::string& value) {

  collateral_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Checkpoint::set_collateral(std::string&& value) {

  collateral_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.Checkpoint.collateral)
}
inline void Checkpoint::set_collateral(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  collateral_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.Checkpoint.collateral)
}
inline void Checkpoint::set_collateral(const void* value,
    size_t size) {

  collateral_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.Checkpoint.collateral)
}
inline std::string* Checkpoint::_internal_mutable_collateral() {

  return collateral_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Checkpoint::release_collateral() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.Checkpoint.collateral)
  return collateral_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Checkpoint::set_allocated_collateral(std::string* collateral) {
  if (collateral != nullptr) {

  } else {

  }
  collateral_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collateral,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.Checkpoint.collateral)
}

// bytes network_parameters = 4 [json_name = "networkParameters"];
inline void Checkpoint::clear_network_parameters() {
  network_parameters_.ClearToEmpty();
}
inline const std::string& Checkpoint::network_parameters() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Checkpoint.network_parameters)
  return _internal_network_parameters();
}
inline void Checkpoint::set_network_parameters(const std::string& value) {
  _internal_set_network_parameters(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.Checkpoint.network_parameters)
}
inline std::string* Checkpoint::mutable_network_parameters() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Checkpoint.network_parameters)
  return _internal_mutable_network_parameters();
}
inline const std::string& Checkpoint::_internal_network_parameters() const {
  return network_parameters_.Get();
}
inline void Checkpoint::_internal_set_network_parameters(const std::string& value) {

  network_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Checkpoint::set_network_parameters(std::string&& value) {

  network_parameters_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.Checkpoint.network_parameters)
}
inline void Checkpoint::set_network_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  network_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.Checkpoint.network_parameters)
}
inline void Checkpoint::set_network_parameters(const void* value,
    size_t size) {

  network_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.Checkpoint.network_parameters)
}
inline std::string* Checkpoint::_internal_mutable_network_parameters() {

  return network_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Checkpoint::release_network_parameters() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.Checkpoint.network_parameters)
  return network_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Checkpoint::set_allocated_network_parameters(std::string* network_parameters) {
  if (network_parameters != nullptr) {

  } else {

  }
  network_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.Checkpoint.network_parameters)
}

// bytes delegation = 5 [json_name = "delegation"];
inline void Checkpoint::clear_delegation() {
  delegation_.ClearToEmpty();
}
inline const std::string& Checkpoint::delegation() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Checkpoint.delegation)
  return _internal_delegation();
}
inline void Checkpoint::set_delegation(const std::string& value) {
  _internal_set_delegation(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.Checkpoint.delegation)
}
inline std::string* Checkpoint::mutable_delegation() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Checkpoint.delegation)
  return _internal_mutable_delegation();
}
inline const std::string& Checkpoint::_internal_delegation() const {
  return delegation_.Get();
}
inline void Checkpoint::_internal_set_delegation(const std::string& value) {

  delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Checkpoint::set_delegation(std::string&& value) {

  delegation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.Checkpoint.delegation)
}
inline void Checkpoint::set_delegation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.Checkpoint.delegation)
}
inline void Checkpoint::set_delegation(const void* value,
    size_t size) {

  delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.Checkpoint.delegation)
}
inline std::string* Checkpoint::_internal_mutable_delegation() {

  return delegation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Checkpoint::release_delegation() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.Checkpoint.delegation)
  return delegation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Checkpoint::set_allocated_delegation(std::string* delegation) {
  if (delegation != nullptr) {

  } else {

  }
  delegation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.Checkpoint.delegation)
}

// -------------------------------------------------------------------

// AssetEntry

// string id = 1 [json_name = "id"];
inline void AssetEntry::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& AssetEntry::id() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.AssetEntry.id)
  return _internal_id();
}
inline void AssetEntry::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.AssetEntry.id)
}
inline std::string* AssetEntry::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.AssetEntry.id)
  return _internal_mutable_id();
}
inline const std::string& AssetEntry::_internal_id() const {
  return id_.Get();
}
inline void AssetEntry::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetEntry::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.AssetEntry.id)
}
inline void AssetEntry::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.AssetEntry.id)
}
inline void AssetEntry::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.AssetEntry.id)
}
inline std::string* AssetEntry::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetEntry::release_id() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.AssetEntry.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetEntry::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.AssetEntry.id)
}

// .vega.AssetDetails asset_details = 2 [json_name = "assetDetails"];
inline bool AssetEntry::_internal_has_asset_details() const {
  return this != internal_default_instance() && asset_details_ != nullptr;
}
inline bool AssetEntry::has_asset_details() const {
  return _internal_has_asset_details();
}
inline const ::vega::AssetDetails& AssetEntry::_internal_asset_details() const {
  const ::vega::AssetDetails* p = asset_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::AssetDetails&>(
      ::vega::_AssetDetails_default_instance_);
}
inline const ::vega::AssetDetails& AssetEntry::asset_details() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.AssetEntry.asset_details)
  return _internal_asset_details();
}
inline void AssetEntry::unsafe_arena_set_allocated_asset_details(
    ::vega::AssetDetails* asset_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_details_);
  }
  asset_details_ = asset_details;
  if (asset_details) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.snapshot.v1.AssetEntry.asset_details)
}
inline ::vega::AssetDetails* AssetEntry::release_asset_details() {

  ::vega::AssetDetails* temp = asset_details_;
  asset_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::AssetDetails* AssetEntry::unsafe_arena_release_asset_details() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.AssetEntry.asset_details)

  ::vega::AssetDetails* temp = asset_details_;
  asset_details_ = nullptr;
  return temp;
}
inline ::vega::AssetDetails* AssetEntry::_internal_mutable_asset_details() {

  if (asset_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::AssetDetails>(GetArena());
    asset_details_ = p;
  }
  return asset_details_;
}
inline ::vega::AssetDetails* AssetEntry::mutable_asset_details() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.AssetEntry.asset_details)
  return _internal_mutable_asset_details();
}
inline void AssetEntry::set_allocated_asset_details(::vega::AssetDetails* asset_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_details_);
  }
  if (asset_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_details)->GetArena();
    if (message_arena != submessage_arena) {
      asset_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset_details, submessage_arena);
    }

  } else {

  }
  asset_details_ = asset_details;
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.AssetEntry.asset_details)
}

// -------------------------------------------------------------------

// Assets

// repeated .vega.snapshot.v1.AssetEntry assets = 1 [json_name = "assets"];
inline int Assets::_internal_assets_size() const {
  return assets_.size();
}
inline int Assets::assets_size() const {
  return _internal_assets_size();
}
inline void Assets::clear_assets() {
  assets_.Clear();
}
inline ::vega::snapshot::v1::AssetEntry* Assets::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Assets.assets)
  return assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::AssetEntry >*
Assets::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:vega.snapshot.v1.Assets.assets)
  return &assets_;
}
inline const ::vega::snapshot::v1::AssetEntry& Assets::_internal_assets(int index) const {
  return assets_.Get(index);
}
inline const ::vega::snapshot::v1::AssetEntry& Assets::assets(int index) const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Assets.assets)
  return _internal_assets(index);
}
inline ::vega::snapshot::v1::AssetEntry* Assets::_internal_add_assets() {
  return assets_.Add();
}
inline ::vega::snapshot::v1::AssetEntry* Assets::add_assets() {
  // @@protoc_insertion_point(field_add:vega.snapshot.v1.Assets.assets)
  return _internal_add_assets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::AssetEntry >&
Assets::assets() const {
  // @@protoc_insertion_point(field_list:vega.snapshot.v1.Assets.assets)
  return assets_;
}

// -------------------------------------------------------------------

// AssetBalance

// string party = 1 [json_name = "party"];
inline void AssetBalance::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& AssetBalance::party() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.AssetBalance.party)
  return _internal_party();
}
inline void AssetBalance::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.AssetBalance.party)
}
inline std::string* AssetBalance::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.AssetBalance.party)
  return _internal_mutable_party();
}
inline const std::string& AssetBalance::_internal_party() const {
  return party_.Get();
}
inline void AssetBalance::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetBalance::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.AssetBalance.party)
}
inline void AssetBalance::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.AssetBalance.party)
}
inline void AssetBalance::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.AssetBalance.party)
}
inline std::string* AssetBalance::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetBalance::release_party() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.AssetBalance.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetBalance::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.AssetBalance.party)
}

// string asset = 2 [json_name = "asset"];
inline void AssetBalance::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& AssetBalance::asset() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.AssetBalance.asset)
  return _internal_asset();
}
inline void AssetBalance::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.AssetBalance.asset)
}
inline std::string* AssetBalance::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.AssetBalance.asset)
  return _internal_mutable_asset();
}
inline const std::string& AssetBalance::_internal_asset() const {
  return asset_.Get();
}
inline void AssetBalance::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetBalance::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.AssetBalance.asset)
}
inline void AssetBalance::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.AssetBalance.asset)
}
inline void AssetBalance::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.AssetBalance.asset)
}
inline std::string* AssetBalance::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetBalance::release_asset() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.AssetBalance.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetBalance::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.AssetBalance.asset)
}

// string balance = 3 [json_name = "balance"];
inline void AssetBalance::clear_balance() {
  balance_.ClearToEmpty();
}
inline const std::string& AssetBalance::balance() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.AssetBalance.balance)
  return _internal_balance();
}
inline void AssetBalance::set_balance(const std::string& value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.AssetBalance.balance)
}
inline std::string* AssetBalance::mutable_balance() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.AssetBalance.balance)
  return _internal_mutable_balance();
}
inline const std::string& AssetBalance::_internal_balance() const {
  return balance_.Get();
}
inline void AssetBalance::_internal_set_balance(const std::string& value) {

  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetBalance::set_balance(std::string&& value) {

  balance_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.AssetBalance.balance)
}
inline void AssetBalance::set_balance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.AssetBalance.balance)
}
inline void AssetBalance::set_balance(const char* value,
    size_t size) {

  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.AssetBalance.balance)
}
inline std::string* AssetBalance::_internal_mutable_balance() {

  return balance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetBalance::release_balance() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.AssetBalance.balance)
  return balance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetBalance::set_allocated_balance(std::string* balance) {
  if (balance != nullptr) {

  } else {

  }
  balance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), balance,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.AssetBalance.balance)
}

// -------------------------------------------------------------------

// Collateral

// repeated .vega.snapshot.v1.AssetBalance balances = 1 [json_name = "balances"];
inline int Collateral::_internal_balances_size() const {
  return balances_.size();
}
inline int Collateral::balances_size() const {
  return _internal_balances_size();
}
inline void Collateral::clear_balances() {
  balances_.Clear();
}
inline ::vega::snapshot::v1::AssetBalance* Collateral::mutable_balances(int index) {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Collateral.balances)
  return balances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::AssetBalance >*
Collateral::mutable_balances() {
  // @@protoc_insertion_point(field_mutable_list:vega.snapshot.v1.Collateral.balances)
  return &balances_;
}
inline const ::vega::snapshot::v1::AssetBalance& Collateral::_internal_balances(int index) const {
  return balances_.Get(index);
}
inline const ::vega::snapshot::v1::AssetBalance& Collateral::balances(int index) const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Collateral.balances)
  return _internal_balances(index);
}
inline ::vega::snapshot::v1::AssetBalance* Collateral::_internal_add_balances() {
  return balances_.Add();
}
inline ::vega::snapshot::v1::AssetBalance* Collateral::add_balances() {
  // @@protoc_insertion_point(field_add:vega.snapshot.v1.Collateral.balances)
  return _internal_add_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::AssetBalance >&
Collateral::balances() const {
  // @@protoc_insertion_point(field_list:vega.snapshot.v1.Collateral.balances)
  return balances_;
}

// -------------------------------------------------------------------

// NetParams

// repeated .vega.NetworkParameter params = 1 [json_name = "params"];
inline int NetParams::_internal_params_size() const {
  return params_.size();
}
inline int NetParams::params_size() const {
  return _internal_params_size();
}
inline ::vega::NetworkParameter* NetParams::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.NetParams.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >*
NetParams::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:vega.snapshot.v1.NetParams.params)
  return &params_;
}
inline const ::vega::NetworkParameter& NetParams::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::vega::NetworkParameter& NetParams::params(int index) const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.NetParams.params)
  return _internal_params(index);
}
inline ::vega::NetworkParameter* NetParams::_internal_add_params() {
  return params_.Add();
}
inline ::vega::NetworkParameter* NetParams::add_params() {
  // @@protoc_insertion_point(field_add:vega.snapshot.v1.NetParams.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >&
NetParams::params() const {
  // @@protoc_insertion_point(field_list:vega.snapshot.v1.NetParams.params)
  return params_;
}

// -------------------------------------------------------------------

// Proposals

// repeated .vega.Proposal proposals = 1 [json_name = "proposals"];
inline int Proposals::_internal_proposals_size() const {
  return proposals_.size();
}
inline int Proposals::proposals_size() const {
  return _internal_proposals_size();
}
inline ::vega::Proposal* Proposals::mutable_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Proposals.proposals)
  return proposals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Proposal >*
Proposals::mutable_proposals() {
  // @@protoc_insertion_point(field_mutable_list:vega.snapshot.v1.Proposals.proposals)
  return &proposals_;
}
inline const ::vega::Proposal& Proposals::_internal_proposals(int index) const {
  return proposals_.Get(index);
}
inline const ::vega::Proposal& Proposals::proposals(int index) const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Proposals.proposals)
  return _internal_proposals(index);
}
inline ::vega::Proposal* Proposals::_internal_add_proposals() {
  return proposals_.Add();
}
inline ::vega::Proposal* Proposals::add_proposals() {
  // @@protoc_insertion_point(field_add:vega.snapshot.v1.Proposals.proposals)
  return _internal_add_proposals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Proposal >&
Proposals::proposals() const {
  // @@protoc_insertion_point(field_list:vega.snapshot.v1.Proposals.proposals)
  return proposals_;
}

// -------------------------------------------------------------------

// DelegateEntry

// string party = 1 [json_name = "party"];
inline void DelegateEntry::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& DelegateEntry::party() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.DelegateEntry.party)
  return _internal_party();
}
inline void DelegateEntry::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.DelegateEntry.party)
}
inline std::string* DelegateEntry::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.DelegateEntry.party)
  return _internal_mutable_party();
}
inline const std::string& DelegateEntry::_internal_party() const {
  return party_.Get();
}
inline void DelegateEntry::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelegateEntry::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.DelegateEntry.party)
}
inline void DelegateEntry::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.DelegateEntry.party)
}
inline void DelegateEntry::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.DelegateEntry.party)
}
inline std::string* DelegateEntry::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelegateEntry::release_party() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.DelegateEntry.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegateEntry::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.DelegateEntry.party)
}

// string node = 2 [json_name = "node"];
inline void DelegateEntry::clear_node() {
  node_.ClearToEmpty();
}
inline const std::string& DelegateEntry::node() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.DelegateEntry.node)
  return _internal_node();
}
inline void DelegateEntry::set_node(const std::string& value) {
  _internal_set_node(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.DelegateEntry.node)
}
inline std::string* DelegateEntry::mutable_node() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.DelegateEntry.node)
  return _internal_mutable_node();
}
inline const std::string& DelegateEntry::_internal_node() const {
  return node_.Get();
}
inline void DelegateEntry::_internal_set_node(const std::string& value) {

  node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelegateEntry::set_node(std::string&& value) {

  node_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.DelegateEntry.node)
}
inline void DelegateEntry::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.DelegateEntry.node)
}
inline void DelegateEntry::set_node(const char* value,
    size_t size) {

  node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.DelegateEntry.node)
}
inline std::string* DelegateEntry::_internal_mutable_node() {

  return node_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelegateEntry::release_node() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.DelegateEntry.node)
  return node_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegateEntry::set_allocated_node(std::string* node) {
  if (node != nullptr) {

  } else {

  }
  node_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.DelegateEntry.node)
}

// string amount = 3 [json_name = "amount"];
inline void DelegateEntry::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& DelegateEntry::amount() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.DelegateEntry.amount)
  return _internal_amount();
}
inline void DelegateEntry::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.DelegateEntry.amount)
}
inline std::string* DelegateEntry::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.DelegateEntry.amount)
  return _internal_mutable_amount();
}
inline const std::string& DelegateEntry::_internal_amount() const {
  return amount_.Get();
}
inline void DelegateEntry::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelegateEntry::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.snapshot.v1.DelegateEntry.amount)
}
inline void DelegateEntry::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.snapshot.v1.DelegateEntry.amount)
}
inline void DelegateEntry::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.snapshot.v1.DelegateEntry.amount)
}
inline std::string* DelegateEntry::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelegateEntry::release_amount() {
  // @@protoc_insertion_point(field_release:vega.snapshot.v1.DelegateEntry.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegateEntry::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.snapshot.v1.DelegateEntry.amount)
}

// bool undelegate = 4 [json_name = "undelegate"];
inline void DelegateEntry::clear_undelegate() {
  undelegate_ = false;
}
inline bool DelegateEntry::_internal_undelegate() const {
  return undelegate_;
}
inline bool DelegateEntry::undelegate() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.DelegateEntry.undelegate)
  return _internal_undelegate();
}
inline void DelegateEntry::_internal_set_undelegate(bool value) {

  undelegate_ = value;
}
inline void DelegateEntry::set_undelegate(bool value) {
  _internal_set_undelegate(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.DelegateEntry.undelegate)
}

// uint64 epoch_seq = 5 [json_name = "epochSeq"];
inline void DelegateEntry::clear_epoch_seq() {
  epoch_seq_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DelegateEntry::_internal_epoch_seq() const {
  return epoch_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DelegateEntry::epoch_seq() const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.DelegateEntry.epoch_seq)
  return _internal_epoch_seq();
}
inline void DelegateEntry::_internal_set_epoch_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  epoch_seq_ = value;
}
inline void DelegateEntry::set_epoch_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_epoch_seq(value);
  // @@protoc_insertion_point(field_set:vega.snapshot.v1.DelegateEntry.epoch_seq)
}

// -------------------------------------------------------------------

// Delegate

// repeated .vega.snapshot.v1.DelegateEntry active = 1 [json_name = "active"];
inline int Delegate::_internal_active_size() const {
  return active_.size();
}
inline int Delegate::active_size() const {
  return _internal_active_size();
}
inline void Delegate::clear_active() {
  active_.Clear();
}
inline ::vega::snapshot::v1::DelegateEntry* Delegate::mutable_active(int index) {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Delegate.active)
  return active_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::DelegateEntry >*
Delegate::mutable_active() {
  // @@protoc_insertion_point(field_mutable_list:vega.snapshot.v1.Delegate.active)
  return &active_;
}
inline const ::vega::snapshot::v1::DelegateEntry& Delegate::_internal_active(int index) const {
  return active_.Get(index);
}
inline const ::vega::snapshot::v1::DelegateEntry& Delegate::active(int index) const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Delegate.active)
  return _internal_active(index);
}
inline ::vega::snapshot::v1::DelegateEntry* Delegate::_internal_add_active() {
  return active_.Add();
}
inline ::vega::snapshot::v1::DelegateEntry* Delegate::add_active() {
  // @@protoc_insertion_point(field_add:vega.snapshot.v1.Delegate.active)
  return _internal_add_active();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::DelegateEntry >&
Delegate::active() const {
  // @@protoc_insertion_point(field_list:vega.snapshot.v1.Delegate.active)
  return active_;
}

// repeated .vega.snapshot.v1.DelegateEntry pending = 2 [json_name = "pending"];
inline int Delegate::_internal_pending_size() const {
  return pending_.size();
}
inline int Delegate::pending_size() const {
  return _internal_pending_size();
}
inline void Delegate::clear_pending() {
  pending_.Clear();
}
inline ::vega::snapshot::v1::DelegateEntry* Delegate::mutable_pending(int index) {
  // @@protoc_insertion_point(field_mutable:vega.snapshot.v1.Delegate.pending)
  return pending_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::DelegateEntry >*
Delegate::mutable_pending() {
  // @@protoc_insertion_point(field_mutable_list:vega.snapshot.v1.Delegate.pending)
  return &pending_;
}
inline const ::vega::snapshot::v1::DelegateEntry& Delegate::_internal_pending(int index) const {
  return pending_.Get(index);
}
inline const ::vega::snapshot::v1::DelegateEntry& Delegate::pending(int index) const {
  // @@protoc_insertion_point(field_get:vega.snapshot.v1.Delegate.pending)
  return _internal_pending(index);
}
inline ::vega::snapshot::v1::DelegateEntry* Delegate::_internal_add_pending() {
  return pending_.Add();
}
inline ::vega::snapshot::v1::DelegateEntry* Delegate::add_pending() {
  // @@protoc_insertion_point(field_add:vega.snapshot.v1.Delegate.pending)
  return _internal_add_pending();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::snapshot::v1::DelegateEntry >&
Delegate::pending() const {
  // @@protoc_insertion_point(field_list:vega.snapshot.v1.Delegate.pending)
  return pending_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace snapshot
}  // namespace vega

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snapshot_2fv1_2fsnapshot_2eproto
