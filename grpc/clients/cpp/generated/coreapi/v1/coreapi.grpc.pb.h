// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coreapi/v1/coreapi.proto
#ifndef GRPC_coreapi_2fv1_2fcoreapi_2eproto__INCLUDED
#define GRPC_coreapi_2fv1_2fcoreapi_2eproto__INCLUDED

#include "coreapi/v1/coreapi.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace vega {
namespace coreapi {
namespace v1 {

class CoreApiService final {
 public:
  static constexpr char const* service_full_name() {
    return "vega.coreapi.v1.CoreApiService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::vega::coreapi::v1::ListAccountsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAccountsResponse>> AsyncListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAccountsResponse>>(AsyncListAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAccountsResponse>> PrepareAsyncListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAccountsResponse>>(PrepareAsyncListAccountsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::vega::coreapi::v1::ListAssetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAssetsResponse>> AsyncListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAssetsResponse>>(AsyncListAssetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAssetsResponse>> PrepareAsyncListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAssetsResponse>>(PrepareAsyncListAssetsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::vega::coreapi::v1::ListNetworkParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListNetworkParametersResponse>> AsyncListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListNetworkParametersResponse>>(AsyncListNetworkParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListNetworkParametersResponse>> PrepareAsyncListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListNetworkParametersResponse>>(PrepareAsyncListNetworkParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::vega::coreapi::v1::ListPartiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListPartiesResponse>> AsyncListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListPartiesResponse>>(AsyncListPartiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListPartiesResponse>> PrepareAsyncListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListPartiesResponse>>(PrepareAsyncListPartiesRaw(context, request, cq));
    }
    virtual ::grpc::Status ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::vega::coreapi::v1::ListValidatorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListValidatorsResponse>> AsyncListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListValidatorsResponse>>(AsyncListValidatorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListValidatorsResponse>> PrepareAsyncListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListValidatorsResponse>>(PrepareAsyncListValidatorsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest& request, ::vega::coreapi::v1::ListMarketsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListMarketsResponse>> AsyncListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListMarketsResponse>>(AsyncListMarketsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListMarketsResponse>> PrepareAsyncListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListMarketsResponse>>(PrepareAsyncListMarketsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest& request, ::vega::coreapi::v1::ListProposalsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListProposalsResponse>> AsyncListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListProposalsResponse>>(AsyncListProposalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListProposalsResponse>> PrepareAsyncListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListProposalsResponse>>(PrepareAsyncListProposalsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest* request, ::vega::coreapi::v1::ListMarketsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest* request, ::vega::coreapi::v1::ListMarketsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest* request, ::vega::coreapi::v1::ListMarketsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest* request, ::vega::coreapi::v1::ListProposalsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest* request, ::vega::coreapi::v1::ListProposalsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest* request, ::vega::coreapi::v1::ListProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAccountsResponse>* AsyncListAccountsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAccountsResponse>* PrepareAsyncListAccountsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAssetsResponse>* AsyncListAssetsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListAssetsResponse>* PrepareAsyncListAssetsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListNetworkParametersResponse>* AsyncListNetworkParametersRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListNetworkParametersResponse>* PrepareAsyncListNetworkParametersRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListPartiesResponse>* AsyncListPartiesRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListPartiesResponse>* PrepareAsyncListPartiesRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListValidatorsResponse>* AsyncListValidatorsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListValidatorsResponse>* PrepareAsyncListValidatorsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListMarketsResponse>* AsyncListMarketsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListMarketsResponse>* PrepareAsyncListMarketsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListProposalsResponse>* AsyncListProposalsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vega::coreapi::v1::ListProposalsResponse>* PrepareAsyncListProposalsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::vega::coreapi::v1::ListAccountsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAccountsResponse>> AsyncListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAccountsResponse>>(AsyncListAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAccountsResponse>> PrepareAsyncListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAccountsResponse>>(PrepareAsyncListAccountsRaw(context, request, cq));
    }
    ::grpc::Status ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::vega::coreapi::v1::ListAssetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAssetsResponse>> AsyncListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAssetsResponse>>(AsyncListAssetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAssetsResponse>> PrepareAsyncListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAssetsResponse>>(PrepareAsyncListAssetsRaw(context, request, cq));
    }
    ::grpc::Status ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::vega::coreapi::v1::ListNetworkParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListNetworkParametersResponse>> AsyncListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListNetworkParametersResponse>>(AsyncListNetworkParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListNetworkParametersResponse>> PrepareAsyncListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListNetworkParametersResponse>>(PrepareAsyncListNetworkParametersRaw(context, request, cq));
    }
    ::grpc::Status ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::vega::coreapi::v1::ListPartiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListPartiesResponse>> AsyncListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListPartiesResponse>>(AsyncListPartiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListPartiesResponse>> PrepareAsyncListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListPartiesResponse>>(PrepareAsyncListPartiesRaw(context, request, cq));
    }
    ::grpc::Status ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::vega::coreapi::v1::ListValidatorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListValidatorsResponse>> AsyncListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListValidatorsResponse>>(AsyncListValidatorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListValidatorsResponse>> PrepareAsyncListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListValidatorsResponse>>(PrepareAsyncListValidatorsRaw(context, request, cq));
    }
    ::grpc::Status ListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest& request, ::vega::coreapi::v1::ListMarketsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListMarketsResponse>> AsyncListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListMarketsResponse>>(AsyncListMarketsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListMarketsResponse>> PrepareAsyncListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListMarketsResponse>>(PrepareAsyncListMarketsRaw(context, request, cq));
    }
    ::grpc::Status ListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest& request, ::vega::coreapi::v1::ListProposalsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListProposalsResponse>> AsyncListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListProposalsResponse>>(AsyncListProposalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListProposalsResponse>> PrepareAsyncListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListProposalsResponse>>(PrepareAsyncListProposalsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest* request, ::vega::coreapi::v1::ListMarketsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest* request, ::vega::coreapi::v1::ListMarketsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListMarkets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest* request, ::vega::coreapi::v1::ListMarketsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest* request, ::vega::coreapi::v1::ListProposalsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest* request, ::vega::coreapi::v1::ListProposalsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListProposals(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest* request, ::vega::coreapi::v1::ListProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAccountsResponse>* AsyncListAccountsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAccountsResponse>* PrepareAsyncListAccountsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAssetsResponse>* AsyncListAssetsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAssetsResponse>* PrepareAsyncListAssetsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListNetworkParametersResponse>* AsyncListNetworkParametersRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListNetworkParametersResponse>* PrepareAsyncListNetworkParametersRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListPartiesResponse>* AsyncListPartiesRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListPartiesResponse>* PrepareAsyncListPartiesRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListValidatorsResponse>* AsyncListValidatorsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListValidatorsResponse>* PrepareAsyncListValidatorsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListMarketsResponse>* AsyncListMarketsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListMarketsResponse>* PrepareAsyncListMarketsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListMarketsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListProposalsResponse>* AsyncListProposalsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListProposalsResponse>* PrepareAsyncListProposalsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListProposalsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListAccounts_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAssets_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNetworkParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_ListParties_;
    const ::grpc::internal::RpcMethod rpcmethod_ListValidators_;
    const ::grpc::internal::RpcMethod rpcmethod_ListMarkets_;
    const ::grpc::internal::RpcMethod rpcmethod_ListProposals_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListAccounts(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response);
    virtual ::grpc::Status ListAssets(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response);
    virtual ::grpc::Status ListNetworkParameters(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response);
    virtual ::grpc::Status ListParties(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response);
    virtual ::grpc::Status ListValidators(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response);
    virtual ::grpc::Status ListMarkets(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListMarketsRequest* request, ::vega::coreapi::v1::ListMarketsResponse* response);
    virtual ::grpc::Status ListProposals(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListProposalsRequest* request, ::vega::coreapi::v1::ListProposalsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAccounts() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAccounts(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAccountsRequest* /*request*/, ::vega::coreapi::v1::ListAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAccounts(::grpc::ServerContext* context, ::vega::coreapi::v1::ListAccountsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vega::coreapi::v1::ListAccountsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAssets() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAssets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAssetsRequest* /*request*/, ::vega::coreapi::v1::ListAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAssets(::grpc::ServerContext* context, ::vega::coreapi::v1::ListAssetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vega::coreapi::v1::ListAssetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNetworkParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNetworkParameters() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListNetworkParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetworkParameters(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListNetworkParametersRequest* /*request*/, ::vega::coreapi::v1::ListNetworkParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNetworkParameters(::grpc::ServerContext* context, ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::vega::coreapi::v1::ListNetworkParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListParties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListParties() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListParties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListParties(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListPartiesRequest* /*request*/, ::vega::coreapi::v1::ListPartiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListParties(::grpc::ServerContext* context, ::vega::coreapi::v1::ListPartiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::vega::coreapi::v1::ListPartiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListValidators() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListValidators(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListValidatorsRequest* /*request*/, ::vega::coreapi::v1::ListValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListValidators(::grpc::ServerContext* context, ::vega::coreapi::v1::ListValidatorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vega::coreapi::v1::ListValidatorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListMarkets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListMarkets() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListMarkets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMarkets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListMarketsRequest* /*request*/, ::vega::coreapi::v1::ListMarketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMarkets(::grpc::ServerContext* context, ::vega::coreapi::v1::ListMarketsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vega::coreapi::v1::ListMarketsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListProposals() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListProposalsRequest* /*request*/, ::vega::coreapi::v1::ListProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProposals(::grpc::ServerContext* context, ::vega::coreapi::v1::ListProposalsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vega::coreapi::v1::ListProposalsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListAccounts<WithAsyncMethod_ListAssets<WithAsyncMethod_ListNetworkParameters<WithAsyncMethod_ListParties<WithAsyncMethod_ListValidators<WithAsyncMethod_ListMarkets<WithAsyncMethod_ListProposals<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListAccounts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListAccountsRequest, ::vega::coreapi::v1::ListAccountsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response) { return this->ListAccounts(context, request, response); }));}
    void SetMessageAllocatorFor_ListAccounts(
        ::grpc::experimental::MessageAllocator< ::vega::coreapi::v1::ListAccountsRequest, ::vega::coreapi::v1::ListAccountsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListAccountsRequest, ::vega::coreapi::v1::ListAccountsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAccounts(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAccountsRequest* /*request*/, ::vega::coreapi::v1::ListAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAccounts(
      ::grpc::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListAccountsRequest* /*request*/, ::vega::coreapi::v1::ListAccountsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAccounts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListAccountsRequest* /*request*/, ::vega::coreapi::v1::ListAccountsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListAssets() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListAssetsRequest, ::vega::coreapi::v1::ListAssetsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response) { return this->ListAssets(context, request, response); }));}
    void SetMessageAllocatorFor_ListAssets(
        ::grpc::experimental::MessageAllocator< ::vega::coreapi::v1::ListAssetsRequest, ::vega::coreapi::v1::ListAssetsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListAssetsRequest, ::vega::coreapi::v1::ListAssetsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAssets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAssetsRequest* /*request*/, ::vega::coreapi::v1::ListAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAssets(
      ::grpc::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListAssetsRequest* /*request*/, ::vega::coreapi::v1::ListAssetsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAssets(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListAssetsRequest* /*request*/, ::vega::coreapi::v1::ListAssetsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListNetworkParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListNetworkParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListNetworkParametersRequest, ::vega::coreapi::v1::ListNetworkParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response) { return this->ListNetworkParameters(context, request, response); }));}
    void SetMessageAllocatorFor_ListNetworkParameters(
        ::grpc::experimental::MessageAllocator< ::vega::coreapi::v1::ListNetworkParametersRequest, ::vega::coreapi::v1::ListNetworkParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListNetworkParametersRequest, ::vega::coreapi::v1::ListNetworkParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListNetworkParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetworkParameters(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListNetworkParametersRequest* /*request*/, ::vega::coreapi::v1::ListNetworkParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListNetworkParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListNetworkParametersRequest* /*request*/, ::vega::coreapi::v1::ListNetworkParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListNetworkParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListNetworkParametersRequest* /*request*/, ::vega::coreapi::v1::ListNetworkParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListParties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListParties() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListPartiesRequest, ::vega::coreapi::v1::ListPartiesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response) { return this->ListParties(context, request, response); }));}
    void SetMessageAllocatorFor_ListParties(
        ::grpc::experimental::MessageAllocator< ::vega::coreapi::v1::ListPartiesRequest, ::vega::coreapi::v1::ListPartiesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListPartiesRequest, ::vega::coreapi::v1::ListPartiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListParties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListParties(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListPartiesRequest* /*request*/, ::vega::coreapi::v1::ListPartiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListParties(
      ::grpc::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListPartiesRequest* /*request*/, ::vega::coreapi::v1::ListPartiesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListParties(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListPartiesRequest* /*request*/, ::vega::coreapi::v1::ListPartiesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListValidators() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListValidatorsRequest, ::vega::coreapi::v1::ListValidatorsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response) { return this->ListValidators(context, request, response); }));}
    void SetMessageAllocatorFor_ListValidators(
        ::grpc::experimental::MessageAllocator< ::vega::coreapi::v1::ListValidatorsRequest, ::vega::coreapi::v1::ListValidatorsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListValidatorsRequest, ::vega::coreapi::v1::ListValidatorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListValidators(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListValidatorsRequest* /*request*/, ::vega::coreapi::v1::ListValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListValidators(
      ::grpc::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListValidatorsRequest* /*request*/, ::vega::coreapi::v1::ListValidatorsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListValidators(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListValidatorsRequest* /*request*/, ::vega::coreapi::v1::ListValidatorsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListMarkets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListMarkets() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListMarketsRequest, ::vega::coreapi::v1::ListMarketsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vega::coreapi::v1::ListMarketsRequest* request, ::vega::coreapi::v1::ListMarketsResponse* response) { return this->ListMarkets(context, request, response); }));}
    void SetMessageAllocatorFor_ListMarkets(
        ::grpc::experimental::MessageAllocator< ::vega::coreapi::v1::ListMarketsRequest, ::vega::coreapi::v1::ListMarketsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListMarketsRequest, ::vega::coreapi::v1::ListMarketsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListMarkets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMarkets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListMarketsRequest* /*request*/, ::vega::coreapi::v1::ListMarketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListMarkets(
      ::grpc::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListMarketsRequest* /*request*/, ::vega::coreapi::v1::ListMarketsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListMarkets(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListMarketsRequest* /*request*/, ::vega::coreapi::v1::ListMarketsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListProposals() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListProposalsRequest, ::vega::coreapi::v1::ListProposalsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vega::coreapi::v1::ListProposalsRequest* request, ::vega::coreapi::v1::ListProposalsResponse* response) { return this->ListProposals(context, request, response); }));}
    void SetMessageAllocatorFor_ListProposals(
        ::grpc::experimental::MessageAllocator< ::vega::coreapi::v1::ListProposalsRequest, ::vega::coreapi::v1::ListProposalsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vega::coreapi::v1::ListProposalsRequest, ::vega::coreapi::v1::ListProposalsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListProposalsRequest* /*request*/, ::vega::coreapi::v1::ListProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListProposals(
      ::grpc::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListProposalsRequest* /*request*/, ::vega::coreapi::v1::ListProposalsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListProposals(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vega::coreapi::v1::ListProposalsRequest* /*request*/, ::vega::coreapi::v1::ListProposalsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListAccounts<ExperimentalWithCallbackMethod_ListAssets<ExperimentalWithCallbackMethod_ListNetworkParameters<ExperimentalWithCallbackMethod_ListParties<ExperimentalWithCallbackMethod_ListValidators<ExperimentalWithCallbackMethod_ListMarkets<ExperimentalWithCallbackMethod_ListProposals<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListAccounts<ExperimentalWithCallbackMethod_ListAssets<ExperimentalWithCallbackMethod_ListNetworkParameters<ExperimentalWithCallbackMethod_ListParties<ExperimentalWithCallbackMethod_ListValidators<ExperimentalWithCallbackMethod_ListMarkets<ExperimentalWithCallbackMethod_ListProposals<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAccounts() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAccounts(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAccountsRequest* /*request*/, ::vega::coreapi::v1::ListAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAssets() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAssets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAssetsRequest* /*request*/, ::vega::coreapi::v1::ListAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNetworkParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNetworkParameters() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListNetworkParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetworkParameters(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListNetworkParametersRequest* /*request*/, ::vega::coreapi::v1::ListNetworkParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListParties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListParties() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListParties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListParties(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListPartiesRequest* /*request*/, ::vega::coreapi::v1::ListPartiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListValidators() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListValidators(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListValidatorsRequest* /*request*/, ::vega::coreapi::v1::ListValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListMarkets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListMarkets() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListMarkets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMarkets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListMarketsRequest* /*request*/, ::vega::coreapi::v1::ListMarketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListProposals() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListProposalsRequest* /*request*/, ::vega::coreapi::v1::ListProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAccounts() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAccounts(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAccountsRequest* /*request*/, ::vega::coreapi::v1::ListAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAccounts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAssets() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAssets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAssetsRequest* /*request*/, ::vega::coreapi::v1::ListAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAssets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNetworkParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNetworkParameters() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListNetworkParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetworkParameters(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListNetworkParametersRequest* /*request*/, ::vega::coreapi::v1::ListNetworkParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNetworkParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListParties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListParties() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListParties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListParties(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListPartiesRequest* /*request*/, ::vega::coreapi::v1::ListPartiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListParties(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListValidators() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListValidators(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListValidatorsRequest* /*request*/, ::vega::coreapi::v1::ListValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListValidators(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListMarkets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListMarkets() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListMarkets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMarkets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListMarketsRequest* /*request*/, ::vega::coreapi::v1::ListMarketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMarkets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListProposals() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListProposalsRequest* /*request*/, ::vega::coreapi::v1::ListProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProposals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListAccounts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAccounts(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAccounts(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAccountsRequest* /*request*/, ::vega::coreapi::v1::ListAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAccounts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAccounts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListAssets() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAssets(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAssets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAssetsRequest* /*request*/, ::vega::coreapi::v1::ListAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAssets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAssets(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListNetworkParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListNetworkParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNetworkParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListNetworkParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetworkParameters(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListNetworkParametersRequest* /*request*/, ::vega::coreapi::v1::ListNetworkParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListNetworkParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListNetworkParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListParties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListParties() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListParties(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListParties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListParties(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListPartiesRequest* /*request*/, ::vega::coreapi::v1::ListPartiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListParties(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListParties(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListValidators() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListValidators(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListValidators(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListValidatorsRequest* /*request*/, ::vega::coreapi::v1::ListValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListValidators(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListValidators(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListMarkets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListMarkets() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListMarkets(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListMarkets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMarkets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListMarketsRequest* /*request*/, ::vega::coreapi::v1::ListMarketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListMarkets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListMarkets(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListProposals() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListProposals(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListProposalsRequest* /*request*/, ::vega::coreapi::v1::ListProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListProposals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListProposals(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAccounts() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vega::coreapi::v1::ListAccountsRequest, ::vega::coreapi::v1::ListAccountsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vega::coreapi::v1::ListAccountsRequest, ::vega::coreapi::v1::ListAccountsResponse>* streamer) {
                       return this->StreamedListAccounts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAccounts(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAccountsRequest* /*request*/, ::vega::coreapi::v1::ListAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAccounts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vega::coreapi::v1::ListAccountsRequest,::vega::coreapi::v1::ListAccountsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAssets() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vega::coreapi::v1::ListAssetsRequest, ::vega::coreapi::v1::ListAssetsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vega::coreapi::v1::ListAssetsRequest, ::vega::coreapi::v1::ListAssetsResponse>* streamer) {
                       return this->StreamedListAssets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAssets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListAssetsRequest* /*request*/, ::vega::coreapi::v1::ListAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAssets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vega::coreapi::v1::ListAssetsRequest,::vega::coreapi::v1::ListAssetsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNetworkParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNetworkParameters() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vega::coreapi::v1::ListNetworkParametersRequest, ::vega::coreapi::v1::ListNetworkParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vega::coreapi::v1::ListNetworkParametersRequest, ::vega::coreapi::v1::ListNetworkParametersResponse>* streamer) {
                       return this->StreamedListNetworkParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNetworkParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNetworkParameters(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListNetworkParametersRequest* /*request*/, ::vega::coreapi::v1::ListNetworkParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNetworkParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vega::coreapi::v1::ListNetworkParametersRequest,::vega::coreapi::v1::ListNetworkParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListParties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListParties() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vega::coreapi::v1::ListPartiesRequest, ::vega::coreapi::v1::ListPartiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vega::coreapi::v1::ListPartiesRequest, ::vega::coreapi::v1::ListPartiesResponse>* streamer) {
                       return this->StreamedListParties(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListParties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListParties(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListPartiesRequest* /*request*/, ::vega::coreapi::v1::ListPartiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListParties(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vega::coreapi::v1::ListPartiesRequest,::vega::coreapi::v1::ListPartiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListValidators() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vega::coreapi::v1::ListValidatorsRequest, ::vega::coreapi::v1::ListValidatorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vega::coreapi::v1::ListValidatorsRequest, ::vega::coreapi::v1::ListValidatorsResponse>* streamer) {
                       return this->StreamedListValidators(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListValidators(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListValidatorsRequest* /*request*/, ::vega::coreapi::v1::ListValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListValidators(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vega::coreapi::v1::ListValidatorsRequest,::vega::coreapi::v1::ListValidatorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListMarkets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListMarkets() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vega::coreapi::v1::ListMarketsRequest, ::vega::coreapi::v1::ListMarketsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vega::coreapi::v1::ListMarketsRequest, ::vega::coreapi::v1::ListMarketsResponse>* streamer) {
                       return this->StreamedListMarkets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListMarkets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListMarkets(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListMarketsRequest* /*request*/, ::vega::coreapi::v1::ListMarketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListMarkets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vega::coreapi::v1::ListMarketsRequest,::vega::coreapi::v1::ListMarketsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListProposals() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vega::coreapi::v1::ListProposalsRequest, ::vega::coreapi::v1::ListProposalsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vega::coreapi::v1::ListProposalsRequest, ::vega::coreapi::v1::ListProposalsResponse>* streamer) {
                       return this->StreamedListProposals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::vega::coreapi::v1::ListProposalsRequest* /*request*/, ::vega::coreapi::v1::ListProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListProposals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vega::coreapi::v1::ListProposalsRequest,::vega::coreapi::v1::ListProposalsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListAccounts<WithStreamedUnaryMethod_ListAssets<WithStreamedUnaryMethod_ListNetworkParameters<WithStreamedUnaryMethod_ListParties<WithStreamedUnaryMethod_ListValidators<WithStreamedUnaryMethod_ListMarkets<WithStreamedUnaryMethod_ListProposals<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListAccounts<WithStreamedUnaryMethod_ListAssets<WithStreamedUnaryMethod_ListNetworkParameters<WithStreamedUnaryMethod_ListParties<WithStreamedUnaryMethod_ListValidators<WithStreamedUnaryMethod_ListMarkets<WithStreamedUnaryMethod_ListProposals<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace coreapi
}  // namespace vega


#endif  // GRPC_coreapi_2fv1_2fcoreapi_2eproto__INCLUDED
