// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coreapi/v1/coreapi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_coreapi_2fv1_2fcoreapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_coreapi_2fv1_2fcoreapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "assets.pb.h"
#include "governance.pb.h"
#include "markets.pb.h"
#include "vega.pb.h"
#include "events/v1/events.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_coreapi_2fv1_2fcoreapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_coreapi_2fv1_2fcoreapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coreapi_2fv1_2fcoreapi_2eproto;
namespace vega {
namespace coreapi {
namespace v1 {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class ListAccountsRequest;
class ListAccountsRequestDefaultTypeInternal;
extern ListAccountsRequestDefaultTypeInternal _ListAccountsRequest_default_instance_;
class ListAccountsResponse;
class ListAccountsResponseDefaultTypeInternal;
extern ListAccountsResponseDefaultTypeInternal _ListAccountsResponse_default_instance_;
class ListAssetsRequest;
class ListAssetsRequestDefaultTypeInternal;
extern ListAssetsRequestDefaultTypeInternal _ListAssetsRequest_default_instance_;
class ListAssetsResponse;
class ListAssetsResponseDefaultTypeInternal;
extern ListAssetsResponseDefaultTypeInternal _ListAssetsResponse_default_instance_;
class ListMarketsDataRequest;
class ListMarketsDataRequestDefaultTypeInternal;
extern ListMarketsDataRequestDefaultTypeInternal _ListMarketsDataRequest_default_instance_;
class ListMarketsDataResponse;
class ListMarketsDataResponseDefaultTypeInternal;
extern ListMarketsDataResponseDefaultTypeInternal _ListMarketsDataResponse_default_instance_;
class ListMarketsRequest;
class ListMarketsRequestDefaultTypeInternal;
extern ListMarketsRequestDefaultTypeInternal _ListMarketsRequest_default_instance_;
class ListMarketsResponse;
class ListMarketsResponseDefaultTypeInternal;
extern ListMarketsResponseDefaultTypeInternal _ListMarketsResponse_default_instance_;
class ListNetworkParametersRequest;
class ListNetworkParametersRequestDefaultTypeInternal;
extern ListNetworkParametersRequestDefaultTypeInternal _ListNetworkParametersRequest_default_instance_;
class ListNetworkParametersResponse;
class ListNetworkParametersResponseDefaultTypeInternal;
extern ListNetworkParametersResponseDefaultTypeInternal _ListNetworkParametersResponse_default_instance_;
class ListPartiesRequest;
class ListPartiesRequestDefaultTypeInternal;
extern ListPartiesRequestDefaultTypeInternal _ListPartiesRequest_default_instance_;
class ListPartiesResponse;
class ListPartiesResponseDefaultTypeInternal;
extern ListPartiesResponseDefaultTypeInternal _ListPartiesResponse_default_instance_;
class ListProposalsRequest;
class ListProposalsRequestDefaultTypeInternal;
extern ListProposalsRequestDefaultTypeInternal _ListProposalsRequest_default_instance_;
class ListProposalsResponse;
class ListProposalsResponseDefaultTypeInternal;
extern ListProposalsResponseDefaultTypeInternal _ListProposalsResponse_default_instance_;
class ListValidatorsRequest;
class ListValidatorsRequestDefaultTypeInternal;
extern ListValidatorsRequestDefaultTypeInternal _ListValidatorsRequest_default_instance_;
class ListValidatorsResponse;
class ListValidatorsResponseDefaultTypeInternal;
extern ListValidatorsResponseDefaultTypeInternal _ListValidatorsResponse_default_instance_;
class ListVotesRequest;
class ListVotesRequestDefaultTypeInternal;
extern ListVotesRequestDefaultTypeInternal _ListVotesRequest_default_instance_;
class ListVotesResponse;
class ListVotesResponseDefaultTypeInternal;
extern ListVotesResponseDefaultTypeInternal _ListVotesResponse_default_instance_;
}  // namespace v1
}  // namespace coreapi
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::coreapi::v1::Account* Arena::CreateMaybeMessage<::vega::coreapi::v1::Account>(Arena*);
template<> ::vega::coreapi::v1::ListAccountsRequest* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListAccountsRequest>(Arena*);
template<> ::vega::coreapi::v1::ListAccountsResponse* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListAccountsResponse>(Arena*);
template<> ::vega::coreapi::v1::ListAssetsRequest* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListAssetsRequest>(Arena*);
template<> ::vega::coreapi::v1::ListAssetsResponse* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListAssetsResponse>(Arena*);
template<> ::vega::coreapi::v1::ListMarketsDataRequest* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListMarketsDataRequest>(Arena*);
template<> ::vega::coreapi::v1::ListMarketsDataResponse* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListMarketsDataResponse>(Arena*);
template<> ::vega::coreapi::v1::ListMarketsRequest* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListMarketsRequest>(Arena*);
template<> ::vega::coreapi::v1::ListMarketsResponse* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListMarketsResponse>(Arena*);
template<> ::vega::coreapi::v1::ListNetworkParametersRequest* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListNetworkParametersRequest>(Arena*);
template<> ::vega::coreapi::v1::ListNetworkParametersResponse* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListNetworkParametersResponse>(Arena*);
template<> ::vega::coreapi::v1::ListPartiesRequest* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListPartiesRequest>(Arena*);
template<> ::vega::coreapi::v1::ListPartiesResponse* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListPartiesResponse>(Arena*);
template<> ::vega::coreapi::v1::ListProposalsRequest* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListProposalsRequest>(Arena*);
template<> ::vega::coreapi::v1::ListProposalsResponse* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListProposalsResponse>(Arena*);
template<> ::vega::coreapi::v1::ListValidatorsRequest* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListValidatorsRequest>(Arena*);
template<> ::vega::coreapi::v1::ListValidatorsResponse* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListValidatorsResponse>(Arena*);
template<> ::vega::coreapi::v1::ListVotesRequest* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListVotesRequest>(Arena*);
template<> ::vega::coreapi::v1::ListVotesResponse* Arena::CreateMaybeMessage<::vega::coreapi::v1::ListVotesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {
namespace coreapi {
namespace v1 {

// ===================================================================

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
    kMarketFieldNumber = 2,
    kBalanceFieldNumber = 3,
    kAssetFieldNumber = 5,
    kTypeFieldNumber = 6,
  };
  // string party = 1 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string market = 2 [json_name = "market"];
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string balance = 3 [json_name = "balance"];
  void clear_balance();
  const std::string& balance() const;
  void set_balance(const std::string& value);
  void set_balance(std::string&& value);
  void set_balance(const char* value);
  void set_balance(const char* value, size_t size);
  std::string* mutable_balance();
  std::string* release_balance();
  void set_allocated_balance(std::string* balance);
  private:
  const std::string& _internal_balance() const;
  void _internal_set_balance(const std::string& value);
  std::string* _internal_mutable_balance();
  public:

  // string asset = 5 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string type = 6 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr balance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListAccountsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListAccountsRequest) */ {
 public:
  inline ListAccountsRequest() : ListAccountsRequest(nullptr) {}
  virtual ~ListAccountsRequest();

  ListAccountsRequest(const ListAccountsRequest& from);
  ListAccountsRequest(ListAccountsRequest&& from) noexcept
    : ListAccountsRequest() {
    *this = ::std::move(from);
  }

  inline ListAccountsRequest& operator=(const ListAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAccountsRequest& operator=(ListAccountsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAccountsRequest& default_instance();

  static inline const ListAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAccountsRequest*>(
               &_ListAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListAccountsRequest& a, ListAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAccountsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAccountsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAccountsRequest* New() const final {
    return CreateMaybeMessage<ListAccountsRequest>(nullptr);
  }

  ListAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAccountsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAccountsRequest& from);
  void MergeFrom(const ListAccountsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAccountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListAccountsRequest";
  }
  protected:
  explicit ListAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
    kMarketFieldNumber = 2,
  };
  // string party = 1 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // string market = 2 [json_name = "market"];
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListAccountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListAccountsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListAccountsResponse) */ {
 public:
  inline ListAccountsResponse() : ListAccountsResponse(nullptr) {}
  virtual ~ListAccountsResponse();

  ListAccountsResponse(const ListAccountsResponse& from);
  ListAccountsResponse(ListAccountsResponse&& from) noexcept
    : ListAccountsResponse() {
    *this = ::std::move(from);
  }

  inline ListAccountsResponse& operator=(const ListAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAccountsResponse& operator=(ListAccountsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAccountsResponse& default_instance();

  static inline const ListAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const ListAccountsResponse*>(
               &_ListAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListAccountsResponse& a, ListAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAccountsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAccountsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAccountsResponse* New() const final {
    return CreateMaybeMessage<ListAccountsResponse>(nullptr);
  }

  ListAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAccountsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAccountsResponse& from);
  void MergeFrom(const ListAccountsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAccountsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListAccountsResponse";
  }
  protected:
  explicit ListAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .vega.coreapi.v1.Account accounts = 1 [json_name = "accounts"];
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::vega::coreapi::v1::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::coreapi::v1::Account >*
      mutable_accounts();
  private:
  const ::vega::coreapi::v1::Account& _internal_accounts(int index) const;
  ::vega::coreapi::v1::Account* _internal_add_accounts();
  public:
  const ::vega::coreapi::v1::Account& accounts(int index) const;
  ::vega::coreapi::v1::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::coreapi::v1::Account >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::coreapi::v1::Account > accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListAssetsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListAssetsRequest) */ {
 public:
  inline ListAssetsRequest() : ListAssetsRequest(nullptr) {}
  virtual ~ListAssetsRequest();

  ListAssetsRequest(const ListAssetsRequest& from);
  ListAssetsRequest(ListAssetsRequest&& from) noexcept
    : ListAssetsRequest() {
    *this = ::std::move(from);
  }

  inline ListAssetsRequest& operator=(const ListAssetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAssetsRequest& operator=(ListAssetsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAssetsRequest& default_instance();

  static inline const ListAssetsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAssetsRequest*>(
               &_ListAssetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListAssetsRequest& a, ListAssetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAssetsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAssetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAssetsRequest* New() const final {
    return CreateMaybeMessage<ListAssetsRequest>(nullptr);
  }

  ListAssetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAssetsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAssetsRequest& from);
  void MergeFrom(const ListAssetsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAssetsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListAssetsRequest";
  }
  protected:
  explicit ListAssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 1,
  };
  // string asset = 1 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListAssetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListAssetsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListAssetsResponse) */ {
 public:
  inline ListAssetsResponse() : ListAssetsResponse(nullptr) {}
  virtual ~ListAssetsResponse();

  ListAssetsResponse(const ListAssetsResponse& from);
  ListAssetsResponse(ListAssetsResponse&& from) noexcept
    : ListAssetsResponse() {
    *this = ::std::move(from);
  }

  inline ListAssetsResponse& operator=(const ListAssetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAssetsResponse& operator=(ListAssetsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAssetsResponse& default_instance();

  static inline const ListAssetsResponse* internal_default_instance() {
    return reinterpret_cast<const ListAssetsResponse*>(
               &_ListAssetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListAssetsResponse& a, ListAssetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAssetsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAssetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAssetsResponse* New() const final {
    return CreateMaybeMessage<ListAssetsResponse>(nullptr);
  }

  ListAssetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAssetsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAssetsResponse& from);
  void MergeFrom(const ListAssetsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAssetsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListAssetsResponse";
  }
  protected:
  explicit ListAssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
  };
  // repeated .vega.Asset assets = 1 [json_name = "assets"];
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  ::vega::Asset* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >*
      mutable_assets();
  private:
  const ::vega::Asset& _internal_assets(int index) const;
  ::vega::Asset* _internal_add_assets();
  public:
  const ::vega::Asset& assets(int index) const;
  ::vega::Asset* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >&
      assets() const;

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListAssetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset > assets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListNetworkParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListNetworkParametersRequest) */ {
 public:
  inline ListNetworkParametersRequest() : ListNetworkParametersRequest(nullptr) {}
  virtual ~ListNetworkParametersRequest();

  ListNetworkParametersRequest(const ListNetworkParametersRequest& from);
  ListNetworkParametersRequest(ListNetworkParametersRequest&& from) noexcept
    : ListNetworkParametersRequest() {
    *this = ::std::move(from);
  }

  inline ListNetworkParametersRequest& operator=(const ListNetworkParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNetworkParametersRequest& operator=(ListNetworkParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNetworkParametersRequest& default_instance();

  static inline const ListNetworkParametersRequest* internal_default_instance() {
    return reinterpret_cast<const ListNetworkParametersRequest*>(
               &_ListNetworkParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListNetworkParametersRequest& a, ListNetworkParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNetworkParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNetworkParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNetworkParametersRequest* New() const final {
    return CreateMaybeMessage<ListNetworkParametersRequest>(nullptr);
  }

  ListNetworkParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNetworkParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNetworkParametersRequest& from);
  void MergeFrom(const ListNetworkParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNetworkParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListNetworkParametersRequest";
  }
  protected:
  explicit ListNetworkParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkParameterKeyFieldNumber = 1,
  };
  // string network_parameter_key = 1 [json_name = "networkParameterKey"];
  void clear_network_parameter_key();
  const std::string& network_parameter_key() const;
  void set_network_parameter_key(const std::string& value);
  void set_network_parameter_key(std::string&& value);
  void set_network_parameter_key(const char* value);
  void set_network_parameter_key(const char* value, size_t size);
  std::string* mutable_network_parameter_key();
  std::string* release_network_parameter_key();
  void set_allocated_network_parameter_key(std::string* network_parameter_key);
  private:
  const std::string& _internal_network_parameter_key() const;
  void _internal_set_network_parameter_key(const std::string& value);
  std::string* _internal_mutable_network_parameter_key();
  public:

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListNetworkParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_parameter_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListNetworkParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListNetworkParametersResponse) */ {
 public:
  inline ListNetworkParametersResponse() : ListNetworkParametersResponse(nullptr) {}
  virtual ~ListNetworkParametersResponse();

  ListNetworkParametersResponse(const ListNetworkParametersResponse& from);
  ListNetworkParametersResponse(ListNetworkParametersResponse&& from) noexcept
    : ListNetworkParametersResponse() {
    *this = ::std::move(from);
  }

  inline ListNetworkParametersResponse& operator=(const ListNetworkParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNetworkParametersResponse& operator=(ListNetworkParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNetworkParametersResponse& default_instance();

  static inline const ListNetworkParametersResponse* internal_default_instance() {
    return reinterpret_cast<const ListNetworkParametersResponse*>(
               &_ListNetworkParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListNetworkParametersResponse& a, ListNetworkParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNetworkParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNetworkParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNetworkParametersResponse* New() const final {
    return CreateMaybeMessage<ListNetworkParametersResponse>(nullptr);
  }

  ListNetworkParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNetworkParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNetworkParametersResponse& from);
  void MergeFrom(const ListNetworkParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNetworkParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListNetworkParametersResponse";
  }
  protected:
  explicit ListNetworkParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkParametersFieldNumber = 1,
  };
  // repeated .vega.NetworkParameter network_parameters = 1 [json_name = "networkParameters"];
  int network_parameters_size() const;
  private:
  int _internal_network_parameters_size() const;
  public:
  void clear_network_parameters();
  ::vega::NetworkParameter* mutable_network_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >*
      mutable_network_parameters();
  private:
  const ::vega::NetworkParameter& _internal_network_parameters(int index) const;
  ::vega::NetworkParameter* _internal_add_network_parameters();
  public:
  const ::vega::NetworkParameter& network_parameters(int index) const;
  ::vega::NetworkParameter* add_network_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >&
      network_parameters() const;

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListNetworkParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter > network_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListPartiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListPartiesRequest) */ {
 public:
  inline ListPartiesRequest() : ListPartiesRequest(nullptr) {}
  virtual ~ListPartiesRequest();

  ListPartiesRequest(const ListPartiesRequest& from);
  ListPartiesRequest(ListPartiesRequest&& from) noexcept
    : ListPartiesRequest() {
    *this = ::std::move(from);
  }

  inline ListPartiesRequest& operator=(const ListPartiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPartiesRequest& operator=(ListPartiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPartiesRequest& default_instance();

  static inline const ListPartiesRequest* internal_default_instance() {
    return reinterpret_cast<const ListPartiesRequest*>(
               &_ListPartiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListPartiesRequest& a, ListPartiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPartiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPartiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPartiesRequest* New() const final {
    return CreateMaybeMessage<ListPartiesRequest>(nullptr);
  }

  ListPartiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPartiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPartiesRequest& from);
  void MergeFrom(const ListPartiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPartiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListPartiesRequest";
  }
  protected:
  explicit ListPartiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListPartiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListPartiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListPartiesResponse) */ {
 public:
  inline ListPartiesResponse() : ListPartiesResponse(nullptr) {}
  virtual ~ListPartiesResponse();

  ListPartiesResponse(const ListPartiesResponse& from);
  ListPartiesResponse(ListPartiesResponse&& from) noexcept
    : ListPartiesResponse() {
    *this = ::std::move(from);
  }

  inline ListPartiesResponse& operator=(const ListPartiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPartiesResponse& operator=(ListPartiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPartiesResponse& default_instance();

  static inline const ListPartiesResponse* internal_default_instance() {
    return reinterpret_cast<const ListPartiesResponse*>(
               &_ListPartiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListPartiesResponse& a, ListPartiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPartiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPartiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPartiesResponse* New() const final {
    return CreateMaybeMessage<ListPartiesResponse>(nullptr);
  }

  ListPartiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPartiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPartiesResponse& from);
  void MergeFrom(const ListPartiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPartiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListPartiesResponse";
  }
  protected:
  explicit ListPartiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartiesFieldNumber = 1,
  };
  // repeated .vega.Party parties = 1 [json_name = "parties"];
  int parties_size() const;
  private:
  int _internal_parties_size() const;
  public:
  void clear_parties();
  ::vega::Party* mutable_parties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >*
      mutable_parties();
  private:
  const ::vega::Party& _internal_parties(int index) const;
  ::vega::Party* _internal_add_parties();
  public:
  const ::vega::Party& parties(int index) const;
  ::vega::Party* add_parties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >&
      parties() const;

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListPartiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party > parties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListValidatorsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListValidatorsRequest) */ {
 public:
  inline ListValidatorsRequest() : ListValidatorsRequest(nullptr) {}
  virtual ~ListValidatorsRequest();

  ListValidatorsRequest(const ListValidatorsRequest& from);
  ListValidatorsRequest(ListValidatorsRequest&& from) noexcept
    : ListValidatorsRequest() {
    *this = ::std::move(from);
  }

  inline ListValidatorsRequest& operator=(const ListValidatorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListValidatorsRequest& operator=(ListValidatorsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListValidatorsRequest& default_instance();

  static inline const ListValidatorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListValidatorsRequest*>(
               &_ListValidatorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListValidatorsRequest& a, ListValidatorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListValidatorsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListValidatorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListValidatorsRequest* New() const final {
    return CreateMaybeMessage<ListValidatorsRequest>(nullptr);
  }

  ListValidatorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListValidatorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListValidatorsRequest& from);
  void MergeFrom(const ListValidatorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListValidatorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListValidatorsRequest";
  }
  protected:
  explicit ListValidatorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListValidatorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListValidatorsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListValidatorsResponse) */ {
 public:
  inline ListValidatorsResponse() : ListValidatorsResponse(nullptr) {}
  virtual ~ListValidatorsResponse();

  ListValidatorsResponse(const ListValidatorsResponse& from);
  ListValidatorsResponse(ListValidatorsResponse&& from) noexcept
    : ListValidatorsResponse() {
    *this = ::std::move(from);
  }

  inline ListValidatorsResponse& operator=(const ListValidatorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListValidatorsResponse& operator=(ListValidatorsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListValidatorsResponse& default_instance();

  static inline const ListValidatorsResponse* internal_default_instance() {
    return reinterpret_cast<const ListValidatorsResponse*>(
               &_ListValidatorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListValidatorsResponse& a, ListValidatorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListValidatorsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListValidatorsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListValidatorsResponse* New() const final {
    return CreateMaybeMessage<ListValidatorsResponse>(nullptr);
  }

  ListValidatorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListValidatorsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListValidatorsResponse& from);
  void MergeFrom(const ListValidatorsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListValidatorsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListValidatorsResponse";
  }
  protected:
  explicit ListValidatorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorsFieldNumber = 1,
  };
  // repeated .vega.events.v1.ValidatorUpdate validators = 1 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;
  public:
  void clear_validators();
  ::vega::events::v1::ValidatorUpdate* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::ValidatorUpdate >*
      mutable_validators();
  private:
  const ::vega::events::v1::ValidatorUpdate& _internal_validators(int index) const;
  ::vega::events::v1::ValidatorUpdate* _internal_add_validators();
  public:
  const ::vega::events::v1::ValidatorUpdate& validators(int index) const;
  ::vega::events::v1::ValidatorUpdate* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::ValidatorUpdate >&
      validators() const;

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListValidatorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::ValidatorUpdate > validators_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListMarketsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListMarketsRequest) */ {
 public:
  inline ListMarketsRequest() : ListMarketsRequest(nullptr) {}
  virtual ~ListMarketsRequest();

  ListMarketsRequest(const ListMarketsRequest& from);
  ListMarketsRequest(ListMarketsRequest&& from) noexcept
    : ListMarketsRequest() {
    *this = ::std::move(from);
  }

  inline ListMarketsRequest& operator=(const ListMarketsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMarketsRequest& operator=(ListMarketsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMarketsRequest& default_instance();

  static inline const ListMarketsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMarketsRequest*>(
               &_ListMarketsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListMarketsRequest& a, ListMarketsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMarketsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMarketsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMarketsRequest* New() const final {
    return CreateMaybeMessage<ListMarketsRequest>(nullptr);
  }

  ListMarketsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMarketsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMarketsRequest& from);
  void MergeFrom(const ListMarketsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMarketsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListMarketsRequest";
  }
  protected:
  explicit ListMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
  };
  // string market = 1 [json_name = "market"];
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListMarketsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListMarketsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListMarketsResponse) */ {
 public:
  inline ListMarketsResponse() : ListMarketsResponse(nullptr) {}
  virtual ~ListMarketsResponse();

  ListMarketsResponse(const ListMarketsResponse& from);
  ListMarketsResponse(ListMarketsResponse&& from) noexcept
    : ListMarketsResponse() {
    *this = ::std::move(from);
  }

  inline ListMarketsResponse& operator=(const ListMarketsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMarketsResponse& operator=(ListMarketsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMarketsResponse& default_instance();

  static inline const ListMarketsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMarketsResponse*>(
               &_ListMarketsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListMarketsResponse& a, ListMarketsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMarketsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMarketsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMarketsResponse* New() const final {
    return CreateMaybeMessage<ListMarketsResponse>(nullptr);
  }

  ListMarketsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMarketsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMarketsResponse& from);
  void MergeFrom(const ListMarketsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMarketsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListMarketsResponse";
  }
  protected:
  explicit ListMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketsFieldNumber = 1,
  };
  // repeated .vega.Market markets = 1 [json_name = "markets"];
  int markets_size() const;
  private:
  int _internal_markets_size() const;
  public:
  void clear_markets();
  ::vega::Market* mutable_markets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >*
      mutable_markets();
  private:
  const ::vega::Market& _internal_markets(int index) const;
  ::vega::Market* _internal_add_markets();
  public:
  const ::vega::Market& markets(int index) const;
  ::vega::Market* add_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >&
      markets() const;

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListMarketsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market > markets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListProposalsRequest) */ {
 public:
  inline ListProposalsRequest() : ListProposalsRequest(nullptr) {}
  virtual ~ListProposalsRequest();

  ListProposalsRequest(const ListProposalsRequest& from);
  ListProposalsRequest(ListProposalsRequest&& from) noexcept
    : ListProposalsRequest() {
    *this = ::std::move(from);
  }

  inline ListProposalsRequest& operator=(const ListProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProposalsRequest& operator=(ListProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListProposalsRequest& default_instance();

  static inline const ListProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const ListProposalsRequest*>(
               &_ListProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListProposalsRequest& a, ListProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProposalsRequest* New() const final {
    return CreateMaybeMessage<ListProposalsRequest>(nullptr);
  }

  ListProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListProposalsRequest& from);
  void MergeFrom(const ListProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListProposalsRequest";
  }
  protected:
  explicit ListProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
    kProposerFieldNumber = 2,
  };
  // string proposal = 1 [json_name = "proposal"];
  void clear_proposal();
  const std::string& proposal() const;
  void set_proposal(const std::string& value);
  void set_proposal(std::string&& value);
  void set_proposal(const char* value);
  void set_proposal(const char* value, size_t size);
  std::string* mutable_proposal();
  std::string* release_proposal();
  void set_allocated_proposal(std::string* proposal);
  private:
  const std::string& _internal_proposal() const;
  void _internal_set_proposal(const std::string& value);
  std::string* _internal_mutable_proposal();
  public:

  // string proposer = 2 [json_name = "proposer"];
  void clear_proposer();
  const std::string& proposer() const;
  void set_proposer(const std::string& value);
  void set_proposer(std::string&& value);
  void set_proposer(const char* value);
  void set_proposer(const char* value, size_t size);
  std::string* mutable_proposer();
  std::string* release_proposer();
  void set_allocated_proposer(std::string* proposer);
  private:
  const std::string& _internal_proposer() const;
  void _internal_set_proposer(const std::string& value);
  std::string* _internal_mutable_proposer();
  public:

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListProposalsResponse) */ {
 public:
  inline ListProposalsResponse() : ListProposalsResponse(nullptr) {}
  virtual ~ListProposalsResponse();

  ListProposalsResponse(const ListProposalsResponse& from);
  ListProposalsResponse(ListProposalsResponse&& from) noexcept
    : ListProposalsResponse() {
    *this = ::std::move(from);
  }

  inline ListProposalsResponse& operator=(const ListProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProposalsResponse& operator=(ListProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListProposalsResponse& default_instance();

  static inline const ListProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const ListProposalsResponse*>(
               &_ListProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListProposalsResponse& a, ListProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProposalsResponse* New() const final {
    return CreateMaybeMessage<ListProposalsResponse>(nullptr);
  }

  ListProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListProposalsResponse& from);
  void MergeFrom(const ListProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListProposalsResponse";
  }
  protected:
  explicit ListProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalsFieldNumber = 1,
  };
  // repeated .vega.Proposal proposals = 1 [json_name = "proposals"];
  int proposals_size() const;
  private:
  int _internal_proposals_size() const;
  public:
  void clear_proposals();
  ::vega::Proposal* mutable_proposals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Proposal >*
      mutable_proposals();
  private:
  const ::vega::Proposal& _internal_proposals(int index) const;
  ::vega::Proposal* _internal_add_proposals();
  public:
  const ::vega::Proposal& proposals(int index) const;
  ::vega::Proposal* add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Proposal >&
      proposals() const;

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Proposal > proposals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListMarketsDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListMarketsDataRequest) */ {
 public:
  inline ListMarketsDataRequest() : ListMarketsDataRequest(nullptr) {}
  virtual ~ListMarketsDataRequest();

  ListMarketsDataRequest(const ListMarketsDataRequest& from);
  ListMarketsDataRequest(ListMarketsDataRequest&& from) noexcept
    : ListMarketsDataRequest() {
    *this = ::std::move(from);
  }

  inline ListMarketsDataRequest& operator=(const ListMarketsDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMarketsDataRequest& operator=(ListMarketsDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMarketsDataRequest& default_instance();

  static inline const ListMarketsDataRequest* internal_default_instance() {
    return reinterpret_cast<const ListMarketsDataRequest*>(
               &_ListMarketsDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListMarketsDataRequest& a, ListMarketsDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMarketsDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMarketsDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMarketsDataRequest* New() const final {
    return CreateMaybeMessage<ListMarketsDataRequest>(nullptr);
  }

  ListMarketsDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMarketsDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMarketsDataRequest& from);
  void MergeFrom(const ListMarketsDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMarketsDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListMarketsDataRequest";
  }
  protected:
  explicit ListMarketsDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
  };
  // string market = 1 [json_name = "market"];
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListMarketsDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListMarketsDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListMarketsDataResponse) */ {
 public:
  inline ListMarketsDataResponse() : ListMarketsDataResponse(nullptr) {}
  virtual ~ListMarketsDataResponse();

  ListMarketsDataResponse(const ListMarketsDataResponse& from);
  ListMarketsDataResponse(ListMarketsDataResponse&& from) noexcept
    : ListMarketsDataResponse() {
    *this = ::std::move(from);
  }

  inline ListMarketsDataResponse& operator=(const ListMarketsDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMarketsDataResponse& operator=(ListMarketsDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMarketsDataResponse& default_instance();

  static inline const ListMarketsDataResponse* internal_default_instance() {
    return reinterpret_cast<const ListMarketsDataResponse*>(
               &_ListMarketsDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListMarketsDataResponse& a, ListMarketsDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMarketsDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMarketsDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMarketsDataResponse* New() const final {
    return CreateMaybeMessage<ListMarketsDataResponse>(nullptr);
  }

  ListMarketsDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMarketsDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMarketsDataResponse& from);
  void MergeFrom(const ListMarketsDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMarketsDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListMarketsDataResponse";
  }
  protected:
  explicit ListMarketsDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketsDataFieldNumber = 1,
  };
  // repeated .vega.MarketData markets_data = 1 [json_name = "marketsData"];
  int markets_data_size() const;
  private:
  int _internal_markets_data_size() const;
  public:
  void clear_markets_data();
  ::vega::MarketData* mutable_markets_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >*
      mutable_markets_data();
  private:
  const ::vega::MarketData& _internal_markets_data(int index) const;
  ::vega::MarketData* _internal_add_markets_data();
  public:
  const ::vega::MarketData& markets_data(int index) const;
  ::vega::MarketData* add_markets_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >&
      markets_data() const;

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListMarketsDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData > markets_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListVotesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListVotesRequest) */ {
 public:
  inline ListVotesRequest() : ListVotesRequest(nullptr) {}
  virtual ~ListVotesRequest();

  ListVotesRequest(const ListVotesRequest& from);
  ListVotesRequest(ListVotesRequest&& from) noexcept
    : ListVotesRequest() {
    *this = ::std::move(from);
  }

  inline ListVotesRequest& operator=(const ListVotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVotesRequest& operator=(ListVotesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVotesRequest& default_instance();

  static inline const ListVotesRequest* internal_default_instance() {
    return reinterpret_cast<const ListVotesRequest*>(
               &_ListVotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListVotesRequest& a, ListVotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVotesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVotesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVotesRequest* New() const final {
    return CreateMaybeMessage<ListVotesRequest>(nullptr);
  }

  ListVotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVotesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVotesRequest& from);
  void MergeFrom(const ListVotesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVotesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListVotesRequest";
  }
  protected:
  explicit ListVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
    kPartyFieldNumber = 2,
  };
  // string proposal = 1 [json_name = "proposal"];
  void clear_proposal();
  const std::string& proposal() const;
  void set_proposal(const std::string& value);
  void set_proposal(std::string&& value);
  void set_proposal(const char* value);
  void set_proposal(const char* value, size_t size);
  std::string* mutable_proposal();
  std::string* release_proposal();
  void set_allocated_proposal(std::string* proposal);
  private:
  const std::string& _internal_proposal() const;
  void _internal_set_proposal(const std::string& value);
  std::string* _internal_mutable_proposal();
  public:

  // string party = 2 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListVotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// -------------------------------------------------------------------

class ListVotesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.coreapi.v1.ListVotesResponse) */ {
 public:
  inline ListVotesResponse() : ListVotesResponse(nullptr) {}
  virtual ~ListVotesResponse();

  ListVotesResponse(const ListVotesResponse& from);
  ListVotesResponse(ListVotesResponse&& from) noexcept
    : ListVotesResponse() {
    *this = ::std::move(from);
  }

  inline ListVotesResponse& operator=(const ListVotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVotesResponse& operator=(ListVotesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVotesResponse& default_instance();

  static inline const ListVotesResponse* internal_default_instance() {
    return reinterpret_cast<const ListVotesResponse*>(
               &_ListVotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ListVotesResponse& a, ListVotesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVotesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVotesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVotesResponse* New() const final {
    return CreateMaybeMessage<ListVotesResponse>(nullptr);
  }

  ListVotesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVotesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVotesResponse& from);
  void MergeFrom(const ListVotesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVotesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.coreapi.v1.ListVotesResponse";
  }
  protected:
  explicit ListVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto);
    return ::descriptor_table_coreapi_2fv1_2fcoreapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
  };
  // repeated .vega.Vote votes = 1 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  ::vega::Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >*
      mutable_votes();
  private:
  const ::vega::Vote& _internal_votes(int index) const;
  ::vega::Vote* _internal_add_votes();
  public:
  const ::vega::Vote& votes(int index) const;
  ::vega::Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >&
      votes() const;

  // @@protoc_insertion_point(class_scope:vega.coreapi.v1.ListVotesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote > votes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coreapi_2fv1_2fcoreapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string party = 1 [json_name = "party"];
inline void Account::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& Account::party() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.Account.party)
  return _internal_party();
}
inline void Account::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.Account.party)
}
inline std::string* Account::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.Account.party)
  return _internal_mutable_party();
}
inline const std::string& Account::_internal_party() const {
  return party_.Get();
}
inline void Account::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.Account.party)
}
inline void Account::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.Account.party)
}
inline void Account::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.Account.party)
}
inline std::string* Account::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_party() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.Account.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.Account.party)
}

// string market = 2 [json_name = "market"];
inline void Account::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& Account::market() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.Account.market)
  return _internal_market();
}
inline void Account::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.Account.market)
}
inline std::string* Account::mutable_market() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.Account.market)
  return _internal_mutable_market();
}
inline const std::string& Account::_internal_market() const {
  return market_.Get();
}
inline void Account::_internal_set_market(const std::string& value) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_market(std::string&& value) {

  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.Account.market)
}
inline void Account::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.Account.market)
}
inline void Account::set_market(const char* value,
    size_t size) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.Account.market)
}
inline std::string* Account::_internal_mutable_market() {

  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_market() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.Account.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_market(std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.Account.market)
}

// string balance = 3 [json_name = "balance"];
inline void Account::clear_balance() {
  balance_.ClearToEmpty();
}
inline const std::string& Account::balance() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.Account.balance)
  return _internal_balance();
}
inline void Account::set_balance(const std::string& value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.Account.balance)
}
inline std::string* Account::mutable_balance() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.Account.balance)
  return _internal_mutable_balance();
}
inline const std::string& Account::_internal_balance() const {
  return balance_.Get();
}
inline void Account::_internal_set_balance(const std::string& value) {

  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_balance(std::string&& value) {

  balance_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.Account.balance)
}
inline void Account::set_balance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.Account.balance)
}
inline void Account::set_balance(const char* value,
    size_t size) {

  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.Account.balance)
}
inline std::string* Account::_internal_mutable_balance() {

  return balance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_balance() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.Account.balance)
  return balance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_balance(std::string* balance) {
  if (balance != nullptr) {

  } else {

  }
  balance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), balance,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.Account.balance)
}

// string asset = 5 [json_name = "asset"];
inline void Account::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& Account::asset() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.Account.asset)
  return _internal_asset();
}
inline void Account::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.Account.asset)
}
inline std::string* Account::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.Account.asset)
  return _internal_mutable_asset();
}
inline const std::string& Account::_internal_asset() const {
  return asset_.Get();
}
inline void Account::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.Account.asset)
}
inline void Account::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.Account.asset)
}
inline void Account::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.Account.asset)
}
inline std::string* Account::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_asset() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.Account.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.Account.asset)
}

// string type = 6 [json_name = "type"];
inline void Account::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Account::type() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.Account.type)
  return _internal_type();
}
inline void Account::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.Account.type)
}
inline std::string* Account::mutable_type() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.Account.type)
  return _internal_mutable_type();
}
inline const std::string& Account::_internal_type() const {
  return type_.Get();
}
inline void Account::_internal_set_type(const std::string& value) {

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_type(std::string&& value) {

  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.Account.type)
}
inline void Account::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.Account.type)
}
inline void Account::set_type(const char* value,
    size_t size) {

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.Account.type)
}
inline std::string* Account::_internal_mutable_type() {

  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_type() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.Account.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_type(std::string* type) {
  if (type != nullptr) {

  } else {

  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.Account.type)
}

// -------------------------------------------------------------------

// ListAccountsRequest

// string party = 1 [json_name = "party"];
inline void ListAccountsRequest::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& ListAccountsRequest::party() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListAccountsRequest.party)
  return _internal_party();
}
inline void ListAccountsRequest::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.ListAccountsRequest.party)
}
inline std::string* ListAccountsRequest::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListAccountsRequest.party)
  return _internal_mutable_party();
}
inline const std::string& ListAccountsRequest::_internal_party() const {
  return party_.Get();
}
inline void ListAccountsRequest::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListAccountsRequest::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.ListAccountsRequest.party)
}
inline void ListAccountsRequest::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.ListAccountsRequest.party)
}
inline void ListAccountsRequest::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.ListAccountsRequest.party)
}
inline std::string* ListAccountsRequest::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListAccountsRequest::release_party() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.ListAccountsRequest.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListAccountsRequest::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.ListAccountsRequest.party)
}

// string market = 2 [json_name = "market"];
inline void ListAccountsRequest::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& ListAccountsRequest::market() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListAccountsRequest.market)
  return _internal_market();
}
inline void ListAccountsRequest::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.ListAccountsRequest.market)
}
inline std::string* ListAccountsRequest::mutable_market() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListAccountsRequest.market)
  return _internal_mutable_market();
}
inline const std::string& ListAccountsRequest::_internal_market() const {
  return market_.Get();
}
inline void ListAccountsRequest::_internal_set_market(const std::string& value) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListAccountsRequest::set_market(std::string&& value) {

  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.ListAccountsRequest.market)
}
inline void ListAccountsRequest::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.ListAccountsRequest.market)
}
inline void ListAccountsRequest::set_market(const char* value,
    size_t size) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.ListAccountsRequest.market)
}
inline std::string* ListAccountsRequest::_internal_mutable_market() {

  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListAccountsRequest::release_market() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.ListAccountsRequest.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListAccountsRequest::set_allocated_market(std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.ListAccountsRequest.market)
}

// -------------------------------------------------------------------

// ListAccountsResponse

// repeated .vega.coreapi.v1.Account accounts = 1 [json_name = "accounts"];
inline int ListAccountsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int ListAccountsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void ListAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
inline ::vega::coreapi::v1::Account* ListAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::coreapi::v1::Account >*
ListAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:vega.coreapi.v1.ListAccountsResponse.accounts)
  return &accounts_;
}
inline const ::vega::coreapi::v1::Account& ListAccountsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::vega::coreapi::v1::Account& ListAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListAccountsResponse.accounts)
  return _internal_accounts(index);
}
inline ::vega::coreapi::v1::Account* ListAccountsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::vega::coreapi::v1::Account* ListAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:vega.coreapi.v1.ListAccountsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::coreapi::v1::Account >&
ListAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:vega.coreapi.v1.ListAccountsResponse.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// ListAssetsRequest

// string asset = 1 [json_name = "asset"];
inline void ListAssetsRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& ListAssetsRequest::asset() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListAssetsRequest.asset)
  return _internal_asset();
}
inline void ListAssetsRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.ListAssetsRequest.asset)
}
inline std::string* ListAssetsRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListAssetsRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& ListAssetsRequest::_internal_asset() const {
  return asset_.Get();
}
inline void ListAssetsRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListAssetsRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.ListAssetsRequest.asset)
}
inline void ListAssetsRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.ListAssetsRequest.asset)
}
inline void ListAssetsRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.ListAssetsRequest.asset)
}
inline std::string* ListAssetsRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListAssetsRequest::release_asset() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.ListAssetsRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListAssetsRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.ListAssetsRequest.asset)
}

// -------------------------------------------------------------------

// ListAssetsResponse

// repeated .vega.Asset assets = 1 [json_name = "assets"];
inline int ListAssetsResponse::_internal_assets_size() const {
  return assets_.size();
}
inline int ListAssetsResponse::assets_size() const {
  return _internal_assets_size();
}
inline ::vega::Asset* ListAssetsResponse::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListAssetsResponse.assets)
  return assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >*
ListAssetsResponse::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:vega.coreapi.v1.ListAssetsResponse.assets)
  return &assets_;
}
inline const ::vega::Asset& ListAssetsResponse::_internal_assets(int index) const {
  return assets_.Get(index);
}
inline const ::vega::Asset& ListAssetsResponse::assets(int index) const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListAssetsResponse.assets)
  return _internal_assets(index);
}
inline ::vega::Asset* ListAssetsResponse::_internal_add_assets() {
  return assets_.Add();
}
inline ::vega::Asset* ListAssetsResponse::add_assets() {
  // @@protoc_insertion_point(field_add:vega.coreapi.v1.ListAssetsResponse.assets)
  return _internal_add_assets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >&
ListAssetsResponse::assets() const {
  // @@protoc_insertion_point(field_list:vega.coreapi.v1.ListAssetsResponse.assets)
  return assets_;
}

// -------------------------------------------------------------------

// ListNetworkParametersRequest

// string network_parameter_key = 1 [json_name = "networkParameterKey"];
inline void ListNetworkParametersRequest::clear_network_parameter_key() {
  network_parameter_key_.ClearToEmpty();
}
inline const std::string& ListNetworkParametersRequest::network_parameter_key() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListNetworkParametersRequest.network_parameter_key)
  return _internal_network_parameter_key();
}
inline void ListNetworkParametersRequest::set_network_parameter_key(const std::string& value) {
  _internal_set_network_parameter_key(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.ListNetworkParametersRequest.network_parameter_key)
}
inline std::string* ListNetworkParametersRequest::mutable_network_parameter_key() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListNetworkParametersRequest.network_parameter_key)
  return _internal_mutable_network_parameter_key();
}
inline const std::string& ListNetworkParametersRequest::_internal_network_parameter_key() const {
  return network_parameter_key_.Get();
}
inline void ListNetworkParametersRequest::_internal_set_network_parameter_key(const std::string& value) {

  network_parameter_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListNetworkParametersRequest::set_network_parameter_key(std::string&& value) {

  network_parameter_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.ListNetworkParametersRequest.network_parameter_key)
}
inline void ListNetworkParametersRequest::set_network_parameter_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  network_parameter_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.ListNetworkParametersRequest.network_parameter_key)
}
inline void ListNetworkParametersRequest::set_network_parameter_key(const char* value,
    size_t size) {

  network_parameter_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.ListNetworkParametersRequest.network_parameter_key)
}
inline std::string* ListNetworkParametersRequest::_internal_mutable_network_parameter_key() {

  return network_parameter_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListNetworkParametersRequest::release_network_parameter_key() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.ListNetworkParametersRequest.network_parameter_key)
  return network_parameter_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListNetworkParametersRequest::set_allocated_network_parameter_key(std::string* network_parameter_key) {
  if (network_parameter_key != nullptr) {

  } else {

  }
  network_parameter_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_parameter_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.ListNetworkParametersRequest.network_parameter_key)
}

// -------------------------------------------------------------------

// ListNetworkParametersResponse

// repeated .vega.NetworkParameter network_parameters = 1 [json_name = "networkParameters"];
inline int ListNetworkParametersResponse::_internal_network_parameters_size() const {
  return network_parameters_.size();
}
inline int ListNetworkParametersResponse::network_parameters_size() const {
  return _internal_network_parameters_size();
}
inline ::vega::NetworkParameter* ListNetworkParametersResponse::mutable_network_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListNetworkParametersResponse.network_parameters)
  return network_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >*
ListNetworkParametersResponse::mutable_network_parameters() {
  // @@protoc_insertion_point(field_mutable_list:vega.coreapi.v1.ListNetworkParametersResponse.network_parameters)
  return &network_parameters_;
}
inline const ::vega::NetworkParameter& ListNetworkParametersResponse::_internal_network_parameters(int index) const {
  return network_parameters_.Get(index);
}
inline const ::vega::NetworkParameter& ListNetworkParametersResponse::network_parameters(int index) const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListNetworkParametersResponse.network_parameters)
  return _internal_network_parameters(index);
}
inline ::vega::NetworkParameter* ListNetworkParametersResponse::_internal_add_network_parameters() {
  return network_parameters_.Add();
}
inline ::vega::NetworkParameter* ListNetworkParametersResponse::add_network_parameters() {
  // @@protoc_insertion_point(field_add:vega.coreapi.v1.ListNetworkParametersResponse.network_parameters)
  return _internal_add_network_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >&
ListNetworkParametersResponse::network_parameters() const {
  // @@protoc_insertion_point(field_list:vega.coreapi.v1.ListNetworkParametersResponse.network_parameters)
  return network_parameters_;
}

// -------------------------------------------------------------------

// ListPartiesRequest

// -------------------------------------------------------------------

// ListPartiesResponse

// repeated .vega.Party parties = 1 [json_name = "parties"];
inline int ListPartiesResponse::_internal_parties_size() const {
  return parties_.size();
}
inline int ListPartiesResponse::parties_size() const {
  return _internal_parties_size();
}
inline ::vega::Party* ListPartiesResponse::mutable_parties(int index) {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListPartiesResponse.parties)
  return parties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >*
ListPartiesResponse::mutable_parties() {
  // @@protoc_insertion_point(field_mutable_list:vega.coreapi.v1.ListPartiesResponse.parties)
  return &parties_;
}
inline const ::vega::Party& ListPartiesResponse::_internal_parties(int index) const {
  return parties_.Get(index);
}
inline const ::vega::Party& ListPartiesResponse::parties(int index) const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListPartiesResponse.parties)
  return _internal_parties(index);
}
inline ::vega::Party* ListPartiesResponse::_internal_add_parties() {
  return parties_.Add();
}
inline ::vega::Party* ListPartiesResponse::add_parties() {
  // @@protoc_insertion_point(field_add:vega.coreapi.v1.ListPartiesResponse.parties)
  return _internal_add_parties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >&
ListPartiesResponse::parties() const {
  // @@protoc_insertion_point(field_list:vega.coreapi.v1.ListPartiesResponse.parties)
  return parties_;
}

// -------------------------------------------------------------------

// ListValidatorsRequest

// -------------------------------------------------------------------

// ListValidatorsResponse

// repeated .vega.events.v1.ValidatorUpdate validators = 1 [json_name = "validators"];
inline int ListValidatorsResponse::_internal_validators_size() const {
  return validators_.size();
}
inline int ListValidatorsResponse::validators_size() const {
  return _internal_validators_size();
}
inline ::vega::events::v1::ValidatorUpdate* ListValidatorsResponse::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListValidatorsResponse.validators)
  return validators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::ValidatorUpdate >*
ListValidatorsResponse::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:vega.coreapi.v1.ListValidatorsResponse.validators)
  return &validators_;
}
inline const ::vega::events::v1::ValidatorUpdate& ListValidatorsResponse::_internal_validators(int index) const {
  return validators_.Get(index);
}
inline const ::vega::events::v1::ValidatorUpdate& ListValidatorsResponse::validators(int index) const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListValidatorsResponse.validators)
  return _internal_validators(index);
}
inline ::vega::events::v1::ValidatorUpdate* ListValidatorsResponse::_internal_add_validators() {
  return validators_.Add();
}
inline ::vega::events::v1::ValidatorUpdate* ListValidatorsResponse::add_validators() {
  // @@protoc_insertion_point(field_add:vega.coreapi.v1.ListValidatorsResponse.validators)
  return _internal_add_validators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::ValidatorUpdate >&
ListValidatorsResponse::validators() const {
  // @@protoc_insertion_point(field_list:vega.coreapi.v1.ListValidatorsResponse.validators)
  return validators_;
}

// -------------------------------------------------------------------

// ListMarketsRequest

// string market = 1 [json_name = "market"];
inline void ListMarketsRequest::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& ListMarketsRequest::market() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListMarketsRequest.market)
  return _internal_market();
}
inline void ListMarketsRequest::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.ListMarketsRequest.market)
}
inline std::string* ListMarketsRequest::mutable_market() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListMarketsRequest.market)
  return _internal_mutable_market();
}
inline const std::string& ListMarketsRequest::_internal_market() const {
  return market_.Get();
}
inline void ListMarketsRequest::_internal_set_market(const std::string& value) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMarketsRequest::set_market(std::string&& value) {

  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.ListMarketsRequest.market)
}
inline void ListMarketsRequest::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.ListMarketsRequest.market)
}
inline void ListMarketsRequest::set_market(const char* value,
    size_t size) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.ListMarketsRequest.market)
}
inline std::string* ListMarketsRequest::_internal_mutable_market() {

  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMarketsRequest::release_market() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.ListMarketsRequest.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMarketsRequest::set_allocated_market(std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.ListMarketsRequest.market)
}

// -------------------------------------------------------------------

// ListMarketsResponse

// repeated .vega.Market markets = 1 [json_name = "markets"];
inline int ListMarketsResponse::_internal_markets_size() const {
  return markets_.size();
}
inline int ListMarketsResponse::markets_size() const {
  return _internal_markets_size();
}
inline ::vega::Market* ListMarketsResponse::mutable_markets(int index) {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListMarketsResponse.markets)
  return markets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >*
ListMarketsResponse::mutable_markets() {
  // @@protoc_insertion_point(field_mutable_list:vega.coreapi.v1.ListMarketsResponse.markets)
  return &markets_;
}
inline const ::vega::Market& ListMarketsResponse::_internal_markets(int index) const {
  return markets_.Get(index);
}
inline const ::vega::Market& ListMarketsResponse::markets(int index) const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListMarketsResponse.markets)
  return _internal_markets(index);
}
inline ::vega::Market* ListMarketsResponse::_internal_add_markets() {
  return markets_.Add();
}
inline ::vega::Market* ListMarketsResponse::add_markets() {
  // @@protoc_insertion_point(field_add:vega.coreapi.v1.ListMarketsResponse.markets)
  return _internal_add_markets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >&
ListMarketsResponse::markets() const {
  // @@protoc_insertion_point(field_list:vega.coreapi.v1.ListMarketsResponse.markets)
  return markets_;
}

// -------------------------------------------------------------------

// ListProposalsRequest

// string proposal = 1 [json_name = "proposal"];
inline void ListProposalsRequest::clear_proposal() {
  proposal_.ClearToEmpty();
}
inline const std::string& ListProposalsRequest::proposal() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListProposalsRequest.proposal)
  return _internal_proposal();
}
inline void ListProposalsRequest::set_proposal(const std::string& value) {
  _internal_set_proposal(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.ListProposalsRequest.proposal)
}
inline std::string* ListProposalsRequest::mutable_proposal() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListProposalsRequest.proposal)
  return _internal_mutable_proposal();
}
inline const std::string& ListProposalsRequest::_internal_proposal() const {
  return proposal_.Get();
}
inline void ListProposalsRequest::_internal_set_proposal(const std::string& value) {

  proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListProposalsRequest::set_proposal(std::string&& value) {

  proposal_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.ListProposalsRequest.proposal)
}
inline void ListProposalsRequest::set_proposal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.ListProposalsRequest.proposal)
}
inline void ListProposalsRequest::set_proposal(const char* value,
    size_t size) {

  proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.ListProposalsRequest.proposal)
}
inline std::string* ListProposalsRequest::_internal_mutable_proposal() {

  return proposal_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListProposalsRequest::release_proposal() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.ListProposalsRequest.proposal)
  return proposal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListProposalsRequest::set_allocated_proposal(std::string* proposal) {
  if (proposal != nullptr) {

  } else {

  }
  proposal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.ListProposalsRequest.proposal)
}

// string proposer = 2 [json_name = "proposer"];
inline void ListProposalsRequest::clear_proposer() {
  proposer_.ClearToEmpty();
}
inline const std::string& ListProposalsRequest::proposer() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListProposalsRequest.proposer)
  return _internal_proposer();
}
inline void ListProposalsRequest::set_proposer(const std::string& value) {
  _internal_set_proposer(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.ListProposalsRequest.proposer)
}
inline std::string* ListProposalsRequest::mutable_proposer() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListProposalsRequest.proposer)
  return _internal_mutable_proposer();
}
inline const std::string& ListProposalsRequest::_internal_proposer() const {
  return proposer_.Get();
}
inline void ListProposalsRequest::_internal_set_proposer(const std::string& value) {

  proposer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListProposalsRequest::set_proposer(std::string&& value) {

  proposer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.ListProposalsRequest.proposer)
}
inline void ListProposalsRequest::set_proposer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  proposer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.ListProposalsRequest.proposer)
}
inline void ListProposalsRequest::set_proposer(const char* value,
    size_t size) {

  proposer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.ListProposalsRequest.proposer)
}
inline std::string* ListProposalsRequest::_internal_mutable_proposer() {

  return proposer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListProposalsRequest::release_proposer() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.ListProposalsRequest.proposer)
  return proposer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListProposalsRequest::set_allocated_proposer(std::string* proposer) {
  if (proposer != nullptr) {

  } else {

  }
  proposer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.ListProposalsRequest.proposer)
}

// -------------------------------------------------------------------

// ListProposalsResponse

// repeated .vega.Proposal proposals = 1 [json_name = "proposals"];
inline int ListProposalsResponse::_internal_proposals_size() const {
  return proposals_.size();
}
inline int ListProposalsResponse::proposals_size() const {
  return _internal_proposals_size();
}
inline ::vega::Proposal* ListProposalsResponse::mutable_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListProposalsResponse.proposals)
  return proposals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Proposal >*
ListProposalsResponse::mutable_proposals() {
  // @@protoc_insertion_point(field_mutable_list:vega.coreapi.v1.ListProposalsResponse.proposals)
  return &proposals_;
}
inline const ::vega::Proposal& ListProposalsResponse::_internal_proposals(int index) const {
  return proposals_.Get(index);
}
inline const ::vega::Proposal& ListProposalsResponse::proposals(int index) const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListProposalsResponse.proposals)
  return _internal_proposals(index);
}
inline ::vega::Proposal* ListProposalsResponse::_internal_add_proposals() {
  return proposals_.Add();
}
inline ::vega::Proposal* ListProposalsResponse::add_proposals() {
  // @@protoc_insertion_point(field_add:vega.coreapi.v1.ListProposalsResponse.proposals)
  return _internal_add_proposals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Proposal >&
ListProposalsResponse::proposals() const {
  // @@protoc_insertion_point(field_list:vega.coreapi.v1.ListProposalsResponse.proposals)
  return proposals_;
}

// -------------------------------------------------------------------

// ListMarketsDataRequest

// string market = 1 [json_name = "market"];
inline void ListMarketsDataRequest::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& ListMarketsDataRequest::market() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListMarketsDataRequest.market)
  return _internal_market();
}
inline void ListMarketsDataRequest::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.ListMarketsDataRequest.market)
}
inline std::string* ListMarketsDataRequest::mutable_market() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListMarketsDataRequest.market)
  return _internal_mutable_market();
}
inline const std::string& ListMarketsDataRequest::_internal_market() const {
  return market_.Get();
}
inline void ListMarketsDataRequest::_internal_set_market(const std::string& value) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMarketsDataRequest::set_market(std::string&& value) {

  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.ListMarketsDataRequest.market)
}
inline void ListMarketsDataRequest::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.ListMarketsDataRequest.market)
}
inline void ListMarketsDataRequest::set_market(const char* value,
    size_t size) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.ListMarketsDataRequest.market)
}
inline std::string* ListMarketsDataRequest::_internal_mutable_market() {

  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMarketsDataRequest::release_market() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.ListMarketsDataRequest.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMarketsDataRequest::set_allocated_market(std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.ListMarketsDataRequest.market)
}

// -------------------------------------------------------------------

// ListMarketsDataResponse

// repeated .vega.MarketData markets_data = 1 [json_name = "marketsData"];
inline int ListMarketsDataResponse::_internal_markets_data_size() const {
  return markets_data_.size();
}
inline int ListMarketsDataResponse::markets_data_size() const {
  return _internal_markets_data_size();
}
inline ::vega::MarketData* ListMarketsDataResponse::mutable_markets_data(int index) {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListMarketsDataResponse.markets_data)
  return markets_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >*
ListMarketsDataResponse::mutable_markets_data() {
  // @@protoc_insertion_point(field_mutable_list:vega.coreapi.v1.ListMarketsDataResponse.markets_data)
  return &markets_data_;
}
inline const ::vega::MarketData& ListMarketsDataResponse::_internal_markets_data(int index) const {
  return markets_data_.Get(index);
}
inline const ::vega::MarketData& ListMarketsDataResponse::markets_data(int index) const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListMarketsDataResponse.markets_data)
  return _internal_markets_data(index);
}
inline ::vega::MarketData* ListMarketsDataResponse::_internal_add_markets_data() {
  return markets_data_.Add();
}
inline ::vega::MarketData* ListMarketsDataResponse::add_markets_data() {
  // @@protoc_insertion_point(field_add:vega.coreapi.v1.ListMarketsDataResponse.markets_data)
  return _internal_add_markets_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >&
ListMarketsDataResponse::markets_data() const {
  // @@protoc_insertion_point(field_list:vega.coreapi.v1.ListMarketsDataResponse.markets_data)
  return markets_data_;
}

// -------------------------------------------------------------------

// ListVotesRequest

// string proposal = 1 [json_name = "proposal"];
inline void ListVotesRequest::clear_proposal() {
  proposal_.ClearToEmpty();
}
inline const std::string& ListVotesRequest::proposal() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListVotesRequest.proposal)
  return _internal_proposal();
}
inline void ListVotesRequest::set_proposal(const std::string& value) {
  _internal_set_proposal(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.ListVotesRequest.proposal)
}
inline std::string* ListVotesRequest::mutable_proposal() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListVotesRequest.proposal)
  return _internal_mutable_proposal();
}
inline const std::string& ListVotesRequest::_internal_proposal() const {
  return proposal_.Get();
}
inline void ListVotesRequest::_internal_set_proposal(const std::string& value) {

  proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListVotesRequest::set_proposal(std::string&& value) {

  proposal_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.ListVotesRequest.proposal)
}
inline void ListVotesRequest::set_proposal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.ListVotesRequest.proposal)
}
inline void ListVotesRequest::set_proposal(const char* value,
    size_t size) {

  proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.ListVotesRequest.proposal)
}
inline std::string* ListVotesRequest::_internal_mutable_proposal() {

  return proposal_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListVotesRequest::release_proposal() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.ListVotesRequest.proposal)
  return proposal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListVotesRequest::set_allocated_proposal(std::string* proposal) {
  if (proposal != nullptr) {

  } else {

  }
  proposal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.ListVotesRequest.proposal)
}

// string party = 2 [json_name = "party"];
inline void ListVotesRequest::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& ListVotesRequest::party() const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListVotesRequest.party)
  return _internal_party();
}
inline void ListVotesRequest::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:vega.coreapi.v1.ListVotesRequest.party)
}
inline std::string* ListVotesRequest::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListVotesRequest.party)
  return _internal_mutable_party();
}
inline const std::string& ListVotesRequest::_internal_party() const {
  return party_.Get();
}
inline void ListVotesRequest::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListVotesRequest::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.coreapi.v1.ListVotesRequest.party)
}
inline void ListVotesRequest::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.coreapi.v1.ListVotesRequest.party)
}
inline void ListVotesRequest::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.coreapi.v1.ListVotesRequest.party)
}
inline std::string* ListVotesRequest::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListVotesRequest::release_party() {
  // @@protoc_insertion_point(field_release:vega.coreapi.v1.ListVotesRequest.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListVotesRequest::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.coreapi.v1.ListVotesRequest.party)
}

// -------------------------------------------------------------------

// ListVotesResponse

// repeated .vega.Vote votes = 1 [json_name = "votes"];
inline int ListVotesResponse::_internal_votes_size() const {
  return votes_.size();
}
inline int ListVotesResponse::votes_size() const {
  return _internal_votes_size();
}
inline ::vega::Vote* ListVotesResponse::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:vega.coreapi.v1.ListVotesResponse.votes)
  return votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >*
ListVotesResponse::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:vega.coreapi.v1.ListVotesResponse.votes)
  return &votes_;
}
inline const ::vega::Vote& ListVotesResponse::_internal_votes(int index) const {
  return votes_.Get(index);
}
inline const ::vega::Vote& ListVotesResponse::votes(int index) const {
  // @@protoc_insertion_point(field_get:vega.coreapi.v1.ListVotesResponse.votes)
  return _internal_votes(index);
}
inline ::vega::Vote* ListVotesResponse::_internal_add_votes() {
  return votes_.Add();
}
inline ::vega::Vote* ListVotesResponse::add_votes() {
  // @@protoc_insertion_point(field_add:vega.coreapi.v1.ListVotesResponse.votes)
  return _internal_add_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >&
ListVotesResponse::votes() const {
  // @@protoc_insertion_point(field_list:vega.coreapi.v1.ListVotesResponse.votes)
  return votes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace coreapi
}  // namespace vega

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_coreapi_2fv1_2fcoreapi_2eproto
