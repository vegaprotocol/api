// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coreapi/v1/coreapi.proto

#include "coreapi/v1/coreapi.pb.h"
#include "coreapi/v1/coreapi.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vega {
namespace coreapi {
namespace v1 {

static const char* CoreApiService_method_names[] = {
  "/vega.coreapi.v1.CoreApiService/ListAccounts",
  "/vega.coreapi.v1.CoreApiService/ListAssets",
  "/vega.coreapi.v1.CoreApiService/ListNetworkParameters",
  "/vega.coreapi.v1.CoreApiService/ListParties",
  "/vega.coreapi.v1.CoreApiService/ListValidators",
};

std::unique_ptr< CoreApiService::Stub> CoreApiService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CoreApiService::Stub> stub(new CoreApiService::Stub(channel));
  return stub;
}

CoreApiService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListAccounts_(CoreApiService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAssets_(CoreApiService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNetworkParameters_(CoreApiService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListParties_(CoreApiService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListValidators_(CoreApiService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CoreApiService::Stub::ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::vega::coreapi::v1::ListAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vega::coreapi::v1::ListAccountsRequest, ::vega::coreapi::v1::ListAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListAccounts_, context, request, response);
}

void CoreApiService::Stub::experimental_async::ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vega::coreapi::v1::ListAccountsRequest, ::vega::coreapi::v1::ListAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAccounts_, context, request, response, std::move(f));
}

void CoreApiService::Stub::experimental_async::ListAccounts(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAccountsResponse>* CoreApiService::Stub::PrepareAsyncListAccountsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vega::coreapi::v1::ListAccountsResponse, ::vega::coreapi::v1::ListAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAccountsResponse>* CoreApiService::Stub::AsyncListAccountsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CoreApiService::Stub::ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::vega::coreapi::v1::ListAssetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vega::coreapi::v1::ListAssetsRequest, ::vega::coreapi::v1::ListAssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListAssets_, context, request, response);
}

void CoreApiService::Stub::experimental_async::ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vega::coreapi::v1::ListAssetsRequest, ::vega::coreapi::v1::ListAssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAssets_, context, request, response, std::move(f));
}

void CoreApiService::Stub::experimental_async::ListAssets(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAssets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAssetsResponse>* CoreApiService::Stub::PrepareAsyncListAssetsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vega::coreapi::v1::ListAssetsResponse, ::vega::coreapi::v1::ListAssetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListAssets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListAssetsResponse>* CoreApiService::Stub::AsyncListAssetsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListAssetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListAssetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CoreApiService::Stub::ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::vega::coreapi::v1::ListNetworkParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vega::coreapi::v1::ListNetworkParametersRequest, ::vega::coreapi::v1::ListNetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNetworkParameters_, context, request, response);
}

void CoreApiService::Stub::experimental_async::ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vega::coreapi::v1::ListNetworkParametersRequest, ::vega::coreapi::v1::ListNetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNetworkParameters_, context, request, response, std::move(f));
}

void CoreApiService::Stub::experimental_async::ListNetworkParameters(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNetworkParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListNetworkParametersResponse>* CoreApiService::Stub::PrepareAsyncListNetworkParametersRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vega::coreapi::v1::ListNetworkParametersResponse, ::vega::coreapi::v1::ListNetworkParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNetworkParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListNetworkParametersResponse>* CoreApiService::Stub::AsyncListNetworkParametersRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNetworkParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CoreApiService::Stub::ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::vega::coreapi::v1::ListPartiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vega::coreapi::v1::ListPartiesRequest, ::vega::coreapi::v1::ListPartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListParties_, context, request, response);
}

void CoreApiService::Stub::experimental_async::ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vega::coreapi::v1::ListPartiesRequest, ::vega::coreapi::v1::ListPartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListParties_, context, request, response, std::move(f));
}

void CoreApiService::Stub::experimental_async::ListParties(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListParties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListPartiesResponse>* CoreApiService::Stub::PrepareAsyncListPartiesRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vega::coreapi::v1::ListPartiesResponse, ::vega::coreapi::v1::ListPartiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListParties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListPartiesResponse>* CoreApiService::Stub::AsyncListPartiesRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListPartiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListPartiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CoreApiService::Stub::ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::vega::coreapi::v1::ListValidatorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vega::coreapi::v1::ListValidatorsRequest, ::vega::coreapi::v1::ListValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListValidators_, context, request, response);
}

void CoreApiService::Stub::experimental_async::ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vega::coreapi::v1::ListValidatorsRequest, ::vega::coreapi::v1::ListValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListValidators_, context, request, response, std::move(f));
}

void CoreApiService::Stub::experimental_async::ListValidators(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListValidators_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListValidatorsResponse>* CoreApiService::Stub::PrepareAsyncListValidatorsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vega::coreapi::v1::ListValidatorsResponse, ::vega::coreapi::v1::ListValidatorsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListValidators_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vega::coreapi::v1::ListValidatorsResponse>* CoreApiService::Stub::AsyncListValidatorsRaw(::grpc::ClientContext* context, const ::vega::coreapi::v1::ListValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListValidatorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

CoreApiService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoreApiService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoreApiService::Service, ::vega::coreapi::v1::ListAccountsRequest, ::vega::coreapi::v1::ListAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CoreApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vega::coreapi::v1::ListAccountsRequest* req,
             ::vega::coreapi::v1::ListAccountsResponse* resp) {
               return service->ListAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoreApiService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoreApiService::Service, ::vega::coreapi::v1::ListAssetsRequest, ::vega::coreapi::v1::ListAssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CoreApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vega::coreapi::v1::ListAssetsRequest* req,
             ::vega::coreapi::v1::ListAssetsResponse* resp) {
               return service->ListAssets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoreApiService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoreApiService::Service, ::vega::coreapi::v1::ListNetworkParametersRequest, ::vega::coreapi::v1::ListNetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CoreApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vega::coreapi::v1::ListNetworkParametersRequest* req,
             ::vega::coreapi::v1::ListNetworkParametersResponse* resp) {
               return service->ListNetworkParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoreApiService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoreApiService::Service, ::vega::coreapi::v1::ListPartiesRequest, ::vega::coreapi::v1::ListPartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CoreApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vega::coreapi::v1::ListPartiesRequest* req,
             ::vega::coreapi::v1::ListPartiesResponse* resp) {
               return service->ListParties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoreApiService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoreApiService::Service, ::vega::coreapi::v1::ListValidatorsRequest, ::vega::coreapi::v1::ListValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CoreApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vega::coreapi::v1::ListValidatorsRequest* req,
             ::vega::coreapi::v1::ListValidatorsResponse* resp) {
               return service->ListValidators(ctx, req, resp);
             }, this)));
}

CoreApiService::Service::~Service() {
}

::grpc::Status CoreApiService::Service::ListAccounts(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListAccountsRequest* request, ::vega::coreapi::v1::ListAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoreApiService::Service::ListAssets(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListAssetsRequest* request, ::vega::coreapi::v1::ListAssetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoreApiService::Service::ListNetworkParameters(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListNetworkParametersRequest* request, ::vega::coreapi::v1::ListNetworkParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoreApiService::Service::ListParties(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListPartiesRequest* request, ::vega::coreapi::v1::ListPartiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoreApiService::Service::ListValidators(::grpc::ServerContext* context, const ::vega::coreapi::v1::ListValidatorsRequest* request, ::vega::coreapi::v1::ListValidatorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vega
}  // namespace coreapi
}  // namespace v1

