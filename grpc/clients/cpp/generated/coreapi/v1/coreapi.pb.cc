// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coreapi/v1/coreapi.proto

#include "coreapi/v1/coreapi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_assets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Asset_assets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Market_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MarketData_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParameter_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Party_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proposal_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vote_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_coreapi_2fv1_2fcoreapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_coreapi_2fv1_2fcoreapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_coreapi_2fv1_2fcoreapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyStake_coreapi_2fv1_2fcoreapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StakeLinking_events_2fv1_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorUpdate_events_2fv1_2fevents_2eproto;
namespace vega {
namespace coreapi {
namespace v1 {
class AccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account> _instance;
} _Account_default_instance_;
class ListAccountsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAccountsRequest> _instance;
} _ListAccountsRequest_default_instance_;
class ListAccountsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAccountsResponse> _instance;
} _ListAccountsResponse_default_instance_;
class ListAssetsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAssetsRequest> _instance;
} _ListAssetsRequest_default_instance_;
class ListAssetsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAssetsResponse> _instance;
} _ListAssetsResponse_default_instance_;
class ListNetworkParametersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListNetworkParametersRequest> _instance;
} _ListNetworkParametersRequest_default_instance_;
class ListNetworkParametersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListNetworkParametersResponse> _instance;
} _ListNetworkParametersResponse_default_instance_;
class ListPartiesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPartiesRequest> _instance;
} _ListPartiesRequest_default_instance_;
class ListPartiesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPartiesResponse> _instance;
} _ListPartiesResponse_default_instance_;
class ListValidatorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListValidatorsRequest> _instance;
} _ListValidatorsRequest_default_instance_;
class ListValidatorsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListValidatorsResponse> _instance;
} _ListValidatorsResponse_default_instance_;
class ListMarketsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMarketsRequest> _instance;
} _ListMarketsRequest_default_instance_;
class ListMarketsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMarketsResponse> _instance;
} _ListMarketsResponse_default_instance_;
class ListProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListProposalsRequest> _instance;
} _ListProposalsRequest_default_instance_;
class ListProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListProposalsResponse> _instance;
} _ListProposalsResponse_default_instance_;
class ListMarketsDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMarketsDataRequest> _instance;
} _ListMarketsDataRequest_default_instance_;
class ListMarketsDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMarketsDataResponse> _instance;
} _ListMarketsDataResponse_default_instance_;
class ListVotesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVotesRequest> _instance;
} _ListVotesRequest_default_instance_;
class ListVotesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVotesResponse> _instance;
} _ListVotesResponse_default_instance_;
class PartyStakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyStake> _instance;
} _PartyStake_default_instance_;
class ListPartiesStakeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPartiesStakeRequest> _instance;
} _ListPartiesStakeRequest_default_instance_;
class ListPartiesStakeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPartiesStakeResponse> _instance;
} _ListPartiesStakeResponse_default_instance_;
}  // namespace v1
}  // namespace coreapi
}  // namespace vega
static void InitDefaultsscc_info_Account_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_Account_default_instance_;
    new (ptr) ::vega::coreapi::v1::Account();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Account_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListAccountsRequest_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListAccountsRequest_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListAccountsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAccountsRequest_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAccountsRequest_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListAccountsResponse_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListAccountsResponse_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListAccountsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAccountsResponse_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAccountsResponse_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_Account_coreapi_2fv1_2fcoreapi_2eproto.base,}};

static void InitDefaultsscc_info_ListAssetsRequest_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListAssetsRequest_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListAssetsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAssetsRequest_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAssetsRequest_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListAssetsResponse_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListAssetsResponse_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListAssetsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAssetsResponse_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAssetsResponse_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_Asset_assets_2eproto.base,}};

static void InitDefaultsscc_info_ListMarketsDataRequest_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListMarketsDataRequest_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListMarketsDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListMarketsDataRequest_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListMarketsDataRequest_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListMarketsDataResponse_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListMarketsDataResponse_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListMarketsDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListMarketsDataResponse_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListMarketsDataResponse_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_MarketData_vega_2eproto.base,}};

static void InitDefaultsscc_info_ListMarketsRequest_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListMarketsRequest_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListMarketsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListMarketsRequest_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListMarketsRequest_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListMarketsResponse_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListMarketsResponse_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListMarketsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListMarketsResponse_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListMarketsResponse_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_Market_markets_2eproto.base,}};

static void InitDefaultsscc_info_ListNetworkParametersRequest_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListNetworkParametersRequest_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListNetworkParametersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListNetworkParametersRequest_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListNetworkParametersRequest_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListNetworkParametersResponse_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListNetworkParametersResponse_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListNetworkParametersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListNetworkParametersResponse_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListNetworkParametersResponse_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_NetworkParameter_vega_2eproto.base,}};

static void InitDefaultsscc_info_ListPartiesRequest_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListPartiesRequest_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListPartiesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPartiesRequest_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPartiesRequest_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListPartiesResponse_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListPartiesResponse_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListPartiesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPartiesResponse_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPartiesResponse_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_Party_vega_2eproto.base,}};

static void InitDefaultsscc_info_ListPartiesStakeRequest_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListPartiesStakeRequest_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListPartiesStakeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPartiesStakeRequest_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPartiesStakeRequest_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListPartiesStakeResponse_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListPartiesStakeResponse_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListPartiesStakeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPartiesStakeResponse_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPartiesStakeResponse_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_PartyStake_coreapi_2fv1_2fcoreapi_2eproto.base,}};

static void InitDefaultsscc_info_ListProposalsRequest_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListProposalsRequest_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListProposalsRequest_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListProposalsRequest_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListProposalsResponse_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListProposalsResponse_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListProposalsResponse_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListProposalsResponse_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_Proposal_governance_2eproto.base,}};

static void InitDefaultsscc_info_ListValidatorsRequest_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListValidatorsRequest_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListValidatorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValidatorsRequest_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListValidatorsRequest_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListValidatorsResponse_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListValidatorsResponse_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListValidatorsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListValidatorsResponse_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListValidatorsResponse_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_ValidatorUpdate_events_2fv1_2fevents_2eproto.base,}};

static void InitDefaultsscc_info_ListVotesRequest_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListVotesRequest_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListVotesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListVotesRequest_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListVotesRequest_coreapi_2fv1_2fcoreapi_2eproto}, {}};

static void InitDefaultsscc_info_ListVotesResponse_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_ListVotesResponse_default_instance_;
    new (ptr) ::vega::coreapi::v1::ListVotesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListVotesResponse_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListVotesResponse_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_Vote_governance_2eproto.base,}};

static void InitDefaultsscc_info_PartyStake_coreapi_2fv1_2fcoreapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::coreapi::v1::_PartyStake_default_instance_;
    new (ptr) ::vega::coreapi::v1::PartyStake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyStake_coreapi_2fv1_2fcoreapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyStake_coreapi_2fv1_2fcoreapi_2eproto}, {
      &scc_info_StakeLinking_events_2fv1_2fevents_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_coreapi_2fv1_2fcoreapi_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_coreapi_2fv1_2fcoreapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_coreapi_2fv1_2fcoreapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_coreapi_2fv1_2fcoreapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::Account, party_),
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::Account, market_),
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::Account, balance_),
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::Account, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::Account, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListAccountsRequest, party_),
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListAccountsRequest, market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListAccountsResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListAssetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListAssetsRequest, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListAssetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListAssetsResponse, assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListNetworkParametersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListNetworkParametersRequest, network_parameter_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListNetworkParametersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListNetworkParametersResponse, network_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListPartiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListPartiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListPartiesResponse, parties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListValidatorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListValidatorsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListValidatorsResponse, validators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListMarketsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListMarketsRequest, market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListMarketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListMarketsResponse, markets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListProposalsRequest, proposal_),
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListProposalsRequest, proposer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListProposalsResponse, proposals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListMarketsDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListMarketsDataRequest, market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListMarketsDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListMarketsDataResponse, markets_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListVotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListVotesRequest, proposal_),
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListVotesRequest, party_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListVotesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListVotesResponse, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::PartyStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::PartyStake, party_),
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::PartyStake, current_stake_available_),
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::PartyStake, stake_linkings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListPartiesStakeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListPartiesStakeRequest, party_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListPartiesStakeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::coreapi::v1::ListPartiesStakeResponse, parties_stake_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::coreapi::v1::Account)},
  { 10, -1, sizeof(::vega::coreapi::v1::ListAccountsRequest)},
  { 17, -1, sizeof(::vega::coreapi::v1::ListAccountsResponse)},
  { 23, -1, sizeof(::vega::coreapi::v1::ListAssetsRequest)},
  { 29, -1, sizeof(::vega::coreapi::v1::ListAssetsResponse)},
  { 35, -1, sizeof(::vega::coreapi::v1::ListNetworkParametersRequest)},
  { 41, -1, sizeof(::vega::coreapi::v1::ListNetworkParametersResponse)},
  { 47, -1, sizeof(::vega::coreapi::v1::ListPartiesRequest)},
  { 52, -1, sizeof(::vega::coreapi::v1::ListPartiesResponse)},
  { 58, -1, sizeof(::vega::coreapi::v1::ListValidatorsRequest)},
  { 63, -1, sizeof(::vega::coreapi::v1::ListValidatorsResponse)},
  { 69, -1, sizeof(::vega::coreapi::v1::ListMarketsRequest)},
  { 75, -1, sizeof(::vega::coreapi::v1::ListMarketsResponse)},
  { 81, -1, sizeof(::vega::coreapi::v1::ListProposalsRequest)},
  { 88, -1, sizeof(::vega::coreapi::v1::ListProposalsResponse)},
  { 94, -1, sizeof(::vega::coreapi::v1::ListMarketsDataRequest)},
  { 100, -1, sizeof(::vega::coreapi::v1::ListMarketsDataResponse)},
  { 106, -1, sizeof(::vega::coreapi::v1::ListVotesRequest)},
  { 113, -1, sizeof(::vega::coreapi::v1::ListVotesResponse)},
  { 119, -1, sizeof(::vega::coreapi::v1::PartyStake)},
  { 127, -1, sizeof(::vega::coreapi::v1::ListPartiesStakeRequest)},
  { 133, -1, sizeof(::vega::coreapi::v1::ListPartiesStakeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListAccountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListAccountsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListAssetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListAssetsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListNetworkParametersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListNetworkParametersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListPartiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListPartiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListValidatorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListValidatorsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListMarketsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListMarketsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListMarketsDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListMarketsDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListVotesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListVotesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_PartyStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListPartiesStakeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::coreapi::v1::_ListPartiesStakeResponse_default_instance_),
};

const char descriptor_table_protodef_coreapi_2fv1_2fcoreapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030coreapi/v1/coreapi.proto\022\017vega.coreapi"
  ".v1\032\014assets.proto\032\020governance.proto\032\rmar"
  "kets.proto\032\nvega.proto\032\026events/v1/events"
  ".proto\"{\n\007Account\022\024\n\005party\030\001 \001(\tR\005party\022"
  "\026\n\006market\030\002 \001(\tR\006market\022\030\n\007balance\030\003 \001(\t"
  "R\007balance\022\024\n\005asset\030\005 \001(\tR\005asset\022\022\n\004type\030"
  "\006 \001(\tR\004type\"C\n\023ListAccountsRequest\022\024\n\005pa"
  "rty\030\001 \001(\tR\005party\022\026\n\006market\030\002 \001(\tR\006market"
  "\"L\n\024ListAccountsResponse\0224\n\010accounts\030\001 \003"
  "(\0132\030.vega.coreapi.v1.AccountR\010accounts\")"
  "\n\021ListAssetsRequest\022\024\n\005asset\030\001 \001(\tR\005asse"
  "t\"9\n\022ListAssetsResponse\022#\n\006assets\030\001 \003(\0132"
  "\013.vega.AssetR\006assets\"R\n\034ListNetworkParam"
  "etersRequest\0222\n\025network_parameter_key\030\001 "
  "\001(\tR\023networkParameterKey\"f\n\035ListNetworkP"
  "arametersResponse\022E\n\022network_parameters\030"
  "\001 \003(\0132\026.vega.NetworkParameterR\021networkPa"
  "rameters\"\024\n\022ListPartiesRequest\"<\n\023ListPa"
  "rtiesResponse\022%\n\007parties\030\001 \003(\0132\013.vega.Pa"
  "rtyR\007parties\"\027\n\025ListValidatorsRequest\"Y\n"
  "\026ListValidatorsResponse\022\?\n\nvalidators\030\001 "
  "\003(\0132\037.vega.events.v1.ValidatorUpdateR\nva"
  "lidators\",\n\022ListMarketsRequest\022\026\n\006market"
  "\030\001 \001(\tR\006market\"=\n\023ListMarketsResponse\022&\n"
  "\007markets\030\001 \003(\0132\014.vega.MarketR\007markets\"N\n"
  "\024ListProposalsRequest\022\032\n\010proposal\030\001 \001(\tR"
  "\010proposal\022\032\n\010proposer\030\002 \001(\tR\010proposer\"E\n"
  "\025ListProposalsResponse\022,\n\tproposals\030\001 \003("
  "\0132\016.vega.ProposalR\tproposals\"0\n\026ListMark"
  "etsDataRequest\022\026\n\006market\030\001 \001(\tR\006market\"N"
  "\n\027ListMarketsDataResponse\0223\n\014markets_dat"
  "a\030\001 \003(\0132\020.vega.MarketDataR\013marketsData\"D"
  "\n\020ListVotesRequest\022\032\n\010proposal\030\001 \001(\tR\010pr"
  "oposal\022\024\n\005party\030\002 \001(\tR\005party\"5\n\021ListVote"
  "sResponse\022 \n\005votes\030\001 \003(\0132\n.vega.VoteR\005vo"
  "tes\"\237\001\n\nPartyStake\022\024\n\005party\030\001 \001(\tR\005party"
  "\0226\n\027current_stake_available\030\002 \001(\tR\025curre"
  "ntStakeAvailable\022C\n\016stake_linkings\030\003 \003(\013"
  "2\034.vega.events.v1.StakeLinkingR\rstakeLin"
  "kings\"/\n\027ListPartiesStakeRequest\022\024\n\005part"
  "y\030\001 \001(\tR\005party\"\\\n\030ListPartiesStakeRespon"
  "se\022@\n\rparties_stake\030\001 \003(\0132\033.vega.coreapi"
  ".v1.PartyStakeR\014partiesStake2\326\007\n\016CoreApi"
  "Service\022[\n\014ListAccounts\022$.vega.coreapi.v"
  "1.ListAccountsRequest\032%.vega.coreapi.v1."
  "ListAccountsResponse\022U\n\nListAssets\022\".veg"
  "a.coreapi.v1.ListAssetsRequest\032#.vega.co"
  "reapi.v1.ListAssetsResponse\022v\n\025ListNetwo"
  "rkParameters\022-.vega.coreapi.v1.ListNetwo"
  "rkParametersRequest\032..vega.coreapi.v1.Li"
  "stNetworkParametersResponse\022X\n\013ListParti"
  "es\022#.vega.coreapi.v1.ListPartiesRequest\032"
  "$.vega.coreapi.v1.ListPartiesResponse\022a\n"
  "\016ListValidators\022&.vega.coreapi.v1.ListVa"
  "lidatorsRequest\032\'.vega.coreapi.v1.ListVa"
  "lidatorsResponse\022X\n\013ListMarkets\022#.vega.c"
  "oreapi.v1.ListMarketsRequest\032$.vega.core"
  "api.v1.ListMarketsResponse\022^\n\rListPropos"
  "als\022%.vega.coreapi.v1.ListProposalsReque"
  "st\032&.vega.coreapi.v1.ListProposalsRespon"
  "se\022d\n\017ListMarketsData\022\'.vega.coreapi.v1."
  "ListMarketsDataRequest\032(.vega.coreapi.v1"
  ".ListMarketsDataResponse\022R\n\tListVotes\022!."
  "vega.coreapi.v1.ListVotesRequest\032\".vega."
  "coreapi.v1.ListVotesResponse\022g\n\020ListPart"
  "iesStake\022(.vega.coreapi.v1.ListPartiesSt"
  "akeRequest\032).vega.coreapi.v1.ListParties"
  "StakeResponseBM\n\037io.vegaprotocol.vega.co"
  "reapi.v1Z*code.vegaprotocol.io/vega/prot"
  "o/coreapi/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_coreapi_2fv1_2fcoreapi_2eproto_deps[5] = {
  &::descriptor_table_assets_2eproto,
  &::descriptor_table_events_2fv1_2fevents_2eproto,
  &::descriptor_table_governance_2eproto,
  &::descriptor_table_markets_2eproto,
  &::descriptor_table_vega_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_coreapi_2fv1_2fcoreapi_2eproto_sccs[22] = {
  &scc_info_Account_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListAccountsRequest_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListAccountsResponse_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListAssetsRequest_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListAssetsResponse_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListMarketsDataRequest_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListMarketsDataResponse_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListMarketsRequest_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListMarketsResponse_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListNetworkParametersRequest_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListNetworkParametersResponse_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListPartiesRequest_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListPartiesResponse_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListPartiesStakeRequest_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListPartiesStakeResponse_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListProposalsRequest_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListProposalsResponse_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListValidatorsRequest_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListValidatorsResponse_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListVotesRequest_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_ListVotesResponse_coreapi_2fv1_2fcoreapi_2eproto.base,
  &scc_info_PartyStake_coreapi_2fv1_2fcoreapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_coreapi_2fv1_2fcoreapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coreapi_2fv1_2fcoreapi_2eproto = {
  false, false, descriptor_table_protodef_coreapi_2fv1_2fcoreapi_2eproto, "coreapi/v1/coreapi.proto", 2780,
  &descriptor_table_coreapi_2fv1_2fcoreapi_2eproto_once, descriptor_table_coreapi_2fv1_2fcoreapi_2eproto_sccs, descriptor_table_coreapi_2fv1_2fcoreapi_2eproto_deps, 22, 5,
  schemas, file_default_instances, TableStruct_coreapi_2fv1_2fcoreapi_2eproto::offsets,
  file_level_metadata_coreapi_2fv1_2fcoreapi_2eproto, 22, file_level_enum_descriptors_coreapi_2fv1_2fcoreapi_2eproto, file_level_service_descriptors_coreapi_2fv1_2fcoreapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_coreapi_2fv1_2fcoreapi_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_coreapi_2fv1_2fcoreapi_2eproto)), true);
namespace vega {
namespace coreapi {
namespace v1 {

// ===================================================================

class Account::_Internal {
 public:
};

Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(),
      GetArena());
  }
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_balance().empty()) {
    balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_balance(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.Account)
}

void Account::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Account_coreapi_2fv1_2fcoreapi_2eproto.base);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.Account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Account::ArenaDtor(void* object) {
  Account* _this = reinterpret_cast< Account* >(object);
  (void)_this;
}
void Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account& Account::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Account_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_.ClearToEmpty();
  market_.ClearToEmpty();
  balance_.ClearToEmpty();
  asset_.ClearToEmpty();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.Account.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market = 2 [json_name = "market"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.Account.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string balance = 3 [json_name = "balance"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.Account.balance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 5 [json_name = "asset"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.Account.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 6 [json_name = "type"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.Account.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.Account.party");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party(), target);
  }

  // string market = 2 [json_name = "market"];
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.Account.market");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market(), target);
  }

  // string balance = 3 [json_name = "balance"];
  if (this->balance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_balance().data(), static_cast<int>(this->_internal_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.Account.balance");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_balance(), target);
  }

  // string asset = 5 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.Account.asset");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_asset(), target);
  }

  // string type = 6 [json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.Account.type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string market = 2 [json_name = "market"];
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string balance = 3 [json_name = "balance"];
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_balance());
  }

  // string asset = 5 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string type = 6 [json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
  if (from.balance().size() > 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
}

void Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  balance_.Swap(&other->balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListAccountsRequest::_Internal {
 public:
};

ListAccountsRequest::ListAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListAccountsRequest)
}
ListAccountsRequest::ListAccountsRequest(const ListAccountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListAccountsRequest)
}

void ListAccountsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAccountsRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListAccountsRequest::~ListAccountsRequest() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListAccountsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAccountsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListAccountsRequest::ArenaDtor(void* object) {
  ListAccountsRequest* _this = reinterpret_cast< ListAccountsRequest* >(object);
  (void)_this;
}
void ListAccountsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAccountsRequest& ListAccountsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAccountsRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_.ClearToEmpty();
  market_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAccountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListAccountsRequest.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market = 2 [json_name = "market"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListAccountsRequest.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAccountsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListAccountsRequest.party");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party(), target);
  }

  // string market = 2 [json_name = "market"];
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListAccountsRequest.market");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListAccountsRequest)
  return target;
}

size_t ListAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListAccountsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string market = 2 [json_name = "market"];
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAccountsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAccountsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListAccountsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListAccountsRequest)
    MergeFrom(*source);
  }
}

void ListAccountsRequest::MergeFrom(const ListAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
}

void ListAccountsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAccountsRequest::CopyFrom(const ListAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAccountsRequest::IsInitialized() const {
  return true;
}

void ListAccountsRequest::InternalSwap(ListAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAccountsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListAccountsResponse::_Internal {
 public:
};

ListAccountsResponse::ListAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListAccountsResponse)
}
ListAccountsResponse::ListAccountsResponse(const ListAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListAccountsResponse)
}

void ListAccountsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAccountsResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
}

ListAccountsResponse::~ListAccountsResponse() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListAccountsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAccountsResponse::ArenaDtor(void* object) {
  ListAccountsResponse* _this = reinterpret_cast< ListAccountsResponse* >(object);
  (void)_this;
}
void ListAccountsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAccountsResponse& ListAccountsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAccountsResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAccountsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.coreapi.v1.Account accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAccountsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.coreapi.v1.Account accounts = 1 [json_name = "accounts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListAccountsResponse)
  return target;
}

size_t ListAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListAccountsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.coreapi.v1.Account accounts = 1 [json_name = "accounts"];
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAccountsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAccountsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListAccountsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListAccountsResponse)
    MergeFrom(*source);
  }
}

void ListAccountsResponse::MergeFrom(const ListAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void ListAccountsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAccountsResponse::CopyFrom(const ListAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAccountsResponse::IsInitialized() const {
  return true;
}

void ListAccountsResponse::InternalSwap(ListAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAccountsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListAssetsRequest::_Internal {
 public:
};

ListAssetsRequest::ListAssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListAssetsRequest)
}
ListAssetsRequest::ListAssetsRequest(const ListAssetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListAssetsRequest)
}

void ListAssetsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAssetsRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListAssetsRequest::~ListAssetsRequest() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListAssetsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAssetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListAssetsRequest::ArenaDtor(void* object) {
  ListAssetsRequest* _this = reinterpret_cast< ListAssetsRequest* >(object);
  (void)_this;
}
void ListAssetsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAssetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAssetsRequest& ListAssetsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAssetsRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListAssetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListAssetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAssetsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset = 1 [json_name = "asset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListAssetsRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAssetsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListAssetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset = 1 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListAssetsRequest.asset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListAssetsRequest)
  return target;
}

size_t ListAssetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListAssetsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset = 1 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAssetsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListAssetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAssetsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAssetsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListAssetsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListAssetsRequest)
    MergeFrom(*source);
  }
}

void ListAssetsRequest::MergeFrom(const ListAssetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListAssetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
}

void ListAssetsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListAssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAssetsRequest::CopyFrom(const ListAssetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListAssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAssetsRequest::IsInitialized() const {
  return true;
}

void ListAssetsRequest::InternalSwap(ListAssetsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAssetsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListAssetsResponse::_Internal {
 public:
};

void ListAssetsResponse::clear_assets() {
  assets_.Clear();
}
ListAssetsResponse::ListAssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  assets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListAssetsResponse)
}
ListAssetsResponse::ListAssetsResponse(const ListAssetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      assets_(from.assets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListAssetsResponse)
}

void ListAssetsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAssetsResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
}

ListAssetsResponse::~ListAssetsResponse() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListAssetsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAssetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAssetsResponse::ArenaDtor(void* object) {
  ListAssetsResponse* _this = reinterpret_cast< ListAssetsResponse* >(object);
  (void)_this;
}
void ListAssetsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAssetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAssetsResponse& ListAssetsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAssetsResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListAssetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListAssetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAssetsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Asset assets = 1 [json_name = "assets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAssetsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListAssetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Asset assets = 1 [json_name = "assets"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_assets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListAssetsResponse)
  return target;
}

size_t ListAssetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListAssetsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Asset assets = 1 [json_name = "assets"];
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAssetsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListAssetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAssetsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAssetsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListAssetsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListAssetsResponse)
    MergeFrom(*source);
  }
}

void ListAssetsResponse::MergeFrom(const ListAssetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListAssetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
}

void ListAssetsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListAssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAssetsResponse::CopyFrom(const ListAssetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListAssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAssetsResponse::IsInitialized() const {
  return true;
}

void ListAssetsResponse::InternalSwap(ListAssetsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  assets_.InternalSwap(&other->assets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAssetsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListNetworkParametersRequest::_Internal {
 public:
};

ListNetworkParametersRequest::ListNetworkParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListNetworkParametersRequest)
}
ListNetworkParametersRequest::ListNetworkParametersRequest(const ListNetworkParametersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  network_parameter_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network_parameter_key().empty()) {
    network_parameter_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_network_parameter_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListNetworkParametersRequest)
}

void ListNetworkParametersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListNetworkParametersRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  network_parameter_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListNetworkParametersRequest::~ListNetworkParametersRequest() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListNetworkParametersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListNetworkParametersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  network_parameter_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListNetworkParametersRequest::ArenaDtor(void* object) {
  ListNetworkParametersRequest* _this = reinterpret_cast< ListNetworkParametersRequest* >(object);
  (void)_this;
}
void ListNetworkParametersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNetworkParametersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListNetworkParametersRequest& ListNetworkParametersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListNetworkParametersRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListNetworkParametersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListNetworkParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_parameter_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNetworkParametersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string network_parameter_key = 1 [json_name = "networkParameterKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_network_parameter_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListNetworkParametersRequest.network_parameter_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNetworkParametersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListNetworkParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string network_parameter_key = 1 [json_name = "networkParameterKey"];
  if (this->network_parameter_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network_parameter_key().data(), static_cast<int>(this->_internal_network_parameter_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListNetworkParametersRequest.network_parameter_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_network_parameter_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListNetworkParametersRequest)
  return target;
}

size_t ListNetworkParametersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListNetworkParametersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string network_parameter_key = 1 [json_name = "networkParameterKey"];
  if (this->network_parameter_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network_parameter_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListNetworkParametersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListNetworkParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNetworkParametersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListNetworkParametersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListNetworkParametersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListNetworkParametersRequest)
    MergeFrom(*source);
  }
}

void ListNetworkParametersRequest::MergeFrom(const ListNetworkParametersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListNetworkParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.network_parameter_key().size() > 0) {
    _internal_set_network_parameter_key(from._internal_network_parameter_key());
  }
}

void ListNetworkParametersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListNetworkParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNetworkParametersRequest::CopyFrom(const ListNetworkParametersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListNetworkParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNetworkParametersRequest::IsInitialized() const {
  return true;
}

void ListNetworkParametersRequest::InternalSwap(ListNetworkParametersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  network_parameter_key_.Swap(&other->network_parameter_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNetworkParametersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListNetworkParametersResponse::_Internal {
 public:
};

void ListNetworkParametersResponse::clear_network_parameters() {
  network_parameters_.Clear();
}
ListNetworkParametersResponse::ListNetworkParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  network_parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListNetworkParametersResponse)
}
ListNetworkParametersResponse::ListNetworkParametersResponse(const ListNetworkParametersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      network_parameters_(from.network_parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListNetworkParametersResponse)
}

void ListNetworkParametersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListNetworkParametersResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
}

ListNetworkParametersResponse::~ListNetworkParametersResponse() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListNetworkParametersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListNetworkParametersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListNetworkParametersResponse::ArenaDtor(void* object) {
  ListNetworkParametersResponse* _this = reinterpret_cast< ListNetworkParametersResponse* >(object);
  (void)_this;
}
void ListNetworkParametersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNetworkParametersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListNetworkParametersResponse& ListNetworkParametersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListNetworkParametersResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListNetworkParametersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListNetworkParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_parameters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNetworkParametersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.NetworkParameter network_parameters = 1 [json_name = "networkParameters"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_network_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNetworkParametersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListNetworkParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.NetworkParameter network_parameters = 1 [json_name = "networkParameters"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_network_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_network_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListNetworkParametersResponse)
  return target;
}

size_t ListNetworkParametersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListNetworkParametersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.NetworkParameter network_parameters = 1 [json_name = "networkParameters"];
  total_size += 1UL * this->_internal_network_parameters_size();
  for (const auto& msg : this->network_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListNetworkParametersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListNetworkParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNetworkParametersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListNetworkParametersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListNetworkParametersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListNetworkParametersResponse)
    MergeFrom(*source);
  }
}

void ListNetworkParametersResponse::MergeFrom(const ListNetworkParametersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListNetworkParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  network_parameters_.MergeFrom(from.network_parameters_);
}

void ListNetworkParametersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListNetworkParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNetworkParametersResponse::CopyFrom(const ListNetworkParametersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListNetworkParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNetworkParametersResponse::IsInitialized() const {
  return true;
}

void ListNetworkParametersResponse::InternalSwap(ListNetworkParametersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  network_parameters_.InternalSwap(&other->network_parameters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNetworkParametersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListPartiesRequest::_Internal {
 public:
};

ListPartiesRequest::ListPartiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListPartiesRequest)
}
ListPartiesRequest::ListPartiesRequest(const ListPartiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListPartiesRequest)
}

void ListPartiesRequest::SharedCtor() {
}

ListPartiesRequest::~ListPartiesRequest() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListPartiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPartiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListPartiesRequest::ArenaDtor(void* object) {
  ListPartiesRequest* _this = reinterpret_cast< ListPartiesRequest* >(object);
  (void)_this;
}
void ListPartiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPartiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPartiesRequest& ListPartiesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPartiesRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListPartiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListPartiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPartiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPartiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListPartiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListPartiesRequest)
  return target;
}

size_t ListPartiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListPartiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPartiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListPartiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPartiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPartiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListPartiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListPartiesRequest)
    MergeFrom(*source);
  }
}

void ListPartiesRequest::MergeFrom(const ListPartiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListPartiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListPartiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListPartiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPartiesRequest::CopyFrom(const ListPartiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListPartiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPartiesRequest::IsInitialized() const {
  return true;
}

void ListPartiesRequest::InternalSwap(ListPartiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPartiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListPartiesResponse::_Internal {
 public:
};

void ListPartiesResponse::clear_parties() {
  parties_.Clear();
}
ListPartiesResponse::ListPartiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListPartiesResponse)
}
ListPartiesResponse::ListPartiesResponse(const ListPartiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parties_(from.parties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListPartiesResponse)
}

void ListPartiesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPartiesResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
}

ListPartiesResponse::~ListPartiesResponse() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListPartiesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPartiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListPartiesResponse::ArenaDtor(void* object) {
  ListPartiesResponse* _this = reinterpret_cast< ListPartiesResponse* >(object);
  (void)_this;
}
void ListPartiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPartiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPartiesResponse& ListPartiesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPartiesResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListPartiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListPartiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPartiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Party parties = 1 [json_name = "parties"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPartiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListPartiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Party parties = 1 [json_name = "parties"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_parties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListPartiesResponse)
  return target;
}

size_t ListPartiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListPartiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Party parties = 1 [json_name = "parties"];
  total_size += 1UL * this->_internal_parties_size();
  for (const auto& msg : this->parties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPartiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListPartiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPartiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPartiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListPartiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListPartiesResponse)
    MergeFrom(*source);
  }
}

void ListPartiesResponse::MergeFrom(const ListPartiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListPartiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parties_.MergeFrom(from.parties_);
}

void ListPartiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListPartiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPartiesResponse::CopyFrom(const ListPartiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListPartiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPartiesResponse::IsInitialized() const {
  return true;
}

void ListPartiesResponse::InternalSwap(ListPartiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parties_.InternalSwap(&other->parties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPartiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListValidatorsRequest::_Internal {
 public:
};

ListValidatorsRequest::ListValidatorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListValidatorsRequest)
}
ListValidatorsRequest::ListValidatorsRequest(const ListValidatorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListValidatorsRequest)
}

void ListValidatorsRequest::SharedCtor() {
}

ListValidatorsRequest::~ListValidatorsRequest() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListValidatorsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListValidatorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListValidatorsRequest::ArenaDtor(void* object) {
  ListValidatorsRequest* _this = reinterpret_cast< ListValidatorsRequest* >(object);
  (void)_this;
}
void ListValidatorsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListValidatorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListValidatorsRequest& ListValidatorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListValidatorsRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListValidatorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListValidatorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListValidatorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListValidatorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListValidatorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListValidatorsRequest)
  return target;
}

size_t ListValidatorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListValidatorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListValidatorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListValidatorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListValidatorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListValidatorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListValidatorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListValidatorsRequest)
    MergeFrom(*source);
  }
}

void ListValidatorsRequest::MergeFrom(const ListValidatorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListValidatorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListValidatorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListValidatorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListValidatorsRequest::CopyFrom(const ListValidatorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListValidatorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValidatorsRequest::IsInitialized() const {
  return true;
}

void ListValidatorsRequest::InternalSwap(ListValidatorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListValidatorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListValidatorsResponse::_Internal {
 public:
};

void ListValidatorsResponse::clear_validators() {
  validators_.Clear();
}
ListValidatorsResponse::ListValidatorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  validators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListValidatorsResponse)
}
ListValidatorsResponse::ListValidatorsResponse(const ListValidatorsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListValidatorsResponse)
}

void ListValidatorsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListValidatorsResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
}

ListValidatorsResponse::~ListValidatorsResponse() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListValidatorsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListValidatorsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListValidatorsResponse::ArenaDtor(void* object) {
  ListValidatorsResponse* _this = reinterpret_cast< ListValidatorsResponse* >(object);
  (void)_this;
}
void ListValidatorsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListValidatorsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListValidatorsResponse& ListValidatorsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListValidatorsResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListValidatorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListValidatorsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListValidatorsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.events.v1.ValidatorUpdate validators = 1 [json_name = "validators"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListValidatorsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListValidatorsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.events.v1.ValidatorUpdate validators = 1 [json_name = "validators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_validators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListValidatorsResponse)
  return target;
}

size_t ListValidatorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListValidatorsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.events.v1.ValidatorUpdate validators = 1 [json_name = "validators"];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListValidatorsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListValidatorsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListValidatorsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListValidatorsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListValidatorsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListValidatorsResponse)
    MergeFrom(*source);
  }
}

void ListValidatorsResponse::MergeFrom(const ListValidatorsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListValidatorsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
}

void ListValidatorsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListValidatorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListValidatorsResponse::CopyFrom(const ListValidatorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListValidatorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValidatorsResponse::IsInitialized() const {
  return true;
}

void ListValidatorsResponse::InternalSwap(ListValidatorsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListValidatorsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListMarketsRequest::_Internal {
 public:
};

ListMarketsRequest::ListMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListMarketsRequest)
}
ListMarketsRequest::ListMarketsRequest(const ListMarketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListMarketsRequest)
}

void ListMarketsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListMarketsRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListMarketsRequest::~ListMarketsRequest() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListMarketsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListMarketsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListMarketsRequest::ArenaDtor(void* object) {
  ListMarketsRequest* _this = reinterpret_cast< ListMarketsRequest* >(object);
  (void)_this;
}
void ListMarketsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListMarketsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMarketsRequest& ListMarketsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMarketsRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListMarketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListMarketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMarketsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListMarketsRequest.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMarketsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListMarketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListMarketsRequest.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListMarketsRequest)
  return target;
}

size_t ListMarketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListMarketsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMarketsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListMarketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMarketsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMarketsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListMarketsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListMarketsRequest)
    MergeFrom(*source);
  }
}

void ListMarketsRequest::MergeFrom(const ListMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListMarketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
}

void ListMarketsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMarketsRequest::CopyFrom(const ListMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMarketsRequest::IsInitialized() const {
  return true;
}

void ListMarketsRequest::InternalSwap(ListMarketsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMarketsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListMarketsResponse::_Internal {
 public:
};

void ListMarketsResponse::clear_markets() {
  markets_.Clear();
}
ListMarketsResponse::ListMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListMarketsResponse)
}
ListMarketsResponse::ListMarketsResponse(const ListMarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markets_(from.markets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListMarketsResponse)
}

void ListMarketsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListMarketsResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
}

ListMarketsResponse::~ListMarketsResponse() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListMarketsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListMarketsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListMarketsResponse::ArenaDtor(void* object) {
  ListMarketsResponse* _this = reinterpret_cast< ListMarketsResponse* >(object);
  (void)_this;
}
void ListMarketsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListMarketsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMarketsResponse& ListMarketsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMarketsResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListMarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListMarketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMarketsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Market markets = 1 [json_name = "markets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMarketsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListMarketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Market markets = 1 [json_name = "markets"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_markets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListMarketsResponse)
  return target;
}

size_t ListMarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListMarketsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Market markets = 1 [json_name = "markets"];
  total_size += 1UL * this->_internal_markets_size();
  for (const auto& msg : this->markets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMarketsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListMarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMarketsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMarketsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListMarketsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListMarketsResponse)
    MergeFrom(*source);
  }
}

void ListMarketsResponse::MergeFrom(const ListMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListMarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markets_.MergeFrom(from.markets_);
}

void ListMarketsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMarketsResponse::CopyFrom(const ListMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMarketsResponse::IsInitialized() const {
  return true;
}

void ListMarketsResponse::InternalSwap(ListMarketsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markets_.InternalSwap(&other->markets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMarketsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListProposalsRequest::_Internal {
 public:
};

ListProposalsRequest::ListProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListProposalsRequest)
}
ListProposalsRequest::ListProposalsRequest(const ListProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proposal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal().empty()) {
    proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposal(),
      GetArena());
  }
  proposer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposer().empty()) {
    proposer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposer(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListProposalsRequest)
}

void ListProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListProposalsRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  proposal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListProposalsRequest::~ListProposalsRequest() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proposal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListProposalsRequest::ArenaDtor(void* object) {
  ListProposalsRequest* _this = reinterpret_cast< ListProposalsRequest* >(object);
  (void)_this;
}
void ListProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListProposalsRequest& ListProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListProposalsRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposal_.ClearToEmpty();
  proposer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string proposal = 1 [json_name = "proposal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proposal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListProposalsRequest.proposal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proposer = 2 [json_name = "proposer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proposer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListProposalsRequest.proposer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposal = 1 [json_name = "proposal"];
  if (this->proposal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposal().data(), static_cast<int>(this->_internal_proposal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListProposalsRequest.proposal");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proposal(), target);
  }

  // string proposer = 2 [json_name = "proposer"];
  if (this->proposer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposer().data(), static_cast<int>(this->_internal_proposer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListProposalsRequest.proposer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proposer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListProposalsRequest)
  return target;
}

size_t ListProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proposal = 1 [json_name = "proposal"];
  if (this->proposal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposal());
  }

  // string proposer = 2 [json_name = "proposer"];
  if (this->proposer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListProposalsRequest)
    MergeFrom(*source);
  }
}

void ListProposalsRequest::MergeFrom(const ListProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposal().size() > 0) {
    _internal_set_proposal(from._internal_proposal());
  }
  if (from.proposer().size() > 0) {
    _internal_set_proposer(from._internal_proposer());
  }
}

void ListProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListProposalsRequest::CopyFrom(const ListProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProposalsRequest::IsInitialized() const {
  return true;
}

void ListProposalsRequest::InternalSwap(ListProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposal_.Swap(&other->proposal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposer_.Swap(&other->proposer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListProposalsResponse::_Internal {
 public:
};

void ListProposalsResponse::clear_proposals() {
  proposals_.Clear();
}
ListProposalsResponse::ListProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proposals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListProposalsResponse)
}
ListProposalsResponse::ListProposalsResponse(const ListProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proposals_(from.proposals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListProposalsResponse)
}

void ListProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListProposalsResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
}

ListProposalsResponse::~ListProposalsResponse() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListProposalsResponse::ArenaDtor(void* object) {
  ListProposalsResponse* _this = reinterpret_cast< ListProposalsResponse* >(object);
  (void)_this;
}
void ListProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListProposalsResponse& ListProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListProposalsResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Proposal proposals = 1 [json_name = "proposals"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Proposal proposals = 1 [json_name = "proposals"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proposals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_proposals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListProposalsResponse)
  return target;
}

size_t ListProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Proposal proposals = 1 [json_name = "proposals"];
  total_size += 1UL * this->_internal_proposals_size();
  for (const auto& msg : this->proposals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListProposalsResponse)
    MergeFrom(*source);
  }
}

void ListProposalsResponse::MergeFrom(const ListProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proposals_.MergeFrom(from.proposals_);
}

void ListProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListProposalsResponse::CopyFrom(const ListProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProposalsResponse::IsInitialized() const {
  return true;
}

void ListProposalsResponse::InternalSwap(ListProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposals_.InternalSwap(&other->proposals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListMarketsDataRequest::_Internal {
 public:
};

ListMarketsDataRequest::ListMarketsDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListMarketsDataRequest)
}
ListMarketsDataRequest::ListMarketsDataRequest(const ListMarketsDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListMarketsDataRequest)
}

void ListMarketsDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListMarketsDataRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListMarketsDataRequest::~ListMarketsDataRequest() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListMarketsDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListMarketsDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListMarketsDataRequest::ArenaDtor(void* object) {
  ListMarketsDataRequest* _this = reinterpret_cast< ListMarketsDataRequest* >(object);
  (void)_this;
}
void ListMarketsDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListMarketsDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMarketsDataRequest& ListMarketsDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMarketsDataRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListMarketsDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListMarketsDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMarketsDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListMarketsDataRequest.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMarketsDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListMarketsDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListMarketsDataRequest.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListMarketsDataRequest)
  return target;
}

size_t ListMarketsDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListMarketsDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMarketsDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListMarketsDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMarketsDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMarketsDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListMarketsDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListMarketsDataRequest)
    MergeFrom(*source);
  }
}

void ListMarketsDataRequest::MergeFrom(const ListMarketsDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListMarketsDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
}

void ListMarketsDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListMarketsDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMarketsDataRequest::CopyFrom(const ListMarketsDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListMarketsDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMarketsDataRequest::IsInitialized() const {
  return true;
}

void ListMarketsDataRequest::InternalSwap(ListMarketsDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMarketsDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListMarketsDataResponse::_Internal {
 public:
};

void ListMarketsDataResponse::clear_markets_data() {
  markets_data_.Clear();
}
ListMarketsDataResponse::ListMarketsDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markets_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListMarketsDataResponse)
}
ListMarketsDataResponse::ListMarketsDataResponse(const ListMarketsDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markets_data_(from.markets_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListMarketsDataResponse)
}

void ListMarketsDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListMarketsDataResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
}

ListMarketsDataResponse::~ListMarketsDataResponse() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListMarketsDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListMarketsDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListMarketsDataResponse::ArenaDtor(void* object) {
  ListMarketsDataResponse* _this = reinterpret_cast< ListMarketsDataResponse* >(object);
  (void)_this;
}
void ListMarketsDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListMarketsDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMarketsDataResponse& ListMarketsDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMarketsDataResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListMarketsDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListMarketsDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markets_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMarketsDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.MarketData markets_data = 1 [json_name = "marketsData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMarketsDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListMarketsDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.MarketData markets_data = 1 [json_name = "marketsData"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markets_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_markets_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListMarketsDataResponse)
  return target;
}

size_t ListMarketsDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListMarketsDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.MarketData markets_data = 1 [json_name = "marketsData"];
  total_size += 1UL * this->_internal_markets_data_size();
  for (const auto& msg : this->markets_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMarketsDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListMarketsDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMarketsDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMarketsDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListMarketsDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListMarketsDataResponse)
    MergeFrom(*source);
  }
}

void ListMarketsDataResponse::MergeFrom(const ListMarketsDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListMarketsDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markets_data_.MergeFrom(from.markets_data_);
}

void ListMarketsDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListMarketsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMarketsDataResponse::CopyFrom(const ListMarketsDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListMarketsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMarketsDataResponse::IsInitialized() const {
  return true;
}

void ListMarketsDataResponse::InternalSwap(ListMarketsDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markets_data_.InternalSwap(&other->markets_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMarketsDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListVotesRequest::_Internal {
 public:
};

ListVotesRequest::ListVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListVotesRequest)
}
ListVotesRequest::ListVotesRequest(const ListVotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proposal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal().empty()) {
    proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposal(),
      GetArena());
  }
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListVotesRequest)
}

void ListVotesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVotesRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  proposal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListVotesRequest::~ListVotesRequest() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListVotesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVotesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proposal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVotesRequest::ArenaDtor(void* object) {
  ListVotesRequest* _this = reinterpret_cast< ListVotesRequest* >(object);
  (void)_this;
}
void ListVotesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVotesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVotesRequest& ListVotesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVotesRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListVotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposal_.ClearToEmpty();
  party_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVotesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string proposal = 1 [json_name = "proposal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proposal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListVotesRequest.proposal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party = 2 [json_name = "party"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListVotesRequest.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVotesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposal = 1 [json_name = "proposal"];
  if (this->proposal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposal().data(), static_cast<int>(this->_internal_proposal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListVotesRequest.proposal");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proposal(), target);
  }

  // string party = 2 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListVotesRequest.party");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListVotesRequest)
  return target;
}

size_t ListVotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListVotesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proposal = 1 [json_name = "proposal"];
  if (this->proposal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposal());
  }

  // string party = 2 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVotesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVotesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVotesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListVotesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListVotesRequest)
    MergeFrom(*source);
  }
}

void ListVotesRequest::MergeFrom(const ListVotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposal().size() > 0) {
    _internal_set_proposal(from._internal_proposal());
  }
  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
}

void ListVotesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVotesRequest::CopyFrom(const ListVotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVotesRequest::IsInitialized() const {
  return true;
}

void ListVotesRequest::InternalSwap(ListVotesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposal_.Swap(&other->proposal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVotesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListVotesResponse::_Internal {
 public:
};

void ListVotesResponse::clear_votes() {
  votes_.Clear();
}
ListVotesResponse::ListVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListVotesResponse)
}
ListVotesResponse::ListVotesResponse(const ListVotesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListVotesResponse)
}

void ListVotesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVotesResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
}

ListVotesResponse::~ListVotesResponse() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListVotesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVotesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListVotesResponse::ArenaDtor(void* object) {
  ListVotesResponse* _this = reinterpret_cast< ListVotesResponse* >(object);
  (void)_this;
}
void ListVotesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVotesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVotesResponse& ListVotesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVotesResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListVotesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListVotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVotesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Vote votes = 1 [json_name = "votes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVotesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListVotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Vote votes = 1 [json_name = "votes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListVotesResponse)
  return target;
}

size_t ListVotesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListVotesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Vote votes = 1 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVotesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListVotesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVotesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVotesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListVotesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListVotesResponse)
    MergeFrom(*source);
  }
}

void ListVotesResponse::MergeFrom(const ListVotesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListVotesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
}

void ListVotesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListVotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVotesResponse::CopyFrom(const ListVotesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListVotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVotesResponse::IsInitialized() const {
  return true;
}

void ListVotesResponse::InternalSwap(ListVotesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVotesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyStake::_Internal {
 public:
};

void PartyStake::clear_stake_linkings() {
  stake_linkings_.Clear();
}
PartyStake::PartyStake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stake_linkings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.PartyStake)
}
PartyStake::PartyStake(const PartyStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stake_linkings_(from.stake_linkings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  current_stake_available_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_stake_available().empty()) {
    current_stake_available_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_stake_available(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.PartyStake)
}

void PartyStake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyStake_coreapi_2fv1_2fcoreapi_2eproto.base);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_stake_available_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyStake::~PartyStake() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.PartyStake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyStake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_stake_available_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyStake::ArenaDtor(void* object) {
  PartyStake* _this = reinterpret_cast< PartyStake* >(object);
  (void)_this;
}
void PartyStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyStake& PartyStake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyStake_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void PartyStake::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.PartyStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_linkings_.Clear();
  party_.ClearToEmpty();
  current_stake_available_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.PartyStake.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_stake_available = 2 [json_name = "currentStakeAvailable"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_current_stake_available();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.PartyStake.current_stake_available"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.events.v1.StakeLinking stake_linkings = 3 [json_name = "stakeLinkings"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stake_linkings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyStake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.PartyStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.PartyStake.party");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party(), target);
  }

  // string current_stake_available = 2 [json_name = "currentStakeAvailable"];
  if (this->current_stake_available().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_stake_available().data(), static_cast<int>(this->_internal_current_stake_available().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.PartyStake.current_stake_available");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_current_stake_available(), target);
  }

  // repeated .vega.events.v1.StakeLinking stake_linkings = 3 [json_name = "stakeLinkings"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stake_linkings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_stake_linkings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.PartyStake)
  return target;
}

size_t PartyStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.PartyStake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.events.v1.StakeLinking stake_linkings = 3 [json_name = "stakeLinkings"];
  total_size += 1UL * this->_internal_stake_linkings_size();
  for (const auto& msg : this->stake_linkings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string current_stake_available = 2 [json_name = "currentStakeAvailable"];
  if (this->current_stake_available().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_stake_available());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyStake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.PartyStake)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyStake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyStake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.PartyStake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.PartyStake)
    MergeFrom(*source);
  }
}

void PartyStake::MergeFrom(const PartyStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.PartyStake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stake_linkings_.MergeFrom(from.stake_linkings_);
  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
  if (from.current_stake_available().size() > 0) {
    _internal_set_current_stake_available(from._internal_current_stake_available());
  }
}

void PartyStake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.PartyStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyStake::CopyFrom(const PartyStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.PartyStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyStake::IsInitialized() const {
  return true;
}

void PartyStake::InternalSwap(PartyStake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stake_linkings_.InternalSwap(&other->stake_linkings_);
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_stake_available_.Swap(&other->current_stake_available_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyStake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListPartiesStakeRequest::_Internal {
 public:
};

ListPartiesStakeRequest::ListPartiesStakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListPartiesStakeRequest)
}
ListPartiesStakeRequest::ListPartiesStakeRequest(const ListPartiesStakeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListPartiesStakeRequest)
}

void ListPartiesStakeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPartiesStakeRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListPartiesStakeRequest::~ListPartiesStakeRequest() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListPartiesStakeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPartiesStakeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPartiesStakeRequest::ArenaDtor(void* object) {
  ListPartiesStakeRequest* _this = reinterpret_cast< ListPartiesStakeRequest* >(object);
  (void)_this;
}
void ListPartiesStakeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPartiesStakeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPartiesStakeRequest& ListPartiesStakeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPartiesStakeRequest_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListPartiesStakeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListPartiesStakeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPartiesStakeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.coreapi.v1.ListPartiesStakeRequest.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPartiesStakeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListPartiesStakeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.coreapi.v1.ListPartiesStakeRequest.party");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListPartiesStakeRequest)
  return target;
}

size_t ListPartiesStakeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListPartiesStakeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPartiesStakeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListPartiesStakeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPartiesStakeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPartiesStakeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListPartiesStakeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListPartiesStakeRequest)
    MergeFrom(*source);
  }
}

void ListPartiesStakeRequest::MergeFrom(const ListPartiesStakeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListPartiesStakeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
}

void ListPartiesStakeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListPartiesStakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPartiesStakeRequest::CopyFrom(const ListPartiesStakeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListPartiesStakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPartiesStakeRequest::IsInitialized() const {
  return true;
}

void ListPartiesStakeRequest::InternalSwap(ListPartiesStakeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPartiesStakeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListPartiesStakeResponse::_Internal {
 public:
};

ListPartiesStakeResponse::ListPartiesStakeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parties_stake_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.coreapi.v1.ListPartiesStakeResponse)
}
ListPartiesStakeResponse::ListPartiesStakeResponse(const ListPartiesStakeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parties_stake_(from.parties_stake_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.coreapi.v1.ListPartiesStakeResponse)
}

void ListPartiesStakeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPartiesStakeResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
}

ListPartiesStakeResponse::~ListPartiesStakeResponse() {
  // @@protoc_insertion_point(destructor:vega.coreapi.v1.ListPartiesStakeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPartiesStakeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListPartiesStakeResponse::ArenaDtor(void* object) {
  ListPartiesStakeResponse* _this = reinterpret_cast< ListPartiesStakeResponse* >(object);
  (void)_this;
}
void ListPartiesStakeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPartiesStakeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPartiesStakeResponse& ListPartiesStakeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPartiesStakeResponse_coreapi_2fv1_2fcoreapi_2eproto.base);
  return *internal_default_instance();
}


void ListPartiesStakeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.coreapi.v1.ListPartiesStakeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parties_stake_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPartiesStakeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.coreapi.v1.PartyStake parties_stake = 1 [json_name = "partiesStake"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parties_stake(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPartiesStakeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.coreapi.v1.ListPartiesStakeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.coreapi.v1.PartyStake parties_stake = 1 [json_name = "partiesStake"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parties_stake_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_parties_stake(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.coreapi.v1.ListPartiesStakeResponse)
  return target;
}

size_t ListPartiesStakeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.coreapi.v1.ListPartiesStakeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.coreapi.v1.PartyStake parties_stake = 1 [json_name = "partiesStake"];
  total_size += 1UL * this->_internal_parties_stake_size();
  for (const auto& msg : this->parties_stake_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPartiesStakeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.coreapi.v1.ListPartiesStakeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPartiesStakeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPartiesStakeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.coreapi.v1.ListPartiesStakeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.coreapi.v1.ListPartiesStakeResponse)
    MergeFrom(*source);
  }
}

void ListPartiesStakeResponse::MergeFrom(const ListPartiesStakeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.coreapi.v1.ListPartiesStakeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parties_stake_.MergeFrom(from.parties_stake_);
}

void ListPartiesStakeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.coreapi.v1.ListPartiesStakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPartiesStakeResponse::CopyFrom(const ListPartiesStakeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.coreapi.v1.ListPartiesStakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPartiesStakeResponse::IsInitialized() const {
  return true;
}

void ListPartiesStakeResponse::InternalSwap(ListPartiesStakeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parties_stake_.InternalSwap(&other->parties_stake_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPartiesStakeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace coreapi
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::Account* Arena::CreateMaybeMessage< ::vega::coreapi::v1::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListAccountsRequest* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListAccountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListAccountsResponse* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListAssetsRequest* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListAssetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListAssetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListAssetsResponse* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListAssetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListAssetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListNetworkParametersRequest* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListNetworkParametersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListNetworkParametersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListNetworkParametersResponse* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListNetworkParametersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListNetworkParametersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListPartiesRequest* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListPartiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListPartiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListPartiesResponse* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListPartiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListPartiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListValidatorsRequest* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListValidatorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListValidatorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListValidatorsResponse* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListValidatorsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListValidatorsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListMarketsRequest* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListMarketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListMarketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListMarketsResponse* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListMarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListMarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListProposalsRequest* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListProposalsResponse* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListMarketsDataRequest* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListMarketsDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListMarketsDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListMarketsDataResponse* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListMarketsDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListMarketsDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListVotesRequest* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListVotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListVotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListVotesResponse* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListVotesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListVotesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::PartyStake* Arena::CreateMaybeMessage< ::vega::coreapi::v1::PartyStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::PartyStake >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListPartiesStakeRequest* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListPartiesStakeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListPartiesStakeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::coreapi::v1::ListPartiesStakeResponse* Arena::CreateMaybeMessage< ::vega::coreapi::v1::ListPartiesStakeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::coreapi::v1::ListPartiesStakeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
