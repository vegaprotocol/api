// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/trading.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2ftrading_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2ftrading_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vega.pb.h"
#include "markets.pb.h"
#include "governance.pb.h"
#include "assets.pb.h"
#include "events/v1/events.pb.h"
#include "oracles/v1/spec.pb.h"
#include "oracles/v1/data.pb.h"
#include "commands/v1/commands.pb.h"
#include "commands/v1/transaction.pb.h"
#include "commands/v1/validator_commands.pb.h"
#include "github.com/mwitkow/go-proto-validators/validator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2ftrading_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2ftrading_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2ftrading_2eproto;
namespace api {
namespace v1 {
class GetVegaTimeRequest;
class GetVegaTimeRequestDefaultTypeInternal;
extern GetVegaTimeRequestDefaultTypeInternal _GetVegaTimeRequest_default_instance_;
class GetVegaTimeResponse;
class GetVegaTimeResponseDefaultTypeInternal;
extern GetVegaTimeResponseDefaultTypeInternal _GetVegaTimeResponse_default_instance_;
class LastBlockHeightRequest;
class LastBlockHeightRequestDefaultTypeInternal;
extern LastBlockHeightRequestDefaultTypeInternal _LastBlockHeightRequest_default_instance_;
class LastBlockHeightResponse;
class LastBlockHeightResponseDefaultTypeInternal;
extern LastBlockHeightResponseDefaultTypeInternal _LastBlockHeightResponse_default_instance_;
class ObserveEventBusRequest;
class ObserveEventBusRequestDefaultTypeInternal;
extern ObserveEventBusRequestDefaultTypeInternal _ObserveEventBusRequest_default_instance_;
class ObserveEventBusResponse;
class ObserveEventBusResponseDefaultTypeInternal;
extern ObserveEventBusResponseDefaultTypeInternal _ObserveEventBusResponse_default_instance_;
class PropagateChainEventRequest;
class PropagateChainEventRequestDefaultTypeInternal;
extern PropagateChainEventRequestDefaultTypeInternal _PropagateChainEventRequest_default_instance_;
class PropagateChainEventResponse;
class PropagateChainEventResponseDefaultTypeInternal;
extern PropagateChainEventResponseDefaultTypeInternal _PropagateChainEventResponse_default_instance_;
class Statistics;
class StatisticsDefaultTypeInternal;
extern StatisticsDefaultTypeInternal _Statistics_default_instance_;
class StatisticsRequest;
class StatisticsRequestDefaultTypeInternal;
extern StatisticsRequestDefaultTypeInternal _StatisticsRequest_default_instance_;
class StatisticsResponse;
class StatisticsResponseDefaultTypeInternal;
extern StatisticsResponseDefaultTypeInternal _StatisticsResponse_default_instance_;
class SubmitTransactionV2Request;
class SubmitTransactionV2RequestDefaultTypeInternal;
extern SubmitTransactionV2RequestDefaultTypeInternal _SubmitTransactionV2Request_default_instance_;
class SubmitTransactionV2Response;
class SubmitTransactionV2ResponseDefaultTypeInternal;
extern SubmitTransactionV2ResponseDefaultTypeInternal _SubmitTransactionV2Response_default_instance_;
}  // namespace v1
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> ::api::v1::GetVegaTimeRequest* Arena::CreateMaybeMessage<::api::v1::GetVegaTimeRequest>(Arena*);
template<> ::api::v1::GetVegaTimeResponse* Arena::CreateMaybeMessage<::api::v1::GetVegaTimeResponse>(Arena*);
template<> ::api::v1::LastBlockHeightRequest* Arena::CreateMaybeMessage<::api::v1::LastBlockHeightRequest>(Arena*);
template<> ::api::v1::LastBlockHeightResponse* Arena::CreateMaybeMessage<::api::v1::LastBlockHeightResponse>(Arena*);
template<> ::api::v1::ObserveEventBusRequest* Arena::CreateMaybeMessage<::api::v1::ObserveEventBusRequest>(Arena*);
template<> ::api::v1::ObserveEventBusResponse* Arena::CreateMaybeMessage<::api::v1::ObserveEventBusResponse>(Arena*);
template<> ::api::v1::PropagateChainEventRequest* Arena::CreateMaybeMessage<::api::v1::PropagateChainEventRequest>(Arena*);
template<> ::api::v1::PropagateChainEventResponse* Arena::CreateMaybeMessage<::api::v1::PropagateChainEventResponse>(Arena*);
template<> ::api::v1::Statistics* Arena::CreateMaybeMessage<::api::v1::Statistics>(Arena*);
template<> ::api::v1::StatisticsRequest* Arena::CreateMaybeMessage<::api::v1::StatisticsRequest>(Arena*);
template<> ::api::v1::StatisticsResponse* Arena::CreateMaybeMessage<::api::v1::StatisticsResponse>(Arena*);
template<> ::api::v1::SubmitTransactionV2Request* Arena::CreateMaybeMessage<::api::v1::SubmitTransactionV2Request>(Arena*);
template<> ::api::v1::SubmitTransactionV2Response* Arena::CreateMaybeMessage<::api::v1::SubmitTransactionV2Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api {
namespace v1 {

enum SubmitTransactionV2Request_Type : int {
  SubmitTransactionV2Request_Type_TYPE_UNSPECIFIED = 0,
  SubmitTransactionV2Request_Type_TYPE_ASYNC = 1,
  SubmitTransactionV2Request_Type_TYPE_SYNC = 2,
  SubmitTransactionV2Request_Type_TYPE_COMMIT = 3,
  SubmitTransactionV2Request_Type_SubmitTransactionV2Request_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SubmitTransactionV2Request_Type_SubmitTransactionV2Request_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SubmitTransactionV2Request_Type_IsValid(int value);
constexpr SubmitTransactionV2Request_Type SubmitTransactionV2Request_Type_Type_MIN = SubmitTransactionV2Request_Type_TYPE_UNSPECIFIED;
constexpr SubmitTransactionV2Request_Type SubmitTransactionV2Request_Type_Type_MAX = SubmitTransactionV2Request_Type_TYPE_COMMIT;
constexpr int SubmitTransactionV2Request_Type_Type_ARRAYSIZE = SubmitTransactionV2Request_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubmitTransactionV2Request_Type_descriptor();
template<typename T>
inline const std::string& SubmitTransactionV2Request_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubmitTransactionV2Request_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubmitTransactionV2Request_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubmitTransactionV2Request_Type_descriptor(), enum_t_value);
}
inline bool SubmitTransactionV2Request_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubmitTransactionV2Request_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubmitTransactionV2Request_Type>(
    SubmitTransactionV2Request_Type_descriptor(), name, value);
}
// ===================================================================

class PropagateChainEventRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PropagateChainEventRequest) */ {
 public:
  inline PropagateChainEventRequest() : PropagateChainEventRequest(nullptr) {}
  virtual ~PropagateChainEventRequest();

  PropagateChainEventRequest(const PropagateChainEventRequest& from);
  PropagateChainEventRequest(PropagateChainEventRequest&& from) noexcept
    : PropagateChainEventRequest() {
    *this = ::std::move(from);
  }

  inline PropagateChainEventRequest& operator=(const PropagateChainEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropagateChainEventRequest& operator=(PropagateChainEventRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropagateChainEventRequest& default_instance();

  static inline const PropagateChainEventRequest* internal_default_instance() {
    return reinterpret_cast<const PropagateChainEventRequest*>(
               &_PropagateChainEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PropagateChainEventRequest& a, PropagateChainEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PropagateChainEventRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropagateChainEventRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropagateChainEventRequest* New() const final {
    return CreateMaybeMessage<PropagateChainEventRequest>(nullptr);
  }

  PropagateChainEventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropagateChainEventRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropagateChainEventRequest& from);
  void MergeFrom(const PropagateChainEventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropagateChainEventRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PropagateChainEventRequest";
  }
  protected:
  explicit PropagateChainEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
    kPubKeyFieldNumber = 2,
    kSignatureFieldNumber = 3,
  };
  // bytes event = 1 [json_name = "event"];
  void clear_event();
  const std::string& event() const;
  void set_event(const std::string& value);
  void set_event(std::string&& value);
  void set_event(const char* value);
  void set_event(const void* value, size_t size);
  std::string* mutable_event();
  std::string* release_event();
  void set_allocated_event(std::string* event);
  private:
  const std::string& _internal_event() const;
  void _internal_set_event(const std::string& value);
  std::string* _internal_mutable_event();
  public:

  // string pub_key = 2 [json_name = "pubKey"];
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // bytes signature = 3 [json_name = "signature"];
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PropagateChainEventRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PropagateChainEventResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PropagateChainEventResponse) */ {
 public:
  inline PropagateChainEventResponse() : PropagateChainEventResponse(nullptr) {}
  virtual ~PropagateChainEventResponse();

  PropagateChainEventResponse(const PropagateChainEventResponse& from);
  PropagateChainEventResponse(PropagateChainEventResponse&& from) noexcept
    : PropagateChainEventResponse() {
    *this = ::std::move(from);
  }

  inline PropagateChainEventResponse& operator=(const PropagateChainEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropagateChainEventResponse& operator=(PropagateChainEventResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropagateChainEventResponse& default_instance();

  static inline const PropagateChainEventResponse* internal_default_instance() {
    return reinterpret_cast<const PropagateChainEventResponse*>(
               &_PropagateChainEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PropagateChainEventResponse& a, PropagateChainEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PropagateChainEventResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropagateChainEventResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropagateChainEventResponse* New() const final {
    return CreateMaybeMessage<PropagateChainEventResponse>(nullptr);
  }

  PropagateChainEventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropagateChainEventResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropagateChainEventResponse& from);
  void MergeFrom(const PropagateChainEventResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropagateChainEventResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PropagateChainEventResponse";
  }
  protected:
  explicit PropagateChainEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PropagateChainEventResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionV2Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.SubmitTransactionV2Request) */ {
 public:
  inline SubmitTransactionV2Request() : SubmitTransactionV2Request(nullptr) {}
  virtual ~SubmitTransactionV2Request();

  SubmitTransactionV2Request(const SubmitTransactionV2Request& from);
  SubmitTransactionV2Request(SubmitTransactionV2Request&& from) noexcept
    : SubmitTransactionV2Request() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionV2Request& operator=(const SubmitTransactionV2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionV2Request& operator=(SubmitTransactionV2Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionV2Request& default_instance();

  static inline const SubmitTransactionV2Request* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionV2Request*>(
               &_SubmitTransactionV2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubmitTransactionV2Request& a, SubmitTransactionV2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionV2Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionV2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionV2Request* New() const final {
    return CreateMaybeMessage<SubmitTransactionV2Request>(nullptr);
  }

  SubmitTransactionV2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionV2Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionV2Request& from);
  void MergeFrom(const SubmitTransactionV2Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionV2Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.SubmitTransactionV2Request";
  }
  protected:
  explicit SubmitTransactionV2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubmitTransactionV2Request_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    SubmitTransactionV2Request_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_ASYNC =
    SubmitTransactionV2Request_Type_TYPE_ASYNC;
  static constexpr Type TYPE_SYNC =
    SubmitTransactionV2Request_Type_TYPE_SYNC;
  static constexpr Type TYPE_COMMIT =
    SubmitTransactionV2Request_Type_TYPE_COMMIT;
  static inline bool Type_IsValid(int value) {
    return SubmitTransactionV2Request_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SubmitTransactionV2Request_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SubmitTransactionV2Request_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SubmitTransactionV2Request_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SubmitTransactionV2Request_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SubmitTransactionV2Request_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SubmitTransactionV2Request_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .vega.commands.v1.Transaction tx = 1 [json_name = "tx"];
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  const ::vega::commands::v1::Transaction& tx() const;
  ::vega::commands::v1::Transaction* release_tx();
  ::vega::commands::v1::Transaction* mutable_tx();
  void set_allocated_tx(::vega::commands::v1::Transaction* tx);
  private:
  const ::vega::commands::v1::Transaction& _internal_tx() const;
  ::vega::commands::v1::Transaction* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::vega::commands::v1::Transaction* tx);
  ::vega::commands::v1::Transaction* unsafe_arena_release_tx();

  // .api.v1.SubmitTransactionV2Request.Type type = 2 [json_name = "type"];
  void clear_type();
  ::api::v1::SubmitTransactionV2Request_Type type() const;
  void set_type(::api::v1::SubmitTransactionV2Request_Type value);
  private:
  ::api::v1::SubmitTransactionV2Request_Type _internal_type() const;
  void _internal_set_type(::api::v1::SubmitTransactionV2Request_Type value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.SubmitTransactionV2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::commands::v1::Transaction* tx_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionV2Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.SubmitTransactionV2Response) */ {
 public:
  inline SubmitTransactionV2Response() : SubmitTransactionV2Response(nullptr) {}
  virtual ~SubmitTransactionV2Response();

  SubmitTransactionV2Response(const SubmitTransactionV2Response& from);
  SubmitTransactionV2Response(SubmitTransactionV2Response&& from) noexcept
    : SubmitTransactionV2Response() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionV2Response& operator=(const SubmitTransactionV2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionV2Response& operator=(SubmitTransactionV2Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionV2Response& default_instance();

  static inline const SubmitTransactionV2Response* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionV2Response*>(
               &_SubmitTransactionV2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubmitTransactionV2Response& a, SubmitTransactionV2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionV2Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionV2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionV2Response* New() const final {
    return CreateMaybeMessage<SubmitTransactionV2Response>(nullptr);
  }

  SubmitTransactionV2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionV2Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionV2Response& from);
  void MergeFrom(const SubmitTransactionV2Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionV2Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.SubmitTransactionV2Response";
  }
  protected:
  explicit SubmitTransactionV2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.SubmitTransactionV2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetVegaTimeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetVegaTimeRequest) */ {
 public:
  inline GetVegaTimeRequest() : GetVegaTimeRequest(nullptr) {}
  virtual ~GetVegaTimeRequest();

  GetVegaTimeRequest(const GetVegaTimeRequest& from);
  GetVegaTimeRequest(GetVegaTimeRequest&& from) noexcept
    : GetVegaTimeRequest() {
    *this = ::std::move(from);
  }

  inline GetVegaTimeRequest& operator=(const GetVegaTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVegaTimeRequest& operator=(GetVegaTimeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVegaTimeRequest& default_instance();

  static inline const GetVegaTimeRequest* internal_default_instance() {
    return reinterpret_cast<const GetVegaTimeRequest*>(
               &_GetVegaTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetVegaTimeRequest& a, GetVegaTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVegaTimeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVegaTimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVegaTimeRequest* New() const final {
    return CreateMaybeMessage<GetVegaTimeRequest>(nullptr);
  }

  GetVegaTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVegaTimeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVegaTimeRequest& from);
  void MergeFrom(const GetVegaTimeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVegaTimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetVegaTimeRequest";
  }
  protected:
  explicit GetVegaTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.GetVegaTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetVegaTimeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetVegaTimeResponse) */ {
 public:
  inline GetVegaTimeResponse() : GetVegaTimeResponse(nullptr) {}
  virtual ~GetVegaTimeResponse();

  GetVegaTimeResponse(const GetVegaTimeResponse& from);
  GetVegaTimeResponse(GetVegaTimeResponse&& from) noexcept
    : GetVegaTimeResponse() {
    *this = ::std::move(from);
  }

  inline GetVegaTimeResponse& operator=(const GetVegaTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVegaTimeResponse& operator=(GetVegaTimeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVegaTimeResponse& default_instance();

  static inline const GetVegaTimeResponse* internal_default_instance() {
    return reinterpret_cast<const GetVegaTimeResponse*>(
               &_GetVegaTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetVegaTimeResponse& a, GetVegaTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVegaTimeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVegaTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVegaTimeResponse* New() const final {
    return CreateMaybeMessage<GetVegaTimeResponse>(nullptr);
  }

  GetVegaTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVegaTimeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVegaTimeResponse& from);
  void MergeFrom(const GetVegaTimeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVegaTimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetVegaTimeResponse";
  }
  protected:
  explicit GetVegaTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.GetVegaTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveEventBusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObserveEventBusRequest) */ {
 public:
  inline ObserveEventBusRequest() : ObserveEventBusRequest(nullptr) {}
  virtual ~ObserveEventBusRequest();

  ObserveEventBusRequest(const ObserveEventBusRequest& from);
  ObserveEventBusRequest(ObserveEventBusRequest&& from) noexcept
    : ObserveEventBusRequest() {
    *this = ::std::move(from);
  }

  inline ObserveEventBusRequest& operator=(const ObserveEventBusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveEventBusRequest& operator=(ObserveEventBusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveEventBusRequest& default_instance();

  static inline const ObserveEventBusRequest* internal_default_instance() {
    return reinterpret_cast<const ObserveEventBusRequest*>(
               &_ObserveEventBusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ObserveEventBusRequest& a, ObserveEventBusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveEventBusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveEventBusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveEventBusRequest* New() const final {
    return CreateMaybeMessage<ObserveEventBusRequest>(nullptr);
  }

  ObserveEventBusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveEventBusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveEventBusRequest& from);
  void MergeFrom(const ObserveEventBusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveEventBusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObserveEventBusRequest";
  }
  protected:
  explicit ObserveEventBusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kPartyIdFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
  };
  // repeated .vega.events.v1.BusEventType type = 1 [json_name = "type"];
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::vega::events::v1::BusEventType _internal_type(int index) const;
  void _internal_add_type(::vega::events::v1::BusEventType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_type();
  public:
  ::vega::events::v1::BusEventType type(int index) const;
  void set_type(int index, ::vega::events::v1::BusEventType value);
  void add_type(::vega::events::v1::BusEventType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string party_id = 3 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // int64 batch_size = 4 [json_name = "batchSize"];
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int64 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.ObserveEventBusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
  mutable std::atomic<int> _type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 batch_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveEventBusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObserveEventBusResponse) */ {
 public:
  inline ObserveEventBusResponse() : ObserveEventBusResponse(nullptr) {}
  virtual ~ObserveEventBusResponse();

  ObserveEventBusResponse(const ObserveEventBusResponse& from);
  ObserveEventBusResponse(ObserveEventBusResponse&& from) noexcept
    : ObserveEventBusResponse() {
    *this = ::std::move(from);
  }

  inline ObserveEventBusResponse& operator=(const ObserveEventBusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveEventBusResponse& operator=(ObserveEventBusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveEventBusResponse& default_instance();

  static inline const ObserveEventBusResponse* internal_default_instance() {
    return reinterpret_cast<const ObserveEventBusResponse*>(
               &_ObserveEventBusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ObserveEventBusResponse& a, ObserveEventBusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveEventBusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveEventBusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveEventBusResponse* New() const final {
    return CreateMaybeMessage<ObserveEventBusResponse>(nullptr);
  }

  ObserveEventBusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveEventBusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveEventBusResponse& from);
  void MergeFrom(const ObserveEventBusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveEventBusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObserveEventBusResponse";
  }
  protected:
  explicit ObserveEventBusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .vega.events.v1.BusEvent events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::vega::events::v1::BusEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::BusEvent >*
      mutable_events();
  private:
  const ::vega::events::v1::BusEvent& _internal_events(int index) const;
  ::vega::events::v1::BusEvent* _internal_add_events();
  public:
  const ::vega::events::v1::BusEvent& events(int index) const;
  ::vega::events::v1::BusEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::BusEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:api.v1.ObserveEventBusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::BusEvent > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class StatisticsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.StatisticsRequest) */ {
 public:
  inline StatisticsRequest() : StatisticsRequest(nullptr) {}
  virtual ~StatisticsRequest();

  StatisticsRequest(const StatisticsRequest& from);
  StatisticsRequest(StatisticsRequest&& from) noexcept
    : StatisticsRequest() {
    *this = ::std::move(from);
  }

  inline StatisticsRequest& operator=(const StatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsRequest& operator=(StatisticsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatisticsRequest& default_instance();

  static inline const StatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const StatisticsRequest*>(
               &_StatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StatisticsRequest& a, StatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatisticsRequest* New() const final {
    return CreateMaybeMessage<StatisticsRequest>(nullptr);
  }

  StatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatisticsRequest& from);
  void MergeFrom(const StatisticsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.StatisticsRequest";
  }
  protected:
  explicit StatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.StatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class StatisticsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.StatisticsResponse) */ {
 public:
  inline StatisticsResponse() : StatisticsResponse(nullptr) {}
  virtual ~StatisticsResponse();

  StatisticsResponse(const StatisticsResponse& from);
  StatisticsResponse(StatisticsResponse&& from) noexcept
    : StatisticsResponse() {
    *this = ::std::move(from);
  }

  inline StatisticsResponse& operator=(const StatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsResponse& operator=(StatisticsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatisticsResponse& default_instance();

  static inline const StatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const StatisticsResponse*>(
               &_StatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StatisticsResponse& a, StatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatisticsResponse* New() const final {
    return CreateMaybeMessage<StatisticsResponse>(nullptr);
  }

  StatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatisticsResponse& from);
  void MergeFrom(const StatisticsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.StatisticsResponse";
  }
  protected:
  explicit StatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatisticsFieldNumber = 1,
  };
  // .api.v1.Statistics statistics = 1 [json_name = "statistics"];
  bool has_statistics() const;
  private:
  bool _internal_has_statistics() const;
  public:
  void clear_statistics();
  const ::api::v1::Statistics& statistics() const;
  ::api::v1::Statistics* release_statistics();
  ::api::v1::Statistics* mutable_statistics();
  void set_allocated_statistics(::api::v1::Statistics* statistics);
  private:
  const ::api::v1::Statistics& _internal_statistics() const;
  ::api::v1::Statistics* _internal_mutable_statistics();
  public:
  void unsafe_arena_set_allocated_statistics(
      ::api::v1::Statistics* statistics);
  ::api::v1::Statistics* unsafe_arena_release_statistics();

  // @@protoc_insertion_point(class_scope:api.v1.StatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::v1::Statistics* statistics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class Statistics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.Statistics) */ {
 public:
  inline Statistics() : Statistics(nullptr) {}
  virtual ~Statistics();

  Statistics(const Statistics& from);
  Statistics(Statistics&& from) noexcept
    : Statistics() {
    *this = ::std::move(from);
  }

  inline Statistics& operator=(const Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistics& operator=(Statistics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Statistics& default_instance();

  static inline const Statistics* internal_default_instance() {
    return reinterpret_cast<const Statistics*>(
               &_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Statistics& a, Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Statistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Statistics* New() const final {
    return CreateMaybeMessage<Statistics>(nullptr);
  }

  Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Statistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Statistics& from);
  void MergeFrom(const Statistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.Statistics";
  }
  protected:
  explicit Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenesisTimeFieldNumber = 4,
    kCurrentTimeFieldNumber = 5,
    kVegaTimeFieldNumber = 6,
    kAppVersionHashFieldNumber = 28,
    kAppVersionFieldNumber = 29,
    kChainVersionFieldNumber = 30,
    kUptimeFieldNumber = 32,
    kChainIdFieldNumber = 33,
    kBlockHeightFieldNumber = 1,
    kBacklogLengthFieldNumber = 2,
    kTotalPeersFieldNumber = 3,
    kTxPerBlockFieldNumber = 8,
    kAverageTxBytesFieldNumber = 9,
    kAverageOrdersPerBlockFieldNumber = 10,
    kTradesPerSecondFieldNumber = 11,
    kOrdersPerSecondFieldNumber = 12,
    kTotalMarketsFieldNumber = 13,
    kStatusFieldNumber = 7,
    kOrderSubscriptionsFieldNumber = 21,
    kTotalAmendOrderFieldNumber = 16,
    kTotalCancelOrderFieldNumber = 17,
    kTotalCreateOrderFieldNumber = 18,
    kTotalOrdersFieldNumber = 19,
    kTotalTradesFieldNumber = 20,
    kTradeSubscriptionsFieldNumber = 22,
    kCandleSubscriptionsFieldNumber = 23,
    kMarketDepthSubscriptionsFieldNumber = 24,
    kPositionsSubscriptionsFieldNumber = 25,
    kAccountSubscriptionsFieldNumber = 26,
    kMarketDataSubscriptionsFieldNumber = 27,
    kBlockDurationFieldNumber = 31,
    kMarketDepthUpdatesSubscriptionsFieldNumber = 34,
  };
  // string genesis_time = 4 [json_name = "genesisTime"];
  void clear_genesis_time();
  const std::string& genesis_time() const;
  void set_genesis_time(const std::string& value);
  void set_genesis_time(std::string&& value);
  void set_genesis_time(const char* value);
  void set_genesis_time(const char* value, size_t size);
  std::string* mutable_genesis_time();
  std::string* release_genesis_time();
  void set_allocated_genesis_time(std::string* genesis_time);
  private:
  const std::string& _internal_genesis_time() const;
  void _internal_set_genesis_time(const std::string& value);
  std::string* _internal_mutable_genesis_time();
  public:

  // string current_time = 5 [json_name = "currentTime"];
  void clear_current_time();
  const std::string& current_time() const;
  void set_current_time(const std::string& value);
  void set_current_time(std::string&& value);
  void set_current_time(const char* value);
  void set_current_time(const char* value, size_t size);
  std::string* mutable_current_time();
  std::string* release_current_time();
  void set_allocated_current_time(std::string* current_time);
  private:
  const std::string& _internal_current_time() const;
  void _internal_set_current_time(const std::string& value);
  std::string* _internal_mutable_current_time();
  public:

  // string vega_time = 6 [json_name = "vegaTime"];
  void clear_vega_time();
  const std::string& vega_time() const;
  void set_vega_time(const std::string& value);
  void set_vega_time(std::string&& value);
  void set_vega_time(const char* value);
  void set_vega_time(const char* value, size_t size);
  std::string* mutable_vega_time();
  std::string* release_vega_time();
  void set_allocated_vega_time(std::string* vega_time);
  private:
  const std::string& _internal_vega_time() const;
  void _internal_set_vega_time(const std::string& value);
  std::string* _internal_mutable_vega_time();
  public:

  // string app_version_hash = 28 [json_name = "appVersionHash"];
  void clear_app_version_hash();
  const std::string& app_version_hash() const;
  void set_app_version_hash(const std::string& value);
  void set_app_version_hash(std::string&& value);
  void set_app_version_hash(const char* value);
  void set_app_version_hash(const char* value, size_t size);
  std::string* mutable_app_version_hash();
  std::string* release_app_version_hash();
  void set_allocated_app_version_hash(std::string* app_version_hash);
  private:
  const std::string& _internal_app_version_hash() const;
  void _internal_set_app_version_hash(const std::string& value);
  std::string* _internal_mutable_app_version_hash();
  public:

  // string app_version = 29 [json_name = "appVersion"];
  void clear_app_version();
  const std::string& app_version() const;
  void set_app_version(const std::string& value);
  void set_app_version(std::string&& value);
  void set_app_version(const char* value);
  void set_app_version(const char* value, size_t size);
  std::string* mutable_app_version();
  std::string* release_app_version();
  void set_allocated_app_version(std::string* app_version);
  private:
  const std::string& _internal_app_version() const;
  void _internal_set_app_version(const std::string& value);
  std::string* _internal_mutable_app_version();
  public:

  // string chain_version = 30 [json_name = "chainVersion"];
  void clear_chain_version();
  const std::string& chain_version() const;
  void set_chain_version(const std::string& value);
  void set_chain_version(std::string&& value);
  void set_chain_version(const char* value);
  void set_chain_version(const char* value, size_t size);
  std::string* mutable_chain_version();
  std::string* release_chain_version();
  void set_allocated_chain_version(std::string* chain_version);
  private:
  const std::string& _internal_chain_version() const;
  void _internal_set_chain_version(const std::string& value);
  std::string* _internal_mutable_chain_version();
  public:

  // string uptime = 32 [json_name = "uptime"];
  void clear_uptime();
  const std::string& uptime() const;
  void set_uptime(const std::string& value);
  void set_uptime(std::string&& value);
  void set_uptime(const char* value);
  void set_uptime(const char* value, size_t size);
  std::string* mutable_uptime();
  std::string* release_uptime();
  void set_allocated_uptime(std::string* uptime);
  private:
  const std::string& _internal_uptime() const;
  void _internal_set_uptime(const std::string& value);
  std::string* _internal_mutable_uptime();
  public:

  // string chain_id = 33 [json_name = "chainId"];
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // uint64 block_height = 1 [json_name = "blockHeight"];
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 backlog_length = 2 [json_name = "backlogLength"];
  void clear_backlog_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 backlog_length() const;
  void set_backlog_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_backlog_length() const;
  void _internal_set_backlog_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_peers = 3 [json_name = "totalPeers"];
  void clear_total_peers();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_peers() const;
  void set_total_peers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_peers() const;
  void _internal_set_total_peers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tx_per_block = 8 [json_name = "txPerBlock"];
  void clear_tx_per_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_per_block() const;
  void set_tx_per_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_per_block() const;
  void _internal_set_tx_per_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 average_tx_bytes = 9 [json_name = "averageTxBytes"];
  void clear_average_tx_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 average_tx_bytes() const;
  void set_average_tx_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_average_tx_bytes() const;
  void _internal_set_average_tx_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 average_orders_per_block = 10 [json_name = "averageOrdersPerBlock"];
  void clear_average_orders_per_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 average_orders_per_block() const;
  void set_average_orders_per_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_average_orders_per_block() const;
  void _internal_set_average_orders_per_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 trades_per_second = 11 [json_name = "tradesPerSecond"];
  void clear_trades_per_second();
  ::PROTOBUF_NAMESPACE_ID::uint64 trades_per_second() const;
  void set_trades_per_second(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trades_per_second() const;
  void _internal_set_trades_per_second(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 orders_per_second = 12 [json_name = "ordersPerSecond"];
  void clear_orders_per_second();
  ::PROTOBUF_NAMESPACE_ID::uint64 orders_per_second() const;
  void set_orders_per_second(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_orders_per_second() const;
  void _internal_set_orders_per_second(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_markets = 13 [json_name = "totalMarkets"];
  void clear_total_markets();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_markets() const;
  void set_total_markets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_markets() const;
  void _internal_set_total_markets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.ChainStatus status = 7 [json_name = "status"];
  void clear_status();
  ::vega::ChainStatus status() const;
  void set_status(::vega::ChainStatus value);
  private:
  ::vega::ChainStatus _internal_status() const;
  void _internal_set_status(::vega::ChainStatus value);
  public:

  // uint32 order_subscriptions = 21 [json_name = "orderSubscriptions"];
  void clear_order_subscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 order_subscriptions() const;
  void set_order_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order_subscriptions() const;
  void _internal_set_order_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 total_amend_order = 16 [json_name = "totalAmendOrder"];
  void clear_total_amend_order();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_amend_order() const;
  void set_total_amend_order(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_amend_order() const;
  void _internal_set_total_amend_order(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_cancel_order = 17 [json_name = "totalCancelOrder"];
  void clear_total_cancel_order();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_cancel_order() const;
  void set_total_cancel_order(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_cancel_order() const;
  void _internal_set_total_cancel_order(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_create_order = 18 [json_name = "totalCreateOrder"];
  void clear_total_create_order();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_create_order() const;
  void set_total_create_order(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_create_order() const;
  void _internal_set_total_create_order(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_orders = 19 [json_name = "totalOrders"];
  void clear_total_orders();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_orders() const;
  void set_total_orders(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_orders() const;
  void _internal_set_total_orders(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_trades = 20 [json_name = "totalTrades"];
  void clear_total_trades();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_trades() const;
  void set_total_trades(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_trades() const;
  void _internal_set_total_trades(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 trade_subscriptions = 22 [json_name = "tradeSubscriptions"];
  void clear_trade_subscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 trade_subscriptions() const;
  void set_trade_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trade_subscriptions() const;
  void _internal_set_trade_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 candle_subscriptions = 23 [json_name = "candleSubscriptions"];
  void clear_candle_subscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 candle_subscriptions() const;
  void set_candle_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_candle_subscriptions() const;
  void _internal_set_candle_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 market_depth_subscriptions = 24 [json_name = "marketDepthSubscriptions"];
  void clear_market_depth_subscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 market_depth_subscriptions() const;
  void set_market_depth_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_market_depth_subscriptions() const;
  void _internal_set_market_depth_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 positions_subscriptions = 25 [json_name = "positionsSubscriptions"];
  void clear_positions_subscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 positions_subscriptions() const;
  void set_positions_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_positions_subscriptions() const;
  void _internal_set_positions_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 account_subscriptions = 26 [json_name = "accountSubscriptions"];
  void clear_account_subscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_subscriptions() const;
  void set_account_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_subscriptions() const;
  void _internal_set_account_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 market_data_subscriptions = 27 [json_name = "marketDataSubscriptions"];
  void clear_market_data_subscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 market_data_subscriptions() const;
  void set_market_data_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_market_data_subscriptions() const;
  void _internal_set_market_data_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 block_duration = 31 [json_name = "blockDuration"];
  void clear_block_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_duration() const;
  void set_block_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_duration() const;
  void _internal_set_block_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 market_depth_updates_subscriptions = 34 [json_name = "marketDepthUpdatesSubscriptions"];
  void clear_market_depth_updates_subscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 market_depth_updates_subscriptions() const;
  void set_market_depth_updates_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_market_depth_updates_subscriptions() const;
  void _internal_set_market_depth_updates_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genesis_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_version_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uptime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 backlog_length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_peers_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_per_block_;
  ::PROTOBUF_NAMESPACE_ID::uint64 average_tx_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 average_orders_per_block_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trades_per_second_;
  ::PROTOBUF_NAMESPACE_ID::uint64 orders_per_second_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_markets_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_amend_order_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_cancel_order_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_create_order_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_orders_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_trades_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trade_subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 candle_subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 market_depth_subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 positions_subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 market_data_subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 market_depth_updates_subscriptions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LastBlockHeightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.LastBlockHeightRequest) */ {
 public:
  inline LastBlockHeightRequest() : LastBlockHeightRequest(nullptr) {}
  virtual ~LastBlockHeightRequest();

  LastBlockHeightRequest(const LastBlockHeightRequest& from);
  LastBlockHeightRequest(LastBlockHeightRequest&& from) noexcept
    : LastBlockHeightRequest() {
    *this = ::std::move(from);
  }

  inline LastBlockHeightRequest& operator=(const LastBlockHeightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastBlockHeightRequest& operator=(LastBlockHeightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastBlockHeightRequest& default_instance();

  static inline const LastBlockHeightRequest* internal_default_instance() {
    return reinterpret_cast<const LastBlockHeightRequest*>(
               &_LastBlockHeightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LastBlockHeightRequest& a, LastBlockHeightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LastBlockHeightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastBlockHeightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastBlockHeightRequest* New() const final {
    return CreateMaybeMessage<LastBlockHeightRequest>(nullptr);
  }

  LastBlockHeightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastBlockHeightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastBlockHeightRequest& from);
  void MergeFrom(const LastBlockHeightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastBlockHeightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.LastBlockHeightRequest";
  }
  protected:
  explicit LastBlockHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.LastBlockHeightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LastBlockHeightResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.LastBlockHeightResponse) */ {
 public:
  inline LastBlockHeightResponse() : LastBlockHeightResponse(nullptr) {}
  virtual ~LastBlockHeightResponse();

  LastBlockHeightResponse(const LastBlockHeightResponse& from);
  LastBlockHeightResponse(LastBlockHeightResponse&& from) noexcept
    : LastBlockHeightResponse() {
    *this = ::std::move(from);
  }

  inline LastBlockHeightResponse& operator=(const LastBlockHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastBlockHeightResponse& operator=(LastBlockHeightResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastBlockHeightResponse& default_instance();

  static inline const LastBlockHeightResponse* internal_default_instance() {
    return reinterpret_cast<const LastBlockHeightResponse*>(
               &_LastBlockHeightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LastBlockHeightResponse& a, LastBlockHeightResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LastBlockHeightResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastBlockHeightResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastBlockHeightResponse* New() const final {
    return CreateMaybeMessage<LastBlockHeightResponse>(nullptr);
  }

  LastBlockHeightResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastBlockHeightResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastBlockHeightResponse& from);
  void MergeFrom(const LastBlockHeightResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastBlockHeightResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.LastBlockHeightResponse";
  }
  protected:
  explicit LastBlockHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // uint64 height = 1 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.LastBlockHeightResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PropagateChainEventRequest

// bytes event = 1 [json_name = "event"];
inline void PropagateChainEventRequest::clear_event() {
  event_.ClearToEmpty();
}
inline const std::string& PropagateChainEventRequest::event() const {
  // @@protoc_insertion_point(field_get:api.v1.PropagateChainEventRequest.event)
  return _internal_event();
}
inline void PropagateChainEventRequest::set_event(const std::string& value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:api.v1.PropagateChainEventRequest.event)
}
inline std::string* PropagateChainEventRequest::mutable_event() {
  // @@protoc_insertion_point(field_mutable:api.v1.PropagateChainEventRequest.event)
  return _internal_mutable_event();
}
inline const std::string& PropagateChainEventRequest::_internal_event() const {
  return event_.Get();
}
inline void PropagateChainEventRequest::_internal_set_event(const std::string& value) {

  event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PropagateChainEventRequest::set_event(std::string&& value) {

  event_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PropagateChainEventRequest.event)
}
inline void PropagateChainEventRequest::set_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PropagateChainEventRequest.event)
}
inline void PropagateChainEventRequest::set_event(const void* value,
    size_t size) {

  event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PropagateChainEventRequest.event)
}
inline std::string* PropagateChainEventRequest::_internal_mutable_event() {

  return event_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PropagateChainEventRequest::release_event() {
  // @@protoc_insertion_point(field_release:api.v1.PropagateChainEventRequest.event)
  return event_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PropagateChainEventRequest::set_allocated_event(std::string* event) {
  if (event != nullptr) {

  } else {

  }
  event_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PropagateChainEventRequest.event)
}

// string pub_key = 2 [json_name = "pubKey"];
inline void PropagateChainEventRequest::clear_pub_key() {
  pub_key_.ClearToEmpty();
}
inline const std::string& PropagateChainEventRequest::pub_key() const {
  // @@protoc_insertion_point(field_get:api.v1.PropagateChainEventRequest.pub_key)
  return _internal_pub_key();
}
inline void PropagateChainEventRequest::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:api.v1.PropagateChainEventRequest.pub_key)
}
inline std::string* PropagateChainEventRequest::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:api.v1.PropagateChainEventRequest.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& PropagateChainEventRequest::_internal_pub_key() const {
  return pub_key_.Get();
}
inline void PropagateChainEventRequest::_internal_set_pub_key(const std::string& value) {

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PropagateChainEventRequest::set_pub_key(std::string&& value) {

  pub_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PropagateChainEventRequest.pub_key)
}
inline void PropagateChainEventRequest::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PropagateChainEventRequest.pub_key)
}
inline void PropagateChainEventRequest::set_pub_key(const char* value,
    size_t size) {

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PropagateChainEventRequest.pub_key)
}
inline std::string* PropagateChainEventRequest::_internal_mutable_pub_key() {

  return pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PropagateChainEventRequest::release_pub_key() {
  // @@protoc_insertion_point(field_release:api.v1.PropagateChainEventRequest.pub_key)
  return pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PropagateChainEventRequest::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {

  } else {

  }
  pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PropagateChainEventRequest.pub_key)
}

// bytes signature = 3 [json_name = "signature"];
inline void PropagateChainEventRequest::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& PropagateChainEventRequest::signature() const {
  // @@protoc_insertion_point(field_get:api.v1.PropagateChainEventRequest.signature)
  return _internal_signature();
}
inline void PropagateChainEventRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:api.v1.PropagateChainEventRequest.signature)
}
inline std::string* PropagateChainEventRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:api.v1.PropagateChainEventRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& PropagateChainEventRequest::_internal_signature() const {
  return signature_.Get();
}
inline void PropagateChainEventRequest::_internal_set_signature(const std::string& value) {

  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PropagateChainEventRequest::set_signature(std::string&& value) {

  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PropagateChainEventRequest.signature)
}
inline void PropagateChainEventRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PropagateChainEventRequest.signature)
}
inline void PropagateChainEventRequest::set_signature(const void* value,
    size_t size) {

  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PropagateChainEventRequest.signature)
}
inline std::string* PropagateChainEventRequest::_internal_mutable_signature() {

  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PropagateChainEventRequest::release_signature() {
  // @@protoc_insertion_point(field_release:api.v1.PropagateChainEventRequest.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PropagateChainEventRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {

  } else {

  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PropagateChainEventRequest.signature)
}

// -------------------------------------------------------------------

// PropagateChainEventResponse

// bool success = 1 [json_name = "success"];
inline void PropagateChainEventResponse::clear_success() {
  success_ = false;
}
inline bool PropagateChainEventResponse::_internal_success() const {
  return success_;
}
inline bool PropagateChainEventResponse::success() const {
  // @@protoc_insertion_point(field_get:api.v1.PropagateChainEventResponse.success)
  return _internal_success();
}
inline void PropagateChainEventResponse::_internal_set_success(bool value) {

  success_ = value;
}
inline void PropagateChainEventResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:api.v1.PropagateChainEventResponse.success)
}

// -------------------------------------------------------------------

// SubmitTransactionV2Request

// .vega.commands.v1.Transaction tx = 1 [json_name = "tx"];
inline bool SubmitTransactionV2Request::_internal_has_tx() const {
  return this != internal_default_instance() && tx_ != nullptr;
}
inline bool SubmitTransactionV2Request::has_tx() const {
  return _internal_has_tx();
}
inline const ::vega::commands::v1::Transaction& SubmitTransactionV2Request::_internal_tx() const {
  const ::vega::commands::v1::Transaction* p = tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::Transaction&>(
      ::vega::commands::v1::_Transaction_default_instance_);
}
inline const ::vega::commands::v1::Transaction& SubmitTransactionV2Request::tx() const {
  // @@protoc_insertion_point(field_get:api.v1.SubmitTransactionV2Request.tx)
  return _internal_tx();
}
inline void SubmitTransactionV2Request::unsafe_arena_set_allocated_tx(
    ::vega::commands::v1::Transaction* tx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_);
  }
  tx_ = tx;
  if (tx) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.SubmitTransactionV2Request.tx)
}
inline ::vega::commands::v1::Transaction* SubmitTransactionV2Request::release_tx() {

  ::vega::commands::v1::Transaction* temp = tx_;
  tx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::Transaction* SubmitTransactionV2Request::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:api.v1.SubmitTransactionV2Request.tx)

  ::vega::commands::v1::Transaction* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::Transaction* SubmitTransactionV2Request::_internal_mutable_tx() {

  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::Transaction>(GetArena());
    tx_ = p;
  }
  return tx_;
}
inline ::vega::commands::v1::Transaction* SubmitTransactionV2Request::mutable_tx() {
  // @@protoc_insertion_point(field_mutable:api.v1.SubmitTransactionV2Request.tx)
  return _internal_mutable_tx();
}
inline void SubmitTransactionV2Request::set_allocated_tx(::vega::commands::v1::Transaction* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_);
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx)->GetArena();
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }

  } else {

  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:api.v1.SubmitTransactionV2Request.tx)
}

// .api.v1.SubmitTransactionV2Request.Type type = 2 [json_name = "type"];
inline void SubmitTransactionV2Request::clear_type() {
  type_ = 0;
}
inline ::api::v1::SubmitTransactionV2Request_Type SubmitTransactionV2Request::_internal_type() const {
  return static_cast< ::api::v1::SubmitTransactionV2Request_Type >(type_);
}
inline ::api::v1::SubmitTransactionV2Request_Type SubmitTransactionV2Request::type() const {
  // @@protoc_insertion_point(field_get:api.v1.SubmitTransactionV2Request.type)
  return _internal_type();
}
inline void SubmitTransactionV2Request::_internal_set_type(::api::v1::SubmitTransactionV2Request_Type value) {

  type_ = value;
}
inline void SubmitTransactionV2Request::set_type(::api::v1::SubmitTransactionV2Request_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:api.v1.SubmitTransactionV2Request.type)
}

// -------------------------------------------------------------------

// SubmitTransactionV2Response

// bool success = 1 [json_name = "success"];
inline void SubmitTransactionV2Response::clear_success() {
  success_ = false;
}
inline bool SubmitTransactionV2Response::_internal_success() const {
  return success_;
}
inline bool SubmitTransactionV2Response::success() const {
  // @@protoc_insertion_point(field_get:api.v1.SubmitTransactionV2Response.success)
  return _internal_success();
}
inline void SubmitTransactionV2Response::_internal_set_success(bool value) {

  success_ = value;
}
inline void SubmitTransactionV2Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:api.v1.SubmitTransactionV2Response.success)
}

// -------------------------------------------------------------------

// GetVegaTimeRequest

// -------------------------------------------------------------------

// GetVegaTimeResponse

// int64 timestamp = 1 [json_name = "timestamp"];
inline void GetVegaTimeResponse::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetVegaTimeResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetVegaTimeResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:api.v1.GetVegaTimeResponse.timestamp)
  return _internal_timestamp();
}
inline void GetVegaTimeResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void GetVegaTimeResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:api.v1.GetVegaTimeResponse.timestamp)
}

// -------------------------------------------------------------------

// ObserveEventBusRequest

// repeated .vega.events.v1.BusEventType type = 1 [json_name = "type"];
inline int ObserveEventBusRequest::_internal_type_size() const {
  return type_.size();
}
inline int ObserveEventBusRequest::type_size() const {
  return _internal_type_size();
}
inline void ObserveEventBusRequest::clear_type() {
  type_.Clear();
}
inline ::vega::events::v1::BusEventType ObserveEventBusRequest::_internal_type(int index) const {
  return static_cast< ::vega::events::v1::BusEventType >(type_.Get(index));
}
inline ::vega::events::v1::BusEventType ObserveEventBusRequest::type(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveEventBusRequest.type)
  return _internal_type(index);
}
inline void ObserveEventBusRequest::set_type(int index, ::vega::events::v1::BusEventType value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.v1.ObserveEventBusRequest.type)
}
inline void ObserveEventBusRequest::_internal_add_type(::vega::events::v1::BusEventType value) {
  type_.Add(value);
}
inline void ObserveEventBusRequest::add_type(::vega::events::v1::BusEventType value) {
  // @@protoc_insertion_point(field_add:api.v1.ObserveEventBusRequest.type)
  _internal_add_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ObserveEventBusRequest::type() const {
  // @@protoc_insertion_point(field_list:api.v1.ObserveEventBusRequest.type)
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ObserveEventBusRequest::_internal_mutable_type() {
  return &type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ObserveEventBusRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.ObserveEventBusRequest.type)
  return _internal_mutable_type();
}

// string market_id = 2 [json_name = "marketId"];
inline void ObserveEventBusRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& ObserveEventBusRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveEventBusRequest.market_id)
  return _internal_market_id();
}
inline void ObserveEventBusRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.ObserveEventBusRequest.market_id)
}
inline std::string* ObserveEventBusRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObserveEventBusRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& ObserveEventBusRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void ObserveEventBusRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObserveEventBusRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ObserveEventBusRequest.market_id)
}
inline void ObserveEventBusRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ObserveEventBusRequest.market_id)
}
inline void ObserveEventBusRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ObserveEventBusRequest.market_id)
}
inline std::string* ObserveEventBusRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObserveEventBusRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.ObserveEventBusRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObserveEventBusRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObserveEventBusRequest.market_id)
}

// string party_id = 3 [json_name = "partyId"];
inline void ObserveEventBusRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& ObserveEventBusRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveEventBusRequest.party_id)
  return _internal_party_id();
}
inline void ObserveEventBusRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.ObserveEventBusRequest.party_id)
}
inline std::string* ObserveEventBusRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObserveEventBusRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& ObserveEventBusRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void ObserveEventBusRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObserveEventBusRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ObserveEventBusRequest.party_id)
}
inline void ObserveEventBusRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ObserveEventBusRequest.party_id)
}
inline void ObserveEventBusRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ObserveEventBusRequest.party_id)
}
inline std::string* ObserveEventBusRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObserveEventBusRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.ObserveEventBusRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObserveEventBusRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObserveEventBusRequest.party_id)
}

// int64 batch_size = 4 [json_name = "batchSize"];
inline void ObserveEventBusRequest::clear_batch_size() {
  batch_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObserveEventBusRequest::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObserveEventBusRequest::batch_size() const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveEventBusRequest.batch_size)
  return _internal_batch_size();
}
inline void ObserveEventBusRequest::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int64 value) {

  batch_size_ = value;
}
inline void ObserveEventBusRequest::set_batch_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:api.v1.ObserveEventBusRequest.batch_size)
}

// -------------------------------------------------------------------

// ObserveEventBusResponse

// repeated .vega.events.v1.BusEvent events = 1 [json_name = "events"];
inline int ObserveEventBusResponse::_internal_events_size() const {
  return events_.size();
}
inline int ObserveEventBusResponse::events_size() const {
  return _internal_events_size();
}
inline ::vega::events::v1::BusEvent* ObserveEventBusResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.ObserveEventBusResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::BusEvent >*
ObserveEventBusResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.ObserveEventBusResponse.events)
  return &events_;
}
inline const ::vega::events::v1::BusEvent& ObserveEventBusResponse::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::vega::events::v1::BusEvent& ObserveEventBusResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveEventBusResponse.events)
  return _internal_events(index);
}
inline ::vega::events::v1::BusEvent* ObserveEventBusResponse::_internal_add_events() {
  return events_.Add();
}
inline ::vega::events::v1::BusEvent* ObserveEventBusResponse::add_events() {
  // @@protoc_insertion_point(field_add:api.v1.ObserveEventBusResponse.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::BusEvent >&
ObserveEventBusResponse::events() const {
  // @@protoc_insertion_point(field_list:api.v1.ObserveEventBusResponse.events)
  return events_;
}

// -------------------------------------------------------------------

// StatisticsRequest

// -------------------------------------------------------------------

// StatisticsResponse

// .api.v1.Statistics statistics = 1 [json_name = "statistics"];
inline bool StatisticsResponse::_internal_has_statistics() const {
  return this != internal_default_instance() && statistics_ != nullptr;
}
inline bool StatisticsResponse::has_statistics() const {
  return _internal_has_statistics();
}
inline void StatisticsResponse::clear_statistics() {
  if (GetArena() == nullptr && statistics_ != nullptr) {
    delete statistics_;
  }
  statistics_ = nullptr;
}
inline const ::api::v1::Statistics& StatisticsResponse::_internal_statistics() const {
  const ::api::v1::Statistics* p = statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::Statistics&>(
      ::api::v1::_Statistics_default_instance_);
}
inline const ::api::v1::Statistics& StatisticsResponse::statistics() const {
  // @@protoc_insertion_point(field_get:api.v1.StatisticsResponse.statistics)
  return _internal_statistics();
}
inline void StatisticsResponse::unsafe_arena_set_allocated_statistics(
    ::api::v1::Statistics* statistics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistics_);
  }
  statistics_ = statistics;
  if (statistics) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.StatisticsResponse.statistics)
}
inline ::api::v1::Statistics* StatisticsResponse::release_statistics() {

  ::api::v1::Statistics* temp = statistics_;
  statistics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::Statistics* StatisticsResponse::unsafe_arena_release_statistics() {
  // @@protoc_insertion_point(field_release:api.v1.StatisticsResponse.statistics)

  ::api::v1::Statistics* temp = statistics_;
  statistics_ = nullptr;
  return temp;
}
inline ::api::v1::Statistics* StatisticsResponse::_internal_mutable_statistics() {

  if (statistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::Statistics>(GetArena());
    statistics_ = p;
  }
  return statistics_;
}
inline ::api::v1::Statistics* StatisticsResponse::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable:api.v1.StatisticsResponse.statistics)
  return _internal_mutable_statistics();
}
inline void StatisticsResponse::set_allocated_statistics(::api::v1::Statistics* statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete statistics_;
  }
  if (statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(statistics);
    if (message_arena != submessage_arena) {
      statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statistics, submessage_arena);
    }

  } else {

  }
  statistics_ = statistics;
  // @@protoc_insertion_point(field_set_allocated:api.v1.StatisticsResponse.statistics)
}

// -------------------------------------------------------------------

// Statistics

// uint64 block_height = 1 [json_name = "blockHeight"];
inline void Statistics::clear_block_height() {
  block_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::block_height() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.block_height)
  return _internal_block_height();
}
inline void Statistics::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  block_height_ = value;
}
inline void Statistics::set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.block_height)
}

// uint64 backlog_length = 2 [json_name = "backlogLength"];
inline void Statistics::clear_backlog_length() {
  backlog_length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_backlog_length() const {
  return backlog_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::backlog_length() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.backlog_length)
  return _internal_backlog_length();
}
inline void Statistics::_internal_set_backlog_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  backlog_length_ = value;
}
inline void Statistics::set_backlog_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_backlog_length(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.backlog_length)
}

// uint64 total_peers = 3 [json_name = "totalPeers"];
inline void Statistics::clear_total_peers() {
  total_peers_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_total_peers() const {
  return total_peers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::total_peers() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.total_peers)
  return _internal_total_peers();
}
inline void Statistics::_internal_set_total_peers(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  total_peers_ = value;
}
inline void Statistics::set_total_peers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_peers(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.total_peers)
}

// string genesis_time = 4 [json_name = "genesisTime"];
inline void Statistics::clear_genesis_time() {
  genesis_time_.ClearToEmpty();
}
inline const std::string& Statistics::genesis_time() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.genesis_time)
  return _internal_genesis_time();
}
inline void Statistics::set_genesis_time(const std::string& value) {
  _internal_set_genesis_time(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.genesis_time)
}
inline std::string* Statistics::mutable_genesis_time() {
  // @@protoc_insertion_point(field_mutable:api.v1.Statistics.genesis_time)
  return _internal_mutable_genesis_time();
}
inline const std::string& Statistics::_internal_genesis_time() const {
  return genesis_time_.Get();
}
inline void Statistics::_internal_set_genesis_time(const std::string& value) {

  genesis_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_genesis_time(std::string&& value) {

  genesis_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.Statistics.genesis_time)
}
inline void Statistics::set_genesis_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  genesis_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.Statistics.genesis_time)
}
inline void Statistics::set_genesis_time(const char* value,
    size_t size) {

  genesis_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.Statistics.genesis_time)
}
inline std::string* Statistics::_internal_mutable_genesis_time() {

  return genesis_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_genesis_time() {
  // @@protoc_insertion_point(field_release:api.v1.Statistics.genesis_time)
  return genesis_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_genesis_time(std::string* genesis_time) {
  if (genesis_time != nullptr) {

  } else {

  }
  genesis_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genesis_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.Statistics.genesis_time)
}

// string current_time = 5 [json_name = "currentTime"];
inline void Statistics::clear_current_time() {
  current_time_.ClearToEmpty();
}
inline const std::string& Statistics::current_time() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.current_time)
  return _internal_current_time();
}
inline void Statistics::set_current_time(const std::string& value) {
  _internal_set_current_time(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.current_time)
}
inline std::string* Statistics::mutable_current_time() {
  // @@protoc_insertion_point(field_mutable:api.v1.Statistics.current_time)
  return _internal_mutable_current_time();
}
inline const std::string& Statistics::_internal_current_time() const {
  return current_time_.Get();
}
inline void Statistics::_internal_set_current_time(const std::string& value) {

  current_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_current_time(std::string&& value) {

  current_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.Statistics.current_time)
}
inline void Statistics::set_current_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  current_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.Statistics.current_time)
}
inline void Statistics::set_current_time(const char* value,
    size_t size) {

  current_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.Statistics.current_time)
}
inline std::string* Statistics::_internal_mutable_current_time() {

  return current_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_current_time() {
  // @@protoc_insertion_point(field_release:api.v1.Statistics.current_time)
  return current_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_current_time(std::string* current_time) {
  if (current_time != nullptr) {

  } else {

  }
  current_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.Statistics.current_time)
}

// string vega_time = 6 [json_name = "vegaTime"];
inline void Statistics::clear_vega_time() {
  vega_time_.ClearToEmpty();
}
inline const std::string& Statistics::vega_time() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.vega_time)
  return _internal_vega_time();
}
inline void Statistics::set_vega_time(const std::string& value) {
  _internal_set_vega_time(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.vega_time)
}
inline std::string* Statistics::mutable_vega_time() {
  // @@protoc_insertion_point(field_mutable:api.v1.Statistics.vega_time)
  return _internal_mutable_vega_time();
}
inline const std::string& Statistics::_internal_vega_time() const {
  return vega_time_.Get();
}
inline void Statistics::_internal_set_vega_time(const std::string& value) {

  vega_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_vega_time(std::string&& value) {

  vega_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.Statistics.vega_time)
}
inline void Statistics::set_vega_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.Statistics.vega_time)
}
inline void Statistics::set_vega_time(const char* value,
    size_t size) {

  vega_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.Statistics.vega_time)
}
inline std::string* Statistics::_internal_mutable_vega_time() {

  return vega_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_vega_time() {
  // @@protoc_insertion_point(field_release:api.v1.Statistics.vega_time)
  return vega_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_vega_time(std::string* vega_time) {
  if (vega_time != nullptr) {

  } else {

  }
  vega_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.Statistics.vega_time)
}

// .vega.ChainStatus status = 7 [json_name = "status"];
inline void Statistics::clear_status() {
  status_ = 0;
}
inline ::vega::ChainStatus Statistics::_internal_status() const {
  return static_cast< ::vega::ChainStatus >(status_);
}
inline ::vega::ChainStatus Statistics::status() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.status)
  return _internal_status();
}
inline void Statistics::_internal_set_status(::vega::ChainStatus value) {

  status_ = value;
}
inline void Statistics::set_status(::vega::ChainStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.status)
}

// uint64 tx_per_block = 8 [json_name = "txPerBlock"];
inline void Statistics::clear_tx_per_block() {
  tx_per_block_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_tx_per_block() const {
  return tx_per_block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::tx_per_block() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.tx_per_block)
  return _internal_tx_per_block();
}
inline void Statistics::_internal_set_tx_per_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  tx_per_block_ = value;
}
inline void Statistics::set_tx_per_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_per_block(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.tx_per_block)
}

// uint64 average_tx_bytes = 9 [json_name = "averageTxBytes"];
inline void Statistics::clear_average_tx_bytes() {
  average_tx_bytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_average_tx_bytes() const {
  return average_tx_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::average_tx_bytes() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.average_tx_bytes)
  return _internal_average_tx_bytes();
}
inline void Statistics::_internal_set_average_tx_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  average_tx_bytes_ = value;
}
inline void Statistics::set_average_tx_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_average_tx_bytes(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.average_tx_bytes)
}

// uint64 average_orders_per_block = 10 [json_name = "averageOrdersPerBlock"];
inline void Statistics::clear_average_orders_per_block() {
  average_orders_per_block_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_average_orders_per_block() const {
  return average_orders_per_block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::average_orders_per_block() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.average_orders_per_block)
  return _internal_average_orders_per_block();
}
inline void Statistics::_internal_set_average_orders_per_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  average_orders_per_block_ = value;
}
inline void Statistics::set_average_orders_per_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_average_orders_per_block(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.average_orders_per_block)
}

// uint64 trades_per_second = 11 [json_name = "tradesPerSecond"];
inline void Statistics::clear_trades_per_second() {
  trades_per_second_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_trades_per_second() const {
  return trades_per_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::trades_per_second() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.trades_per_second)
  return _internal_trades_per_second();
}
inline void Statistics::_internal_set_trades_per_second(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  trades_per_second_ = value;
}
inline void Statistics::set_trades_per_second(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_trades_per_second(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.trades_per_second)
}

// uint64 orders_per_second = 12 [json_name = "ordersPerSecond"];
inline void Statistics::clear_orders_per_second() {
  orders_per_second_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_orders_per_second() const {
  return orders_per_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::orders_per_second() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.orders_per_second)
  return _internal_orders_per_second();
}
inline void Statistics::_internal_set_orders_per_second(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  orders_per_second_ = value;
}
inline void Statistics::set_orders_per_second(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_orders_per_second(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.orders_per_second)
}

// uint64 total_markets = 13 [json_name = "totalMarkets"];
inline void Statistics::clear_total_markets() {
  total_markets_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_total_markets() const {
  return total_markets_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::total_markets() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.total_markets)
  return _internal_total_markets();
}
inline void Statistics::_internal_set_total_markets(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  total_markets_ = value;
}
inline void Statistics::set_total_markets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_markets(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.total_markets)
}

// uint64 total_amend_order = 16 [json_name = "totalAmendOrder"];
inline void Statistics::clear_total_amend_order() {
  total_amend_order_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_total_amend_order() const {
  return total_amend_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::total_amend_order() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.total_amend_order)
  return _internal_total_amend_order();
}
inline void Statistics::_internal_set_total_amend_order(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  total_amend_order_ = value;
}
inline void Statistics::set_total_amend_order(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_amend_order(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.total_amend_order)
}

// uint64 total_cancel_order = 17 [json_name = "totalCancelOrder"];
inline void Statistics::clear_total_cancel_order() {
  total_cancel_order_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_total_cancel_order() const {
  return total_cancel_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::total_cancel_order() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.total_cancel_order)
  return _internal_total_cancel_order();
}
inline void Statistics::_internal_set_total_cancel_order(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  total_cancel_order_ = value;
}
inline void Statistics::set_total_cancel_order(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_cancel_order(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.total_cancel_order)
}

// uint64 total_create_order = 18 [json_name = "totalCreateOrder"];
inline void Statistics::clear_total_create_order() {
  total_create_order_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_total_create_order() const {
  return total_create_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::total_create_order() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.total_create_order)
  return _internal_total_create_order();
}
inline void Statistics::_internal_set_total_create_order(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  total_create_order_ = value;
}
inline void Statistics::set_total_create_order(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_create_order(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.total_create_order)
}

// uint64 total_orders = 19 [json_name = "totalOrders"];
inline void Statistics::clear_total_orders() {
  total_orders_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_total_orders() const {
  return total_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::total_orders() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.total_orders)
  return _internal_total_orders();
}
inline void Statistics::_internal_set_total_orders(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  total_orders_ = value;
}
inline void Statistics::set_total_orders(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_orders(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.total_orders)
}

// uint64 total_trades = 20 [json_name = "totalTrades"];
inline void Statistics::clear_total_trades() {
  total_trades_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_total_trades() const {
  return total_trades_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::total_trades() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.total_trades)
  return _internal_total_trades();
}
inline void Statistics::_internal_set_total_trades(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  total_trades_ = value;
}
inline void Statistics::set_total_trades(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_trades(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.total_trades)
}

// uint32 order_subscriptions = 21 [json_name = "orderSubscriptions"];
inline void Statistics::clear_order_subscriptions() {
  order_subscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_order_subscriptions() const {
  return order_subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::order_subscriptions() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.order_subscriptions)
  return _internal_order_subscriptions();
}
inline void Statistics::_internal_set_order_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  order_subscriptions_ = value;
}
inline void Statistics::set_order_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_order_subscriptions(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.order_subscriptions)
}

// uint32 trade_subscriptions = 22 [json_name = "tradeSubscriptions"];
inline void Statistics::clear_trade_subscriptions() {
  trade_subscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_trade_subscriptions() const {
  return trade_subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::trade_subscriptions() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.trade_subscriptions)
  return _internal_trade_subscriptions();
}
inline void Statistics::_internal_set_trade_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  trade_subscriptions_ = value;
}
inline void Statistics::set_trade_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trade_subscriptions(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.trade_subscriptions)
}

// uint32 candle_subscriptions = 23 [json_name = "candleSubscriptions"];
inline void Statistics::clear_candle_subscriptions() {
  candle_subscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_candle_subscriptions() const {
  return candle_subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::candle_subscriptions() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.candle_subscriptions)
  return _internal_candle_subscriptions();
}
inline void Statistics::_internal_set_candle_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  candle_subscriptions_ = value;
}
inline void Statistics::set_candle_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_candle_subscriptions(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.candle_subscriptions)
}

// uint32 market_depth_subscriptions = 24 [json_name = "marketDepthSubscriptions"];
inline void Statistics::clear_market_depth_subscriptions() {
  market_depth_subscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_market_depth_subscriptions() const {
  return market_depth_subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::market_depth_subscriptions() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.market_depth_subscriptions)
  return _internal_market_depth_subscriptions();
}
inline void Statistics::_internal_set_market_depth_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  market_depth_subscriptions_ = value;
}
inline void Statistics::set_market_depth_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_market_depth_subscriptions(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.market_depth_subscriptions)
}

// uint32 positions_subscriptions = 25 [json_name = "positionsSubscriptions"];
inline void Statistics::clear_positions_subscriptions() {
  positions_subscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_positions_subscriptions() const {
  return positions_subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::positions_subscriptions() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.positions_subscriptions)
  return _internal_positions_subscriptions();
}
inline void Statistics::_internal_set_positions_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  positions_subscriptions_ = value;
}
inline void Statistics::set_positions_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_positions_subscriptions(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.positions_subscriptions)
}

// uint32 account_subscriptions = 26 [json_name = "accountSubscriptions"];
inline void Statistics::clear_account_subscriptions() {
  account_subscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_account_subscriptions() const {
  return account_subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::account_subscriptions() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.account_subscriptions)
  return _internal_account_subscriptions();
}
inline void Statistics::_internal_set_account_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  account_subscriptions_ = value;
}
inline void Statistics::set_account_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_subscriptions(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.account_subscriptions)
}

// uint32 market_data_subscriptions = 27 [json_name = "marketDataSubscriptions"];
inline void Statistics::clear_market_data_subscriptions() {
  market_data_subscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_market_data_subscriptions() const {
  return market_data_subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::market_data_subscriptions() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.market_data_subscriptions)
  return _internal_market_data_subscriptions();
}
inline void Statistics::_internal_set_market_data_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  market_data_subscriptions_ = value;
}
inline void Statistics::set_market_data_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_market_data_subscriptions(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.market_data_subscriptions)
}

// string app_version_hash = 28 [json_name = "appVersionHash"];
inline void Statistics::clear_app_version_hash() {
  app_version_hash_.ClearToEmpty();
}
inline const std::string& Statistics::app_version_hash() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.app_version_hash)
  return _internal_app_version_hash();
}
inline void Statistics::set_app_version_hash(const std::string& value) {
  _internal_set_app_version_hash(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.app_version_hash)
}
inline std::string* Statistics::mutable_app_version_hash() {
  // @@protoc_insertion_point(field_mutable:api.v1.Statistics.app_version_hash)
  return _internal_mutable_app_version_hash();
}
inline const std::string& Statistics::_internal_app_version_hash() const {
  return app_version_hash_.Get();
}
inline void Statistics::_internal_set_app_version_hash(const std::string& value) {

  app_version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_app_version_hash(std::string&& value) {

  app_version_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.Statistics.app_version_hash)
}
inline void Statistics::set_app_version_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  app_version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.Statistics.app_version_hash)
}
inline void Statistics::set_app_version_hash(const char* value,
    size_t size) {

  app_version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.Statistics.app_version_hash)
}
inline std::string* Statistics::_internal_mutable_app_version_hash() {

  return app_version_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_app_version_hash() {
  // @@protoc_insertion_point(field_release:api.v1.Statistics.app_version_hash)
  return app_version_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_app_version_hash(std::string* app_version_hash) {
  if (app_version_hash != nullptr) {

  } else {

  }
  app_version_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_version_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.Statistics.app_version_hash)
}

// string app_version = 29 [json_name = "appVersion"];
inline void Statistics::clear_app_version() {
  app_version_.ClearToEmpty();
}
inline const std::string& Statistics::app_version() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.app_version)
  return _internal_app_version();
}
inline void Statistics::set_app_version(const std::string& value) {
  _internal_set_app_version(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.app_version)
}
inline std::string* Statistics::mutable_app_version() {
  // @@protoc_insertion_point(field_mutable:api.v1.Statistics.app_version)
  return _internal_mutable_app_version();
}
inline const std::string& Statistics::_internal_app_version() const {
  return app_version_.Get();
}
inline void Statistics::_internal_set_app_version(const std::string& value) {

  app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_app_version(std::string&& value) {

  app_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.Statistics.app_version)
}
inline void Statistics::set_app_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.Statistics.app_version)
}
inline void Statistics::set_app_version(const char* value,
    size_t size) {

  app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.Statistics.app_version)
}
inline std::string* Statistics::_internal_mutable_app_version() {

  return app_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_app_version() {
  // @@protoc_insertion_point(field_release:api.v1.Statistics.app_version)
  return app_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_app_version(std::string* app_version) {
  if (app_version != nullptr) {

  } else {

  }
  app_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.Statistics.app_version)
}

// string chain_version = 30 [json_name = "chainVersion"];
inline void Statistics::clear_chain_version() {
  chain_version_.ClearToEmpty();
}
inline const std::string& Statistics::chain_version() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.chain_version)
  return _internal_chain_version();
}
inline void Statistics::set_chain_version(const std::string& value) {
  _internal_set_chain_version(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.chain_version)
}
inline std::string* Statistics::mutable_chain_version() {
  // @@protoc_insertion_point(field_mutable:api.v1.Statistics.chain_version)
  return _internal_mutable_chain_version();
}
inline const std::string& Statistics::_internal_chain_version() const {
  return chain_version_.Get();
}
inline void Statistics::_internal_set_chain_version(const std::string& value) {

  chain_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_chain_version(std::string&& value) {

  chain_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.Statistics.chain_version)
}
inline void Statistics::set_chain_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chain_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.Statistics.chain_version)
}
inline void Statistics::set_chain_version(const char* value,
    size_t size) {

  chain_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.Statistics.chain_version)
}
inline std::string* Statistics::_internal_mutable_chain_version() {

  return chain_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_chain_version() {
  // @@protoc_insertion_point(field_release:api.v1.Statistics.chain_version)
  return chain_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_chain_version(std::string* chain_version) {
  if (chain_version != nullptr) {

  } else {

  }
  chain_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.Statistics.chain_version)
}

// uint64 block_duration = 31 [json_name = "blockDuration"];
inline void Statistics::clear_block_duration() {
  block_duration_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_block_duration() const {
  return block_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::block_duration() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.block_duration)
  return _internal_block_duration();
}
inline void Statistics::_internal_set_block_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  block_duration_ = value;
}
inline void Statistics::set_block_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_duration(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.block_duration)
}

// string uptime = 32 [json_name = "uptime"];
inline void Statistics::clear_uptime() {
  uptime_.ClearToEmpty();
}
inline const std::string& Statistics::uptime() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.uptime)
  return _internal_uptime();
}
inline void Statistics::set_uptime(const std::string& value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.uptime)
}
inline std::string* Statistics::mutable_uptime() {
  // @@protoc_insertion_point(field_mutable:api.v1.Statistics.uptime)
  return _internal_mutable_uptime();
}
inline const std::string& Statistics::_internal_uptime() const {
  return uptime_.Get();
}
inline void Statistics::_internal_set_uptime(const std::string& value) {

  uptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_uptime(std::string&& value) {

  uptime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.Statistics.uptime)
}
inline void Statistics::set_uptime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  uptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.Statistics.uptime)
}
inline void Statistics::set_uptime(const char* value,
    size_t size) {

  uptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.Statistics.uptime)
}
inline std::string* Statistics::_internal_mutable_uptime() {

  return uptime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_uptime() {
  // @@protoc_insertion_point(field_release:api.v1.Statistics.uptime)
  return uptime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_uptime(std::string* uptime) {
  if (uptime != nullptr) {

  } else {

  }
  uptime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uptime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.Statistics.uptime)
}

// string chain_id = 33 [json_name = "chainId"];
inline void Statistics::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& Statistics::chain_id() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.chain_id)
  return _internal_chain_id();
}
inline void Statistics::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.chain_id)
}
inline std::string* Statistics::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.Statistics.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& Statistics::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void Statistics::_internal_set_chain_id(const std::string& value) {

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_chain_id(std::string&& value) {

  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.Statistics.chain_id)
}
inline void Statistics::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.Statistics.chain_id)
}
inline void Statistics::set_chain_id(const char* value,
    size_t size) {

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.Statistics.chain_id)
}
inline std::string* Statistics::_internal_mutable_chain_id() {

  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_chain_id() {
  // @@protoc_insertion_point(field_release:api.v1.Statistics.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {

  } else {

  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.Statistics.chain_id)
}

// uint32 market_depth_updates_subscriptions = 34 [json_name = "marketDepthUpdatesSubscriptions"];
inline void Statistics::clear_market_depth_updates_subscriptions() {
  market_depth_updates_subscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_market_depth_updates_subscriptions() const {
  return market_depth_updates_subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::market_depth_updates_subscriptions() const {
  // @@protoc_insertion_point(field_get:api.v1.Statistics.market_depth_updates_subscriptions)
  return _internal_market_depth_updates_subscriptions();
}
inline void Statistics::_internal_set_market_depth_updates_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  market_depth_updates_subscriptions_ = value;
}
inline void Statistics::set_market_depth_updates_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_market_depth_updates_subscriptions(value);
  // @@protoc_insertion_point(field_set:api.v1.Statistics.market_depth_updates_subscriptions)
}

// -------------------------------------------------------------------

// LastBlockHeightRequest

// -------------------------------------------------------------------

// LastBlockHeightResponse

// uint64 height = 1 [json_name = "height"];
inline void LastBlockHeightResponse::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LastBlockHeightResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LastBlockHeightResponse::height() const {
  // @@protoc_insertion_point(field_get:api.v1.LastBlockHeightResponse.height)
  return _internal_height();
}
inline void LastBlockHeightResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  height_ = value;
}
inline void LastBlockHeightResponse::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api.v1.LastBlockHeightResponse.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::api::v1::SubmitTransactionV2Request_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::v1::SubmitTransactionV2Request_Type>() {
  return ::api::v1::SubmitTransactionV2Request_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2ftrading_2eproto
