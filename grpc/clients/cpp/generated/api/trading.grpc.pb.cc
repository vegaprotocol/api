// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/trading.proto

#include "api/trading.pb.h"
#include "api/trading.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace api {
namespace v1 {

static const char* TradingService_method_names[] = {
  "/api.v1.TradingService/SubmitTransactionV2",
  "/api.v1.TradingService/PropagateChainEvent",
  "/api.v1.TradingService/Statistics",
  "/api.v1.TradingService/LastBlockHeight",
  "/api.v1.TradingService/GetVegaTime",
  "/api.v1.TradingService/ObserveEventBus",
};

std::unique_ptr< TradingService::Stub> TradingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TradingService::Stub> stub(new TradingService::Stub(channel));
  return stub;
}

TradingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SubmitTransactionV2_(TradingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PropagateChainEvent_(TradingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Statistics_(TradingService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LastBlockHeight_(TradingService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVegaTime_(TradingService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ObserveEventBus_(TradingService_method_names[5], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status TradingService::Stub::SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::api::v1::SubmitTransactionV2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::SubmitTransactionV2Request, ::api::v1::SubmitTransactionV2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitTransactionV2_, context, request, response);
}

void TradingService::Stub::experimental_async::SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::SubmitTransactionV2Request, ::api::v1::SubmitTransactionV2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTransactionV2_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTransactionV2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::SubmitTransactionV2Response>* TradingService::Stub::PrepareAsyncSubmitTransactionV2Raw(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::SubmitTransactionV2Response, ::api::v1::SubmitTransactionV2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitTransactionV2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::SubmitTransactionV2Response>* TradingService::Stub::AsyncSubmitTransactionV2Raw(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitTransactionV2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::api::v1::PropagateChainEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PropagateChainEvent_, context, request, response);
}

void TradingService::Stub::experimental_async::PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PropagateChainEvent_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PropagateChainEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PropagateChainEventResponse>* TradingService::Stub::PrepareAsyncPropagateChainEventRaw(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PropagateChainEventResponse, ::api::v1::PropagateChainEventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PropagateChainEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PropagateChainEventResponse>* TradingService::Stub::AsyncPropagateChainEventRaw(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPropagateChainEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::api::v1::StatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Statistics_, context, request, response);
}

void TradingService::Stub::experimental_async::Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Statistics_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Statistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::StatisticsResponse>* TradingService::Stub::PrepareAsyncStatisticsRaw(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::StatisticsResponse, ::api::v1::StatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Statistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::StatisticsResponse>* TradingService::Stub::AsyncStatisticsRaw(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::api::v1::LastBlockHeightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::LastBlockHeightRequest, ::api::v1::LastBlockHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LastBlockHeight_, context, request, response);
}

void TradingService::Stub::experimental_async::LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::LastBlockHeightRequest, ::api::v1::LastBlockHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastBlockHeight_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastBlockHeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::LastBlockHeightResponse>* TradingService::Stub::PrepareAsyncLastBlockHeightRaw(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::LastBlockHeightResponse, ::api::v1::LastBlockHeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LastBlockHeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::LastBlockHeightResponse>* TradingService::Stub::AsyncLastBlockHeightRaw(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLastBlockHeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::api::v1::GetVegaTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVegaTime_, context, request, response);
}

void TradingService::Stub::experimental_async::GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVegaTime_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVegaTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetVegaTimeResponse>* TradingService::Stub::PrepareAsyncGetVegaTimeRaw(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetVegaTimeResponse, ::api::v1::GetVegaTimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVegaTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetVegaTimeResponse>* TradingService::Stub::AsyncGetVegaTimeRaw(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVegaTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* TradingService::Stub::ObserveEventBusRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>::Create(channel_.get(), rpcmethod_ObserveEventBus_, context);
}

void TradingService::Stub::experimental_async::ObserveEventBus(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::api::v1::ObserveEventBusRequest,::api::v1::ObserveEventBusResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::api::v1::ObserveEventBusRequest,::api::v1::ObserveEventBusResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ObserveEventBus_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* TradingService::Stub::AsyncObserveEventBusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>::Create(channel_.get(), cq, rpcmethod_ObserveEventBus_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* TradingService::Stub::PrepareAsyncObserveEventBusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>::Create(channel_.get(), cq, rpcmethod_ObserveEventBus_, context, false, nullptr);
}

TradingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::SubmitTransactionV2Request, ::api::v1::SubmitTransactionV2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::SubmitTransactionV2Request* req,
             ::api::v1::SubmitTransactionV2Response* resp) {
               return service->SubmitTransactionV2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PropagateChainEventRequest* req,
             ::api::v1::PropagateChainEventResponse* resp) {
               return service->PropagateChainEvent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::StatisticsRequest* req,
             ::api::v1::StatisticsResponse* resp) {
               return service->Statistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::LastBlockHeightRequest, ::api::v1::LastBlockHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::LastBlockHeightRequest* req,
             ::api::v1::LastBlockHeightResponse* resp) {
               return service->LastBlockHeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetVegaTimeRequest* req,
             ::api::v1::GetVegaTimeResponse* resp) {
               return service->GetVegaTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[5],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TradingService::Service, ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::api::v1::ObserveEventBusResponse,
             ::api::v1::ObserveEventBusRequest>* stream) {
               return service->ObserveEventBus(ctx, stream);
             }, this)));
}

TradingService::Service::~Service() {
}

::grpc::Status TradingService::Service::SubmitTransactionV2(::grpc::ServerContext* context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::PropagateChainEvent(::grpc::ServerContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::Statistics(::grpc::ServerContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::LastBlockHeight(::grpc::ServerContext* context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::GetVegaTime(::grpc::ServerContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::ObserveEventBus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::api::v1::ObserveEventBusResponse, ::api::v1::ObserveEventBusRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api
}  // namespace v1

