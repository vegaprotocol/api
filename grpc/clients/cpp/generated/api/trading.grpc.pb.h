// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/trading.proto
#ifndef GRPC_api_2ftrading_2eproto__INCLUDED
#define GRPC_api_2ftrading_2eproto__INCLUDED

#include "api/trading.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace api {
namespace v1 {

class TradingService final {
 public:
  static constexpr char const* service_full_name() {
    return "api.v1.TradingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Submit a signed transaction (v2)
    virtual ::grpc::Status SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::api::v1::SubmitTransactionV2Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::SubmitTransactionV2Response>> AsyncSubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::SubmitTransactionV2Response>>(AsyncSubmitTransactionV2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::SubmitTransactionV2Response>> PrepareAsyncSubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::SubmitTransactionV2Response>>(PrepareAsyncSubmitTransactionV2Raw(context, request, cq));
    }
    // Propagate a chain event
    virtual ::grpc::Status PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::api::v1::PropagateChainEventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::PropagateChainEventResponse>> AsyncPropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::PropagateChainEventResponse>>(AsyncPropagateChainEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::PropagateChainEventResponse>> PrepareAsyncPropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::PropagateChainEventResponse>>(PrepareAsyncPropagateChainEventRaw(context, request, cq));
    }
    // Get Statistics on Vega
    virtual ::grpc::Status Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::api::v1::StatisticsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::StatisticsResponse>> AsyncStatistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::StatisticsResponse>>(AsyncStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::StatisticsResponse>> PrepareAsyncStatistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::StatisticsResponse>>(PrepareAsyncStatisticsRaw(context, request, cq));
    }
    // Get the height of the last tendermint block
    virtual ::grpc::Status LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::api::v1::LastBlockHeightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::LastBlockHeightResponse>> AsyncLastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::LastBlockHeightResponse>>(AsyncLastBlockHeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::LastBlockHeightResponse>> PrepareAsyncLastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::LastBlockHeightResponse>>(PrepareAsyncLastBlockHeightRaw(context, request, cq));
    }
    // Get Time
    virtual ::grpc::Status GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::api::v1::GetVegaTimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::GetVegaTimeResponse>> AsyncGetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::GetVegaTimeResponse>>(AsyncGetVegaTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::GetVegaTimeResponse>> PrepareAsyncGetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::GetVegaTimeResponse>>(PrepareAsyncGetVegaTimeRaw(context, request, cq));
    }
    // Subscribe to a stream of events from the core
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>> ObserveEventBus(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>>(ObserveEventBusRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>> AsyncObserveEventBus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>>(AsyncObserveEventBusRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>> PrepareAsyncObserveEventBus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>>(PrepareAsyncObserveEventBusRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Submit a signed transaction (v2)
      virtual void SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Propagate a chain event
      virtual void PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get Statistics on Vega
      virtual void Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get the height of the last tendermint block
      virtual void LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get Time
      virtual void GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Subscribe to a stream of events from the core
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ObserveEventBus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::api::v1::ObserveEventBusRequest,::api::v1::ObserveEventBusResponse>* reactor) = 0;
      #else
      virtual void ObserveEventBus(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::api::v1::ObserveEventBusRequest,::api::v1::ObserveEventBusResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::SubmitTransactionV2Response>* AsyncSubmitTransactionV2Raw(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::SubmitTransactionV2Response>* PrepareAsyncSubmitTransactionV2Raw(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::PropagateChainEventResponse>* AsyncPropagateChainEventRaw(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::PropagateChainEventResponse>* PrepareAsyncPropagateChainEventRaw(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::StatisticsResponse>* AsyncStatisticsRaw(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::StatisticsResponse>* PrepareAsyncStatisticsRaw(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::LastBlockHeightResponse>* AsyncLastBlockHeightRaw(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::LastBlockHeightResponse>* PrepareAsyncLastBlockHeightRaw(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::GetVegaTimeResponse>* AsyncGetVegaTimeRaw(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::GetVegaTimeResponse>* PrepareAsyncGetVegaTimeRaw(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* ObserveEventBusRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* AsyncObserveEventBusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* PrepareAsyncObserveEventBusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::api::v1::SubmitTransactionV2Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::SubmitTransactionV2Response>> AsyncSubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::SubmitTransactionV2Response>>(AsyncSubmitTransactionV2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::SubmitTransactionV2Response>> PrepareAsyncSubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::SubmitTransactionV2Response>>(PrepareAsyncSubmitTransactionV2Raw(context, request, cq));
    }
    ::grpc::Status PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::api::v1::PropagateChainEventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::PropagateChainEventResponse>> AsyncPropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::PropagateChainEventResponse>>(AsyncPropagateChainEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::PropagateChainEventResponse>> PrepareAsyncPropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::PropagateChainEventResponse>>(PrepareAsyncPropagateChainEventRaw(context, request, cq));
    }
    ::grpc::Status Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::api::v1::StatisticsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::StatisticsResponse>> AsyncStatistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::StatisticsResponse>>(AsyncStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::StatisticsResponse>> PrepareAsyncStatistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::StatisticsResponse>>(PrepareAsyncStatisticsRaw(context, request, cq));
    }
    ::grpc::Status LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::api::v1::LastBlockHeightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::LastBlockHeightResponse>> AsyncLastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::LastBlockHeightResponse>>(AsyncLastBlockHeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::LastBlockHeightResponse>> PrepareAsyncLastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::LastBlockHeightResponse>>(PrepareAsyncLastBlockHeightRaw(context, request, cq));
    }
    ::grpc::Status GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::api::v1::GetVegaTimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::GetVegaTimeResponse>> AsyncGetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::GetVegaTimeResponse>>(AsyncGetVegaTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::GetVegaTimeResponse>> PrepareAsyncGetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::GetVegaTimeResponse>>(PrepareAsyncGetVegaTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>> ObserveEventBus(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>>(ObserveEventBusRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>> AsyncObserveEventBus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>>(AsyncObserveEventBusRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>> PrepareAsyncObserveEventBus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>>(PrepareAsyncObserveEventBusRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitTransactionV2(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LastBlockHeight(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ObserveEventBus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::api::v1::ObserveEventBusRequest,::api::v1::ObserveEventBusResponse>* reactor) override;
      #else
      void ObserveEventBus(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::api::v1::ObserveEventBusRequest,::api::v1::ObserveEventBusResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::api::v1::SubmitTransactionV2Response>* AsyncSubmitTransactionV2Raw(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::SubmitTransactionV2Response>* PrepareAsyncSubmitTransactionV2Raw(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionV2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::PropagateChainEventResponse>* AsyncPropagateChainEventRaw(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::PropagateChainEventResponse>* PrepareAsyncPropagateChainEventRaw(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::StatisticsResponse>* AsyncStatisticsRaw(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::StatisticsResponse>* PrepareAsyncStatisticsRaw(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::LastBlockHeightResponse>* AsyncLastBlockHeightRaw(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::LastBlockHeightResponse>* PrepareAsyncLastBlockHeightRaw(::grpc::ClientContext* context, const ::api::v1::LastBlockHeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::GetVegaTimeResponse>* AsyncGetVegaTimeRaw(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::GetVegaTimeResponse>* PrepareAsyncGetVegaTimeRaw(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* ObserveEventBusRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* AsyncObserveEventBusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* PrepareAsyncObserveEventBusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitTransactionV2_;
    const ::grpc::internal::RpcMethod rpcmethod_PropagateChainEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_Statistics_;
    const ::grpc::internal::RpcMethod rpcmethod_LastBlockHeight_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVegaTime_;
    const ::grpc::internal::RpcMethod rpcmethod_ObserveEventBus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Submit a signed transaction (v2)
    virtual ::grpc::Status SubmitTransactionV2(::grpc::ServerContext* context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response);
    // Propagate a chain event
    virtual ::grpc::Status PropagateChainEvent(::grpc::ServerContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response);
    // Get Statistics on Vega
    virtual ::grpc::Status Statistics(::grpc::ServerContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response);
    // Get the height of the last tendermint block
    virtual ::grpc::Status LastBlockHeight(::grpc::ServerContext* context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response);
    // Get Time
    virtual ::grpc::Status GetVegaTime(::grpc::ServerContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response);
    // Subscribe to a stream of events from the core
    virtual ::grpc::Status ObserveEventBus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::api::v1::ObserveEventBusResponse, ::api::v1::ObserveEventBusRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitTransactionV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitTransactionV2() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitTransactionV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTransactionV2(::grpc::ServerContext* /*context*/, const ::api::v1::SubmitTransactionV2Request* /*request*/, ::api::v1::SubmitTransactionV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitTransactionV2(::grpc::ServerContext* context, ::api::v1::SubmitTransactionV2Request* request, ::grpc::ServerAsyncResponseWriter< ::api::v1::SubmitTransactionV2Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PropagateChainEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PropagateChainEvent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PropagateChainEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PropagateChainEvent(::grpc::ServerContext* /*context*/, const ::api::v1::PropagateChainEventRequest* /*request*/, ::api::v1::PropagateChainEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPropagateChainEvent(::grpc::ServerContext* context, ::api::v1::PropagateChainEventRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1::PropagateChainEventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Statistics() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::api::v1::StatisticsRequest* /*request*/, ::api::v1::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatistics(::grpc::ServerContext* context, ::api::v1::StatisticsRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1::StatisticsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LastBlockHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LastBlockHeight() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LastBlockHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastBlockHeight(::grpc::ServerContext* /*context*/, const ::api::v1::LastBlockHeightRequest* /*request*/, ::api::v1::LastBlockHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLastBlockHeight(::grpc::ServerContext* context, ::api::v1::LastBlockHeightRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1::LastBlockHeightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVegaTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVegaTime() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetVegaTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVegaTime(::grpc::ServerContext* /*context*/, const ::api::v1::GetVegaTimeRequest* /*request*/, ::api::v1::GetVegaTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVegaTime(::grpc::ServerContext* context, ::api::v1::GetVegaTimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1::GetVegaTimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ObserveEventBus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ObserveEventBus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ObserveEventBus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserveEventBus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::ObserveEventBusResponse, ::api::v1::ObserveEventBusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestObserveEventBus(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::api::v1::ObserveEventBusResponse, ::api::v1::ObserveEventBusRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitTransactionV2<WithAsyncMethod_PropagateChainEvent<WithAsyncMethod_Statistics<WithAsyncMethod_LastBlockHeight<WithAsyncMethod_GetVegaTime<WithAsyncMethod_ObserveEventBus<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitTransactionV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitTransactionV2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1::SubmitTransactionV2Request, ::api::v1::SubmitTransactionV2Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::api::v1::SubmitTransactionV2Request* request, ::api::v1::SubmitTransactionV2Response* response) { return this->SubmitTransactionV2(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitTransactionV2(
        ::grpc::experimental::MessageAllocator< ::api::v1::SubmitTransactionV2Request, ::api::v1::SubmitTransactionV2Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1::SubmitTransactionV2Request, ::api::v1::SubmitTransactionV2Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitTransactionV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTransactionV2(::grpc::ServerContext* /*context*/, const ::api::v1::SubmitTransactionV2Request* /*request*/, ::api::v1::SubmitTransactionV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitTransactionV2(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1::SubmitTransactionV2Request* /*request*/, ::api::v1::SubmitTransactionV2Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitTransactionV2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::api::v1::SubmitTransactionV2Request* /*request*/, ::api::v1::SubmitTransactionV2Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PropagateChainEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PropagateChainEvent() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response) { return this->PropagateChainEvent(context, request, response); }));}
    void SetMessageAllocatorFor_PropagateChainEvent(
        ::grpc::experimental::MessageAllocator< ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PropagateChainEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PropagateChainEvent(::grpc::ServerContext* /*context*/, const ::api::v1::PropagateChainEventRequest* /*request*/, ::api::v1::PropagateChainEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PropagateChainEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1::PropagateChainEventRequest* /*request*/, ::api::v1::PropagateChainEventResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PropagateChainEvent(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::api::v1::PropagateChainEventRequest* /*request*/, ::api::v1::PropagateChainEventResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Statistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response) { return this->Statistics(context, request, response); }));}
    void SetMessageAllocatorFor_Statistics(
        ::grpc::experimental::MessageAllocator< ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::api::v1::StatisticsRequest* /*request*/, ::api::v1::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Statistics(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1::StatisticsRequest* /*request*/, ::api::v1::StatisticsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Statistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::api::v1::StatisticsRequest* /*request*/, ::api::v1::StatisticsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LastBlockHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LastBlockHeight() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1::LastBlockHeightRequest, ::api::v1::LastBlockHeightResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::api::v1::LastBlockHeightRequest* request, ::api::v1::LastBlockHeightResponse* response) { return this->LastBlockHeight(context, request, response); }));}
    void SetMessageAllocatorFor_LastBlockHeight(
        ::grpc::experimental::MessageAllocator< ::api::v1::LastBlockHeightRequest, ::api::v1::LastBlockHeightResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1::LastBlockHeightRequest, ::api::v1::LastBlockHeightResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LastBlockHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastBlockHeight(::grpc::ServerContext* /*context*/, const ::api::v1::LastBlockHeightRequest* /*request*/, ::api::v1::LastBlockHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LastBlockHeight(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1::LastBlockHeightRequest* /*request*/, ::api::v1::LastBlockHeightResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LastBlockHeight(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::api::v1::LastBlockHeightRequest* /*request*/, ::api::v1::LastBlockHeightResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetVegaTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetVegaTime() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response) { return this->GetVegaTime(context, request, response); }));}
    void SetMessageAllocatorFor_GetVegaTime(
        ::grpc::experimental::MessageAllocator< ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetVegaTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVegaTime(::grpc::ServerContext* /*context*/, const ::api::v1::GetVegaTimeRequest* /*request*/, ::api::v1::GetVegaTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVegaTime(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1::GetVegaTimeRequest* /*request*/, ::api::v1::GetVegaTimeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVegaTime(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::api::v1::GetVegaTimeRequest* /*request*/, ::api::v1::GetVegaTimeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ObserveEventBus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ObserveEventBus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->ObserveEventBus(context); }));
    }
    ~ExperimentalWithCallbackMethod_ObserveEventBus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserveEventBus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::ObserveEventBusResponse, ::api::v1::ObserveEventBusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* ObserveEventBus(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* ObserveEventBus(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SubmitTransactionV2<ExperimentalWithCallbackMethod_PropagateChainEvent<ExperimentalWithCallbackMethod_Statistics<ExperimentalWithCallbackMethod_LastBlockHeight<ExperimentalWithCallbackMethod_GetVegaTime<ExperimentalWithCallbackMethod_ObserveEventBus<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SubmitTransactionV2<ExperimentalWithCallbackMethod_PropagateChainEvent<ExperimentalWithCallbackMethod_Statistics<ExperimentalWithCallbackMethod_LastBlockHeight<ExperimentalWithCallbackMethod_GetVegaTime<ExperimentalWithCallbackMethod_ObserveEventBus<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubmitTransactionV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitTransactionV2() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitTransactionV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTransactionV2(::grpc::ServerContext* /*context*/, const ::api::v1::SubmitTransactionV2Request* /*request*/, ::api::v1::SubmitTransactionV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PropagateChainEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PropagateChainEvent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PropagateChainEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PropagateChainEvent(::grpc::ServerContext* /*context*/, const ::api::v1::PropagateChainEventRequest* /*request*/, ::api::v1::PropagateChainEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Statistics() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::api::v1::StatisticsRequest* /*request*/, ::api::v1::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LastBlockHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LastBlockHeight() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LastBlockHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastBlockHeight(::grpc::ServerContext* /*context*/, const ::api::v1::LastBlockHeightRequest* /*request*/, ::api::v1::LastBlockHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVegaTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVegaTime() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetVegaTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVegaTime(::grpc::ServerContext* /*context*/, const ::api::v1::GetVegaTimeRequest* /*request*/, ::api::v1::GetVegaTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ObserveEventBus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ObserveEventBus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ObserveEventBus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserveEventBus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::ObserveEventBusResponse, ::api::v1::ObserveEventBusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitTransactionV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitTransactionV2() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubmitTransactionV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTransactionV2(::grpc::ServerContext* /*context*/, const ::api::v1::SubmitTransactionV2Request* /*request*/, ::api::v1::SubmitTransactionV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitTransactionV2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PropagateChainEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PropagateChainEvent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PropagateChainEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PropagateChainEvent(::grpc::ServerContext* /*context*/, const ::api::v1::PropagateChainEventRequest* /*request*/, ::api::v1::PropagateChainEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPropagateChainEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Statistics() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::api::v1::StatisticsRequest* /*request*/, ::api::v1::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatistics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LastBlockHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LastBlockHeight() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LastBlockHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastBlockHeight(::grpc::ServerContext* /*context*/, const ::api::v1::LastBlockHeightRequest* /*request*/, ::api::v1::LastBlockHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLastBlockHeight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVegaTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVegaTime() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetVegaTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVegaTime(::grpc::ServerContext* /*context*/, const ::api::v1::GetVegaTimeRequest* /*request*/, ::api::v1::GetVegaTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVegaTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ObserveEventBus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ObserveEventBus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ObserveEventBus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserveEventBus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::ObserveEventBusResponse, ::api::v1::ObserveEventBusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestObserveEventBus(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitTransactionV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitTransactionV2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitTransactionV2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitTransactionV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTransactionV2(::grpc::ServerContext* /*context*/, const ::api::v1::SubmitTransactionV2Request* /*request*/, ::api::v1::SubmitTransactionV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitTransactionV2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitTransactionV2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PropagateChainEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PropagateChainEvent() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PropagateChainEvent(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PropagateChainEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PropagateChainEvent(::grpc::ServerContext* /*context*/, const ::api::v1::PropagateChainEventRequest* /*request*/, ::api::v1::PropagateChainEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PropagateChainEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PropagateChainEvent(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Statistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Statistics(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::api::v1::StatisticsRequest* /*request*/, ::api::v1::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Statistics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Statistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LastBlockHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LastBlockHeight() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LastBlockHeight(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LastBlockHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastBlockHeight(::grpc::ServerContext* /*context*/, const ::api::v1::LastBlockHeightRequest* /*request*/, ::api::v1::LastBlockHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LastBlockHeight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LastBlockHeight(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetVegaTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetVegaTime() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVegaTime(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetVegaTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVegaTime(::grpc::ServerContext* /*context*/, const ::api::v1::GetVegaTimeRequest* /*request*/, ::api::v1::GetVegaTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVegaTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVegaTime(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ObserveEventBus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ObserveEventBus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->ObserveEventBus(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_ObserveEventBus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserveEventBus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::ObserveEventBusResponse, ::api::v1::ObserveEventBusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ObserveEventBus(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ObserveEventBus(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitTransactionV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitTransactionV2() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1::SubmitTransactionV2Request, ::api::v1::SubmitTransactionV2Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1::SubmitTransactionV2Request, ::api::v1::SubmitTransactionV2Response>* streamer) {
                       return this->StreamedSubmitTransactionV2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitTransactionV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitTransactionV2(::grpc::ServerContext* /*context*/, const ::api::v1::SubmitTransactionV2Request* /*request*/, ::api::v1::SubmitTransactionV2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitTransactionV2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1::SubmitTransactionV2Request,::api::v1::SubmitTransactionV2Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PropagateChainEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PropagateChainEvent() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse>* streamer) {
                       return this->StreamedPropagateChainEvent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PropagateChainEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PropagateChainEvent(::grpc::ServerContext* /*context*/, const ::api::v1::PropagateChainEventRequest* /*request*/, ::api::v1::PropagateChainEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPropagateChainEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1::PropagateChainEventRequest,::api::v1::PropagateChainEventResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Statistics() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse>* streamer) {
                       return this->StreamedStatistics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::api::v1::StatisticsRequest* /*request*/, ::api::v1::StatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatistics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1::StatisticsRequest,::api::v1::StatisticsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LastBlockHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LastBlockHeight() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1::LastBlockHeightRequest, ::api::v1::LastBlockHeightResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1::LastBlockHeightRequest, ::api::v1::LastBlockHeightResponse>* streamer) {
                       return this->StreamedLastBlockHeight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LastBlockHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LastBlockHeight(::grpc::ServerContext* /*context*/, const ::api::v1::LastBlockHeightRequest* /*request*/, ::api::v1::LastBlockHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLastBlockHeight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1::LastBlockHeightRequest,::api::v1::LastBlockHeightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVegaTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVegaTime() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse>* streamer) {
                       return this->StreamedGetVegaTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVegaTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVegaTime(::grpc::ServerContext* /*context*/, const ::api::v1::GetVegaTimeRequest* /*request*/, ::api::v1::GetVegaTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVegaTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1::GetVegaTimeRequest,::api::v1::GetVegaTimeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitTransactionV2<WithStreamedUnaryMethod_PropagateChainEvent<WithStreamedUnaryMethod_Statistics<WithStreamedUnaryMethod_LastBlockHeight<WithStreamedUnaryMethod_GetVegaTime<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitTransactionV2<WithStreamedUnaryMethod_PropagateChainEvent<WithStreamedUnaryMethod_Statistics<WithStreamedUnaryMethod_LastBlockHeight<WithStreamedUnaryMethod_GetVegaTime<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace api


#endif  // GRPC_api_2ftrading_2eproto__INCLUDED
