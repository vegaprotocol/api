// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chain_events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chain_5fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chain_5fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chain_5fevents_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chain_5fevents_2eproto;
namespace vega {
class AddValidator;
class AddValidatorDefaultTypeInternal;
extern AddValidatorDefaultTypeInternal _AddValidator_default_instance_;
class BTCDeposit;
class BTCDepositDefaultTypeInternal;
extern BTCDepositDefaultTypeInternal _BTCDeposit_default_instance_;
class BTCEvent;
class BTCEventDefaultTypeInternal;
extern BTCEventDefaultTypeInternal _BTCEvent_default_instance_;
class BTCWithdrawal;
class BTCWithdrawalDefaultTypeInternal;
extern BTCWithdrawalDefaultTypeInternal _BTCWithdrawal_default_instance_;
class BitcoinAddress;
class BitcoinAddressDefaultTypeInternal;
extern BitcoinAddressDefaultTypeInternal _BitcoinAddress_default_instance_;
class BuiltinAssetDeposit;
class BuiltinAssetDepositDefaultTypeInternal;
extern BuiltinAssetDepositDefaultTypeInternal _BuiltinAssetDeposit_default_instance_;
class BuiltinAssetEvent;
class BuiltinAssetEventDefaultTypeInternal;
extern BuiltinAssetEventDefaultTypeInternal _BuiltinAssetEvent_default_instance_;
class BuiltinAssetWithdrawal;
class BuiltinAssetWithdrawalDefaultTypeInternal;
extern BuiltinAssetWithdrawalDefaultTypeInternal _BuiltinAssetWithdrawal_default_instance_;
class ERC20AssetDelist;
class ERC20AssetDelistDefaultTypeInternal;
extern ERC20AssetDelistDefaultTypeInternal _ERC20AssetDelist_default_instance_;
class ERC20AssetList;
class ERC20AssetListDefaultTypeInternal;
extern ERC20AssetListDefaultTypeInternal _ERC20AssetList_default_instance_;
class ERC20Deposit;
class ERC20DepositDefaultTypeInternal;
extern ERC20DepositDefaultTypeInternal _ERC20Deposit_default_instance_;
class ERC20Event;
class ERC20EventDefaultTypeInternal;
extern ERC20EventDefaultTypeInternal _ERC20Event_default_instance_;
class ERC20Withdrawal;
class ERC20WithdrawalDefaultTypeInternal;
extern ERC20WithdrawalDefaultTypeInternal _ERC20Withdrawal_default_instance_;
class EthereumAddress;
class EthereumAddressDefaultTypeInternal;
extern EthereumAddressDefaultTypeInternal _EthereumAddress_default_instance_;
class Identifier;
class IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class RemoveValidator;
class RemoveValidatorDefaultTypeInternal;
extern RemoveValidatorDefaultTypeInternal _RemoveValidator_default_instance_;
class StakeDeposited;
class StakeDepositedDefaultTypeInternal;
extern StakeDepositedDefaultTypeInternal _StakeDeposited_default_instance_;
class StakeRemoved;
class StakeRemovedDefaultTypeInternal;
extern StakeRemovedDefaultTypeInternal _StakeRemoved_default_instance_;
class StakingEvent;
class StakingEventDefaultTypeInternal;
extern StakingEventDefaultTypeInternal _StakingEvent_default_instance_;
class ValidatorEvent;
class ValidatorEventDefaultTypeInternal;
extern ValidatorEventDefaultTypeInternal _ValidatorEvent_default_instance_;
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::AddValidator* Arena::CreateMaybeMessage<::vega::AddValidator>(Arena*);
template<> ::vega::BTCDeposit* Arena::CreateMaybeMessage<::vega::BTCDeposit>(Arena*);
template<> ::vega::BTCEvent* Arena::CreateMaybeMessage<::vega::BTCEvent>(Arena*);
template<> ::vega::BTCWithdrawal* Arena::CreateMaybeMessage<::vega::BTCWithdrawal>(Arena*);
template<> ::vega::BitcoinAddress* Arena::CreateMaybeMessage<::vega::BitcoinAddress>(Arena*);
template<> ::vega::BuiltinAssetDeposit* Arena::CreateMaybeMessage<::vega::BuiltinAssetDeposit>(Arena*);
template<> ::vega::BuiltinAssetEvent* Arena::CreateMaybeMessage<::vega::BuiltinAssetEvent>(Arena*);
template<> ::vega::BuiltinAssetWithdrawal* Arena::CreateMaybeMessage<::vega::BuiltinAssetWithdrawal>(Arena*);
template<> ::vega::ERC20AssetDelist* Arena::CreateMaybeMessage<::vega::ERC20AssetDelist>(Arena*);
template<> ::vega::ERC20AssetList* Arena::CreateMaybeMessage<::vega::ERC20AssetList>(Arena*);
template<> ::vega::ERC20Deposit* Arena::CreateMaybeMessage<::vega::ERC20Deposit>(Arena*);
template<> ::vega::ERC20Event* Arena::CreateMaybeMessage<::vega::ERC20Event>(Arena*);
template<> ::vega::ERC20Withdrawal* Arena::CreateMaybeMessage<::vega::ERC20Withdrawal>(Arena*);
template<> ::vega::EthereumAddress* Arena::CreateMaybeMessage<::vega::EthereumAddress>(Arena*);
template<> ::vega::Identifier* Arena::CreateMaybeMessage<::vega::Identifier>(Arena*);
template<> ::vega::RemoveValidator* Arena::CreateMaybeMessage<::vega::RemoveValidator>(Arena*);
template<> ::vega::StakeDeposited* Arena::CreateMaybeMessage<::vega::StakeDeposited>(Arena*);
template<> ::vega::StakeRemoved* Arena::CreateMaybeMessage<::vega::StakeRemoved>(Arena*);
template<> ::vega::StakingEvent* Arena::CreateMaybeMessage<::vega::StakingEvent>(Arena*);
template<> ::vega::ValidatorEvent* Arena::CreateMaybeMessage<::vega::ValidatorEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {

// ===================================================================

class BuiltinAssetDeposit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.BuiltinAssetDeposit) */ {
 public:
  inline BuiltinAssetDeposit() : BuiltinAssetDeposit(nullptr) {}
  virtual ~BuiltinAssetDeposit();

  BuiltinAssetDeposit(const BuiltinAssetDeposit& from);
  BuiltinAssetDeposit(BuiltinAssetDeposit&& from) noexcept
    : BuiltinAssetDeposit() {
    *this = ::std::move(from);
  }

  inline BuiltinAssetDeposit& operator=(const BuiltinAssetDeposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuiltinAssetDeposit& operator=(BuiltinAssetDeposit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuiltinAssetDeposit& default_instance();

  static inline const BuiltinAssetDeposit* internal_default_instance() {
    return reinterpret_cast<const BuiltinAssetDeposit*>(
               &_BuiltinAssetDeposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BuiltinAssetDeposit& a, BuiltinAssetDeposit& b) {
    a.Swap(&b);
  }
  inline void Swap(BuiltinAssetDeposit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuiltinAssetDeposit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuiltinAssetDeposit* New() const final {
    return CreateMaybeMessage<BuiltinAssetDeposit>(nullptr);
  }

  BuiltinAssetDeposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuiltinAssetDeposit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuiltinAssetDeposit& from);
  void MergeFrom(const BuiltinAssetDeposit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuiltinAssetDeposit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.BuiltinAssetDeposit";
  }
  protected:
  explicit BuiltinAssetDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVegaAssetIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  void clear_vega_asset_id();
  const std::string& vega_asset_id() const;
  void set_vega_asset_id(const std::string& value);
  void set_vega_asset_id(std::string&& value);
  void set_vega_asset_id(const char* value);
  void set_vega_asset_id(const char* value, size_t size);
  std::string* mutable_vega_asset_id();
  std::string* release_vega_asset_id();
  void set_allocated_vega_asset_id(std::string* vega_asset_id);
  private:
  const std::string& _internal_vega_asset_id() const;
  void _internal_set_vega_asset_id(const std::string& value);
  std::string* _internal_mutable_vega_asset_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // uint64 amount = 3 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.BuiltinAssetDeposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class BuiltinAssetWithdrawal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.BuiltinAssetWithdrawal) */ {
 public:
  inline BuiltinAssetWithdrawal() : BuiltinAssetWithdrawal(nullptr) {}
  virtual ~BuiltinAssetWithdrawal();

  BuiltinAssetWithdrawal(const BuiltinAssetWithdrawal& from);
  BuiltinAssetWithdrawal(BuiltinAssetWithdrawal&& from) noexcept
    : BuiltinAssetWithdrawal() {
    *this = ::std::move(from);
  }

  inline BuiltinAssetWithdrawal& operator=(const BuiltinAssetWithdrawal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuiltinAssetWithdrawal& operator=(BuiltinAssetWithdrawal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuiltinAssetWithdrawal& default_instance();

  static inline const BuiltinAssetWithdrawal* internal_default_instance() {
    return reinterpret_cast<const BuiltinAssetWithdrawal*>(
               &_BuiltinAssetWithdrawal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BuiltinAssetWithdrawal& a, BuiltinAssetWithdrawal& b) {
    a.Swap(&b);
  }
  inline void Swap(BuiltinAssetWithdrawal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuiltinAssetWithdrawal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuiltinAssetWithdrawal* New() const final {
    return CreateMaybeMessage<BuiltinAssetWithdrawal>(nullptr);
  }

  BuiltinAssetWithdrawal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuiltinAssetWithdrawal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuiltinAssetWithdrawal& from);
  void MergeFrom(const BuiltinAssetWithdrawal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuiltinAssetWithdrawal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.BuiltinAssetWithdrawal";
  }
  protected:
  explicit BuiltinAssetWithdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVegaAssetIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  void clear_vega_asset_id();
  const std::string& vega_asset_id() const;
  void set_vega_asset_id(const std::string& value);
  void set_vega_asset_id(std::string&& value);
  void set_vega_asset_id(const char* value);
  void set_vega_asset_id(const char* value, size_t size);
  std::string* mutable_vega_asset_id();
  std::string* release_vega_asset_id();
  void set_allocated_vega_asset_id(std::string* vega_asset_id);
  private:
  const std::string& _internal_vega_asset_id() const;
  void _internal_set_vega_asset_id(const std::string& value);
  std::string* _internal_mutable_vega_asset_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string amount = 3 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:vega.BuiltinAssetWithdrawal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class BuiltinAssetEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.BuiltinAssetEvent) */ {
 public:
  inline BuiltinAssetEvent() : BuiltinAssetEvent(nullptr) {}
  virtual ~BuiltinAssetEvent();

  BuiltinAssetEvent(const BuiltinAssetEvent& from);
  BuiltinAssetEvent(BuiltinAssetEvent&& from) noexcept
    : BuiltinAssetEvent() {
    *this = ::std::move(from);
  }

  inline BuiltinAssetEvent& operator=(const BuiltinAssetEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuiltinAssetEvent& operator=(BuiltinAssetEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuiltinAssetEvent& default_instance();

  enum ActionCase {
    kDeposit = 1001,
    kWithdrawal = 1002,
    ACTION_NOT_SET = 0,
  };

  static inline const BuiltinAssetEvent* internal_default_instance() {
    return reinterpret_cast<const BuiltinAssetEvent*>(
               &_BuiltinAssetEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BuiltinAssetEvent& a, BuiltinAssetEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BuiltinAssetEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuiltinAssetEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuiltinAssetEvent* New() const final {
    return CreateMaybeMessage<BuiltinAssetEvent>(nullptr);
  }

  BuiltinAssetEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuiltinAssetEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuiltinAssetEvent& from);
  void MergeFrom(const BuiltinAssetEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuiltinAssetEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.BuiltinAssetEvent";
  }
  protected:
  explicit BuiltinAssetEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositFieldNumber = 1001,
    kWithdrawalFieldNumber = 1002,
  };
  // .vega.BuiltinAssetDeposit deposit = 1001 [json_name = "deposit"];
  bool has_deposit() const;
  private:
  bool _internal_has_deposit() const;
  public:
  void clear_deposit();
  const ::vega::BuiltinAssetDeposit& deposit() const;
  ::vega::BuiltinAssetDeposit* release_deposit();
  ::vega::BuiltinAssetDeposit* mutable_deposit();
  void set_allocated_deposit(::vega::BuiltinAssetDeposit* deposit);
  private:
  const ::vega::BuiltinAssetDeposit& _internal_deposit() const;
  ::vega::BuiltinAssetDeposit* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::vega::BuiltinAssetDeposit* deposit);
  ::vega::BuiltinAssetDeposit* unsafe_arena_release_deposit();

  // .vega.BuiltinAssetWithdrawal withdrawal = 1002 [json_name = "withdrawal"];
  bool has_withdrawal() const;
  private:
  bool _internal_has_withdrawal() const;
  public:
  void clear_withdrawal();
  const ::vega::BuiltinAssetWithdrawal& withdrawal() const;
  ::vega::BuiltinAssetWithdrawal* release_withdrawal();
  ::vega::BuiltinAssetWithdrawal* mutable_withdrawal();
  void set_allocated_withdrawal(::vega::BuiltinAssetWithdrawal* withdrawal);
  private:
  const ::vega::BuiltinAssetWithdrawal& _internal_withdrawal() const;
  ::vega::BuiltinAssetWithdrawal* _internal_mutable_withdrawal();
  public:
  void unsafe_arena_set_allocated_withdrawal(
      ::vega::BuiltinAssetWithdrawal* withdrawal);
  ::vega::BuiltinAssetWithdrawal* unsafe_arena_release_withdrawal();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:vega.BuiltinAssetEvent)
 private:
  class _Internal;
  void set_has_deposit();
  void set_has_withdrawal();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ActionUnion {
    ActionUnion() {}
    ::vega::BuiltinAssetDeposit* deposit_;
    ::vega::BuiltinAssetWithdrawal* withdrawal_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class ERC20AssetList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.ERC20AssetList) */ {
 public:
  inline ERC20AssetList() : ERC20AssetList(nullptr) {}
  virtual ~ERC20AssetList();

  ERC20AssetList(const ERC20AssetList& from);
  ERC20AssetList(ERC20AssetList&& from) noexcept
    : ERC20AssetList() {
    *this = ::std::move(from);
  }

  inline ERC20AssetList& operator=(const ERC20AssetList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20AssetList& operator=(ERC20AssetList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20AssetList& default_instance();

  static inline const ERC20AssetList* internal_default_instance() {
    return reinterpret_cast<const ERC20AssetList*>(
               &_ERC20AssetList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ERC20AssetList& a, ERC20AssetList& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20AssetList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20AssetList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20AssetList* New() const final {
    return CreateMaybeMessage<ERC20AssetList>(nullptr);
  }

  ERC20AssetList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20AssetList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20AssetList& from);
  void MergeFrom(const ERC20AssetList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20AssetList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.ERC20AssetList";
  }
  protected:
  explicit ERC20AssetList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVegaAssetIdFieldNumber = 1,
  };
  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  void clear_vega_asset_id();
  const std::string& vega_asset_id() const;
  void set_vega_asset_id(const std::string& value);
  void set_vega_asset_id(std::string&& value);
  void set_vega_asset_id(const char* value);
  void set_vega_asset_id(const char* value, size_t size);
  std::string* mutable_vega_asset_id();
  std::string* release_vega_asset_id();
  void set_allocated_vega_asset_id(std::string* vega_asset_id);
  private:
  const std::string& _internal_vega_asset_id() const;
  void _internal_set_vega_asset_id(const std::string& value);
  std::string* _internal_mutable_vega_asset_id();
  public:

  // @@protoc_insertion_point(class_scope:vega.ERC20AssetList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_asset_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class ERC20AssetDelist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.ERC20AssetDelist) */ {
 public:
  inline ERC20AssetDelist() : ERC20AssetDelist(nullptr) {}
  virtual ~ERC20AssetDelist();

  ERC20AssetDelist(const ERC20AssetDelist& from);
  ERC20AssetDelist(ERC20AssetDelist&& from) noexcept
    : ERC20AssetDelist() {
    *this = ::std::move(from);
  }

  inline ERC20AssetDelist& operator=(const ERC20AssetDelist& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20AssetDelist& operator=(ERC20AssetDelist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20AssetDelist& default_instance();

  static inline const ERC20AssetDelist* internal_default_instance() {
    return reinterpret_cast<const ERC20AssetDelist*>(
               &_ERC20AssetDelist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ERC20AssetDelist& a, ERC20AssetDelist& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20AssetDelist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20AssetDelist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20AssetDelist* New() const final {
    return CreateMaybeMessage<ERC20AssetDelist>(nullptr);
  }

  ERC20AssetDelist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20AssetDelist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20AssetDelist& from);
  void MergeFrom(const ERC20AssetDelist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20AssetDelist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.ERC20AssetDelist";
  }
  protected:
  explicit ERC20AssetDelist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVegaAssetIdFieldNumber = 1,
  };
  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  void clear_vega_asset_id();
  const std::string& vega_asset_id() const;
  void set_vega_asset_id(const std::string& value);
  void set_vega_asset_id(std::string&& value);
  void set_vega_asset_id(const char* value);
  void set_vega_asset_id(const char* value, size_t size);
  std::string* mutable_vega_asset_id();
  std::string* release_vega_asset_id();
  void set_allocated_vega_asset_id(std::string* vega_asset_id);
  private:
  const std::string& _internal_vega_asset_id() const;
  void _internal_set_vega_asset_id(const std::string& value);
  std::string* _internal_mutable_vega_asset_id();
  public:

  // @@protoc_insertion_point(class_scope:vega.ERC20AssetDelist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_asset_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class ERC20Deposit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.ERC20Deposit) */ {
 public:
  inline ERC20Deposit() : ERC20Deposit(nullptr) {}
  virtual ~ERC20Deposit();

  ERC20Deposit(const ERC20Deposit& from);
  ERC20Deposit(ERC20Deposit&& from) noexcept
    : ERC20Deposit() {
    *this = ::std::move(from);
  }

  inline ERC20Deposit& operator=(const ERC20Deposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20Deposit& operator=(ERC20Deposit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20Deposit& default_instance();

  static inline const ERC20Deposit* internal_default_instance() {
    return reinterpret_cast<const ERC20Deposit*>(
               &_ERC20Deposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ERC20Deposit& a, ERC20Deposit& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20Deposit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20Deposit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20Deposit* New() const final {
    return CreateMaybeMessage<ERC20Deposit>(nullptr);
  }

  ERC20Deposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20Deposit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20Deposit& from);
  void MergeFrom(const ERC20Deposit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20Deposit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.ERC20Deposit";
  }
  protected:
  explicit ERC20Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVegaAssetIdFieldNumber = 1,
    kSourceEthereumAddressFieldNumber = 2,
    kTargetPartyIdFieldNumber = 3,
    kAmountFieldNumber = 4,
  };
  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  void clear_vega_asset_id();
  const std::string& vega_asset_id() const;
  void set_vega_asset_id(const std::string& value);
  void set_vega_asset_id(std::string&& value);
  void set_vega_asset_id(const char* value);
  void set_vega_asset_id(const char* value, size_t size);
  std::string* mutable_vega_asset_id();
  std::string* release_vega_asset_id();
  void set_allocated_vega_asset_id(std::string* vega_asset_id);
  private:
  const std::string& _internal_vega_asset_id() const;
  void _internal_set_vega_asset_id(const std::string& value);
  std::string* _internal_mutable_vega_asset_id();
  public:

  // string source_ethereum_address = 2 [json_name = "sourceEthereumAddress"];
  void clear_source_ethereum_address();
  const std::string& source_ethereum_address() const;
  void set_source_ethereum_address(const std::string& value);
  void set_source_ethereum_address(std::string&& value);
  void set_source_ethereum_address(const char* value);
  void set_source_ethereum_address(const char* value, size_t size);
  std::string* mutable_source_ethereum_address();
  std::string* release_source_ethereum_address();
  void set_allocated_source_ethereum_address(std::string* source_ethereum_address);
  private:
  const std::string& _internal_source_ethereum_address() const;
  void _internal_set_source_ethereum_address(const std::string& value);
  std::string* _internal_mutable_source_ethereum_address();
  public:

  // string target_party_id = 3 [json_name = "targetPartyId"];
  void clear_target_party_id();
  const std::string& target_party_id() const;
  void set_target_party_id(const std::string& value);
  void set_target_party_id(std::string&& value);
  void set_target_party_id(const char* value);
  void set_target_party_id(const char* value, size_t size);
  std::string* mutable_target_party_id();
  std::string* release_target_party_id();
  void set_allocated_target_party_id(std::string* target_party_id);
  private:
  const std::string& _internal_target_party_id() const;
  void _internal_set_target_party_id(const std::string& value);
  std::string* _internal_mutable_target_party_id();
  public:

  // string amount = 4 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:vega.ERC20Deposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_ethereum_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class ERC20Withdrawal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.ERC20Withdrawal) */ {
 public:
  inline ERC20Withdrawal() : ERC20Withdrawal(nullptr) {}
  virtual ~ERC20Withdrawal();

  ERC20Withdrawal(const ERC20Withdrawal& from);
  ERC20Withdrawal(ERC20Withdrawal&& from) noexcept
    : ERC20Withdrawal() {
    *this = ::std::move(from);
  }

  inline ERC20Withdrawal& operator=(const ERC20Withdrawal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20Withdrawal& operator=(ERC20Withdrawal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20Withdrawal& default_instance();

  static inline const ERC20Withdrawal* internal_default_instance() {
    return reinterpret_cast<const ERC20Withdrawal*>(
               &_ERC20Withdrawal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ERC20Withdrawal& a, ERC20Withdrawal& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20Withdrawal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20Withdrawal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20Withdrawal* New() const final {
    return CreateMaybeMessage<ERC20Withdrawal>(nullptr);
  }

  ERC20Withdrawal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20Withdrawal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20Withdrawal& from);
  void MergeFrom(const ERC20Withdrawal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20Withdrawal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.ERC20Withdrawal";
  }
  protected:
  explicit ERC20Withdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVegaAssetIdFieldNumber = 1,
    kTargetEthereumAddressFieldNumber = 2,
    kReferenceNonceFieldNumber = 3,
  };
  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  void clear_vega_asset_id();
  const std::string& vega_asset_id() const;
  void set_vega_asset_id(const std::string& value);
  void set_vega_asset_id(std::string&& value);
  void set_vega_asset_id(const char* value);
  void set_vega_asset_id(const char* value, size_t size);
  std::string* mutable_vega_asset_id();
  std::string* release_vega_asset_id();
  void set_allocated_vega_asset_id(std::string* vega_asset_id);
  private:
  const std::string& _internal_vega_asset_id() const;
  void _internal_set_vega_asset_id(const std::string& value);
  std::string* _internal_mutable_vega_asset_id();
  public:

  // string target_ethereum_address = 2 [json_name = "targetEthereumAddress"];
  void clear_target_ethereum_address();
  const std::string& target_ethereum_address() const;
  void set_target_ethereum_address(const std::string& value);
  void set_target_ethereum_address(std::string&& value);
  void set_target_ethereum_address(const char* value);
  void set_target_ethereum_address(const char* value, size_t size);
  std::string* mutable_target_ethereum_address();
  std::string* release_target_ethereum_address();
  void set_allocated_target_ethereum_address(std::string* target_ethereum_address);
  private:
  const std::string& _internal_target_ethereum_address() const;
  void _internal_set_target_ethereum_address(const std::string& value);
  std::string* _internal_mutable_target_ethereum_address();
  public:

  // string reference_nonce = 3 [json_name = "referenceNonce"];
  void clear_reference_nonce();
  const std::string& reference_nonce() const;
  void set_reference_nonce(const std::string& value);
  void set_reference_nonce(std::string&& value);
  void set_reference_nonce(const char* value);
  void set_reference_nonce(const char* value, size_t size);
  std::string* mutable_reference_nonce();
  std::string* release_reference_nonce();
  void set_allocated_reference_nonce(std::string* reference_nonce);
  private:
  const std::string& _internal_reference_nonce() const;
  void _internal_set_reference_nonce(const std::string& value);
  std::string* _internal_mutable_reference_nonce();
  public:

  // @@protoc_insertion_point(class_scope:vega.ERC20Withdrawal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_ethereum_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class ERC20Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.ERC20Event) */ {
 public:
  inline ERC20Event() : ERC20Event(nullptr) {}
  virtual ~ERC20Event();

  ERC20Event(const ERC20Event& from);
  ERC20Event(ERC20Event&& from) noexcept
    : ERC20Event() {
    *this = ::std::move(from);
  }

  inline ERC20Event& operator=(const ERC20Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20Event& operator=(ERC20Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20Event& default_instance();

  enum ActionCase {
    kAssetList = 1001,
    kAssetDelist = 1002,
    kDeposit = 1003,
    kWithdrawal = 1004,
    ACTION_NOT_SET = 0,
  };

  static inline const ERC20Event* internal_default_instance() {
    return reinterpret_cast<const ERC20Event*>(
               &_ERC20Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ERC20Event& a, ERC20Event& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20Event* New() const final {
    return CreateMaybeMessage<ERC20Event>(nullptr);
  }

  ERC20Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20Event& from);
  void MergeFrom(const ERC20Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.ERC20Event";
  }
  protected:
  explicit ERC20Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kBlockFieldNumber = 2,
    kAssetListFieldNumber = 1001,
    kAssetDelistFieldNumber = 1002,
    kDepositFieldNumber = 1003,
    kWithdrawalFieldNumber = 1004,
  };
  // uint64 index = 1 [json_name = "index"];
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block = 2 [json_name = "block"];
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block() const;
  void _internal_set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.ERC20AssetList asset_list = 1001 [json_name = "assetList"];
  bool has_asset_list() const;
  private:
  bool _internal_has_asset_list() const;
  public:
  void clear_asset_list();
  const ::vega::ERC20AssetList& asset_list() const;
  ::vega::ERC20AssetList* release_asset_list();
  ::vega::ERC20AssetList* mutable_asset_list();
  void set_allocated_asset_list(::vega::ERC20AssetList* asset_list);
  private:
  const ::vega::ERC20AssetList& _internal_asset_list() const;
  ::vega::ERC20AssetList* _internal_mutable_asset_list();
  public:
  void unsafe_arena_set_allocated_asset_list(
      ::vega::ERC20AssetList* asset_list);
  ::vega::ERC20AssetList* unsafe_arena_release_asset_list();

  // .vega.ERC20AssetDelist asset_delist = 1002 [json_name = "assetDelist"];
  bool has_asset_delist() const;
  private:
  bool _internal_has_asset_delist() const;
  public:
  void clear_asset_delist();
  const ::vega::ERC20AssetDelist& asset_delist() const;
  ::vega::ERC20AssetDelist* release_asset_delist();
  ::vega::ERC20AssetDelist* mutable_asset_delist();
  void set_allocated_asset_delist(::vega::ERC20AssetDelist* asset_delist);
  private:
  const ::vega::ERC20AssetDelist& _internal_asset_delist() const;
  ::vega::ERC20AssetDelist* _internal_mutable_asset_delist();
  public:
  void unsafe_arena_set_allocated_asset_delist(
      ::vega::ERC20AssetDelist* asset_delist);
  ::vega::ERC20AssetDelist* unsafe_arena_release_asset_delist();

  // .vega.ERC20Deposit deposit = 1003 [json_name = "deposit"];
  bool has_deposit() const;
  private:
  bool _internal_has_deposit() const;
  public:
  void clear_deposit();
  const ::vega::ERC20Deposit& deposit() const;
  ::vega::ERC20Deposit* release_deposit();
  ::vega::ERC20Deposit* mutable_deposit();
  void set_allocated_deposit(::vega::ERC20Deposit* deposit);
  private:
  const ::vega::ERC20Deposit& _internal_deposit() const;
  ::vega::ERC20Deposit* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::vega::ERC20Deposit* deposit);
  ::vega::ERC20Deposit* unsafe_arena_release_deposit();

  // .vega.ERC20Withdrawal withdrawal = 1004 [json_name = "withdrawal"];
  bool has_withdrawal() const;
  private:
  bool _internal_has_withdrawal() const;
  public:
  void clear_withdrawal();
  const ::vega::ERC20Withdrawal& withdrawal() const;
  ::vega::ERC20Withdrawal* release_withdrawal();
  ::vega::ERC20Withdrawal* mutable_withdrawal();
  void set_allocated_withdrawal(::vega::ERC20Withdrawal* withdrawal);
  private:
  const ::vega::ERC20Withdrawal& _internal_withdrawal() const;
  ::vega::ERC20Withdrawal* _internal_mutable_withdrawal();
  public:
  void unsafe_arena_set_allocated_withdrawal(
      ::vega::ERC20Withdrawal* withdrawal);
  ::vega::ERC20Withdrawal* unsafe_arena_release_withdrawal();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:vega.ERC20Event)
 private:
  class _Internal;
  void set_has_asset_list();
  void set_has_asset_delist();
  void set_has_deposit();
  void set_has_withdrawal();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_;
  union ActionUnion {
    ActionUnion() {}
    ::vega::ERC20AssetList* asset_list_;
    ::vega::ERC20AssetDelist* asset_delist_;
    ::vega::ERC20Deposit* deposit_;
    ::vega::ERC20Withdrawal* withdrawal_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class BTCDeposit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.BTCDeposit) */ {
 public:
  inline BTCDeposit() : BTCDeposit(nullptr) {}
  virtual ~BTCDeposit();

  BTCDeposit(const BTCDeposit& from);
  BTCDeposit(BTCDeposit&& from) noexcept
    : BTCDeposit() {
    *this = ::std::move(from);
  }

  inline BTCDeposit& operator=(const BTCDeposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTCDeposit& operator=(BTCDeposit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BTCDeposit& default_instance();

  static inline const BTCDeposit* internal_default_instance() {
    return reinterpret_cast<const BTCDeposit*>(
               &_BTCDeposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BTCDeposit& a, BTCDeposit& b) {
    a.Swap(&b);
  }
  inline void Swap(BTCDeposit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTCDeposit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTCDeposit* New() const final {
    return CreateMaybeMessage<BTCDeposit>(nullptr);
  }

  BTCDeposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTCDeposit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTCDeposit& from);
  void MergeFrom(const BTCDeposit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTCDeposit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.BTCDeposit";
  }
  protected:
  explicit BTCDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVegaAssetIdFieldNumber = 1,
    kSourceBtcAddressFieldNumber = 2,
    kTargetPartyIdFieldNumber = 3,
  };
  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  void clear_vega_asset_id();
  const std::string& vega_asset_id() const;
  void set_vega_asset_id(const std::string& value);
  void set_vega_asset_id(std::string&& value);
  void set_vega_asset_id(const char* value);
  void set_vega_asset_id(const char* value, size_t size);
  std::string* mutable_vega_asset_id();
  std::string* release_vega_asset_id();
  void set_allocated_vega_asset_id(std::string* vega_asset_id);
  private:
  const std::string& _internal_vega_asset_id() const;
  void _internal_set_vega_asset_id(const std::string& value);
  std::string* _internal_mutable_vega_asset_id();
  public:

  // string source_btc_address = 2 [json_name = "sourceBtcAddress"];
  void clear_source_btc_address();
  const std::string& source_btc_address() const;
  void set_source_btc_address(const std::string& value);
  void set_source_btc_address(std::string&& value);
  void set_source_btc_address(const char* value);
  void set_source_btc_address(const char* value, size_t size);
  std::string* mutable_source_btc_address();
  std::string* release_source_btc_address();
  void set_allocated_source_btc_address(std::string* source_btc_address);
  private:
  const std::string& _internal_source_btc_address() const;
  void _internal_set_source_btc_address(const std::string& value);
  std::string* _internal_mutable_source_btc_address();
  public:

  // string target_party_id = 3 [json_name = "targetPartyId"];
  void clear_target_party_id();
  const std::string& target_party_id() const;
  void set_target_party_id(const std::string& value);
  void set_target_party_id(std::string&& value);
  void set_target_party_id(const char* value);
  void set_target_party_id(const char* value, size_t size);
  std::string* mutable_target_party_id();
  std::string* release_target_party_id();
  void set_allocated_target_party_id(std::string* target_party_id);
  private:
  const std::string& _internal_target_party_id() const;
  void _internal_set_target_party_id(const std::string& value);
  std::string* _internal_mutable_target_party_id();
  public:

  // @@protoc_insertion_point(class_scope:vega.BTCDeposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_btc_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class BTCWithdrawal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.BTCWithdrawal) */ {
 public:
  inline BTCWithdrawal() : BTCWithdrawal(nullptr) {}
  virtual ~BTCWithdrawal();

  BTCWithdrawal(const BTCWithdrawal& from);
  BTCWithdrawal(BTCWithdrawal&& from) noexcept
    : BTCWithdrawal() {
    *this = ::std::move(from);
  }

  inline BTCWithdrawal& operator=(const BTCWithdrawal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTCWithdrawal& operator=(BTCWithdrawal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BTCWithdrawal& default_instance();

  static inline const BTCWithdrawal* internal_default_instance() {
    return reinterpret_cast<const BTCWithdrawal*>(
               &_BTCWithdrawal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BTCWithdrawal& a, BTCWithdrawal& b) {
    a.Swap(&b);
  }
  inline void Swap(BTCWithdrawal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTCWithdrawal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTCWithdrawal* New() const final {
    return CreateMaybeMessage<BTCWithdrawal>(nullptr);
  }

  BTCWithdrawal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTCWithdrawal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTCWithdrawal& from);
  void MergeFrom(const BTCWithdrawal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTCWithdrawal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.BTCWithdrawal";
  }
  protected:
  explicit BTCWithdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVegaAssetIdFieldNumber = 1,
    kSourcePartyIdFieldNumber = 2,
    kTargetBtcAddressFieldNumber = 3,
    kReferenceNonceFieldNumber = 4,
  };
  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  void clear_vega_asset_id();
  const std::string& vega_asset_id() const;
  void set_vega_asset_id(const std::string& value);
  void set_vega_asset_id(std::string&& value);
  void set_vega_asset_id(const char* value);
  void set_vega_asset_id(const char* value, size_t size);
  std::string* mutable_vega_asset_id();
  std::string* release_vega_asset_id();
  void set_allocated_vega_asset_id(std::string* vega_asset_id);
  private:
  const std::string& _internal_vega_asset_id() const;
  void _internal_set_vega_asset_id(const std::string& value);
  std::string* _internal_mutable_vega_asset_id();
  public:

  // string source_party_id = 2 [json_name = "sourcePartyId"];
  void clear_source_party_id();
  const std::string& source_party_id() const;
  void set_source_party_id(const std::string& value);
  void set_source_party_id(std::string&& value);
  void set_source_party_id(const char* value);
  void set_source_party_id(const char* value, size_t size);
  std::string* mutable_source_party_id();
  std::string* release_source_party_id();
  void set_allocated_source_party_id(std::string* source_party_id);
  private:
  const std::string& _internal_source_party_id() const;
  void _internal_set_source_party_id(const std::string& value);
  std::string* _internal_mutable_source_party_id();
  public:

  // string target_btc_address = 3 [json_name = "targetBtcAddress"];
  void clear_target_btc_address();
  const std::string& target_btc_address() const;
  void set_target_btc_address(const std::string& value);
  void set_target_btc_address(std::string&& value);
  void set_target_btc_address(const char* value);
  void set_target_btc_address(const char* value, size_t size);
  std::string* mutable_target_btc_address();
  std::string* release_target_btc_address();
  void set_allocated_target_btc_address(std::string* target_btc_address);
  private:
  const std::string& _internal_target_btc_address() const;
  void _internal_set_target_btc_address(const std::string& value);
  std::string* _internal_mutable_target_btc_address();
  public:

  // string reference_nonce = 4 [json_name = "referenceNonce"];
  void clear_reference_nonce();
  const std::string& reference_nonce() const;
  void set_reference_nonce(const std::string& value);
  void set_reference_nonce(std::string&& value);
  void set_reference_nonce(const char* value);
  void set_reference_nonce(const char* value, size_t size);
  std::string* mutable_reference_nonce();
  std::string* release_reference_nonce();
  void set_allocated_reference_nonce(std::string* reference_nonce);
  private:
  const std::string& _internal_reference_nonce() const;
  void _internal_set_reference_nonce(const std::string& value);
  std::string* _internal_mutable_reference_nonce();
  public:

  // @@protoc_insertion_point(class_scope:vega.BTCWithdrawal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_btc_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class BTCEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.BTCEvent) */ {
 public:
  inline BTCEvent() : BTCEvent(nullptr) {}
  virtual ~BTCEvent();

  BTCEvent(const BTCEvent& from);
  BTCEvent(BTCEvent&& from) noexcept
    : BTCEvent() {
    *this = ::std::move(from);
  }

  inline BTCEvent& operator=(const BTCEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTCEvent& operator=(BTCEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BTCEvent& default_instance();

  enum ActionCase {
    kDeposit = 1001,
    kWithdrawal = 1002,
    ACTION_NOT_SET = 0,
  };

  static inline const BTCEvent* internal_default_instance() {
    return reinterpret_cast<const BTCEvent*>(
               &_BTCEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BTCEvent& a, BTCEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BTCEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTCEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTCEvent* New() const final {
    return CreateMaybeMessage<BTCEvent>(nullptr);
  }

  BTCEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTCEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTCEvent& from);
  void MergeFrom(const BTCEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTCEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.BTCEvent";
  }
  protected:
  explicit BTCEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kBlockFieldNumber = 2,
    kDepositFieldNumber = 1001,
    kWithdrawalFieldNumber = 1002,
  };
  // uint64 index = 1 [json_name = "index"];
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block = 2 [json_name = "block"];
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block() const;
  void _internal_set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.BTCDeposit deposit = 1001 [json_name = "deposit"];
  bool has_deposit() const;
  private:
  bool _internal_has_deposit() const;
  public:
  void clear_deposit();
  const ::vega::BTCDeposit& deposit() const;
  ::vega::BTCDeposit* release_deposit();
  ::vega::BTCDeposit* mutable_deposit();
  void set_allocated_deposit(::vega::BTCDeposit* deposit);
  private:
  const ::vega::BTCDeposit& _internal_deposit() const;
  ::vega::BTCDeposit* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::vega::BTCDeposit* deposit);
  ::vega::BTCDeposit* unsafe_arena_release_deposit();

  // .vega.BTCWithdrawal withdrawal = 1002 [json_name = "withdrawal"];
  bool has_withdrawal() const;
  private:
  bool _internal_has_withdrawal() const;
  public:
  void clear_withdrawal();
  const ::vega::BTCWithdrawal& withdrawal() const;
  ::vega::BTCWithdrawal* release_withdrawal();
  ::vega::BTCWithdrawal* mutable_withdrawal();
  void set_allocated_withdrawal(::vega::BTCWithdrawal* withdrawal);
  private:
  const ::vega::BTCWithdrawal& _internal_withdrawal() const;
  ::vega::BTCWithdrawal* _internal_mutable_withdrawal();
  public:
  void unsafe_arena_set_allocated_withdrawal(
      ::vega::BTCWithdrawal* withdrawal);
  ::vega::BTCWithdrawal* unsafe_arena_release_withdrawal();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:vega.BTCEvent)
 private:
  class _Internal;
  void set_has_deposit();
  void set_has_withdrawal();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_;
  union ActionUnion {
    ActionUnion() {}
    ::vega::BTCDeposit* deposit_;
    ::vega::BTCWithdrawal* withdrawal_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class EthereumAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.EthereumAddress) */ {
 public:
  inline EthereumAddress() : EthereumAddress(nullptr) {}
  virtual ~EthereumAddress();

  EthereumAddress(const EthereumAddress& from);
  EthereumAddress(EthereumAddress&& from) noexcept
    : EthereumAddress() {
    *this = ::std::move(from);
  }

  inline EthereumAddress& operator=(const EthereumAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthereumAddress& operator=(EthereumAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EthereumAddress& default_instance();

  static inline const EthereumAddress* internal_default_instance() {
    return reinterpret_cast<const EthereumAddress*>(
               &_EthereumAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EthereumAddress& a, EthereumAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(EthereumAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EthereumAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EthereumAddress* New() const final {
    return CreateMaybeMessage<EthereumAddress>(nullptr);
  }

  EthereumAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EthereumAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EthereumAddress& from);
  void MergeFrom(const EthereumAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthereumAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.EthereumAddress";
  }
  protected:
  explicit EthereumAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:vega.EthereumAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class BitcoinAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.BitcoinAddress) */ {
 public:
  inline BitcoinAddress() : BitcoinAddress(nullptr) {}
  virtual ~BitcoinAddress();

  BitcoinAddress(const BitcoinAddress& from);
  BitcoinAddress(BitcoinAddress&& from) noexcept
    : BitcoinAddress() {
    *this = ::std::move(from);
  }

  inline BitcoinAddress& operator=(const BitcoinAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitcoinAddress& operator=(BitcoinAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BitcoinAddress& default_instance();

  static inline const BitcoinAddress* internal_default_instance() {
    return reinterpret_cast<const BitcoinAddress*>(
               &_BitcoinAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BitcoinAddress& a, BitcoinAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(BitcoinAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BitcoinAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BitcoinAddress* New() const final {
    return CreateMaybeMessage<BitcoinAddress>(nullptr);
  }

  BitcoinAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BitcoinAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BitcoinAddress& from);
  void MergeFrom(const BitcoinAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitcoinAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.BitcoinAddress";
  }
  protected:
  explicit BitcoinAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:vega.BitcoinAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class Identifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Identifier) */ {
 public:
  inline Identifier() : Identifier(nullptr) {}
  virtual ~Identifier();

  Identifier(const Identifier& from);
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identifier& operator=(Identifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identifier& default_instance();

  enum IdentifierCase {
    kEthereumAddress = 1,
    kBitcoinAddress = 2,
    IDENTIFIER_NOT_SET = 0,
  };

  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }
  inline void Swap(Identifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identifier* New() const final {
    return CreateMaybeMessage<Identifier>(nullptr);
  }

  Identifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Identifier";
  }
  protected:
  explicit Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEthereumAddressFieldNumber = 1,
    kBitcoinAddressFieldNumber = 2,
  };
  // .vega.EthereumAddress ethereum_address = 1 [json_name = "ethereumAddress"];
  bool has_ethereum_address() const;
  private:
  bool _internal_has_ethereum_address() const;
  public:
  void clear_ethereum_address();
  const ::vega::EthereumAddress& ethereum_address() const;
  ::vega::EthereumAddress* release_ethereum_address();
  ::vega::EthereumAddress* mutable_ethereum_address();
  void set_allocated_ethereum_address(::vega::EthereumAddress* ethereum_address);
  private:
  const ::vega::EthereumAddress& _internal_ethereum_address() const;
  ::vega::EthereumAddress* _internal_mutable_ethereum_address();
  public:
  void unsafe_arena_set_allocated_ethereum_address(
      ::vega::EthereumAddress* ethereum_address);
  ::vega::EthereumAddress* unsafe_arena_release_ethereum_address();

  // .vega.BitcoinAddress bitcoin_address = 2 [json_name = "bitcoinAddress"];
  bool has_bitcoin_address() const;
  private:
  bool _internal_has_bitcoin_address() const;
  public:
  void clear_bitcoin_address();
  const ::vega::BitcoinAddress& bitcoin_address() const;
  ::vega::BitcoinAddress* release_bitcoin_address();
  ::vega::BitcoinAddress* mutable_bitcoin_address();
  void set_allocated_bitcoin_address(::vega::BitcoinAddress* bitcoin_address);
  private:
  const ::vega::BitcoinAddress& _internal_bitcoin_address() const;
  ::vega::BitcoinAddress* _internal_mutable_bitcoin_address();
  public:
  void unsafe_arena_set_allocated_bitcoin_address(
      ::vega::BitcoinAddress* bitcoin_address);
  ::vega::BitcoinAddress* unsafe_arena_release_bitcoin_address();

  void clear_identifier();
  IdentifierCase identifier_case() const;
  // @@protoc_insertion_point(class_scope:vega.Identifier)
 private:
  class _Internal;
  void set_has_ethereum_address();
  void set_has_bitcoin_address();

  inline bool has_identifier() const;
  inline void clear_has_identifier();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdentifierUnion {
    IdentifierUnion() {}
    ::vega::EthereumAddress* ethereum_address_;
    ::vega::BitcoinAddress* bitcoin_address_;
  } identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class AddValidator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.AddValidator) */ {
 public:
  inline AddValidator() : AddValidator(nullptr) {}
  virtual ~AddValidator();

  AddValidator(const AddValidator& from);
  AddValidator(AddValidator&& from) noexcept
    : AddValidator() {
    *this = ::std::move(from);
  }

  inline AddValidator& operator=(const AddValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddValidator& operator=(AddValidator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddValidator& default_instance();

  static inline const AddValidator* internal_default_instance() {
    return reinterpret_cast<const AddValidator*>(
               &_AddValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AddValidator& a, AddValidator& b) {
    a.Swap(&b);
  }
  inline void Swap(AddValidator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddValidator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddValidator* New() const final {
    return CreateMaybeMessage<AddValidator>(nullptr);
  }

  AddValidator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddValidator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddValidator& from);
  void MergeFrom(const AddValidator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddValidator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.AddValidator";
  }
  protected:
  explicit AddValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .vega.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::vega::Identifier& id() const;
  ::vega::Identifier* release_id();
  ::vega::Identifier* mutable_id();
  void set_allocated_id(::vega::Identifier* id);
  private:
  const ::vega::Identifier& _internal_id() const;
  ::vega::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::vega::Identifier* id);
  ::vega::Identifier* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:vega.AddValidator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Identifier* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class RemoveValidator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.RemoveValidator) */ {
 public:
  inline RemoveValidator() : RemoveValidator(nullptr) {}
  virtual ~RemoveValidator();

  RemoveValidator(const RemoveValidator& from);
  RemoveValidator(RemoveValidator&& from) noexcept
    : RemoveValidator() {
    *this = ::std::move(from);
  }

  inline RemoveValidator& operator=(const RemoveValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveValidator& operator=(RemoveValidator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveValidator& default_instance();

  static inline const RemoveValidator* internal_default_instance() {
    return reinterpret_cast<const RemoveValidator*>(
               &_RemoveValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RemoveValidator& a, RemoveValidator& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveValidator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveValidator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveValidator* New() const final {
    return CreateMaybeMessage<RemoveValidator>(nullptr);
  }

  RemoveValidator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveValidator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveValidator& from);
  void MergeFrom(const RemoveValidator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveValidator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.RemoveValidator";
  }
  protected:
  explicit RemoveValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .vega.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::vega::Identifier& id() const;
  ::vega::Identifier* release_id();
  ::vega::Identifier* mutable_id();
  void set_allocated_id(::vega::Identifier* id);
  private:
  const ::vega::Identifier& _internal_id() const;
  ::vega::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::vega::Identifier* id);
  ::vega::Identifier* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:vega.RemoveValidator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Identifier* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class ValidatorEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.ValidatorEvent) */ {
 public:
  inline ValidatorEvent() : ValidatorEvent(nullptr) {}
  virtual ~ValidatorEvent();

  ValidatorEvent(const ValidatorEvent& from);
  ValidatorEvent(ValidatorEvent&& from) noexcept
    : ValidatorEvent() {
    *this = ::std::move(from);
  }

  inline ValidatorEvent& operator=(const ValidatorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorEvent& operator=(ValidatorEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatorEvent& default_instance();

  enum ActionCase {
    kAdd = 1001,
    kRm = 1002,
    ACTION_NOT_SET = 0,
  };

  static inline const ValidatorEvent* internal_default_instance() {
    return reinterpret_cast<const ValidatorEvent*>(
               &_ValidatorEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ValidatorEvent& a, ValidatorEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatorEvent* New() const final {
    return CreateMaybeMessage<ValidatorEvent>(nullptr);
  }

  ValidatorEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatorEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatorEvent& from);
  void MergeFrom(const ValidatorEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.ValidatorEvent";
  }
  protected:
  explicit ValidatorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kAddFieldNumber = 1001,
    kRmFieldNumber = 1002,
  };
  // string source_id = 1 [json_name = "sourceId"];
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // .vega.AddValidator add = 1001 [json_name = "add"];
  bool has_add() const;
  private:
  bool _internal_has_add() const;
  public:
  void clear_add();
  const ::vega::AddValidator& add() const;
  ::vega::AddValidator* release_add();
  ::vega::AddValidator* mutable_add();
  void set_allocated_add(::vega::AddValidator* add);
  private:
  const ::vega::AddValidator& _internal_add() const;
  ::vega::AddValidator* _internal_mutable_add();
  public:
  void unsafe_arena_set_allocated_add(
      ::vega::AddValidator* add);
  ::vega::AddValidator* unsafe_arena_release_add();

  // .vega.RemoveValidator rm = 1002 [json_name = "rm"];
  bool has_rm() const;
  private:
  bool _internal_has_rm() const;
  public:
  void clear_rm();
  const ::vega::RemoveValidator& rm() const;
  ::vega::RemoveValidator* release_rm();
  ::vega::RemoveValidator* mutable_rm();
  void set_allocated_rm(::vega::RemoveValidator* rm);
  private:
  const ::vega::RemoveValidator& _internal_rm() const;
  ::vega::RemoveValidator* _internal_mutable_rm();
  public:
  void unsafe_arena_set_allocated_rm(
      ::vega::RemoveValidator* rm);
  ::vega::RemoveValidator* unsafe_arena_release_rm();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:vega.ValidatorEvent)
 private:
  class _Internal;
  void set_has_add();
  void set_has_rm();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  union ActionUnion {
    ActionUnion() {}
    ::vega::AddValidator* add_;
    ::vega::RemoveValidator* rm_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class StakingEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.StakingEvent) */ {
 public:
  inline StakingEvent() : StakingEvent(nullptr) {}
  virtual ~StakingEvent();

  StakingEvent(const StakingEvent& from);
  StakingEvent(StakingEvent&& from) noexcept
    : StakingEvent() {
    *this = ::std::move(from);
  }

  inline StakingEvent& operator=(const StakingEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakingEvent& operator=(StakingEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StakingEvent& default_instance();

  enum ActionCase {
    kStakeDeposited = 1001,
    kStakeRemoved = 1002,
    ACTION_NOT_SET = 0,
  };

  static inline const StakingEvent* internal_default_instance() {
    return reinterpret_cast<const StakingEvent*>(
               &_StakingEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StakingEvent& a, StakingEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(StakingEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakingEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StakingEvent* New() const final {
    return CreateMaybeMessage<StakingEvent>(nullptr);
  }

  StakingEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StakingEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StakingEvent& from);
  void MergeFrom(const StakingEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StakingEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.StakingEvent";
  }
  protected:
  explicit StakingEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kBlockFieldNumber = 2,
    kStakeDepositedFieldNumber = 1001,
    kStakeRemovedFieldNumber = 1002,
  };
  // uint64 index = 1 [json_name = "index"];
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block = 2 [json_name = "block"];
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block() const;
  void _internal_set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.StakeDeposited stake_deposited = 1001 [json_name = "stakeDeposited"];
  bool has_stake_deposited() const;
  private:
  bool _internal_has_stake_deposited() const;
  public:
  void clear_stake_deposited();
  const ::vega::StakeDeposited& stake_deposited() const;
  ::vega::StakeDeposited* release_stake_deposited();
  ::vega::StakeDeposited* mutable_stake_deposited();
  void set_allocated_stake_deposited(::vega::StakeDeposited* stake_deposited);
  private:
  const ::vega::StakeDeposited& _internal_stake_deposited() const;
  ::vega::StakeDeposited* _internal_mutable_stake_deposited();
  public:
  void unsafe_arena_set_allocated_stake_deposited(
      ::vega::StakeDeposited* stake_deposited);
  ::vega::StakeDeposited* unsafe_arena_release_stake_deposited();

  // .vega.StakeRemoved stake_removed = 1002 [json_name = "stakeRemoved"];
  bool has_stake_removed() const;
  private:
  bool _internal_has_stake_removed() const;
  public:
  void clear_stake_removed();
  const ::vega::StakeRemoved& stake_removed() const;
  ::vega::StakeRemoved* release_stake_removed();
  ::vega::StakeRemoved* mutable_stake_removed();
  void set_allocated_stake_removed(::vega::StakeRemoved* stake_removed);
  private:
  const ::vega::StakeRemoved& _internal_stake_removed() const;
  ::vega::StakeRemoved* _internal_mutable_stake_removed();
  public:
  void unsafe_arena_set_allocated_stake_removed(
      ::vega::StakeRemoved* stake_removed);
  ::vega::StakeRemoved* unsafe_arena_release_stake_removed();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:vega.StakingEvent)
 private:
  class _Internal;
  void set_has_stake_deposited();
  void set_has_stake_removed();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_;
  union ActionUnion {
    ActionUnion() {}
    ::vega::StakeDeposited* stake_deposited_;
    ::vega::StakeRemoved* stake_removed_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class StakeDeposited PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.StakeDeposited) */ {
 public:
  inline StakeDeposited() : StakeDeposited(nullptr) {}
  virtual ~StakeDeposited();

  StakeDeposited(const StakeDeposited& from);
  StakeDeposited(StakeDeposited&& from) noexcept
    : StakeDeposited() {
    *this = ::std::move(from);
  }

  inline StakeDeposited& operator=(const StakeDeposited& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakeDeposited& operator=(StakeDeposited&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StakeDeposited& default_instance();

  static inline const StakeDeposited* internal_default_instance() {
    return reinterpret_cast<const StakeDeposited*>(
               &_StakeDeposited_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StakeDeposited& a, StakeDeposited& b) {
    a.Swap(&b);
  }
  inline void Swap(StakeDeposited* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakeDeposited* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StakeDeposited* New() const final {
    return CreateMaybeMessage<StakeDeposited>(nullptr);
  }

  StakeDeposited* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StakeDeposited>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StakeDeposited& from);
  void MergeFrom(const StakeDeposited& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StakeDeposited* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.StakeDeposited";
  }
  protected:
  explicit StakeDeposited(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEthereumAddressFieldNumber = 1,
    kVegaPublicKeyFieldNumber = 2,
    kAmountFieldNumber = 3,
    kBlockTimeFieldNumber = 4,
  };
  // string ethereum_address = 1 [json_name = "ethereumAddress"];
  void clear_ethereum_address();
  const std::string& ethereum_address() const;
  void set_ethereum_address(const std::string& value);
  void set_ethereum_address(std::string&& value);
  void set_ethereum_address(const char* value);
  void set_ethereum_address(const char* value, size_t size);
  std::string* mutable_ethereum_address();
  std::string* release_ethereum_address();
  void set_allocated_ethereum_address(std::string* ethereum_address);
  private:
  const std::string& _internal_ethereum_address() const;
  void _internal_set_ethereum_address(const std::string& value);
  std::string* _internal_mutable_ethereum_address();
  public:

  // string vega_public_key = 2 [json_name = "vegaPublicKey"];
  void clear_vega_public_key();
  const std::string& vega_public_key() const;
  void set_vega_public_key(const std::string& value);
  void set_vega_public_key(std::string&& value);
  void set_vega_public_key(const char* value);
  void set_vega_public_key(const char* value, size_t size);
  std::string* mutable_vega_public_key();
  std::string* release_vega_public_key();
  void set_allocated_vega_public_key(std::string* vega_public_key);
  private:
  const std::string& _internal_vega_public_key() const;
  void _internal_set_vega_public_key(const std::string& value);
  std::string* _internal_mutable_vega_public_key();
  public:

  // string amount = 3 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // int64 block_time = 4 [json_name = "blockTime"];
  void clear_block_time();
  ::PROTOBUF_NAMESPACE_ID::int64 block_time() const;
  void set_block_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_block_time() const;
  void _internal_set_block_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.StakeDeposited)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ethereum_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 block_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// -------------------------------------------------------------------

class StakeRemoved PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.StakeRemoved) */ {
 public:
  inline StakeRemoved() : StakeRemoved(nullptr) {}
  virtual ~StakeRemoved();

  StakeRemoved(const StakeRemoved& from);
  StakeRemoved(StakeRemoved&& from) noexcept
    : StakeRemoved() {
    *this = ::std::move(from);
  }

  inline StakeRemoved& operator=(const StakeRemoved& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakeRemoved& operator=(StakeRemoved&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StakeRemoved& default_instance();

  static inline const StakeRemoved* internal_default_instance() {
    return reinterpret_cast<const StakeRemoved*>(
               &_StakeRemoved_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(StakeRemoved& a, StakeRemoved& b) {
    a.Swap(&b);
  }
  inline void Swap(StakeRemoved* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakeRemoved* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StakeRemoved* New() const final {
    return CreateMaybeMessage<StakeRemoved>(nullptr);
  }

  StakeRemoved* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StakeRemoved>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StakeRemoved& from);
  void MergeFrom(const StakeRemoved& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StakeRemoved* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.StakeRemoved";
  }
  protected:
  explicit StakeRemoved(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chain_5fevents_2eproto);
    return ::descriptor_table_chain_5fevents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEthereumAddressFieldNumber = 1,
    kVegaPublicKeyFieldNumber = 2,
    kAmountFieldNumber = 3,
    kBlockTimeFieldNumber = 4,
  };
  // string ethereum_address = 1 [json_name = "ethereumAddress"];
  void clear_ethereum_address();
  const std::string& ethereum_address() const;
  void set_ethereum_address(const std::string& value);
  void set_ethereum_address(std::string&& value);
  void set_ethereum_address(const char* value);
  void set_ethereum_address(const char* value, size_t size);
  std::string* mutable_ethereum_address();
  std::string* release_ethereum_address();
  void set_allocated_ethereum_address(std::string* ethereum_address);
  private:
  const std::string& _internal_ethereum_address() const;
  void _internal_set_ethereum_address(const std::string& value);
  std::string* _internal_mutable_ethereum_address();
  public:

  // string vega_public_key = 2 [json_name = "vegaPublicKey"];
  void clear_vega_public_key();
  const std::string& vega_public_key() const;
  void set_vega_public_key(const std::string& value);
  void set_vega_public_key(std::string&& value);
  void set_vega_public_key(const char* value);
  void set_vega_public_key(const char* value, size_t size);
  std::string* mutable_vega_public_key();
  std::string* release_vega_public_key();
  void set_allocated_vega_public_key(std::string* vega_public_key);
  private:
  const std::string& _internal_vega_public_key() const;
  void _internal_set_vega_public_key(const std::string& value);
  std::string* _internal_mutable_vega_public_key();
  public:

  // string amount = 3 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // int64 block_time = 4 [json_name = "blockTime"];
  void clear_block_time();
  ::PROTOBUF_NAMESPACE_ID::int64 block_time() const;
  void set_block_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_block_time() const;
  void _internal_set_block_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.StakeRemoved)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ethereum_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vega_public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 block_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chain_5fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuiltinAssetDeposit

// string vega_asset_id = 1 [json_name = "vegaAssetId"];
inline void BuiltinAssetDeposit::clear_vega_asset_id() {
  vega_asset_id_.ClearToEmpty();
}
inline const std::string& BuiltinAssetDeposit::vega_asset_id() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAssetDeposit.vega_asset_id)
  return _internal_vega_asset_id();
}
inline void BuiltinAssetDeposit::set_vega_asset_id(const std::string& value) {
  _internal_set_vega_asset_id(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAssetDeposit.vega_asset_id)
}
inline std::string* BuiltinAssetDeposit::mutable_vega_asset_id() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAssetDeposit.vega_asset_id)
  return _internal_mutable_vega_asset_id();
}
inline const std::string& BuiltinAssetDeposit::_internal_vega_asset_id() const {
  return vega_asset_id_.Get();
}
inline void BuiltinAssetDeposit::_internal_set_vega_asset_id(const std::string& value) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuiltinAssetDeposit::set_vega_asset_id(std::string&& value) {

  vega_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAssetDeposit.vega_asset_id)
}
inline void BuiltinAssetDeposit::set_vega_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAssetDeposit.vega_asset_id)
}
inline void BuiltinAssetDeposit::set_vega_asset_id(const char* value,
    size_t size) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAssetDeposit.vega_asset_id)
}
inline std::string* BuiltinAssetDeposit::_internal_mutable_vega_asset_id() {

  return vega_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuiltinAssetDeposit::release_vega_asset_id() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAssetDeposit.vega_asset_id)
  return vega_asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuiltinAssetDeposit::set_allocated_vega_asset_id(std::string* vega_asset_id) {
  if (vega_asset_id != nullptr) {

  } else {

  }
  vega_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAssetDeposit.vega_asset_id)
}

// string party_id = 2 [json_name = "partyId"];
inline void BuiltinAssetDeposit::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& BuiltinAssetDeposit::party_id() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAssetDeposit.party_id)
  return _internal_party_id();
}
inline void BuiltinAssetDeposit::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAssetDeposit.party_id)
}
inline std::string* BuiltinAssetDeposit::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAssetDeposit.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& BuiltinAssetDeposit::_internal_party_id() const {
  return party_id_.Get();
}
inline void BuiltinAssetDeposit::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuiltinAssetDeposit::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAssetDeposit.party_id)
}
inline void BuiltinAssetDeposit::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAssetDeposit.party_id)
}
inline void BuiltinAssetDeposit::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAssetDeposit.party_id)
}
inline std::string* BuiltinAssetDeposit::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuiltinAssetDeposit::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAssetDeposit.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuiltinAssetDeposit::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAssetDeposit.party_id)
}

// uint64 amount = 3 [json_name = "amount"];
inline void BuiltinAssetDeposit::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuiltinAssetDeposit::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuiltinAssetDeposit::amount() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAssetDeposit.amount)
  return _internal_amount();
}
inline void BuiltinAssetDeposit::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void BuiltinAssetDeposit::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAssetDeposit.amount)
}

// -------------------------------------------------------------------

// BuiltinAssetWithdrawal

// string vega_asset_id = 1 [json_name = "vegaAssetId"];
inline void BuiltinAssetWithdrawal::clear_vega_asset_id() {
  vega_asset_id_.ClearToEmpty();
}
inline const std::string& BuiltinAssetWithdrawal::vega_asset_id() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAssetWithdrawal.vega_asset_id)
  return _internal_vega_asset_id();
}
inline void BuiltinAssetWithdrawal::set_vega_asset_id(const std::string& value) {
  _internal_set_vega_asset_id(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAssetWithdrawal.vega_asset_id)
}
inline std::string* BuiltinAssetWithdrawal::mutable_vega_asset_id() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAssetWithdrawal.vega_asset_id)
  return _internal_mutable_vega_asset_id();
}
inline const std::string& BuiltinAssetWithdrawal::_internal_vega_asset_id() const {
  return vega_asset_id_.Get();
}
inline void BuiltinAssetWithdrawal::_internal_set_vega_asset_id(const std::string& value) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuiltinAssetWithdrawal::set_vega_asset_id(std::string&& value) {

  vega_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAssetWithdrawal.vega_asset_id)
}
inline void BuiltinAssetWithdrawal::set_vega_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAssetWithdrawal.vega_asset_id)
}
inline void BuiltinAssetWithdrawal::set_vega_asset_id(const char* value,
    size_t size) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAssetWithdrawal.vega_asset_id)
}
inline std::string* BuiltinAssetWithdrawal::_internal_mutable_vega_asset_id() {

  return vega_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuiltinAssetWithdrawal::release_vega_asset_id() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAssetWithdrawal.vega_asset_id)
  return vega_asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuiltinAssetWithdrawal::set_allocated_vega_asset_id(std::string* vega_asset_id) {
  if (vega_asset_id != nullptr) {

  } else {

  }
  vega_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAssetWithdrawal.vega_asset_id)
}

// string party_id = 2 [json_name = "partyId"];
inline void BuiltinAssetWithdrawal::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& BuiltinAssetWithdrawal::party_id() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAssetWithdrawal.party_id)
  return _internal_party_id();
}
inline void BuiltinAssetWithdrawal::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAssetWithdrawal.party_id)
}
inline std::string* BuiltinAssetWithdrawal::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAssetWithdrawal.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& BuiltinAssetWithdrawal::_internal_party_id() const {
  return party_id_.Get();
}
inline void BuiltinAssetWithdrawal::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuiltinAssetWithdrawal::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAssetWithdrawal.party_id)
}
inline void BuiltinAssetWithdrawal::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAssetWithdrawal.party_id)
}
inline void BuiltinAssetWithdrawal::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAssetWithdrawal.party_id)
}
inline std::string* BuiltinAssetWithdrawal::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuiltinAssetWithdrawal::release_party_id() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAssetWithdrawal.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuiltinAssetWithdrawal::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAssetWithdrawal.party_id)
}

// string amount = 3 [json_name = "amount"];
inline void BuiltinAssetWithdrawal::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& BuiltinAssetWithdrawal::amount() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAssetWithdrawal.amount)
  return _internal_amount();
}
inline void BuiltinAssetWithdrawal::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAssetWithdrawal.amount)
}
inline std::string* BuiltinAssetWithdrawal::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAssetWithdrawal.amount)
  return _internal_mutable_amount();
}
inline const std::string& BuiltinAssetWithdrawal::_internal_amount() const {
  return amount_.Get();
}
inline void BuiltinAssetWithdrawal::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuiltinAssetWithdrawal::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAssetWithdrawal.amount)
}
inline void BuiltinAssetWithdrawal::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAssetWithdrawal.amount)
}
inline void BuiltinAssetWithdrawal::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAssetWithdrawal.amount)
}
inline std::string* BuiltinAssetWithdrawal::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuiltinAssetWithdrawal::release_amount() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAssetWithdrawal.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuiltinAssetWithdrawal::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAssetWithdrawal.amount)
}

// -------------------------------------------------------------------

// BuiltinAssetEvent

// .vega.BuiltinAssetDeposit deposit = 1001 [json_name = "deposit"];
inline bool BuiltinAssetEvent::_internal_has_deposit() const {
  return action_case() == kDeposit;
}
inline bool BuiltinAssetEvent::has_deposit() const {
  return _internal_has_deposit();
}
inline void BuiltinAssetEvent::set_has_deposit() {
  _oneof_case_[0] = kDeposit;
}
inline void BuiltinAssetEvent::clear_deposit() {
  if (_internal_has_deposit()) {
    if (GetArena() == nullptr) {
      delete action_.deposit_;
    }
    clear_has_action();
  }
}
inline ::vega::BuiltinAssetDeposit* BuiltinAssetEvent::release_deposit() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAssetEvent.deposit)
  if (_internal_has_deposit()) {
    clear_has_action();
      ::vega::BuiltinAssetDeposit* temp = action_.deposit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::BuiltinAssetDeposit& BuiltinAssetEvent::_internal_deposit() const {
  return _internal_has_deposit()
      ? *action_.deposit_
      : reinterpret_cast< ::vega::BuiltinAssetDeposit&>(::vega::_BuiltinAssetDeposit_default_instance_);
}
inline const ::vega::BuiltinAssetDeposit& BuiltinAssetEvent::deposit() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAssetEvent.deposit)
  return _internal_deposit();
}
inline ::vega::BuiltinAssetDeposit* BuiltinAssetEvent::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BuiltinAssetEvent.deposit)
  if (_internal_has_deposit()) {
    clear_has_action();
    ::vega::BuiltinAssetDeposit* temp = action_.deposit_;
    action_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuiltinAssetEvent::unsafe_arena_set_allocated_deposit(::vega::BuiltinAssetDeposit* deposit) {
  clear_action();
  if (deposit) {
    set_has_deposit();
    action_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BuiltinAssetEvent.deposit)
}
inline ::vega::BuiltinAssetDeposit* BuiltinAssetEvent::_internal_mutable_deposit() {
  if (!_internal_has_deposit()) {
    clear_action();
    set_has_deposit();
    action_.deposit_ = CreateMaybeMessage< ::vega::BuiltinAssetDeposit >(GetArena());
  }
  return action_.deposit_;
}
inline ::vega::BuiltinAssetDeposit* BuiltinAssetEvent::mutable_deposit() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAssetEvent.deposit)
  return _internal_mutable_deposit();
}

// .vega.BuiltinAssetWithdrawal withdrawal = 1002 [json_name = "withdrawal"];
inline bool BuiltinAssetEvent::_internal_has_withdrawal() const {
  return action_case() == kWithdrawal;
}
inline bool BuiltinAssetEvent::has_withdrawal() const {
  return _internal_has_withdrawal();
}
inline void BuiltinAssetEvent::set_has_withdrawal() {
  _oneof_case_[0] = kWithdrawal;
}
inline void BuiltinAssetEvent::clear_withdrawal() {
  if (_internal_has_withdrawal()) {
    if (GetArena() == nullptr) {
      delete action_.withdrawal_;
    }
    clear_has_action();
  }
}
inline ::vega::BuiltinAssetWithdrawal* BuiltinAssetEvent::release_withdrawal() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAssetEvent.withdrawal)
  if (_internal_has_withdrawal()) {
    clear_has_action();
      ::vega::BuiltinAssetWithdrawal* temp = action_.withdrawal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.withdrawal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::BuiltinAssetWithdrawal& BuiltinAssetEvent::_internal_withdrawal() const {
  return _internal_has_withdrawal()
      ? *action_.withdrawal_
      : reinterpret_cast< ::vega::BuiltinAssetWithdrawal&>(::vega::_BuiltinAssetWithdrawal_default_instance_);
}
inline const ::vega::BuiltinAssetWithdrawal& BuiltinAssetEvent::withdrawal() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAssetEvent.withdrawal)
  return _internal_withdrawal();
}
inline ::vega::BuiltinAssetWithdrawal* BuiltinAssetEvent::unsafe_arena_release_withdrawal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BuiltinAssetEvent.withdrawal)
  if (_internal_has_withdrawal()) {
    clear_has_action();
    ::vega::BuiltinAssetWithdrawal* temp = action_.withdrawal_;
    action_.withdrawal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuiltinAssetEvent::unsafe_arena_set_allocated_withdrawal(::vega::BuiltinAssetWithdrawal* withdrawal) {
  clear_action();
  if (withdrawal) {
    set_has_withdrawal();
    action_.withdrawal_ = withdrawal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BuiltinAssetEvent.withdrawal)
}
inline ::vega::BuiltinAssetWithdrawal* BuiltinAssetEvent::_internal_mutable_withdrawal() {
  if (!_internal_has_withdrawal()) {
    clear_action();
    set_has_withdrawal();
    action_.withdrawal_ = CreateMaybeMessage< ::vega::BuiltinAssetWithdrawal >(GetArena());
  }
  return action_.withdrawal_;
}
inline ::vega::BuiltinAssetWithdrawal* BuiltinAssetEvent::mutable_withdrawal() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAssetEvent.withdrawal)
  return _internal_mutable_withdrawal();
}

inline bool BuiltinAssetEvent::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void BuiltinAssetEvent::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline BuiltinAssetEvent::ActionCase BuiltinAssetEvent::action_case() const {
  return BuiltinAssetEvent::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ERC20AssetList

// string vega_asset_id = 1 [json_name = "vegaAssetId"];
inline void ERC20AssetList::clear_vega_asset_id() {
  vega_asset_id_.ClearToEmpty();
}
inline const std::string& ERC20AssetList::vega_asset_id() const {
  // @@protoc_insertion_point(field_get:vega.ERC20AssetList.vega_asset_id)
  return _internal_vega_asset_id();
}
inline void ERC20AssetList::set_vega_asset_id(const std::string& value) {
  _internal_set_vega_asset_id(value);
  // @@protoc_insertion_point(field_set:vega.ERC20AssetList.vega_asset_id)
}
inline std::string* ERC20AssetList::mutable_vega_asset_id() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20AssetList.vega_asset_id)
  return _internal_mutable_vega_asset_id();
}
inline const std::string& ERC20AssetList::_internal_vega_asset_id() const {
  return vega_asset_id_.Get();
}
inline void ERC20AssetList::_internal_set_vega_asset_id(const std::string& value) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20AssetList::set_vega_asset_id(std::string&& value) {

  vega_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20AssetList.vega_asset_id)
}
inline void ERC20AssetList::set_vega_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20AssetList.vega_asset_id)
}
inline void ERC20AssetList::set_vega_asset_id(const char* value,
    size_t size) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20AssetList.vega_asset_id)
}
inline std::string* ERC20AssetList::_internal_mutable_vega_asset_id() {

  return vega_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20AssetList::release_vega_asset_id() {
  // @@protoc_insertion_point(field_release:vega.ERC20AssetList.vega_asset_id)
  return vega_asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20AssetList::set_allocated_vega_asset_id(std::string* vega_asset_id) {
  if (vega_asset_id != nullptr) {

  } else {

  }
  vega_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20AssetList.vega_asset_id)
}

// -------------------------------------------------------------------

// ERC20AssetDelist

// string vega_asset_id = 1 [json_name = "vegaAssetId"];
inline void ERC20AssetDelist::clear_vega_asset_id() {
  vega_asset_id_.ClearToEmpty();
}
inline const std::string& ERC20AssetDelist::vega_asset_id() const {
  // @@protoc_insertion_point(field_get:vega.ERC20AssetDelist.vega_asset_id)
  return _internal_vega_asset_id();
}
inline void ERC20AssetDelist::set_vega_asset_id(const std::string& value) {
  _internal_set_vega_asset_id(value);
  // @@protoc_insertion_point(field_set:vega.ERC20AssetDelist.vega_asset_id)
}
inline std::string* ERC20AssetDelist::mutable_vega_asset_id() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20AssetDelist.vega_asset_id)
  return _internal_mutable_vega_asset_id();
}
inline const std::string& ERC20AssetDelist::_internal_vega_asset_id() const {
  return vega_asset_id_.Get();
}
inline void ERC20AssetDelist::_internal_set_vega_asset_id(const std::string& value) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20AssetDelist::set_vega_asset_id(std::string&& value) {

  vega_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20AssetDelist.vega_asset_id)
}
inline void ERC20AssetDelist::set_vega_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20AssetDelist.vega_asset_id)
}
inline void ERC20AssetDelist::set_vega_asset_id(const char* value,
    size_t size) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20AssetDelist.vega_asset_id)
}
inline std::string* ERC20AssetDelist::_internal_mutable_vega_asset_id() {

  return vega_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20AssetDelist::release_vega_asset_id() {
  // @@protoc_insertion_point(field_release:vega.ERC20AssetDelist.vega_asset_id)
  return vega_asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20AssetDelist::set_allocated_vega_asset_id(std::string* vega_asset_id) {
  if (vega_asset_id != nullptr) {

  } else {

  }
  vega_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20AssetDelist.vega_asset_id)
}

// -------------------------------------------------------------------

// ERC20Deposit

// string vega_asset_id = 1 [json_name = "vegaAssetId"];
inline void ERC20Deposit::clear_vega_asset_id() {
  vega_asset_id_.ClearToEmpty();
}
inline const std::string& ERC20Deposit::vega_asset_id() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Deposit.vega_asset_id)
  return _internal_vega_asset_id();
}
inline void ERC20Deposit::set_vega_asset_id(const std::string& value) {
  _internal_set_vega_asset_id(value);
  // @@protoc_insertion_point(field_set:vega.ERC20Deposit.vega_asset_id)
}
inline std::string* ERC20Deposit::mutable_vega_asset_id() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Deposit.vega_asset_id)
  return _internal_mutable_vega_asset_id();
}
inline const std::string& ERC20Deposit::_internal_vega_asset_id() const {
  return vega_asset_id_.Get();
}
inline void ERC20Deposit::_internal_set_vega_asset_id(const std::string& value) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20Deposit::set_vega_asset_id(std::string&& value) {

  vega_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20Deposit.vega_asset_id)
}
inline void ERC20Deposit::set_vega_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20Deposit.vega_asset_id)
}
inline void ERC20Deposit::set_vega_asset_id(const char* value,
    size_t size) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20Deposit.vega_asset_id)
}
inline std::string* ERC20Deposit::_internal_mutable_vega_asset_id() {

  return vega_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20Deposit::release_vega_asset_id() {
  // @@protoc_insertion_point(field_release:vega.ERC20Deposit.vega_asset_id)
  return vega_asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20Deposit::set_allocated_vega_asset_id(std::string* vega_asset_id) {
  if (vega_asset_id != nullptr) {

  } else {

  }
  vega_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Deposit.vega_asset_id)
}

// string source_ethereum_address = 2 [json_name = "sourceEthereumAddress"];
inline void ERC20Deposit::clear_source_ethereum_address() {
  source_ethereum_address_.ClearToEmpty();
}
inline const std::string& ERC20Deposit::source_ethereum_address() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Deposit.source_ethereum_address)
  return _internal_source_ethereum_address();
}
inline void ERC20Deposit::set_source_ethereum_address(const std::string& value) {
  _internal_set_source_ethereum_address(value);
  // @@protoc_insertion_point(field_set:vega.ERC20Deposit.source_ethereum_address)
}
inline std::string* ERC20Deposit::mutable_source_ethereum_address() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Deposit.source_ethereum_address)
  return _internal_mutable_source_ethereum_address();
}
inline const std::string& ERC20Deposit::_internal_source_ethereum_address() const {
  return source_ethereum_address_.Get();
}
inline void ERC20Deposit::_internal_set_source_ethereum_address(const std::string& value) {

  source_ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20Deposit::set_source_ethereum_address(std::string&& value) {

  source_ethereum_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20Deposit.source_ethereum_address)
}
inline void ERC20Deposit::set_source_ethereum_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  source_ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20Deposit.source_ethereum_address)
}
inline void ERC20Deposit::set_source_ethereum_address(const char* value,
    size_t size) {

  source_ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20Deposit.source_ethereum_address)
}
inline std::string* ERC20Deposit::_internal_mutable_source_ethereum_address() {

  return source_ethereum_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20Deposit::release_source_ethereum_address() {
  // @@protoc_insertion_point(field_release:vega.ERC20Deposit.source_ethereum_address)
  return source_ethereum_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20Deposit::set_allocated_source_ethereum_address(std::string* source_ethereum_address) {
  if (source_ethereum_address != nullptr) {

  } else {

  }
  source_ethereum_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_ethereum_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Deposit.source_ethereum_address)
}

// string target_party_id = 3 [json_name = "targetPartyId"];
inline void ERC20Deposit::clear_target_party_id() {
  target_party_id_.ClearToEmpty();
}
inline const std::string& ERC20Deposit::target_party_id() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Deposit.target_party_id)
  return _internal_target_party_id();
}
inline void ERC20Deposit::set_target_party_id(const std::string& value) {
  _internal_set_target_party_id(value);
  // @@protoc_insertion_point(field_set:vega.ERC20Deposit.target_party_id)
}
inline std::string* ERC20Deposit::mutable_target_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Deposit.target_party_id)
  return _internal_mutable_target_party_id();
}
inline const std::string& ERC20Deposit::_internal_target_party_id() const {
  return target_party_id_.Get();
}
inline void ERC20Deposit::_internal_set_target_party_id(const std::string& value) {

  target_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20Deposit::set_target_party_id(std::string&& value) {

  target_party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20Deposit.target_party_id)
}
inline void ERC20Deposit::set_target_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  target_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20Deposit.target_party_id)
}
inline void ERC20Deposit::set_target_party_id(const char* value,
    size_t size) {

  target_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20Deposit.target_party_id)
}
inline std::string* ERC20Deposit::_internal_mutable_target_party_id() {

  return target_party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20Deposit::release_target_party_id() {
  // @@protoc_insertion_point(field_release:vega.ERC20Deposit.target_party_id)
  return target_party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20Deposit::set_allocated_target_party_id(std::string* target_party_id) {
  if (target_party_id != nullptr) {

  } else {

  }
  target_party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Deposit.target_party_id)
}

// string amount = 4 [json_name = "amount"];
inline void ERC20Deposit::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& ERC20Deposit::amount() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Deposit.amount)
  return _internal_amount();
}
inline void ERC20Deposit::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.ERC20Deposit.amount)
}
inline std::string* ERC20Deposit::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Deposit.amount)
  return _internal_mutable_amount();
}
inline const std::string& ERC20Deposit::_internal_amount() const {
  return amount_.Get();
}
inline void ERC20Deposit::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20Deposit::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20Deposit.amount)
}
inline void ERC20Deposit::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20Deposit.amount)
}
inline void ERC20Deposit::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20Deposit.amount)
}
inline std::string* ERC20Deposit::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20Deposit::release_amount() {
  // @@protoc_insertion_point(field_release:vega.ERC20Deposit.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20Deposit::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Deposit.amount)
}

// -------------------------------------------------------------------

// ERC20Withdrawal

// string vega_asset_id = 1 [json_name = "vegaAssetId"];
inline void ERC20Withdrawal::clear_vega_asset_id() {
  vega_asset_id_.ClearToEmpty();
}
inline const std::string& ERC20Withdrawal::vega_asset_id() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Withdrawal.vega_asset_id)
  return _internal_vega_asset_id();
}
inline void ERC20Withdrawal::set_vega_asset_id(const std::string& value) {
  _internal_set_vega_asset_id(value);
  // @@protoc_insertion_point(field_set:vega.ERC20Withdrawal.vega_asset_id)
}
inline std::string* ERC20Withdrawal::mutable_vega_asset_id() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Withdrawal.vega_asset_id)
  return _internal_mutable_vega_asset_id();
}
inline const std::string& ERC20Withdrawal::_internal_vega_asset_id() const {
  return vega_asset_id_.Get();
}
inline void ERC20Withdrawal::_internal_set_vega_asset_id(const std::string& value) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20Withdrawal::set_vega_asset_id(std::string&& value) {

  vega_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20Withdrawal.vega_asset_id)
}
inline void ERC20Withdrawal::set_vega_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20Withdrawal.vega_asset_id)
}
inline void ERC20Withdrawal::set_vega_asset_id(const char* value,
    size_t size) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20Withdrawal.vega_asset_id)
}
inline std::string* ERC20Withdrawal::_internal_mutable_vega_asset_id() {

  return vega_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20Withdrawal::release_vega_asset_id() {
  // @@protoc_insertion_point(field_release:vega.ERC20Withdrawal.vega_asset_id)
  return vega_asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20Withdrawal::set_allocated_vega_asset_id(std::string* vega_asset_id) {
  if (vega_asset_id != nullptr) {

  } else {

  }
  vega_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Withdrawal.vega_asset_id)
}

// string target_ethereum_address = 2 [json_name = "targetEthereumAddress"];
inline void ERC20Withdrawal::clear_target_ethereum_address() {
  target_ethereum_address_.ClearToEmpty();
}
inline const std::string& ERC20Withdrawal::target_ethereum_address() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Withdrawal.target_ethereum_address)
  return _internal_target_ethereum_address();
}
inline void ERC20Withdrawal::set_target_ethereum_address(const std::string& value) {
  _internal_set_target_ethereum_address(value);
  // @@protoc_insertion_point(field_set:vega.ERC20Withdrawal.target_ethereum_address)
}
inline std::string* ERC20Withdrawal::mutable_target_ethereum_address() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Withdrawal.target_ethereum_address)
  return _internal_mutable_target_ethereum_address();
}
inline const std::string& ERC20Withdrawal::_internal_target_ethereum_address() const {
  return target_ethereum_address_.Get();
}
inline void ERC20Withdrawal::_internal_set_target_ethereum_address(const std::string& value) {

  target_ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20Withdrawal::set_target_ethereum_address(std::string&& value) {

  target_ethereum_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20Withdrawal.target_ethereum_address)
}
inline void ERC20Withdrawal::set_target_ethereum_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  target_ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20Withdrawal.target_ethereum_address)
}
inline void ERC20Withdrawal::set_target_ethereum_address(const char* value,
    size_t size) {

  target_ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20Withdrawal.target_ethereum_address)
}
inline std::string* ERC20Withdrawal::_internal_mutable_target_ethereum_address() {

  return target_ethereum_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20Withdrawal::release_target_ethereum_address() {
  // @@protoc_insertion_point(field_release:vega.ERC20Withdrawal.target_ethereum_address)
  return target_ethereum_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20Withdrawal::set_allocated_target_ethereum_address(std::string* target_ethereum_address) {
  if (target_ethereum_address != nullptr) {

  } else {

  }
  target_ethereum_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_ethereum_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Withdrawal.target_ethereum_address)
}

// string reference_nonce = 3 [json_name = "referenceNonce"];
inline void ERC20Withdrawal::clear_reference_nonce() {
  reference_nonce_.ClearToEmpty();
}
inline const std::string& ERC20Withdrawal::reference_nonce() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Withdrawal.reference_nonce)
  return _internal_reference_nonce();
}
inline void ERC20Withdrawal::set_reference_nonce(const std::string& value) {
  _internal_set_reference_nonce(value);
  // @@protoc_insertion_point(field_set:vega.ERC20Withdrawal.reference_nonce)
}
inline std::string* ERC20Withdrawal::mutable_reference_nonce() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Withdrawal.reference_nonce)
  return _internal_mutable_reference_nonce();
}
inline const std::string& ERC20Withdrawal::_internal_reference_nonce() const {
  return reference_nonce_.Get();
}
inline void ERC20Withdrawal::_internal_set_reference_nonce(const std::string& value) {

  reference_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20Withdrawal::set_reference_nonce(std::string&& value) {

  reference_nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20Withdrawal.reference_nonce)
}
inline void ERC20Withdrawal::set_reference_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20Withdrawal.reference_nonce)
}
inline void ERC20Withdrawal::set_reference_nonce(const char* value,
    size_t size) {

  reference_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20Withdrawal.reference_nonce)
}
inline std::string* ERC20Withdrawal::_internal_mutable_reference_nonce() {

  return reference_nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20Withdrawal::release_reference_nonce() {
  // @@protoc_insertion_point(field_release:vega.ERC20Withdrawal.reference_nonce)
  return reference_nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20Withdrawal::set_allocated_reference_nonce(std::string* reference_nonce) {
  if (reference_nonce != nullptr) {

  } else {

  }
  reference_nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Withdrawal.reference_nonce)
}

// -------------------------------------------------------------------

// ERC20Event

// uint64 index = 1 [json_name = "index"];
inline void ERC20Event::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ERC20Event::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ERC20Event::index() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Event.index)
  return _internal_index();
}
inline void ERC20Event::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  index_ = value;
}
inline void ERC20Event::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:vega.ERC20Event.index)
}

// uint64 block = 2 [json_name = "block"];
inline void ERC20Event::clear_block() {
  block_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ERC20Event::_internal_block() const {
  return block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ERC20Event::block() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Event.block)
  return _internal_block();
}
inline void ERC20Event::_internal_set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  block_ = value;
}
inline void ERC20Event::set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:vega.ERC20Event.block)
}

// .vega.ERC20AssetList asset_list = 1001 [json_name = "assetList"];
inline bool ERC20Event::_internal_has_asset_list() const {
  return action_case() == kAssetList;
}
inline bool ERC20Event::has_asset_list() const {
  return _internal_has_asset_list();
}
inline void ERC20Event::set_has_asset_list() {
  _oneof_case_[0] = kAssetList;
}
inline void ERC20Event::clear_asset_list() {
  if (_internal_has_asset_list()) {
    if (GetArena() == nullptr) {
      delete action_.asset_list_;
    }
    clear_has_action();
  }
}
inline ::vega::ERC20AssetList* ERC20Event::release_asset_list() {
  // @@protoc_insertion_point(field_release:vega.ERC20Event.asset_list)
  if (_internal_has_asset_list()) {
    clear_has_action();
      ::vega::ERC20AssetList* temp = action_.asset_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.asset_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::ERC20AssetList& ERC20Event::_internal_asset_list() const {
  return _internal_has_asset_list()
      ? *action_.asset_list_
      : reinterpret_cast< ::vega::ERC20AssetList&>(::vega::_ERC20AssetList_default_instance_);
}
inline const ::vega::ERC20AssetList& ERC20Event::asset_list() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Event.asset_list)
  return _internal_asset_list();
}
inline ::vega::ERC20AssetList* ERC20Event::unsafe_arena_release_asset_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.ERC20Event.asset_list)
  if (_internal_has_asset_list()) {
    clear_has_action();
    ::vega::ERC20AssetList* temp = action_.asset_list_;
    action_.asset_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ERC20Event::unsafe_arena_set_allocated_asset_list(::vega::ERC20AssetList* asset_list) {
  clear_action();
  if (asset_list) {
    set_has_asset_list();
    action_.asset_list_ = asset_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.ERC20Event.asset_list)
}
inline ::vega::ERC20AssetList* ERC20Event::_internal_mutable_asset_list() {
  if (!_internal_has_asset_list()) {
    clear_action();
    set_has_asset_list();
    action_.asset_list_ = CreateMaybeMessage< ::vega::ERC20AssetList >(GetArena());
  }
  return action_.asset_list_;
}
inline ::vega::ERC20AssetList* ERC20Event::mutable_asset_list() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Event.asset_list)
  return _internal_mutable_asset_list();
}

// .vega.ERC20AssetDelist asset_delist = 1002 [json_name = "assetDelist"];
inline bool ERC20Event::_internal_has_asset_delist() const {
  return action_case() == kAssetDelist;
}
inline bool ERC20Event::has_asset_delist() const {
  return _internal_has_asset_delist();
}
inline void ERC20Event::set_has_asset_delist() {
  _oneof_case_[0] = kAssetDelist;
}
inline void ERC20Event::clear_asset_delist() {
  if (_internal_has_asset_delist()) {
    if (GetArena() == nullptr) {
      delete action_.asset_delist_;
    }
    clear_has_action();
  }
}
inline ::vega::ERC20AssetDelist* ERC20Event::release_asset_delist() {
  // @@protoc_insertion_point(field_release:vega.ERC20Event.asset_delist)
  if (_internal_has_asset_delist()) {
    clear_has_action();
      ::vega::ERC20AssetDelist* temp = action_.asset_delist_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.asset_delist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::ERC20AssetDelist& ERC20Event::_internal_asset_delist() const {
  return _internal_has_asset_delist()
      ? *action_.asset_delist_
      : reinterpret_cast< ::vega::ERC20AssetDelist&>(::vega::_ERC20AssetDelist_default_instance_);
}
inline const ::vega::ERC20AssetDelist& ERC20Event::asset_delist() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Event.asset_delist)
  return _internal_asset_delist();
}
inline ::vega::ERC20AssetDelist* ERC20Event::unsafe_arena_release_asset_delist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.ERC20Event.asset_delist)
  if (_internal_has_asset_delist()) {
    clear_has_action();
    ::vega::ERC20AssetDelist* temp = action_.asset_delist_;
    action_.asset_delist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ERC20Event::unsafe_arena_set_allocated_asset_delist(::vega::ERC20AssetDelist* asset_delist) {
  clear_action();
  if (asset_delist) {
    set_has_asset_delist();
    action_.asset_delist_ = asset_delist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.ERC20Event.asset_delist)
}
inline ::vega::ERC20AssetDelist* ERC20Event::_internal_mutable_asset_delist() {
  if (!_internal_has_asset_delist()) {
    clear_action();
    set_has_asset_delist();
    action_.asset_delist_ = CreateMaybeMessage< ::vega::ERC20AssetDelist >(GetArena());
  }
  return action_.asset_delist_;
}
inline ::vega::ERC20AssetDelist* ERC20Event::mutable_asset_delist() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Event.asset_delist)
  return _internal_mutable_asset_delist();
}

// .vega.ERC20Deposit deposit = 1003 [json_name = "deposit"];
inline bool ERC20Event::_internal_has_deposit() const {
  return action_case() == kDeposit;
}
inline bool ERC20Event::has_deposit() const {
  return _internal_has_deposit();
}
inline void ERC20Event::set_has_deposit() {
  _oneof_case_[0] = kDeposit;
}
inline void ERC20Event::clear_deposit() {
  if (_internal_has_deposit()) {
    if (GetArena() == nullptr) {
      delete action_.deposit_;
    }
    clear_has_action();
  }
}
inline ::vega::ERC20Deposit* ERC20Event::release_deposit() {
  // @@protoc_insertion_point(field_release:vega.ERC20Event.deposit)
  if (_internal_has_deposit()) {
    clear_has_action();
      ::vega::ERC20Deposit* temp = action_.deposit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::ERC20Deposit& ERC20Event::_internal_deposit() const {
  return _internal_has_deposit()
      ? *action_.deposit_
      : reinterpret_cast< ::vega::ERC20Deposit&>(::vega::_ERC20Deposit_default_instance_);
}
inline const ::vega::ERC20Deposit& ERC20Event::deposit() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Event.deposit)
  return _internal_deposit();
}
inline ::vega::ERC20Deposit* ERC20Event::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.ERC20Event.deposit)
  if (_internal_has_deposit()) {
    clear_has_action();
    ::vega::ERC20Deposit* temp = action_.deposit_;
    action_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ERC20Event::unsafe_arena_set_allocated_deposit(::vega::ERC20Deposit* deposit) {
  clear_action();
  if (deposit) {
    set_has_deposit();
    action_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.ERC20Event.deposit)
}
inline ::vega::ERC20Deposit* ERC20Event::_internal_mutable_deposit() {
  if (!_internal_has_deposit()) {
    clear_action();
    set_has_deposit();
    action_.deposit_ = CreateMaybeMessage< ::vega::ERC20Deposit >(GetArena());
  }
  return action_.deposit_;
}
inline ::vega::ERC20Deposit* ERC20Event::mutable_deposit() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Event.deposit)
  return _internal_mutable_deposit();
}

// .vega.ERC20Withdrawal withdrawal = 1004 [json_name = "withdrawal"];
inline bool ERC20Event::_internal_has_withdrawal() const {
  return action_case() == kWithdrawal;
}
inline bool ERC20Event::has_withdrawal() const {
  return _internal_has_withdrawal();
}
inline void ERC20Event::set_has_withdrawal() {
  _oneof_case_[0] = kWithdrawal;
}
inline void ERC20Event::clear_withdrawal() {
  if (_internal_has_withdrawal()) {
    if (GetArena() == nullptr) {
      delete action_.withdrawal_;
    }
    clear_has_action();
  }
}
inline ::vega::ERC20Withdrawal* ERC20Event::release_withdrawal() {
  // @@protoc_insertion_point(field_release:vega.ERC20Event.withdrawal)
  if (_internal_has_withdrawal()) {
    clear_has_action();
      ::vega::ERC20Withdrawal* temp = action_.withdrawal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.withdrawal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::ERC20Withdrawal& ERC20Event::_internal_withdrawal() const {
  return _internal_has_withdrawal()
      ? *action_.withdrawal_
      : reinterpret_cast< ::vega::ERC20Withdrawal&>(::vega::_ERC20Withdrawal_default_instance_);
}
inline const ::vega::ERC20Withdrawal& ERC20Event::withdrawal() const {
  // @@protoc_insertion_point(field_get:vega.ERC20Event.withdrawal)
  return _internal_withdrawal();
}
inline ::vega::ERC20Withdrawal* ERC20Event::unsafe_arena_release_withdrawal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.ERC20Event.withdrawal)
  if (_internal_has_withdrawal()) {
    clear_has_action();
    ::vega::ERC20Withdrawal* temp = action_.withdrawal_;
    action_.withdrawal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ERC20Event::unsafe_arena_set_allocated_withdrawal(::vega::ERC20Withdrawal* withdrawal) {
  clear_action();
  if (withdrawal) {
    set_has_withdrawal();
    action_.withdrawal_ = withdrawal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.ERC20Event.withdrawal)
}
inline ::vega::ERC20Withdrawal* ERC20Event::_internal_mutable_withdrawal() {
  if (!_internal_has_withdrawal()) {
    clear_action();
    set_has_withdrawal();
    action_.withdrawal_ = CreateMaybeMessage< ::vega::ERC20Withdrawal >(GetArena());
  }
  return action_.withdrawal_;
}
inline ::vega::ERC20Withdrawal* ERC20Event::mutable_withdrawal() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20Event.withdrawal)
  return _internal_mutable_withdrawal();
}

inline bool ERC20Event::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void ERC20Event::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline ERC20Event::ActionCase ERC20Event::action_case() const {
  return ERC20Event::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BTCDeposit

// string vega_asset_id = 1 [json_name = "vegaAssetId"];
inline void BTCDeposit::clear_vega_asset_id() {
  vega_asset_id_.ClearToEmpty();
}
inline const std::string& BTCDeposit::vega_asset_id() const {
  // @@protoc_insertion_point(field_get:vega.BTCDeposit.vega_asset_id)
  return _internal_vega_asset_id();
}
inline void BTCDeposit::set_vega_asset_id(const std::string& value) {
  _internal_set_vega_asset_id(value);
  // @@protoc_insertion_point(field_set:vega.BTCDeposit.vega_asset_id)
}
inline std::string* BTCDeposit::mutable_vega_asset_id() {
  // @@protoc_insertion_point(field_mutable:vega.BTCDeposit.vega_asset_id)
  return _internal_mutable_vega_asset_id();
}
inline const std::string& BTCDeposit::_internal_vega_asset_id() const {
  return vega_asset_id_.Get();
}
inline void BTCDeposit::_internal_set_vega_asset_id(const std::string& value) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BTCDeposit::set_vega_asset_id(std::string&& value) {

  vega_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BTCDeposit.vega_asset_id)
}
inline void BTCDeposit::set_vega_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BTCDeposit.vega_asset_id)
}
inline void BTCDeposit::set_vega_asset_id(const char* value,
    size_t size) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BTCDeposit.vega_asset_id)
}
inline std::string* BTCDeposit::_internal_mutable_vega_asset_id() {

  return vega_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BTCDeposit::release_vega_asset_id() {
  // @@protoc_insertion_point(field_release:vega.BTCDeposit.vega_asset_id)
  return vega_asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BTCDeposit::set_allocated_vega_asset_id(std::string* vega_asset_id) {
  if (vega_asset_id != nullptr) {

  } else {

  }
  vega_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BTCDeposit.vega_asset_id)
}

// string source_btc_address = 2 [json_name = "sourceBtcAddress"];
inline void BTCDeposit::clear_source_btc_address() {
  source_btc_address_.ClearToEmpty();
}
inline const std::string& BTCDeposit::source_btc_address() const {
  // @@protoc_insertion_point(field_get:vega.BTCDeposit.source_btc_address)
  return _internal_source_btc_address();
}
inline void BTCDeposit::set_source_btc_address(const std::string& value) {
  _internal_set_source_btc_address(value);
  // @@protoc_insertion_point(field_set:vega.BTCDeposit.source_btc_address)
}
inline std::string* BTCDeposit::mutable_source_btc_address() {
  // @@protoc_insertion_point(field_mutable:vega.BTCDeposit.source_btc_address)
  return _internal_mutable_source_btc_address();
}
inline const std::string& BTCDeposit::_internal_source_btc_address() const {
  return source_btc_address_.Get();
}
inline void BTCDeposit::_internal_set_source_btc_address(const std::string& value) {

  source_btc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BTCDeposit::set_source_btc_address(std::string&& value) {

  source_btc_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BTCDeposit.source_btc_address)
}
inline void BTCDeposit::set_source_btc_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  source_btc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BTCDeposit.source_btc_address)
}
inline void BTCDeposit::set_source_btc_address(const char* value,
    size_t size) {

  source_btc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BTCDeposit.source_btc_address)
}
inline std::string* BTCDeposit::_internal_mutable_source_btc_address() {

  return source_btc_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BTCDeposit::release_source_btc_address() {
  // @@protoc_insertion_point(field_release:vega.BTCDeposit.source_btc_address)
  return source_btc_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BTCDeposit::set_allocated_source_btc_address(std::string* source_btc_address) {
  if (source_btc_address != nullptr) {

  } else {

  }
  source_btc_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_btc_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BTCDeposit.source_btc_address)
}

// string target_party_id = 3 [json_name = "targetPartyId"];
inline void BTCDeposit::clear_target_party_id() {
  target_party_id_.ClearToEmpty();
}
inline const std::string& BTCDeposit::target_party_id() const {
  // @@protoc_insertion_point(field_get:vega.BTCDeposit.target_party_id)
  return _internal_target_party_id();
}
inline void BTCDeposit::set_target_party_id(const std::string& value) {
  _internal_set_target_party_id(value);
  // @@protoc_insertion_point(field_set:vega.BTCDeposit.target_party_id)
}
inline std::string* BTCDeposit::mutable_target_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.BTCDeposit.target_party_id)
  return _internal_mutable_target_party_id();
}
inline const std::string& BTCDeposit::_internal_target_party_id() const {
  return target_party_id_.Get();
}
inline void BTCDeposit::_internal_set_target_party_id(const std::string& value) {

  target_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BTCDeposit::set_target_party_id(std::string&& value) {

  target_party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BTCDeposit.target_party_id)
}
inline void BTCDeposit::set_target_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  target_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BTCDeposit.target_party_id)
}
inline void BTCDeposit::set_target_party_id(const char* value,
    size_t size) {

  target_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BTCDeposit.target_party_id)
}
inline std::string* BTCDeposit::_internal_mutable_target_party_id() {

  return target_party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BTCDeposit::release_target_party_id() {
  // @@protoc_insertion_point(field_release:vega.BTCDeposit.target_party_id)
  return target_party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BTCDeposit::set_allocated_target_party_id(std::string* target_party_id) {
  if (target_party_id != nullptr) {

  } else {

  }
  target_party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BTCDeposit.target_party_id)
}

// -------------------------------------------------------------------

// BTCWithdrawal

// string vega_asset_id = 1 [json_name = "vegaAssetId"];
inline void BTCWithdrawal::clear_vega_asset_id() {
  vega_asset_id_.ClearToEmpty();
}
inline const std::string& BTCWithdrawal::vega_asset_id() const {
  // @@protoc_insertion_point(field_get:vega.BTCWithdrawal.vega_asset_id)
  return _internal_vega_asset_id();
}
inline void BTCWithdrawal::set_vega_asset_id(const std::string& value) {
  _internal_set_vega_asset_id(value);
  // @@protoc_insertion_point(field_set:vega.BTCWithdrawal.vega_asset_id)
}
inline std::string* BTCWithdrawal::mutable_vega_asset_id() {
  // @@protoc_insertion_point(field_mutable:vega.BTCWithdrawal.vega_asset_id)
  return _internal_mutable_vega_asset_id();
}
inline const std::string& BTCWithdrawal::_internal_vega_asset_id() const {
  return vega_asset_id_.Get();
}
inline void BTCWithdrawal::_internal_set_vega_asset_id(const std::string& value) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BTCWithdrawal::set_vega_asset_id(std::string&& value) {

  vega_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BTCWithdrawal.vega_asset_id)
}
inline void BTCWithdrawal::set_vega_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BTCWithdrawal.vega_asset_id)
}
inline void BTCWithdrawal::set_vega_asset_id(const char* value,
    size_t size) {

  vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BTCWithdrawal.vega_asset_id)
}
inline std::string* BTCWithdrawal::_internal_mutable_vega_asset_id() {

  return vega_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BTCWithdrawal::release_vega_asset_id() {
  // @@protoc_insertion_point(field_release:vega.BTCWithdrawal.vega_asset_id)
  return vega_asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BTCWithdrawal::set_allocated_vega_asset_id(std::string* vega_asset_id) {
  if (vega_asset_id != nullptr) {

  } else {

  }
  vega_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BTCWithdrawal.vega_asset_id)
}

// string source_party_id = 2 [json_name = "sourcePartyId"];
inline void BTCWithdrawal::clear_source_party_id() {
  source_party_id_.ClearToEmpty();
}
inline const std::string& BTCWithdrawal::source_party_id() const {
  // @@protoc_insertion_point(field_get:vega.BTCWithdrawal.source_party_id)
  return _internal_source_party_id();
}
inline void BTCWithdrawal::set_source_party_id(const std::string& value) {
  _internal_set_source_party_id(value);
  // @@protoc_insertion_point(field_set:vega.BTCWithdrawal.source_party_id)
}
inline std::string* BTCWithdrawal::mutable_source_party_id() {
  // @@protoc_insertion_point(field_mutable:vega.BTCWithdrawal.source_party_id)
  return _internal_mutable_source_party_id();
}
inline const std::string& BTCWithdrawal::_internal_source_party_id() const {
  return source_party_id_.Get();
}
inline void BTCWithdrawal::_internal_set_source_party_id(const std::string& value) {

  source_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BTCWithdrawal::set_source_party_id(std::string&& value) {

  source_party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BTCWithdrawal.source_party_id)
}
inline void BTCWithdrawal::set_source_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  source_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BTCWithdrawal.source_party_id)
}
inline void BTCWithdrawal::set_source_party_id(const char* value,
    size_t size) {

  source_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BTCWithdrawal.source_party_id)
}
inline std::string* BTCWithdrawal::_internal_mutable_source_party_id() {

  return source_party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BTCWithdrawal::release_source_party_id() {
  // @@protoc_insertion_point(field_release:vega.BTCWithdrawal.source_party_id)
  return source_party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BTCWithdrawal::set_allocated_source_party_id(std::string* source_party_id) {
  if (source_party_id != nullptr) {

  } else {

  }
  source_party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BTCWithdrawal.source_party_id)
}

// string target_btc_address = 3 [json_name = "targetBtcAddress"];
inline void BTCWithdrawal::clear_target_btc_address() {
  target_btc_address_.ClearToEmpty();
}
inline const std::string& BTCWithdrawal::target_btc_address() const {
  // @@protoc_insertion_point(field_get:vega.BTCWithdrawal.target_btc_address)
  return _internal_target_btc_address();
}
inline void BTCWithdrawal::set_target_btc_address(const std::string& value) {
  _internal_set_target_btc_address(value);
  // @@protoc_insertion_point(field_set:vega.BTCWithdrawal.target_btc_address)
}
inline std::string* BTCWithdrawal::mutable_target_btc_address() {
  // @@protoc_insertion_point(field_mutable:vega.BTCWithdrawal.target_btc_address)
  return _internal_mutable_target_btc_address();
}
inline const std::string& BTCWithdrawal::_internal_target_btc_address() const {
  return target_btc_address_.Get();
}
inline void BTCWithdrawal::_internal_set_target_btc_address(const std::string& value) {

  target_btc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BTCWithdrawal::set_target_btc_address(std::string&& value) {

  target_btc_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BTCWithdrawal.target_btc_address)
}
inline void BTCWithdrawal::set_target_btc_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  target_btc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BTCWithdrawal.target_btc_address)
}
inline void BTCWithdrawal::set_target_btc_address(const char* value,
    size_t size) {

  target_btc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BTCWithdrawal.target_btc_address)
}
inline std::string* BTCWithdrawal::_internal_mutable_target_btc_address() {

  return target_btc_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BTCWithdrawal::release_target_btc_address() {
  // @@protoc_insertion_point(field_release:vega.BTCWithdrawal.target_btc_address)
  return target_btc_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BTCWithdrawal::set_allocated_target_btc_address(std::string* target_btc_address) {
  if (target_btc_address != nullptr) {

  } else {

  }
  target_btc_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_btc_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BTCWithdrawal.target_btc_address)
}

// string reference_nonce = 4 [json_name = "referenceNonce"];
inline void BTCWithdrawal::clear_reference_nonce() {
  reference_nonce_.ClearToEmpty();
}
inline const std::string& BTCWithdrawal::reference_nonce() const {
  // @@protoc_insertion_point(field_get:vega.BTCWithdrawal.reference_nonce)
  return _internal_reference_nonce();
}
inline void BTCWithdrawal::set_reference_nonce(const std::string& value) {
  _internal_set_reference_nonce(value);
  // @@protoc_insertion_point(field_set:vega.BTCWithdrawal.reference_nonce)
}
inline std::string* BTCWithdrawal::mutable_reference_nonce() {
  // @@protoc_insertion_point(field_mutable:vega.BTCWithdrawal.reference_nonce)
  return _internal_mutable_reference_nonce();
}
inline const std::string& BTCWithdrawal::_internal_reference_nonce() const {
  return reference_nonce_.Get();
}
inline void BTCWithdrawal::_internal_set_reference_nonce(const std::string& value) {

  reference_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BTCWithdrawal::set_reference_nonce(std::string&& value) {

  reference_nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BTCWithdrawal.reference_nonce)
}
inline void BTCWithdrawal::set_reference_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BTCWithdrawal.reference_nonce)
}
inline void BTCWithdrawal::set_reference_nonce(const char* value,
    size_t size) {

  reference_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BTCWithdrawal.reference_nonce)
}
inline std::string* BTCWithdrawal::_internal_mutable_reference_nonce() {

  return reference_nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BTCWithdrawal::release_reference_nonce() {
  // @@protoc_insertion_point(field_release:vega.BTCWithdrawal.reference_nonce)
  return reference_nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BTCWithdrawal::set_allocated_reference_nonce(std::string* reference_nonce) {
  if (reference_nonce != nullptr) {

  } else {

  }
  reference_nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BTCWithdrawal.reference_nonce)
}

// -------------------------------------------------------------------

// BTCEvent

// uint64 index = 1 [json_name = "index"];
inline void BTCEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BTCEvent::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BTCEvent::index() const {
  // @@protoc_insertion_point(field_get:vega.BTCEvent.index)
  return _internal_index();
}
inline void BTCEvent::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  index_ = value;
}
inline void BTCEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:vega.BTCEvent.index)
}

// uint64 block = 2 [json_name = "block"];
inline void BTCEvent::clear_block() {
  block_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BTCEvent::_internal_block() const {
  return block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BTCEvent::block() const {
  // @@protoc_insertion_point(field_get:vega.BTCEvent.block)
  return _internal_block();
}
inline void BTCEvent::_internal_set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  block_ = value;
}
inline void BTCEvent::set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:vega.BTCEvent.block)
}

// .vega.BTCDeposit deposit = 1001 [json_name = "deposit"];
inline bool BTCEvent::_internal_has_deposit() const {
  return action_case() == kDeposit;
}
inline bool BTCEvent::has_deposit() const {
  return _internal_has_deposit();
}
inline void BTCEvent::set_has_deposit() {
  _oneof_case_[0] = kDeposit;
}
inline void BTCEvent::clear_deposit() {
  if (_internal_has_deposit()) {
    if (GetArena() == nullptr) {
      delete action_.deposit_;
    }
    clear_has_action();
  }
}
inline ::vega::BTCDeposit* BTCEvent::release_deposit() {
  // @@protoc_insertion_point(field_release:vega.BTCEvent.deposit)
  if (_internal_has_deposit()) {
    clear_has_action();
      ::vega::BTCDeposit* temp = action_.deposit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::BTCDeposit& BTCEvent::_internal_deposit() const {
  return _internal_has_deposit()
      ? *action_.deposit_
      : reinterpret_cast< ::vega::BTCDeposit&>(::vega::_BTCDeposit_default_instance_);
}
inline const ::vega::BTCDeposit& BTCEvent::deposit() const {
  // @@protoc_insertion_point(field_get:vega.BTCEvent.deposit)
  return _internal_deposit();
}
inline ::vega::BTCDeposit* BTCEvent::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BTCEvent.deposit)
  if (_internal_has_deposit()) {
    clear_has_action();
    ::vega::BTCDeposit* temp = action_.deposit_;
    action_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTCEvent::unsafe_arena_set_allocated_deposit(::vega::BTCDeposit* deposit) {
  clear_action();
  if (deposit) {
    set_has_deposit();
    action_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BTCEvent.deposit)
}
inline ::vega::BTCDeposit* BTCEvent::_internal_mutable_deposit() {
  if (!_internal_has_deposit()) {
    clear_action();
    set_has_deposit();
    action_.deposit_ = CreateMaybeMessage< ::vega::BTCDeposit >(GetArena());
  }
  return action_.deposit_;
}
inline ::vega::BTCDeposit* BTCEvent::mutable_deposit() {
  // @@protoc_insertion_point(field_mutable:vega.BTCEvent.deposit)
  return _internal_mutable_deposit();
}

// .vega.BTCWithdrawal withdrawal = 1002 [json_name = "withdrawal"];
inline bool BTCEvent::_internal_has_withdrawal() const {
  return action_case() == kWithdrawal;
}
inline bool BTCEvent::has_withdrawal() const {
  return _internal_has_withdrawal();
}
inline void BTCEvent::set_has_withdrawal() {
  _oneof_case_[0] = kWithdrawal;
}
inline void BTCEvent::clear_withdrawal() {
  if (_internal_has_withdrawal()) {
    if (GetArena() == nullptr) {
      delete action_.withdrawal_;
    }
    clear_has_action();
  }
}
inline ::vega::BTCWithdrawal* BTCEvent::release_withdrawal() {
  // @@protoc_insertion_point(field_release:vega.BTCEvent.withdrawal)
  if (_internal_has_withdrawal()) {
    clear_has_action();
      ::vega::BTCWithdrawal* temp = action_.withdrawal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.withdrawal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::BTCWithdrawal& BTCEvent::_internal_withdrawal() const {
  return _internal_has_withdrawal()
      ? *action_.withdrawal_
      : reinterpret_cast< ::vega::BTCWithdrawal&>(::vega::_BTCWithdrawal_default_instance_);
}
inline const ::vega::BTCWithdrawal& BTCEvent::withdrawal() const {
  // @@protoc_insertion_point(field_get:vega.BTCEvent.withdrawal)
  return _internal_withdrawal();
}
inline ::vega::BTCWithdrawal* BTCEvent::unsafe_arena_release_withdrawal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BTCEvent.withdrawal)
  if (_internal_has_withdrawal()) {
    clear_has_action();
    ::vega::BTCWithdrawal* temp = action_.withdrawal_;
    action_.withdrawal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTCEvent::unsafe_arena_set_allocated_withdrawal(::vega::BTCWithdrawal* withdrawal) {
  clear_action();
  if (withdrawal) {
    set_has_withdrawal();
    action_.withdrawal_ = withdrawal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BTCEvent.withdrawal)
}
inline ::vega::BTCWithdrawal* BTCEvent::_internal_mutable_withdrawal() {
  if (!_internal_has_withdrawal()) {
    clear_action();
    set_has_withdrawal();
    action_.withdrawal_ = CreateMaybeMessage< ::vega::BTCWithdrawal >(GetArena());
  }
  return action_.withdrawal_;
}
inline ::vega::BTCWithdrawal* BTCEvent::mutable_withdrawal() {
  // @@protoc_insertion_point(field_mutable:vega.BTCEvent.withdrawal)
  return _internal_mutable_withdrawal();
}

inline bool BTCEvent::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void BTCEvent::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline BTCEvent::ActionCase BTCEvent::action_case() const {
  return BTCEvent::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EthereumAddress

// string address = 1 [json_name = "address"];
inline void EthereumAddress::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& EthereumAddress::address() const {
  // @@protoc_insertion_point(field_get:vega.EthereumAddress.address)
  return _internal_address();
}
inline void EthereumAddress::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:vega.EthereumAddress.address)
}
inline std::string* EthereumAddress::mutable_address() {
  // @@protoc_insertion_point(field_mutable:vega.EthereumAddress.address)
  return _internal_mutable_address();
}
inline const std::string& EthereumAddress::_internal_address() const {
  return address_.Get();
}
inline void EthereumAddress::_internal_set_address(const std::string& value) {

  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EthereumAddress::set_address(std::string&& value) {

  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.EthereumAddress.address)
}
inline void EthereumAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.EthereumAddress.address)
}
inline void EthereumAddress::set_address(const char* value,
    size_t size) {

  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.EthereumAddress.address)
}
inline std::string* EthereumAddress::_internal_mutable_address() {

  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EthereumAddress::release_address() {
  // @@protoc_insertion_point(field_release:vega.EthereumAddress.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthereumAddress::set_allocated_address(std::string* address) {
  if (address != nullptr) {

  } else {

  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.EthereumAddress.address)
}

// -------------------------------------------------------------------

// BitcoinAddress

// string address = 1 [json_name = "address"];
inline void BitcoinAddress::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& BitcoinAddress::address() const {
  // @@protoc_insertion_point(field_get:vega.BitcoinAddress.address)
  return _internal_address();
}
inline void BitcoinAddress::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:vega.BitcoinAddress.address)
}
inline std::string* BitcoinAddress::mutable_address() {
  // @@protoc_insertion_point(field_mutable:vega.BitcoinAddress.address)
  return _internal_mutable_address();
}
inline const std::string& BitcoinAddress::_internal_address() const {
  return address_.Get();
}
inline void BitcoinAddress::_internal_set_address(const std::string& value) {

  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BitcoinAddress::set_address(std::string&& value) {

  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BitcoinAddress.address)
}
inline void BitcoinAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BitcoinAddress.address)
}
inline void BitcoinAddress::set_address(const char* value,
    size_t size) {

  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BitcoinAddress.address)
}
inline std::string* BitcoinAddress::_internal_mutable_address() {

  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BitcoinAddress::release_address() {
  // @@protoc_insertion_point(field_release:vega.BitcoinAddress.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BitcoinAddress::set_allocated_address(std::string* address) {
  if (address != nullptr) {

  } else {

  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BitcoinAddress.address)
}

// -------------------------------------------------------------------

// Identifier

// .vega.EthereumAddress ethereum_address = 1 [json_name = "ethereumAddress"];
inline bool Identifier::_internal_has_ethereum_address() const {
  return identifier_case() == kEthereumAddress;
}
inline bool Identifier::has_ethereum_address() const {
  return _internal_has_ethereum_address();
}
inline void Identifier::set_has_ethereum_address() {
  _oneof_case_[0] = kEthereumAddress;
}
inline void Identifier::clear_ethereum_address() {
  if (_internal_has_ethereum_address()) {
    if (GetArena() == nullptr) {
      delete identifier_.ethereum_address_;
    }
    clear_has_identifier();
  }
}
inline ::vega::EthereumAddress* Identifier::release_ethereum_address() {
  // @@protoc_insertion_point(field_release:vega.Identifier.ethereum_address)
  if (_internal_has_ethereum_address()) {
    clear_has_identifier();
      ::vega::EthereumAddress* temp = identifier_.ethereum_address_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    identifier_.ethereum_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::EthereumAddress& Identifier::_internal_ethereum_address() const {
  return _internal_has_ethereum_address()
      ? *identifier_.ethereum_address_
      : reinterpret_cast< ::vega::EthereumAddress&>(::vega::_EthereumAddress_default_instance_);
}
inline const ::vega::EthereumAddress& Identifier::ethereum_address() const {
  // @@protoc_insertion_point(field_get:vega.Identifier.ethereum_address)
  return _internal_ethereum_address();
}
inline ::vega::EthereumAddress* Identifier::unsafe_arena_release_ethereum_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.Identifier.ethereum_address)
  if (_internal_has_ethereum_address()) {
    clear_has_identifier();
    ::vega::EthereumAddress* temp = identifier_.ethereum_address_;
    identifier_.ethereum_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Identifier::unsafe_arena_set_allocated_ethereum_address(::vega::EthereumAddress* ethereum_address) {
  clear_identifier();
  if (ethereum_address) {
    set_has_ethereum_address();
    identifier_.ethereum_address_ = ethereum_address;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Identifier.ethereum_address)
}
inline ::vega::EthereumAddress* Identifier::_internal_mutable_ethereum_address() {
  if (!_internal_has_ethereum_address()) {
    clear_identifier();
    set_has_ethereum_address();
    identifier_.ethereum_address_ = CreateMaybeMessage< ::vega::EthereumAddress >(GetArena());
  }
  return identifier_.ethereum_address_;
}
inline ::vega::EthereumAddress* Identifier::mutable_ethereum_address() {
  // @@protoc_insertion_point(field_mutable:vega.Identifier.ethereum_address)
  return _internal_mutable_ethereum_address();
}

// .vega.BitcoinAddress bitcoin_address = 2 [json_name = "bitcoinAddress"];
inline bool Identifier::_internal_has_bitcoin_address() const {
  return identifier_case() == kBitcoinAddress;
}
inline bool Identifier::has_bitcoin_address() const {
  return _internal_has_bitcoin_address();
}
inline void Identifier::set_has_bitcoin_address() {
  _oneof_case_[0] = kBitcoinAddress;
}
inline void Identifier::clear_bitcoin_address() {
  if (_internal_has_bitcoin_address()) {
    if (GetArena() == nullptr) {
      delete identifier_.bitcoin_address_;
    }
    clear_has_identifier();
  }
}
inline ::vega::BitcoinAddress* Identifier::release_bitcoin_address() {
  // @@protoc_insertion_point(field_release:vega.Identifier.bitcoin_address)
  if (_internal_has_bitcoin_address()) {
    clear_has_identifier();
      ::vega::BitcoinAddress* temp = identifier_.bitcoin_address_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    identifier_.bitcoin_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::BitcoinAddress& Identifier::_internal_bitcoin_address() const {
  return _internal_has_bitcoin_address()
      ? *identifier_.bitcoin_address_
      : reinterpret_cast< ::vega::BitcoinAddress&>(::vega::_BitcoinAddress_default_instance_);
}
inline const ::vega::BitcoinAddress& Identifier::bitcoin_address() const {
  // @@protoc_insertion_point(field_get:vega.Identifier.bitcoin_address)
  return _internal_bitcoin_address();
}
inline ::vega::BitcoinAddress* Identifier::unsafe_arena_release_bitcoin_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.Identifier.bitcoin_address)
  if (_internal_has_bitcoin_address()) {
    clear_has_identifier();
    ::vega::BitcoinAddress* temp = identifier_.bitcoin_address_;
    identifier_.bitcoin_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Identifier::unsafe_arena_set_allocated_bitcoin_address(::vega::BitcoinAddress* bitcoin_address) {
  clear_identifier();
  if (bitcoin_address) {
    set_has_bitcoin_address();
    identifier_.bitcoin_address_ = bitcoin_address;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Identifier.bitcoin_address)
}
inline ::vega::BitcoinAddress* Identifier::_internal_mutable_bitcoin_address() {
  if (!_internal_has_bitcoin_address()) {
    clear_identifier();
    set_has_bitcoin_address();
    identifier_.bitcoin_address_ = CreateMaybeMessage< ::vega::BitcoinAddress >(GetArena());
  }
  return identifier_.bitcoin_address_;
}
inline ::vega::BitcoinAddress* Identifier::mutable_bitcoin_address() {
  // @@protoc_insertion_point(field_mutable:vega.Identifier.bitcoin_address)
  return _internal_mutable_bitcoin_address();
}

inline bool Identifier::has_identifier() const {
  return identifier_case() != IDENTIFIER_NOT_SET;
}
inline void Identifier::clear_has_identifier() {
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}
inline Identifier::IdentifierCase Identifier::identifier_case() const {
  return Identifier::IdentifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AddValidator

// .vega.Identifier id = 1 [json_name = "id"];
inline bool AddValidator::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool AddValidator::has_id() const {
  return _internal_has_id();
}
inline void AddValidator::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::vega::Identifier& AddValidator::_internal_id() const {
  const ::vega::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Identifier&>(
      ::vega::_Identifier_default_instance_);
}
inline const ::vega::Identifier& AddValidator::id() const {
  // @@protoc_insertion_point(field_get:vega.AddValidator.id)
  return _internal_id();
}
inline void AddValidator::unsafe_arena_set_allocated_id(
    ::vega::Identifier* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.AddValidator.id)
}
inline ::vega::Identifier* AddValidator::release_id() {

  ::vega::Identifier* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Identifier* AddValidator::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:vega.AddValidator.id)

  ::vega::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::vega::Identifier* AddValidator::_internal_mutable_id() {

  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Identifier>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::vega::Identifier* AddValidator::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.AddValidator.id)
  return _internal_mutable_id();
}
inline void AddValidator::set_allocated_id(::vega::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }

  } else {

  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:vega.AddValidator.id)
}

// -------------------------------------------------------------------

// RemoveValidator

// .vega.Identifier id = 1 [json_name = "id"];
inline bool RemoveValidator::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool RemoveValidator::has_id() const {
  return _internal_has_id();
}
inline void RemoveValidator::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::vega::Identifier& RemoveValidator::_internal_id() const {
  const ::vega::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Identifier&>(
      ::vega::_Identifier_default_instance_);
}
inline const ::vega::Identifier& RemoveValidator::id() const {
  // @@protoc_insertion_point(field_get:vega.RemoveValidator.id)
  return _internal_id();
}
inline void RemoveValidator::unsafe_arena_set_allocated_id(
    ::vega::Identifier* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.RemoveValidator.id)
}
inline ::vega::Identifier* RemoveValidator::release_id() {

  ::vega::Identifier* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Identifier* RemoveValidator::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:vega.RemoveValidator.id)

  ::vega::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::vega::Identifier* RemoveValidator::_internal_mutable_id() {

  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Identifier>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::vega::Identifier* RemoveValidator::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.RemoveValidator.id)
  return _internal_mutable_id();
}
inline void RemoveValidator::set_allocated_id(::vega::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }

  } else {

  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:vega.RemoveValidator.id)
}

// -------------------------------------------------------------------

// ValidatorEvent

// string source_id = 1 [json_name = "sourceId"];
inline void ValidatorEvent::clear_source_id() {
  source_id_.ClearToEmpty();
}
inline const std::string& ValidatorEvent::source_id() const {
  // @@protoc_insertion_point(field_get:vega.ValidatorEvent.source_id)
  return _internal_source_id();
}
inline void ValidatorEvent::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:vega.ValidatorEvent.source_id)
}
inline std::string* ValidatorEvent::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:vega.ValidatorEvent.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& ValidatorEvent::_internal_source_id() const {
  return source_id_.Get();
}
inline void ValidatorEvent::_internal_set_source_id(const std::string& value) {

  source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatorEvent::set_source_id(std::string&& value) {

  source_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ValidatorEvent.source_id)
}
inline void ValidatorEvent::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ValidatorEvent.source_id)
}
inline void ValidatorEvent::set_source_id(const char* value,
    size_t size) {

  source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ValidatorEvent.source_id)
}
inline std::string* ValidatorEvent::_internal_mutable_source_id() {

  return source_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatorEvent::release_source_id() {
  // @@protoc_insertion_point(field_release:vega.ValidatorEvent.source_id)
  return source_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatorEvent::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {

  } else {

  }
  source_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ValidatorEvent.source_id)
}

// .vega.AddValidator add = 1001 [json_name = "add"];
inline bool ValidatorEvent::_internal_has_add() const {
  return action_case() == kAdd;
}
inline bool ValidatorEvent::has_add() const {
  return _internal_has_add();
}
inline void ValidatorEvent::set_has_add() {
  _oneof_case_[0] = kAdd;
}
inline void ValidatorEvent::clear_add() {
  if (_internal_has_add()) {
    if (GetArena() == nullptr) {
      delete action_.add_;
    }
    clear_has_action();
  }
}
inline ::vega::AddValidator* ValidatorEvent::release_add() {
  // @@protoc_insertion_point(field_release:vega.ValidatorEvent.add)
  if (_internal_has_add()) {
    clear_has_action();
      ::vega::AddValidator* temp = action_.add_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::AddValidator& ValidatorEvent::_internal_add() const {
  return _internal_has_add()
      ? *action_.add_
      : reinterpret_cast< ::vega::AddValidator&>(::vega::_AddValidator_default_instance_);
}
inline const ::vega::AddValidator& ValidatorEvent::add() const {
  // @@protoc_insertion_point(field_get:vega.ValidatorEvent.add)
  return _internal_add();
}
inline ::vega::AddValidator* ValidatorEvent::unsafe_arena_release_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.ValidatorEvent.add)
  if (_internal_has_add()) {
    clear_has_action();
    ::vega::AddValidator* temp = action_.add_;
    action_.add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValidatorEvent::unsafe_arena_set_allocated_add(::vega::AddValidator* add) {
  clear_action();
  if (add) {
    set_has_add();
    action_.add_ = add;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.ValidatorEvent.add)
}
inline ::vega::AddValidator* ValidatorEvent::_internal_mutable_add() {
  if (!_internal_has_add()) {
    clear_action();
    set_has_add();
    action_.add_ = CreateMaybeMessage< ::vega::AddValidator >(GetArena());
  }
  return action_.add_;
}
inline ::vega::AddValidator* ValidatorEvent::mutable_add() {
  // @@protoc_insertion_point(field_mutable:vega.ValidatorEvent.add)
  return _internal_mutable_add();
}

// .vega.RemoveValidator rm = 1002 [json_name = "rm"];
inline bool ValidatorEvent::_internal_has_rm() const {
  return action_case() == kRm;
}
inline bool ValidatorEvent::has_rm() const {
  return _internal_has_rm();
}
inline void ValidatorEvent::set_has_rm() {
  _oneof_case_[0] = kRm;
}
inline void ValidatorEvent::clear_rm() {
  if (_internal_has_rm()) {
    if (GetArena() == nullptr) {
      delete action_.rm_;
    }
    clear_has_action();
  }
}
inline ::vega::RemoveValidator* ValidatorEvent::release_rm() {
  // @@protoc_insertion_point(field_release:vega.ValidatorEvent.rm)
  if (_internal_has_rm()) {
    clear_has_action();
      ::vega::RemoveValidator* temp = action_.rm_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.rm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::RemoveValidator& ValidatorEvent::_internal_rm() const {
  return _internal_has_rm()
      ? *action_.rm_
      : reinterpret_cast< ::vega::RemoveValidator&>(::vega::_RemoveValidator_default_instance_);
}
inline const ::vega::RemoveValidator& ValidatorEvent::rm() const {
  // @@protoc_insertion_point(field_get:vega.ValidatorEvent.rm)
  return _internal_rm();
}
inline ::vega::RemoveValidator* ValidatorEvent::unsafe_arena_release_rm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.ValidatorEvent.rm)
  if (_internal_has_rm()) {
    clear_has_action();
    ::vega::RemoveValidator* temp = action_.rm_;
    action_.rm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValidatorEvent::unsafe_arena_set_allocated_rm(::vega::RemoveValidator* rm) {
  clear_action();
  if (rm) {
    set_has_rm();
    action_.rm_ = rm;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.ValidatorEvent.rm)
}
inline ::vega::RemoveValidator* ValidatorEvent::_internal_mutable_rm() {
  if (!_internal_has_rm()) {
    clear_action();
    set_has_rm();
    action_.rm_ = CreateMaybeMessage< ::vega::RemoveValidator >(GetArena());
  }
  return action_.rm_;
}
inline ::vega::RemoveValidator* ValidatorEvent::mutable_rm() {
  // @@protoc_insertion_point(field_mutable:vega.ValidatorEvent.rm)
  return _internal_mutable_rm();
}

inline bool ValidatorEvent::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void ValidatorEvent::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline ValidatorEvent::ActionCase ValidatorEvent::action_case() const {
  return ValidatorEvent::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StakingEvent

// uint64 index = 1 [json_name = "index"];
inline void StakingEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StakingEvent::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StakingEvent::index() const {
  // @@protoc_insertion_point(field_get:vega.StakingEvent.index)
  return _internal_index();
}
inline void StakingEvent::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  index_ = value;
}
inline void StakingEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:vega.StakingEvent.index)
}

// uint64 block = 2 [json_name = "block"];
inline void StakingEvent::clear_block() {
  block_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StakingEvent::_internal_block() const {
  return block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StakingEvent::block() const {
  // @@protoc_insertion_point(field_get:vega.StakingEvent.block)
  return _internal_block();
}
inline void StakingEvent::_internal_set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  block_ = value;
}
inline void StakingEvent::set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:vega.StakingEvent.block)
}

// .vega.StakeDeposited stake_deposited = 1001 [json_name = "stakeDeposited"];
inline bool StakingEvent::_internal_has_stake_deposited() const {
  return action_case() == kStakeDeposited;
}
inline bool StakingEvent::has_stake_deposited() const {
  return _internal_has_stake_deposited();
}
inline void StakingEvent::set_has_stake_deposited() {
  _oneof_case_[0] = kStakeDeposited;
}
inline void StakingEvent::clear_stake_deposited() {
  if (_internal_has_stake_deposited()) {
    if (GetArena() == nullptr) {
      delete action_.stake_deposited_;
    }
    clear_has_action();
  }
}
inline ::vega::StakeDeposited* StakingEvent::release_stake_deposited() {
  // @@protoc_insertion_point(field_release:vega.StakingEvent.stake_deposited)
  if (_internal_has_stake_deposited()) {
    clear_has_action();
      ::vega::StakeDeposited* temp = action_.stake_deposited_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stake_deposited_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::StakeDeposited& StakingEvent::_internal_stake_deposited() const {
  return _internal_has_stake_deposited()
      ? *action_.stake_deposited_
      : reinterpret_cast< ::vega::StakeDeposited&>(::vega::_StakeDeposited_default_instance_);
}
inline const ::vega::StakeDeposited& StakingEvent::stake_deposited() const {
  // @@protoc_insertion_point(field_get:vega.StakingEvent.stake_deposited)
  return _internal_stake_deposited();
}
inline ::vega::StakeDeposited* StakingEvent::unsafe_arena_release_stake_deposited() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.StakingEvent.stake_deposited)
  if (_internal_has_stake_deposited()) {
    clear_has_action();
    ::vega::StakeDeposited* temp = action_.stake_deposited_;
    action_.stake_deposited_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakingEvent::unsafe_arena_set_allocated_stake_deposited(::vega::StakeDeposited* stake_deposited) {
  clear_action();
  if (stake_deposited) {
    set_has_stake_deposited();
    action_.stake_deposited_ = stake_deposited;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.StakingEvent.stake_deposited)
}
inline ::vega::StakeDeposited* StakingEvent::_internal_mutable_stake_deposited() {
  if (!_internal_has_stake_deposited()) {
    clear_action();
    set_has_stake_deposited();
    action_.stake_deposited_ = CreateMaybeMessage< ::vega::StakeDeposited >(GetArena());
  }
  return action_.stake_deposited_;
}
inline ::vega::StakeDeposited* StakingEvent::mutable_stake_deposited() {
  // @@protoc_insertion_point(field_mutable:vega.StakingEvent.stake_deposited)
  return _internal_mutable_stake_deposited();
}

// .vega.StakeRemoved stake_removed = 1002 [json_name = "stakeRemoved"];
inline bool StakingEvent::_internal_has_stake_removed() const {
  return action_case() == kStakeRemoved;
}
inline bool StakingEvent::has_stake_removed() const {
  return _internal_has_stake_removed();
}
inline void StakingEvent::set_has_stake_removed() {
  _oneof_case_[0] = kStakeRemoved;
}
inline void StakingEvent::clear_stake_removed() {
  if (_internal_has_stake_removed()) {
    if (GetArena() == nullptr) {
      delete action_.stake_removed_;
    }
    clear_has_action();
  }
}
inline ::vega::StakeRemoved* StakingEvent::release_stake_removed() {
  // @@protoc_insertion_point(field_release:vega.StakingEvent.stake_removed)
  if (_internal_has_stake_removed()) {
    clear_has_action();
      ::vega::StakeRemoved* temp = action_.stake_removed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stake_removed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::StakeRemoved& StakingEvent::_internal_stake_removed() const {
  return _internal_has_stake_removed()
      ? *action_.stake_removed_
      : reinterpret_cast< ::vega::StakeRemoved&>(::vega::_StakeRemoved_default_instance_);
}
inline const ::vega::StakeRemoved& StakingEvent::stake_removed() const {
  // @@protoc_insertion_point(field_get:vega.StakingEvent.stake_removed)
  return _internal_stake_removed();
}
inline ::vega::StakeRemoved* StakingEvent::unsafe_arena_release_stake_removed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.StakingEvent.stake_removed)
  if (_internal_has_stake_removed()) {
    clear_has_action();
    ::vega::StakeRemoved* temp = action_.stake_removed_;
    action_.stake_removed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakingEvent::unsafe_arena_set_allocated_stake_removed(::vega::StakeRemoved* stake_removed) {
  clear_action();
  if (stake_removed) {
    set_has_stake_removed();
    action_.stake_removed_ = stake_removed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.StakingEvent.stake_removed)
}
inline ::vega::StakeRemoved* StakingEvent::_internal_mutable_stake_removed() {
  if (!_internal_has_stake_removed()) {
    clear_action();
    set_has_stake_removed();
    action_.stake_removed_ = CreateMaybeMessage< ::vega::StakeRemoved >(GetArena());
  }
  return action_.stake_removed_;
}
inline ::vega::StakeRemoved* StakingEvent::mutable_stake_removed() {
  // @@protoc_insertion_point(field_mutable:vega.StakingEvent.stake_removed)
  return _internal_mutable_stake_removed();
}

inline bool StakingEvent::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void StakingEvent::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline StakingEvent::ActionCase StakingEvent::action_case() const {
  return StakingEvent::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StakeDeposited

// string ethereum_address = 1 [json_name = "ethereumAddress"];
inline void StakeDeposited::clear_ethereum_address() {
  ethereum_address_.ClearToEmpty();
}
inline const std::string& StakeDeposited::ethereum_address() const {
  // @@protoc_insertion_point(field_get:vega.StakeDeposited.ethereum_address)
  return _internal_ethereum_address();
}
inline void StakeDeposited::set_ethereum_address(const std::string& value) {
  _internal_set_ethereum_address(value);
  // @@protoc_insertion_point(field_set:vega.StakeDeposited.ethereum_address)
}
inline std::string* StakeDeposited::mutable_ethereum_address() {
  // @@protoc_insertion_point(field_mutable:vega.StakeDeposited.ethereum_address)
  return _internal_mutable_ethereum_address();
}
inline const std::string& StakeDeposited::_internal_ethereum_address() const {
  return ethereum_address_.Get();
}
inline void StakeDeposited::_internal_set_ethereum_address(const std::string& value) {

  ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeDeposited::set_ethereum_address(std::string&& value) {

  ethereum_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.StakeDeposited.ethereum_address)
}
inline void StakeDeposited::set_ethereum_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.StakeDeposited.ethereum_address)
}
inline void StakeDeposited::set_ethereum_address(const char* value,
    size_t size) {

  ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.StakeDeposited.ethereum_address)
}
inline std::string* StakeDeposited::_internal_mutable_ethereum_address() {

  return ethereum_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeDeposited::release_ethereum_address() {
  // @@protoc_insertion_point(field_release:vega.StakeDeposited.ethereum_address)
  return ethereum_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeDeposited::set_allocated_ethereum_address(std::string* ethereum_address) {
  if (ethereum_address != nullptr) {

  } else {

  }
  ethereum_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ethereum_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.StakeDeposited.ethereum_address)
}

// string vega_public_key = 2 [json_name = "vegaPublicKey"];
inline void StakeDeposited::clear_vega_public_key() {
  vega_public_key_.ClearToEmpty();
}
inline const std::string& StakeDeposited::vega_public_key() const {
  // @@protoc_insertion_point(field_get:vega.StakeDeposited.vega_public_key)
  return _internal_vega_public_key();
}
inline void StakeDeposited::set_vega_public_key(const std::string& value) {
  _internal_set_vega_public_key(value);
  // @@protoc_insertion_point(field_set:vega.StakeDeposited.vega_public_key)
}
inline std::string* StakeDeposited::mutable_vega_public_key() {
  // @@protoc_insertion_point(field_mutable:vega.StakeDeposited.vega_public_key)
  return _internal_mutable_vega_public_key();
}
inline const std::string& StakeDeposited::_internal_vega_public_key() const {
  return vega_public_key_.Get();
}
inline void StakeDeposited::_internal_set_vega_public_key(const std::string& value) {

  vega_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeDeposited::set_vega_public_key(std::string&& value) {

  vega_public_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.StakeDeposited.vega_public_key)
}
inline void StakeDeposited::set_vega_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.StakeDeposited.vega_public_key)
}
inline void StakeDeposited::set_vega_public_key(const char* value,
    size_t size) {

  vega_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.StakeDeposited.vega_public_key)
}
inline std::string* StakeDeposited::_internal_mutable_vega_public_key() {

  return vega_public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeDeposited::release_vega_public_key() {
  // @@protoc_insertion_point(field_release:vega.StakeDeposited.vega_public_key)
  return vega_public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeDeposited::set_allocated_vega_public_key(std::string* vega_public_key) {
  if (vega_public_key != nullptr) {

  } else {

  }
  vega_public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_public_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.StakeDeposited.vega_public_key)
}

// string amount = 3 [json_name = "amount"];
inline void StakeDeposited::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& StakeDeposited::amount() const {
  // @@protoc_insertion_point(field_get:vega.StakeDeposited.amount)
  return _internal_amount();
}
inline void StakeDeposited::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.StakeDeposited.amount)
}
inline std::string* StakeDeposited::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.StakeDeposited.amount)
  return _internal_mutable_amount();
}
inline const std::string& StakeDeposited::_internal_amount() const {
  return amount_.Get();
}
inline void StakeDeposited::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeDeposited::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.StakeDeposited.amount)
}
inline void StakeDeposited::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.StakeDeposited.amount)
}
inline void StakeDeposited::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.StakeDeposited.amount)
}
inline std::string* StakeDeposited::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeDeposited::release_amount() {
  // @@protoc_insertion_point(field_release:vega.StakeDeposited.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeDeposited::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.StakeDeposited.amount)
}

// int64 block_time = 4 [json_name = "blockTime"];
inline void StakeDeposited::clear_block_time() {
  block_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StakeDeposited::_internal_block_time() const {
  return block_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StakeDeposited::block_time() const {
  // @@protoc_insertion_point(field_get:vega.StakeDeposited.block_time)
  return _internal_block_time();
}
inline void StakeDeposited::_internal_set_block_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  block_time_ = value;
}
inline void StakeDeposited::set_block_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_block_time(value);
  // @@protoc_insertion_point(field_set:vega.StakeDeposited.block_time)
}

// -------------------------------------------------------------------

// StakeRemoved

// string ethereum_address = 1 [json_name = "ethereumAddress"];
inline void StakeRemoved::clear_ethereum_address() {
  ethereum_address_.ClearToEmpty();
}
inline const std::string& StakeRemoved::ethereum_address() const {
  // @@protoc_insertion_point(field_get:vega.StakeRemoved.ethereum_address)
  return _internal_ethereum_address();
}
inline void StakeRemoved::set_ethereum_address(const std::string& value) {
  _internal_set_ethereum_address(value);
  // @@protoc_insertion_point(field_set:vega.StakeRemoved.ethereum_address)
}
inline std::string* StakeRemoved::mutable_ethereum_address() {
  // @@protoc_insertion_point(field_mutable:vega.StakeRemoved.ethereum_address)
  return _internal_mutable_ethereum_address();
}
inline const std::string& StakeRemoved::_internal_ethereum_address() const {
  return ethereum_address_.Get();
}
inline void StakeRemoved::_internal_set_ethereum_address(const std::string& value) {

  ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeRemoved::set_ethereum_address(std::string&& value) {

  ethereum_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.StakeRemoved.ethereum_address)
}
inline void StakeRemoved::set_ethereum_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.StakeRemoved.ethereum_address)
}
inline void StakeRemoved::set_ethereum_address(const char* value,
    size_t size) {

  ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.StakeRemoved.ethereum_address)
}
inline std::string* StakeRemoved::_internal_mutable_ethereum_address() {

  return ethereum_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeRemoved::release_ethereum_address() {
  // @@protoc_insertion_point(field_release:vega.StakeRemoved.ethereum_address)
  return ethereum_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeRemoved::set_allocated_ethereum_address(std::string* ethereum_address) {
  if (ethereum_address != nullptr) {

  } else {

  }
  ethereum_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ethereum_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.StakeRemoved.ethereum_address)
}

// string vega_public_key = 2 [json_name = "vegaPublicKey"];
inline void StakeRemoved::clear_vega_public_key() {
  vega_public_key_.ClearToEmpty();
}
inline const std::string& StakeRemoved::vega_public_key() const {
  // @@protoc_insertion_point(field_get:vega.StakeRemoved.vega_public_key)
  return _internal_vega_public_key();
}
inline void StakeRemoved::set_vega_public_key(const std::string& value) {
  _internal_set_vega_public_key(value);
  // @@protoc_insertion_point(field_set:vega.StakeRemoved.vega_public_key)
}
inline std::string* StakeRemoved::mutable_vega_public_key() {
  // @@protoc_insertion_point(field_mutable:vega.StakeRemoved.vega_public_key)
  return _internal_mutable_vega_public_key();
}
inline const std::string& StakeRemoved::_internal_vega_public_key() const {
  return vega_public_key_.Get();
}
inline void StakeRemoved::_internal_set_vega_public_key(const std::string& value) {

  vega_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeRemoved::set_vega_public_key(std::string&& value) {

  vega_public_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.StakeRemoved.vega_public_key)
}
inline void StakeRemoved::set_vega_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vega_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.StakeRemoved.vega_public_key)
}
inline void StakeRemoved::set_vega_public_key(const char* value,
    size_t size) {

  vega_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.StakeRemoved.vega_public_key)
}
inline std::string* StakeRemoved::_internal_mutable_vega_public_key() {

  return vega_public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeRemoved::release_vega_public_key() {
  // @@protoc_insertion_point(field_release:vega.StakeRemoved.vega_public_key)
  return vega_public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeRemoved::set_allocated_vega_public_key(std::string* vega_public_key) {
  if (vega_public_key != nullptr) {

  } else {

  }
  vega_public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vega_public_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.StakeRemoved.vega_public_key)
}

// string amount = 3 [json_name = "amount"];
inline void StakeRemoved::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& StakeRemoved::amount() const {
  // @@protoc_insertion_point(field_get:vega.StakeRemoved.amount)
  return _internal_amount();
}
inline void StakeRemoved::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.StakeRemoved.amount)
}
inline std::string* StakeRemoved::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.StakeRemoved.amount)
  return _internal_mutable_amount();
}
inline const std::string& StakeRemoved::_internal_amount() const {
  return amount_.Get();
}
inline void StakeRemoved::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeRemoved::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.StakeRemoved.amount)
}
inline void StakeRemoved::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.StakeRemoved.amount)
}
inline void StakeRemoved::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.StakeRemoved.amount)
}
inline std::string* StakeRemoved::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeRemoved::release_amount() {
  // @@protoc_insertion_point(field_release:vega.StakeRemoved.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeRemoved::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.StakeRemoved.amount)
}

// int64 block_time = 4 [json_name = "blockTime"];
inline void StakeRemoved::clear_block_time() {
  block_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StakeRemoved::_internal_block_time() const {
  return block_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StakeRemoved::block_time() const {
  // @@protoc_insertion_point(field_get:vega.StakeRemoved.block_time)
  return _internal_block_time();
}
inline void StakeRemoved::_internal_set_block_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  block_time_ = value;
}
inline void StakeRemoved::set_block_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_block_time(value);
  // @@protoc_insertion_point(field_set:vega.StakeRemoved.block_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vega

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chain_5fevents_2eproto
