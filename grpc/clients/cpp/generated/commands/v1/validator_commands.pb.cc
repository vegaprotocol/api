// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands/v1/validator_commands.proto

#include "commands/v1/validator_commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BTCEvent_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BuiltinAssetEvent_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ERC20Event_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StakingEvent_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ValidatorEvent_chain_5fevents_2eproto;
namespace vega {
namespace commands {
namespace v1 {
class NodeRegistrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeRegistration> _instance;
} _NodeRegistration_default_instance_;
class NodeVoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeVote> _instance;
} _NodeVote_default_instance_;
class NodeSignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeSignature> _instance;
} _NodeSignature_default_instance_;
class ChainEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChainEvent> _instance;
} _ChainEvent_default_instance_;
}  // namespace v1
}  // namespace commands
}  // namespace vega
static void InitDefaultsscc_info_ChainEvent_commands_2fv1_2fvalidator_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_ChainEvent_default_instance_;
    new (ptr) ::vega::commands::v1::ChainEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ChainEvent_commands_2fv1_2fvalidator_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ChainEvent_commands_2fv1_2fvalidator_5fcommands_2eproto}, {
      &scc_info_BuiltinAssetEvent_chain_5fevents_2eproto.base,
      &scc_info_ERC20Event_chain_5fevents_2eproto.base,
      &scc_info_BTCEvent_chain_5fevents_2eproto.base,
      &scc_info_ValidatorEvent_chain_5fevents_2eproto.base,
      &scc_info_StakingEvent_chain_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_NodeRegistration_commands_2fv1_2fvalidator_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_NodeRegistration_default_instance_;
    new (ptr) ::vega::commands::v1::NodeRegistration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeRegistration_commands_2fv1_2fvalidator_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeRegistration_commands_2fv1_2fvalidator_5fcommands_2eproto}, {}};

static void InitDefaultsscc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_NodeSignature_default_instance_;
    new (ptr) ::vega::commands::v1::NodeSignature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto}, {}};

static void InitDefaultsscc_info_NodeVote_commands_2fv1_2fvalidator_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_NodeVote_default_instance_;
    new (ptr) ::vega::commands::v1::NodeVote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeVote_commands_2fv1_2fvalidator_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeVote_commands_2fv1_2fvalidator_5fcommands_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_commands_2fv1_2fvalidator_5fcommands_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_commands_2fv1_2fvalidator_5fcommands_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_commands_2fv1_2fvalidator_5fcommands_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_commands_2fv1_2fvalidator_5fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeRegistration, vega_pub_key_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeRegistration, ethereum_address_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeRegistration, chain_pub_key_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeRegistration, info_url_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeRegistration, country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeVote, pub_key_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeVote, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeSignature, id_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeSignature, sig_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::NodeSignature, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::ChainEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::ChainEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::ChainEvent, tx_id_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::ChainEvent, nonce_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::ChainEvent, event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::commands::v1::NodeRegistration)},
  { 10, -1, sizeof(::vega::commands::v1::NodeVote)},
  { 17, -1, sizeof(::vega::commands::v1::NodeSignature)},
  { 25, -1, sizeof(::vega::commands::v1::ChainEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_NodeRegistration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_NodeVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_NodeSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_ChainEvent_default_instance_),
};

const char descriptor_table_protodef_commands_2fv1_2fvalidator_5fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$commands/v1/validator_commands.proto\022\020"
  "vega.commands.v1\032\022chain_events.proto\0326gi"
  "thub.com/mwitkow/go-proto-validators/val"
  "idator.proto\"\340\001\n\020NodeRegistration\022(\n\014veg"
  "a_pub_key\030\001 \001(\tB\006\342\337\037\002X\001R\nvegaPubKey\0221\n\020e"
  "thereum_address\030\002 \001(\tB\006\342\337\037\002X\001R\017ethereumA"
  "ddress\022*\n\rchain_pub_key\030\003 \001(\tB\006\342\337\037\002X\001R\013c"
  "hainPubKey\022!\n\010info_url\030\004 \001(\tB\006\342\337\037\002X\001R\007in"
  "foUrl\022 \n\007country\030\005 \001(\tB\006\342\337\037\002X\001R\007country\""
  "Q\n\010NodeVote\022\037\n\007pub_key\030\001 \001(\014B\006\342\337\037\002X\001R\006pu"
  "bKey\022$\n\treference\030\002 \001(\tB\006\342\337\037\002X\001R\treferen"
  "ce\"j\n\rNodeSignature\022\016\n\002id\030\001 \001(\tR\002id\022\020\n\003s"
  "ig\030\002 \001(\014R\003sig\0227\n\004kind\030\003 \001(\0162#.vega.comma"
  "nds.v1.NodeSignatureKindR\004kind\"\271\002\n\nChain"
  "Event\022\023\n\005tx_id\030\001 \001(\tR\004txId\022\024\n\005nonce\030\002 \001("
  "\004R\005nonce\0224\n\007builtin\030\351\007 \001(\0132\027.vega.Builti"
  "nAssetEventH\000R\007builtin\022)\n\005erc20\030\352\007 \001(\0132\020"
  ".vega.ERC20EventH\000R\005erc20\022#\n\003btc\030\353\007 \001(\0132"
  "\016.vega.BTCEventH\000R\003btc\0225\n\tvalidator\030\354\007 \001"
  "(\0132\024.vega.ValidatorEventH\000R\tvalidator\022:\n"
  "\rstaking_event\030\355\007 \001(\0132\022.vega.StakingEven"
  "tH\000R\014stakingEventB\007\n\005event*\205\001\n\021NodeSigna"
  "tureKind\022#\n\037NODE_SIGNATURE_KIND_UNSPECIF"
  "IED\020\000\022!\n\035NODE_SIGNATURE_KIND_ASSET_NEW\020\001"
  "\022(\n$NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL"
  "\020\002BO\n io.vegaprotocol.vega.commands.v1Z+"
  "code.vegaprotocol.io/vega/proto/commands"
  "/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto_deps[2] = {
  &::descriptor_table_chain_5fevents_2eproto,
  &::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto_sccs[4] = {
  &scc_info_ChainEvent_commands_2fv1_2fvalidator_5fcommands_2eproto.base,
  &scc_info_NodeRegistration_commands_2fv1_2fvalidator_5fcommands_2eproto.base,
  &scc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto.base,
  &scc_info_NodeVote_commands_2fv1_2fvalidator_5fcommands_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto = {
  false, false, descriptor_table_protodef_commands_2fv1_2fvalidator_5fcommands_2eproto, "commands/v1/validator_commands.proto", 1091,
  &descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto_once, descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto_sccs, descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_commands_2fv1_2fvalidator_5fcommands_2eproto::offsets,
  file_level_metadata_commands_2fv1_2fvalidator_5fcommands_2eproto, 4, file_level_enum_descriptors_commands_2fv1_2fvalidator_5fcommands_2eproto, file_level_service_descriptors_commands_2fv1_2fvalidator_5fcommands_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_commands_2fv1_2fvalidator_5fcommands_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto)), true);
namespace vega {
namespace commands {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeSignatureKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto);
  return file_level_enum_descriptors_commands_2fv1_2fvalidator_5fcommands_2eproto[0];
}
bool NodeSignatureKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NodeRegistration::_Internal {
 public:
};

NodeRegistration::NodeRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.NodeRegistration)
}
NodeRegistration::NodeRegistration(const NodeRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vega_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_pub_key().empty()) {
    vega_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_pub_key(),
      GetArena());
  }
  ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ethereum_address().empty()) {
    ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ethereum_address(),
      GetArena());
  }
  chain_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_pub_key().empty()) {
    chain_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_pub_key(),
      GetArena());
  }
  info_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info_url().empty()) {
    info_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info_url(),
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.NodeRegistration)
}

void NodeRegistration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeRegistration_commands_2fv1_2fvalidator_5fcommands_2eproto.base);
  vega_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeRegistration::~NodeRegistration() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.NodeRegistration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vega_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ethereum_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeRegistration::ArenaDtor(void* object) {
  NodeRegistration* _this = reinterpret_cast< NodeRegistration* >(object);
  (void)_this;
}
void NodeRegistration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeRegistration& NodeRegistration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeRegistration_commands_2fv1_2fvalidator_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void NodeRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.NodeRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vega_pub_key_.ClearToEmpty();
  ethereum_address_.ClearToEmpty();
  chain_pub_key_.ClearToEmpty();
  info_url_.ClearToEmpty();
  country_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeRegistration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vega_pub_key = 1 [json_name = "vegaPubKey", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vega_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.NodeRegistration.vega_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ethereum_address = 2 [json_name = "ethereumAddress", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ethereum_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.NodeRegistration.ethereum_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chain_pub_key = 3 [json_name = "chainPubKey", (.validator.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chain_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.NodeRegistration.chain_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info_url = 4 [json_name = "infoUrl", (.validator.field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_info_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.NodeRegistration.info_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 5 [json_name = "country", (.validator.field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.NodeRegistration.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeRegistration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.NodeRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vega_pub_key = 1 [json_name = "vegaPubKey", (.validator.field) = {
  if (this->vega_pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_pub_key().data(), static_cast<int>(this->_internal_vega_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.NodeRegistration.vega_pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vega_pub_key(), target);
  }

  // string ethereum_address = 2 [json_name = "ethereumAddress", (.validator.field) = {
  if (this->ethereum_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ethereum_address().data(), static_cast<int>(this->_internal_ethereum_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.NodeRegistration.ethereum_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ethereum_address(), target);
  }

  // string chain_pub_key = 3 [json_name = "chainPubKey", (.validator.field) = {
  if (this->chain_pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_pub_key().data(), static_cast<int>(this->_internal_chain_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.NodeRegistration.chain_pub_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chain_pub_key(), target);
  }

  // string info_url = 4 [json_name = "infoUrl", (.validator.field) = {
  if (this->info_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info_url().data(), static_cast<int>(this->_internal_info_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.NodeRegistration.info_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info_url(), target);
  }

  // string country = 5 [json_name = "country", (.validator.field) = {
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.NodeRegistration.country");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.NodeRegistration)
  return target;
}

size_t NodeRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.NodeRegistration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vega_pub_key = 1 [json_name = "vegaPubKey", (.validator.field) = {
  if (this->vega_pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_pub_key());
  }

  // string ethereum_address = 2 [json_name = "ethereumAddress", (.validator.field) = {
  if (this->ethereum_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ethereum_address());
  }

  // string chain_pub_key = 3 [json_name = "chainPubKey", (.validator.field) = {
  if (this->chain_pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_pub_key());
  }

  // string info_url = 4 [json_name = "infoUrl", (.validator.field) = {
  if (this->info_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info_url());
  }

  // string country = 5 [json_name = "country", (.validator.field) = {
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeRegistration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.NodeRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRegistration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeRegistration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.NodeRegistration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.NodeRegistration)
    MergeFrom(*source);
  }
}

void NodeRegistration::MergeFrom(const NodeRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.NodeRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vega_pub_key().size() > 0) {
    _internal_set_vega_pub_key(from._internal_vega_pub_key());
  }
  if (from.ethereum_address().size() > 0) {
    _internal_set_ethereum_address(from._internal_ethereum_address());
  }
  if (from.chain_pub_key().size() > 0) {
    _internal_set_chain_pub_key(from._internal_chain_pub_key());
  }
  if (from.info_url().size() > 0) {
    _internal_set_info_url(from._internal_info_url());
  }
  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
}

void NodeRegistration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.NodeRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRegistration::CopyFrom(const NodeRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.NodeRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRegistration::IsInitialized() const {
  return true;
}

void NodeRegistration::InternalSwap(NodeRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vega_pub_key_.Swap(&other->vega_pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ethereum_address_.Swap(&other->ethereum_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chain_pub_key_.Swap(&other->chain_pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  info_url_.Swap(&other->info_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeRegistration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeVote::_Internal {
 public:
};

NodeVote::NodeVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.NodeVote)
}
NodeVote::NodeVote(const NodeVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(),
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.NodeVote)
}

void NodeVote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeVote_commands_2fv1_2fvalidator_5fcommands_2eproto.base);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeVote::~NodeVote() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.NodeVote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeVote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeVote::ArenaDtor(void* object) {
  NodeVote* _this = reinterpret_cast< NodeVote* >(object);
  (void)_this;
}
void NodeVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeVote& NodeVote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeVote_commands_2fv1_2fvalidator_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void NodeVote::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.NodeVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pub_key = 1 [json_name = "pubKey", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 2 [json_name = "reference", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.NodeVote.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeVote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.NodeVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pub_key = 1 [json_name = "pubKey", (.validator.field) = {
  if (this->pub_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // string reference = 2 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.NodeVote.reference");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.NodeVote)
  return target;
}

size_t NodeVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.NodeVote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pub_key = 1 [json_name = "pubKey", (.validator.field) = {
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pub_key());
  }

  // string reference = 2 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeVote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.NodeVote)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeVote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.NodeVote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.NodeVote)
    MergeFrom(*source);
  }
}

void NodeVote::MergeFrom(const NodeVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.NodeVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pub_key().size() > 0) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void NodeVote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.NodeVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeVote::CopyFrom(const NodeVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.NodeVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeVote::IsInitialized() const {
  return true;
}

void NodeVote::InternalSwap(NodeVote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeVote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeSignature::_Internal {
 public:
};

NodeSignature::NodeSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.NodeSignature)
}
NodeSignature::NodeSignature(const NodeSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sig().empty()) {
    sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sig(),
      GetArena());
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.NodeSignature)
}

void NodeSignature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
}

NodeSignature::~NodeSignature() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.NodeSignature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeSignature::ArenaDtor(void* object) {
  NodeSignature* _this = reinterpret_cast< NodeSignature* >(object);
  (void)_this;
}
void NodeSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeSignature& NodeSignature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void NodeSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.NodeSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  sig_.ClearToEmpty();
  kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.NodeSignature.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sig = 2 [json_name = "sig"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.NodeSignatureKind kind = 3 [json_name = "kind"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::vega::commands::v1::NodeSignatureKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeSignature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.NodeSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.NodeSignature.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes sig = 2 [json_name = "sig"];
  if (this->sig().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sig(), target);
  }

  // .vega.commands.v1.NodeSignatureKind kind = 3 [json_name = "kind"];
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.NodeSignature)
  return target;
}

size_t NodeSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.NodeSignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes sig = 2 [json_name = "sig"];
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sig());
  }

  // .vega.commands.v1.NodeSignatureKind kind = 3 [json_name = "kind"];
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeSignature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.NodeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeSignature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.NodeSignature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.NodeSignature)
    MergeFrom(*source);
  }
}

void NodeSignature::MergeFrom(const NodeSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.NodeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.sig().size() > 0) {
    _internal_set_sig(from._internal_sig());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void NodeSignature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.NodeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeSignature::CopyFrom(const NodeSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.NodeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeSignature::IsInitialized() const {
  return true;
}

void NodeSignature::InternalSwap(NodeSignature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeSignature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChainEvent::_Internal {
 public:
  static const ::vega::BuiltinAssetEvent& builtin(const ChainEvent* msg);
  static const ::vega::ERC20Event& erc20(const ChainEvent* msg);
  static const ::vega::BTCEvent& btc(const ChainEvent* msg);
  static const ::vega::ValidatorEvent& validator(const ChainEvent* msg);
  static const ::vega::StakingEvent& staking_event(const ChainEvent* msg);
};

const ::vega::BuiltinAssetEvent&
ChainEvent::_Internal::builtin(const ChainEvent* msg) {
  return *msg->event_.builtin_;
}
const ::vega::ERC20Event&
ChainEvent::_Internal::erc20(const ChainEvent* msg) {
  return *msg->event_.erc20_;
}
const ::vega::BTCEvent&
ChainEvent::_Internal::btc(const ChainEvent* msg) {
  return *msg->event_.btc_;
}
const ::vega::ValidatorEvent&
ChainEvent::_Internal::validator(const ChainEvent* msg) {
  return *msg->event_.validator_;
}
const ::vega::StakingEvent&
ChainEvent::_Internal::staking_event(const ChainEvent* msg) {
  return *msg->event_.staking_event_;
}
void ChainEvent::set_allocated_builtin(::vega::BuiltinAssetEvent* builtin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (builtin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(builtin)->GetArena();
    if (message_arena != submessage_arena) {
      builtin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, builtin, submessage_arena);
    }
    set_has_builtin();
    event_.builtin_ = builtin;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.ChainEvent.builtin)
}
void ChainEvent::clear_builtin() {
  if (_internal_has_builtin()) {
    if (GetArena() == nullptr) {
      delete event_.builtin_;
    }
    clear_has_event();
  }
}
void ChainEvent::set_allocated_erc20(::vega::ERC20Event* erc20) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (erc20) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(erc20)->GetArena();
    if (message_arena != submessage_arena) {
      erc20 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc20, submessage_arena);
    }
    set_has_erc20();
    event_.erc20_ = erc20;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.ChainEvent.erc20)
}
void ChainEvent::clear_erc20() {
  if (_internal_has_erc20()) {
    if (GetArena() == nullptr) {
      delete event_.erc20_;
    }
    clear_has_event();
  }
}
void ChainEvent::set_allocated_btc(::vega::BTCEvent* btc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (btc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(btc)->GetArena();
    if (message_arena != submessage_arena) {
      btc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, btc, submessage_arena);
    }
    set_has_btc();
    event_.btc_ = btc;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.ChainEvent.btc)
}
void ChainEvent::clear_btc() {
  if (_internal_has_btc()) {
    if (GetArena() == nullptr) {
      delete event_.btc_;
    }
    clear_has_event();
  }
}
void ChainEvent::set_allocated_validator(::vega::ValidatorEvent* validator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (validator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator)->GetArena();
    if (message_arena != submessage_arena) {
      validator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator, submessage_arena);
    }
    set_has_validator();
    event_.validator_ = validator;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.ChainEvent.validator)
}
void ChainEvent::clear_validator() {
  if (_internal_has_validator()) {
    if (GetArena() == nullptr) {
      delete event_.validator_;
    }
    clear_has_event();
  }
}
void ChainEvent::set_allocated_staking_event(::vega::StakingEvent* staking_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (staking_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(staking_event)->GetArena();
    if (message_arena != submessage_arena) {
      staking_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staking_event, submessage_arena);
    }
    set_has_staking_event();
    event_.staking_event_ = staking_event;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.ChainEvent.staking_event)
}
void ChainEvent::clear_staking_event() {
  if (_internal_has_staking_event()) {
    if (GetArena() == nullptr) {
      delete event_.staking_event_;
    }
    clear_has_event();
  }
}
ChainEvent::ChainEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.ChainEvent)
}
ChainEvent::ChainEvent(const ChainEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_id().empty()) {
    tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_id(),
      GetArena());
  }
  nonce_ = from.nonce_;
  clear_has_event();
  switch (from.event_case()) {
    case kBuiltin: {
      _internal_mutable_builtin()->::vega::BuiltinAssetEvent::MergeFrom(from._internal_builtin());
      break;
    }
    case kErc20: {
      _internal_mutable_erc20()->::vega::ERC20Event::MergeFrom(from._internal_erc20());
      break;
    }
    case kBtc: {
      _internal_mutable_btc()->::vega::BTCEvent::MergeFrom(from._internal_btc());
      break;
    }
    case kValidator: {
      _internal_mutable_validator()->::vega::ValidatorEvent::MergeFrom(from._internal_validator());
      break;
    }
    case kStakingEvent: {
      _internal_mutable_staking_event()->::vega::StakingEvent::MergeFrom(from._internal_staking_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.ChainEvent)
}

void ChainEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChainEvent_commands_2fv1_2fvalidator_5fcommands_2eproto.base);
  tx_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_ = PROTOBUF_ULONGLONG(0);
  clear_has_event();
}

ChainEvent::~ChainEvent() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.ChainEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChainEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_event()) {
    clear_event();
  }
}

void ChainEvent::ArenaDtor(void* object) {
  ChainEvent* _this = reinterpret_cast< ChainEvent* >(object);
  (void)_this;
}
void ChainEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChainEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChainEvent& ChainEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChainEvent_commands_2fv1_2fvalidator_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void ChainEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:vega.commands.v1.ChainEvent)
  switch (event_case()) {
    case kBuiltin: {
      if (GetArena() == nullptr) {
        delete event_.builtin_;
      }
      break;
    }
    case kErc20: {
      if (GetArena() == nullptr) {
        delete event_.erc20_;
      }
      break;
    }
    case kBtc: {
      if (GetArena() == nullptr) {
        delete event_.btc_;
      }
      break;
    }
    case kValidator: {
      if (GetArena() == nullptr) {
        delete event_.validator_;
      }
      break;
    }
    case kStakingEvent: {
      if (GetArena() == nullptr) {
        delete event_.staking_event_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void ChainEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.ChainEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_id_.ClearToEmpty();
  nonce_ = PROTOBUF_ULONGLONG(0);
  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChainEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tx_id = 1 [json_name = "txId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.ChainEvent.tx_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 2 [json_name = "nonce"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.BuiltinAssetEvent builtin = 1001 [json_name = "builtin"];
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_builtin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ERC20Event erc20 = 1002 [json_name = "erc20"];
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc20(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.BTCEvent btc = 1003 [json_name = "btc"];
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_btc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ValidatorEvent validator = 1004 [json_name = "validator"];
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.StakingEvent staking_event = 1005 [json_name = "stakingEvent"];
      case 1005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_staking_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChainEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.ChainEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_id = 1 [json_name = "txId"];
  if (this->tx_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_id().data(), static_cast<int>(this->_internal_tx_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.ChainEvent.tx_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tx_id(), target);
  }

  // uint64 nonce = 2 [json_name = "nonce"];
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // .vega.BuiltinAssetEvent builtin = 1001 [json_name = "builtin"];
  if (_internal_has_builtin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::builtin(this), target, stream);
  }

  // .vega.ERC20Event erc20 = 1002 [json_name = "erc20"];
  if (_internal_has_erc20()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1002, _Internal::erc20(this), target, stream);
  }

  // .vega.BTCEvent btc = 1003 [json_name = "btc"];
  if (_internal_has_btc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1003, _Internal::btc(this), target, stream);
  }

  // .vega.ValidatorEvent validator = 1004 [json_name = "validator"];
  if (_internal_has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1004, _Internal::validator(this), target, stream);
  }

  // .vega.StakingEvent staking_event = 1005 [json_name = "stakingEvent"];
  if (_internal_has_staking_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1005, _Internal::staking_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.ChainEvent)
  return target;
}

size_t ChainEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.ChainEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_id = 1 [json_name = "txId"];
  if (this->tx_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_id());
  }

  // uint64 nonce = 2 [json_name = "nonce"];
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  switch (event_case()) {
    // .vega.BuiltinAssetEvent builtin = 1001 [json_name = "builtin"];
    case kBuiltin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.builtin_);
      break;
    }
    // .vega.ERC20Event erc20 = 1002 [json_name = "erc20"];
    case kErc20: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.erc20_);
      break;
    }
    // .vega.BTCEvent btc = 1003 [json_name = "btc"];
    case kBtc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.btc_);
      break;
    }
    // .vega.ValidatorEvent validator = 1004 [json_name = "validator"];
    case kValidator: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.validator_);
      break;
    }
    // .vega.StakingEvent staking_event = 1005 [json_name = "stakingEvent"];
    case kStakingEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.staking_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChainEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.ChainEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChainEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.ChainEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.ChainEvent)
    MergeFrom(*source);
  }
}

void ChainEvent::MergeFrom(const ChainEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.ChainEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_id().size() > 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  switch (from.event_case()) {
    case kBuiltin: {
      _internal_mutable_builtin()->::vega::BuiltinAssetEvent::MergeFrom(from._internal_builtin());
      break;
    }
    case kErc20: {
      _internal_mutable_erc20()->::vega::ERC20Event::MergeFrom(from._internal_erc20());
      break;
    }
    case kBtc: {
      _internal_mutable_btc()->::vega::BTCEvent::MergeFrom(from._internal_btc());
      break;
    }
    case kValidator: {
      _internal_mutable_validator()->::vega::ValidatorEvent::MergeFrom(from._internal_validator());
      break;
    }
    case kStakingEvent: {
      _internal_mutable_staking_event()->::vega::StakingEvent::MergeFrom(from._internal_staking_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void ChainEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.ChainEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainEvent::CopyFrom(const ChainEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.ChainEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainEvent::IsInitialized() const {
  return true;
}

void ChainEvent::InternalSwap(ChainEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_id_.Swap(&other->tx_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(nonce_, other->nonce_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace commands
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::commands::v1::NodeRegistration* Arena::CreateMaybeMessage< ::vega::commands::v1::NodeRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::NodeRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::NodeVote* Arena::CreateMaybeMessage< ::vega::commands::v1::NodeVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::NodeVote >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::NodeSignature* Arena::CreateMaybeMessage< ::vega::commands::v1::NodeSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::NodeSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::ChainEvent* Arena::CreateMaybeMessage< ::vega::commands::v1::ChainEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::ChainEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
