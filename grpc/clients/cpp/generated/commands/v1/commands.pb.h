// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands/v1/commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commands_2fv1_2fcommands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_commands_2fv1_2fcommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "governance.pb.h"
#include "vega.pb.h"
#include <google/protobuf/wrappers.pb.h>
#include "github.com/mwitkow/go-proto-validators/validator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commands_2fv1_2fcommands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands_2fv1_2fcommands_2eproto;
namespace vega {
namespace commands {
namespace v1 {
class DelegateSubmission;
class DelegateSubmissionDefaultTypeInternal;
extern DelegateSubmissionDefaultTypeInternal _DelegateSubmission_default_instance_;
class LiquidityProvisionSubmission;
class LiquidityProvisionSubmissionDefaultTypeInternal;
extern LiquidityProvisionSubmissionDefaultTypeInternal _LiquidityProvisionSubmission_default_instance_;
class OrderAmendment;
class OrderAmendmentDefaultTypeInternal;
extern OrderAmendmentDefaultTypeInternal _OrderAmendment_default_instance_;
class OrderCancellation;
class OrderCancellationDefaultTypeInternal;
extern OrderCancellationDefaultTypeInternal _OrderCancellation_default_instance_;
class OrderSubmission;
class OrderSubmissionDefaultTypeInternal;
extern OrderSubmissionDefaultTypeInternal _OrderSubmission_default_instance_;
class ProposalSubmission;
class ProposalSubmissionDefaultTypeInternal;
extern ProposalSubmissionDefaultTypeInternal _ProposalSubmission_default_instance_;
class RestoreSnapshot;
class RestoreSnapshotDefaultTypeInternal;
extern RestoreSnapshotDefaultTypeInternal _RestoreSnapshot_default_instance_;
class UndelegateSubmission;
class UndelegateSubmissionDefaultTypeInternal;
extern UndelegateSubmissionDefaultTypeInternal _UndelegateSubmission_default_instance_;
class VoteSubmission;
class VoteSubmissionDefaultTypeInternal;
extern VoteSubmissionDefaultTypeInternal _VoteSubmission_default_instance_;
class WithdrawSubmission;
class WithdrawSubmissionDefaultTypeInternal;
extern WithdrawSubmissionDefaultTypeInternal _WithdrawSubmission_default_instance_;
}  // namespace v1
}  // namespace commands
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::commands::v1::DelegateSubmission* Arena::CreateMaybeMessage<::vega::commands::v1::DelegateSubmission>(Arena*);
template<> ::vega::commands::v1::LiquidityProvisionSubmission* Arena::CreateMaybeMessage<::vega::commands::v1::LiquidityProvisionSubmission>(Arena*);
template<> ::vega::commands::v1::OrderAmendment* Arena::CreateMaybeMessage<::vega::commands::v1::OrderAmendment>(Arena*);
template<> ::vega::commands::v1::OrderCancellation* Arena::CreateMaybeMessage<::vega::commands::v1::OrderCancellation>(Arena*);
template<> ::vega::commands::v1::OrderSubmission* Arena::CreateMaybeMessage<::vega::commands::v1::OrderSubmission>(Arena*);
template<> ::vega::commands::v1::ProposalSubmission* Arena::CreateMaybeMessage<::vega::commands::v1::ProposalSubmission>(Arena*);
template<> ::vega::commands::v1::RestoreSnapshot* Arena::CreateMaybeMessage<::vega::commands::v1::RestoreSnapshot>(Arena*);
template<> ::vega::commands::v1::UndelegateSubmission* Arena::CreateMaybeMessage<::vega::commands::v1::UndelegateSubmission>(Arena*);
template<> ::vega::commands::v1::VoteSubmission* Arena::CreateMaybeMessage<::vega::commands::v1::VoteSubmission>(Arena*);
template<> ::vega::commands::v1::WithdrawSubmission* Arena::CreateMaybeMessage<::vega::commands::v1::WithdrawSubmission>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {
namespace commands {
namespace v1 {

enum UndelegateSubmission_Method : int {
  UndelegateSubmission_Method_METHOD_UNSPECIFIED = 0,
  UndelegateSubmission_Method_METHOD_NOW = 1,
  UndelegateSubmission_Method_METHOD_AT_END_OF_EPOCH = 2,
  UndelegateSubmission_Method_METHOD_IN_ANGER = 3,
  UndelegateSubmission_Method_UndelegateSubmission_Method_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UndelegateSubmission_Method_UndelegateSubmission_Method_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UndelegateSubmission_Method_IsValid(int value);
constexpr UndelegateSubmission_Method UndelegateSubmission_Method_Method_MIN = UndelegateSubmission_Method_METHOD_UNSPECIFIED;
constexpr UndelegateSubmission_Method UndelegateSubmission_Method_Method_MAX = UndelegateSubmission_Method_METHOD_IN_ANGER;
constexpr int UndelegateSubmission_Method_Method_ARRAYSIZE = UndelegateSubmission_Method_Method_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UndelegateSubmission_Method_descriptor();
template<typename T>
inline const std::string& UndelegateSubmission_Method_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UndelegateSubmission_Method>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UndelegateSubmission_Method_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UndelegateSubmission_Method_descriptor(), enum_t_value);
}
inline bool UndelegateSubmission_Method_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UndelegateSubmission_Method* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UndelegateSubmission_Method>(
    UndelegateSubmission_Method_descriptor(), name, value);
}
// ===================================================================

class OrderSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.OrderSubmission) */ {
 public:
  inline OrderSubmission() : OrderSubmission(nullptr) {}
  virtual ~OrderSubmission();

  OrderSubmission(const OrderSubmission& from);
  OrderSubmission(OrderSubmission&& from) noexcept
    : OrderSubmission() {
    *this = ::std::move(from);
  }

  inline OrderSubmission& operator=(const OrderSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderSubmission& operator=(OrderSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderSubmission& default_instance();

  static inline const OrderSubmission* internal_default_instance() {
    return reinterpret_cast<const OrderSubmission*>(
               &_OrderSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderSubmission& a, OrderSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderSubmission* New() const final {
    return CreateMaybeMessage<OrderSubmission>(nullptr);
  }

  OrderSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderSubmission& from);
  void MergeFrom(const OrderSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.OrderSubmission";
  }
  protected:
  explicit OrderSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2fcommands_2eproto);
    return ::descriptor_table_commands_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kReferenceFieldNumber = 8,
    kPeggedOrderFieldNumber = 9,
    kPriceFieldNumber = 2,
    kSizeFieldNumber = 3,
    kSideFieldNumber = 4,
    kTimeInForceFieldNumber = 5,
    kExpiresAtFieldNumber = 6,
    kTypeFieldNumber = 7,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string reference = 8 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // .vega.PeggedOrder pegged_order = 9 [json_name = "peggedOrder"];
  bool has_pegged_order() const;
  private:
  bool _internal_has_pegged_order() const;
  public:
  void clear_pegged_order();
  const ::vega::PeggedOrder& pegged_order() const;
  ::vega::PeggedOrder* release_pegged_order();
  ::vega::PeggedOrder* mutable_pegged_order();
  void set_allocated_pegged_order(::vega::PeggedOrder* pegged_order);
  private:
  const ::vega::PeggedOrder& _internal_pegged_order() const;
  ::vega::PeggedOrder* _internal_mutable_pegged_order();
  public:
  void unsafe_arena_set_allocated_pegged_order(
      ::vega::PeggedOrder* pegged_order);
  ::vega::PeggedOrder* unsafe_arena_release_pegged_order();

  // uint64 price = 2 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 3 [json_name = "size", (.validator.field) = {
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.Side side = 4 [json_name = "side"];
  void clear_side();
  ::vega::Side side() const;
  void set_side(::vega::Side value);
  private:
  ::vega::Side _internal_side() const;
  void _internal_set_side(::vega::Side value);
  public:

  // .vega.Order.TimeInForce time_in_force = 5 [json_name = "timeInForce"];
  void clear_time_in_force();
  ::vega::Order_TimeInForce time_in_force() const;
  void set_time_in_force(::vega::Order_TimeInForce value);
  private:
  ::vega::Order_TimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::vega::Order_TimeInForce value);
  public:

  // int64 expires_at = 6 [json_name = "expiresAt"];
  void clear_expires_at();
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at() const;
  void set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expires_at() const;
  void _internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Order.Type type = 7 [json_name = "type"];
  void clear_type();
  ::vega::Order_Type type() const;
  void set_type(::vega::Order_Type value);
  private:
  ::vega::Order_Type _internal_type() const;
  void _internal_set_type(::vega::Order_Type value);
  public:

  // @@protoc_insertion_point(class_scope:vega.commands.v1.OrderSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::vega::PeggedOrder* pegged_order_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  int side_;
  int time_in_force_;
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class OrderCancellation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.OrderCancellation) */ {
 public:
  inline OrderCancellation() : OrderCancellation(nullptr) {}
  virtual ~OrderCancellation();

  OrderCancellation(const OrderCancellation& from);
  OrderCancellation(OrderCancellation&& from) noexcept
    : OrderCancellation() {
    *this = ::std::move(from);
  }

  inline OrderCancellation& operator=(const OrderCancellation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderCancellation& operator=(OrderCancellation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderCancellation& default_instance();

  static inline const OrderCancellation* internal_default_instance() {
    return reinterpret_cast<const OrderCancellation*>(
               &_OrderCancellation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrderCancellation& a, OrderCancellation& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderCancellation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderCancellation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderCancellation* New() const final {
    return CreateMaybeMessage<OrderCancellation>(nullptr);
  }

  OrderCancellation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderCancellation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderCancellation& from);
  void MergeFrom(const OrderCancellation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderCancellation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.OrderCancellation";
  }
  protected:
  explicit OrderCancellation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2fcommands_2eproto);
    return ::descriptor_table_commands_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
  };
  // string order_id = 1 [json_name = "orderId"];
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:vega.commands.v1.OrderCancellation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class OrderAmendment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.OrderAmendment) */ {
 public:
  inline OrderAmendment() : OrderAmendment(nullptr) {}
  virtual ~OrderAmendment();

  OrderAmendment(const OrderAmendment& from);
  OrderAmendment(OrderAmendment&& from) noexcept
    : OrderAmendment() {
    *this = ::std::move(from);
  }

  inline OrderAmendment& operator=(const OrderAmendment& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderAmendment& operator=(OrderAmendment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderAmendment& default_instance();

  static inline const OrderAmendment* internal_default_instance() {
    return reinterpret_cast<const OrderAmendment*>(
               &_OrderAmendment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OrderAmendment& a, OrderAmendment& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderAmendment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderAmendment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderAmendment* New() const final {
    return CreateMaybeMessage<OrderAmendment>(nullptr);
  }

  OrderAmendment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderAmendment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderAmendment& from);
  void MergeFrom(const OrderAmendment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderAmendment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.OrderAmendment";
  }
  protected:
  explicit OrderAmendment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2fcommands_2eproto);
    return ::descriptor_table_commands_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kPriceFieldNumber = 3,
    kExpiresAtFieldNumber = 5,
    kPeggedOffsetFieldNumber = 7,
    kSizeDeltaFieldNumber = 4,
    kTimeInForceFieldNumber = 6,
    kPeggedReferenceFieldNumber = 8,
  };
  // string order_id = 1 [json_name = "orderId", (.validator.field) = {
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // .vega.Price price = 3 [json_name = "price"];
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::vega::Price& price() const;
  ::vega::Price* release_price();
  ::vega::Price* mutable_price();
  void set_allocated_price(::vega::Price* price);
  private:
  const ::vega::Price& _internal_price() const;
  ::vega::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::vega::Price* price);
  ::vega::Price* unsafe_arena_release_price();

  // .vega.Timestamp expires_at = 5 [json_name = "expiresAt"];
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const ::vega::Timestamp& expires_at() const;
  ::vega::Timestamp* release_expires_at();
  ::vega::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(::vega::Timestamp* expires_at);
  private:
  const ::vega::Timestamp& _internal_expires_at() const;
  ::vega::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      ::vega::Timestamp* expires_at);
  ::vega::Timestamp* unsafe_arena_release_expires_at();

  // .google.protobuf.Int64Value pegged_offset = 7 [json_name = "peggedOffset"];
  bool has_pegged_offset() const;
  private:
  bool _internal_has_pegged_offset() const;
  public:
  void clear_pegged_offset();
  const PROTOBUF_NAMESPACE_ID::Int64Value& pegged_offset() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_pegged_offset();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_pegged_offset();
  void set_allocated_pegged_offset(PROTOBUF_NAMESPACE_ID::Int64Value* pegged_offset);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_pegged_offset() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_pegged_offset();
  public:
  void unsafe_arena_set_allocated_pegged_offset(
      PROTOBUF_NAMESPACE_ID::Int64Value* pegged_offset);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_pegged_offset();

  // int64 size_delta = 4 [json_name = "sizeDelta"];
  void clear_size_delta();
  ::PROTOBUF_NAMESPACE_ID::int64 size_delta() const;
  void set_size_delta(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size_delta() const;
  void _internal_set_size_delta(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Order.TimeInForce time_in_force = 6 [json_name = "timeInForce"];
  void clear_time_in_force();
  ::vega::Order_TimeInForce time_in_force() const;
  void set_time_in_force(::vega::Order_TimeInForce value);
  private:
  ::vega::Order_TimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::vega::Order_TimeInForce value);
  public:

  // .vega.PeggedReference pegged_reference = 8 [json_name = "peggedReference"];
  void clear_pegged_reference();
  ::vega::PeggedReference pegged_reference() const;
  void set_pegged_reference(::vega::PeggedReference value);
  private:
  ::vega::PeggedReference _internal_pegged_reference() const;
  void _internal_set_pegged_reference(::vega::PeggedReference value);
  public:

  // @@protoc_insertion_point(class_scope:vega.commands.v1.OrderAmendment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::vega::Price* price_;
  ::vega::Timestamp* expires_at_;
  PROTOBUF_NAMESPACE_ID::Int64Value* pegged_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_delta_;
  int time_in_force_;
  int pegged_reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class LiquidityProvisionSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.LiquidityProvisionSubmission) */ {
 public:
  inline LiquidityProvisionSubmission() : LiquidityProvisionSubmission(nullptr) {}
  virtual ~LiquidityProvisionSubmission();

  LiquidityProvisionSubmission(const LiquidityProvisionSubmission& from);
  LiquidityProvisionSubmission(LiquidityProvisionSubmission&& from) noexcept
    : LiquidityProvisionSubmission() {
    *this = ::std::move(from);
  }

  inline LiquidityProvisionSubmission& operator=(const LiquidityProvisionSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityProvisionSubmission& operator=(LiquidityProvisionSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityProvisionSubmission& default_instance();

  static inline const LiquidityProvisionSubmission* internal_default_instance() {
    return reinterpret_cast<const LiquidityProvisionSubmission*>(
               &_LiquidityProvisionSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LiquidityProvisionSubmission& a, LiquidityProvisionSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityProvisionSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityProvisionSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityProvisionSubmission* New() const final {
    return CreateMaybeMessage<LiquidityProvisionSubmission>(nullptr);
  }

  LiquidityProvisionSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityProvisionSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityProvisionSubmission& from);
  void MergeFrom(const LiquidityProvisionSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityProvisionSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.LiquidityProvisionSubmission";
  }
  protected:
  explicit LiquidityProvisionSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2fcommands_2eproto);
    return ::descriptor_table_commands_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSellsFieldNumber = 4,
    kBuysFieldNumber = 5,
    kMarketIdFieldNumber = 1,
    kFeeFieldNumber = 3,
    kReferenceFieldNumber = 6,
    kCommitmentAmountFieldNumber = 2,
  };
  // repeated .vega.LiquidityOrder sells = 4 [json_name = "sells"];
  int sells_size() const;
  private:
  int _internal_sells_size() const;
  public:
  void clear_sells();
  ::vega::LiquidityOrder* mutable_sells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >*
      mutable_sells();
  private:
  const ::vega::LiquidityOrder& _internal_sells(int index) const;
  ::vega::LiquidityOrder* _internal_add_sells();
  public:
  const ::vega::LiquidityOrder& sells(int index) const;
  ::vega::LiquidityOrder* add_sells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >&
      sells() const;

  // repeated .vega.LiquidityOrder buys = 5 [json_name = "buys"];
  int buys_size() const;
  private:
  int _internal_buys_size() const;
  public:
  void clear_buys();
  ::vega::LiquidityOrder* mutable_buys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >*
      mutable_buys();
  private:
  const ::vega::LiquidityOrder& _internal_buys(int index) const;
  ::vega::LiquidityOrder* _internal_add_buys();
  public:
  const ::vega::LiquidityOrder& buys(int index) const;
  ::vega::LiquidityOrder* add_buys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >&
      buys() const;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string fee = 3 [json_name = "fee"];
  void clear_fee();
  const std::string& fee() const;
  void set_fee(const std::string& value);
  void set_fee(std::string&& value);
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  std::string* mutable_fee();
  std::string* release_fee();
  void set_allocated_fee(std::string* fee);
  private:
  const std::string& _internal_fee() const;
  void _internal_set_fee(const std::string& value);
  std::string* _internal_mutable_fee();
  public:

  // string reference = 6 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // uint64 commitment_amount = 2 [json_name = "commitmentAmount"];
  void clear_commitment_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 commitment_amount() const;
  void set_commitment_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commitment_amount() const;
  void _internal_set_commitment_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.commands.v1.LiquidityProvisionSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder > sells_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder > buys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commitment_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class WithdrawSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.WithdrawSubmission) */ {
 public:
  inline WithdrawSubmission() : WithdrawSubmission(nullptr) {}
  virtual ~WithdrawSubmission();

  WithdrawSubmission(const WithdrawSubmission& from);
  WithdrawSubmission(WithdrawSubmission&& from) noexcept
    : WithdrawSubmission() {
    *this = ::std::move(from);
  }

  inline WithdrawSubmission& operator=(const WithdrawSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawSubmission& operator=(WithdrawSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawSubmission& default_instance();

  static inline const WithdrawSubmission* internal_default_instance() {
    return reinterpret_cast<const WithdrawSubmission*>(
               &_WithdrawSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WithdrawSubmission& a, WithdrawSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawSubmission* New() const final {
    return CreateMaybeMessage<WithdrawSubmission>(nullptr);
  }

  WithdrawSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawSubmission& from);
  void MergeFrom(const WithdrawSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.WithdrawSubmission";
  }
  protected:
  explicit WithdrawSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2fcommands_2eproto);
    return ::descriptor_table_commands_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 2,
    kExtFieldNumber = 3,
    kAmountFieldNumber = 1,
  };
  // string asset = 2 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // .vega.WithdrawExt ext = 3 [json_name = "ext"];
  bool has_ext() const;
  private:
  bool _internal_has_ext() const;
  public:
  void clear_ext();
  const ::vega::WithdrawExt& ext() const;
  ::vega::WithdrawExt* release_ext();
  ::vega::WithdrawExt* mutable_ext();
  void set_allocated_ext(::vega::WithdrawExt* ext);
  private:
  const ::vega::WithdrawExt& _internal_ext() const;
  ::vega::WithdrawExt* _internal_mutable_ext();
  public:
  void unsafe_arena_set_allocated_ext(
      ::vega::WithdrawExt* ext);
  ::vega::WithdrawExt* unsafe_arena_release_ext();

  // uint64 amount = 1 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.commands.v1.WithdrawSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::vega::WithdrawExt* ext_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class ProposalSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.ProposalSubmission) */ {
 public:
  inline ProposalSubmission() : ProposalSubmission(nullptr) {}
  virtual ~ProposalSubmission();

  ProposalSubmission(const ProposalSubmission& from);
  ProposalSubmission(ProposalSubmission&& from) noexcept
    : ProposalSubmission() {
    *this = ::std::move(from);
  }

  inline ProposalSubmission& operator=(const ProposalSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalSubmission& operator=(ProposalSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposalSubmission& default_instance();

  static inline const ProposalSubmission* internal_default_instance() {
    return reinterpret_cast<const ProposalSubmission*>(
               &_ProposalSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProposalSubmission& a, ProposalSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposalSubmission* New() const final {
    return CreateMaybeMessage<ProposalSubmission>(nullptr);
  }

  ProposalSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposalSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposalSubmission& from);
  void MergeFrom(const ProposalSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.ProposalSubmission";
  }
  protected:
  explicit ProposalSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2fcommands_2eproto);
    return ::descriptor_table_commands_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 1,
    kTermsFieldNumber = 2,
  };
  // string reference = 1 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // .vega.ProposalTerms terms = 2 [json_name = "terms", (.validator.field) = {
  bool has_terms() const;
  private:
  bool _internal_has_terms() const;
  public:
  void clear_terms();
  const ::vega::ProposalTerms& terms() const;
  ::vega::ProposalTerms* release_terms();
  ::vega::ProposalTerms* mutable_terms();
  void set_allocated_terms(::vega::ProposalTerms* terms);
  private:
  const ::vega::ProposalTerms& _internal_terms() const;
  ::vega::ProposalTerms* _internal_mutable_terms();
  public:
  void unsafe_arena_set_allocated_terms(
      ::vega::ProposalTerms* terms);
  ::vega::ProposalTerms* unsafe_arena_release_terms();

  // @@protoc_insertion_point(class_scope:vega.commands.v1.ProposalSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::vega::ProposalTerms* terms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class VoteSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.VoteSubmission) */ {
 public:
  inline VoteSubmission() : VoteSubmission(nullptr) {}
  virtual ~VoteSubmission();

  VoteSubmission(const VoteSubmission& from);
  VoteSubmission(VoteSubmission&& from) noexcept
    : VoteSubmission() {
    *this = ::std::move(from);
  }

  inline VoteSubmission& operator=(const VoteSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteSubmission& operator=(VoteSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoteSubmission& default_instance();

  static inline const VoteSubmission* internal_default_instance() {
    return reinterpret_cast<const VoteSubmission*>(
               &_VoteSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VoteSubmission& a, VoteSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoteSubmission* New() const final {
    return CreateMaybeMessage<VoteSubmission>(nullptr);
  }

  VoteSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoteSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoteSubmission& from);
  void MergeFrom(const VoteSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.VoteSubmission";
  }
  protected:
  explicit VoteSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2fcommands_2eproto);
    return ::descriptor_table_commands_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
  void clear_proposal_id();
  const std::string& proposal_id() const;
  void set_proposal_id(const std::string& value);
  void set_proposal_id(std::string&& value);
  void set_proposal_id(const char* value);
  void set_proposal_id(const char* value, size_t size);
  std::string* mutable_proposal_id();
  std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* proposal_id);
  private:
  const std::string& _internal_proposal_id() const;
  void _internal_set_proposal_id(const std::string& value);
  std::string* _internal_mutable_proposal_id();
  public:

  // .vega.Vote.Value value = 2 [json_name = "value"];
  void clear_value();
  ::vega::Vote_Value value() const;
  void set_value(::vega::Vote_Value value);
  private:
  ::vega::Vote_Value _internal_value() const;
  void _internal_set_value(::vega::Vote_Value value);
  public:

  // @@protoc_insertion_point(class_scope:vega.commands.v1.VoteSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_id_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class DelegateSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.DelegateSubmission) */ {
 public:
  inline DelegateSubmission() : DelegateSubmission(nullptr) {}
  virtual ~DelegateSubmission();

  DelegateSubmission(const DelegateSubmission& from);
  DelegateSubmission(DelegateSubmission&& from) noexcept
    : DelegateSubmission() {
    *this = ::std::move(from);
  }

  inline DelegateSubmission& operator=(const DelegateSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegateSubmission& operator=(DelegateSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegateSubmission& default_instance();

  static inline const DelegateSubmission* internal_default_instance() {
    return reinterpret_cast<const DelegateSubmission*>(
               &_DelegateSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DelegateSubmission& a, DelegateSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegateSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegateSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegateSubmission* New() const final {
    return CreateMaybeMessage<DelegateSubmission>(nullptr);
  }

  DelegateSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegateSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegateSubmission& from);
  void MergeFrom(const DelegateSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegateSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.DelegateSubmission";
  }
  protected:
  explicit DelegateSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2fcommands_2eproto);
    return ::descriptor_table_commands_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string node_id = 1 [json_name = "nodeId", (.validator.field) = {
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // uint64 amount = 2 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.commands.v1.DelegateSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class UndelegateSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.UndelegateSubmission) */ {
 public:
  inline UndelegateSubmission() : UndelegateSubmission(nullptr) {}
  virtual ~UndelegateSubmission();

  UndelegateSubmission(const UndelegateSubmission& from);
  UndelegateSubmission(UndelegateSubmission&& from) noexcept
    : UndelegateSubmission() {
    *this = ::std::move(from);
  }

  inline UndelegateSubmission& operator=(const UndelegateSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndelegateSubmission& operator=(UndelegateSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UndelegateSubmission& default_instance();

  static inline const UndelegateSubmission* internal_default_instance() {
    return reinterpret_cast<const UndelegateSubmission*>(
               &_UndelegateSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UndelegateSubmission& a, UndelegateSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(UndelegateSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndelegateSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndelegateSubmission* New() const final {
    return CreateMaybeMessage<UndelegateSubmission>(nullptr);
  }

  UndelegateSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndelegateSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndelegateSubmission& from);
  void MergeFrom(const UndelegateSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndelegateSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.UndelegateSubmission";
  }
  protected:
  explicit UndelegateSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2fcommands_2eproto);
    return ::descriptor_table_commands_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UndelegateSubmission_Method Method;
  static constexpr Method METHOD_UNSPECIFIED =
    UndelegateSubmission_Method_METHOD_UNSPECIFIED;
  static constexpr Method METHOD_NOW =
    UndelegateSubmission_Method_METHOD_NOW;
  static constexpr Method METHOD_AT_END_OF_EPOCH =
    UndelegateSubmission_Method_METHOD_AT_END_OF_EPOCH;
  static constexpr Method METHOD_IN_ANGER =
    UndelegateSubmission_Method_METHOD_IN_ANGER;
  static inline bool Method_IsValid(int value) {
    return UndelegateSubmission_Method_IsValid(value);
  }
  static constexpr Method Method_MIN =
    UndelegateSubmission_Method_Method_MIN;
  static constexpr Method Method_MAX =
    UndelegateSubmission_Method_Method_MAX;
  static constexpr int Method_ARRAYSIZE =
    UndelegateSubmission_Method_Method_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Method_descriptor() {
    return UndelegateSubmission_Method_descriptor();
  }
  template<typename T>
  static inline const std::string& Method_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Method>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Method_Name.");
    return UndelegateSubmission_Method_Name(enum_t_value);
  }
  static inline bool Method_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Method* value) {
    return UndelegateSubmission_Method_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kAmountFieldNumber = 2,
    kMethodFieldNumber = 3,
  };
  // string node_id = 1 [json_name = "nodeId", (.validator.field) = {
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // uint64 amount = 2 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.commands.v1.UndelegateSubmission.Method method = 3 [json_name = "method"];
  void clear_method();
  ::vega::commands::v1::UndelegateSubmission_Method method() const;
  void set_method(::vega::commands::v1::UndelegateSubmission_Method value);
  private:
  ::vega::commands::v1::UndelegateSubmission_Method _internal_method() const;
  void _internal_set_method(::vega::commands::v1::UndelegateSubmission_Method value);
  public:

  // @@protoc_insertion_point(class_scope:vega.commands.v1.UndelegateSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  int method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RestoreSnapshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.RestoreSnapshot) */ {
 public:
  inline RestoreSnapshot() : RestoreSnapshot(nullptr) {}
  virtual ~RestoreSnapshot();

  RestoreSnapshot(const RestoreSnapshot& from);
  RestoreSnapshot(RestoreSnapshot&& from) noexcept
    : RestoreSnapshot() {
    *this = ::std::move(from);
  }

  inline RestoreSnapshot& operator=(const RestoreSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreSnapshot& operator=(RestoreSnapshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreSnapshot& default_instance();

  static inline const RestoreSnapshot* internal_default_instance() {
    return reinterpret_cast<const RestoreSnapshot*>(
               &_RestoreSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RestoreSnapshot& a, RestoreSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreSnapshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreSnapshot* New() const final {
    return CreateMaybeMessage<RestoreSnapshot>(nullptr);
  }

  RestoreSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreSnapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreSnapshot& from);
  void MergeFrom(const RestoreSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreSnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.RestoreSnapshot";
  }
  protected:
  explicit RestoreSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2fcommands_2eproto);
    return ::descriptor_table_commands_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:vega.commands.v1.RestoreSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2fcommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderSubmission

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void OrderSubmission::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& OrderSubmission::market_id() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderSubmission.market_id)
  return _internal_market_id();
}
inline void OrderSubmission::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderSubmission.market_id)
}
inline std::string* OrderSubmission::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OrderSubmission.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& OrderSubmission::_internal_market_id() const {
  return market_id_.Get();
}
inline void OrderSubmission::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderSubmission::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.OrderSubmission.market_id)
}
inline void OrderSubmission::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.OrderSubmission.market_id)
}
inline void OrderSubmission::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.OrderSubmission.market_id)
}
inline std::string* OrderSubmission::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderSubmission::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OrderSubmission.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderSubmission::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OrderSubmission.market_id)
}

// uint64 price = 2 [json_name = "price"];
inline void OrderSubmission::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderSubmission::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderSubmission::price() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderSubmission.price)
  return _internal_price();
}
inline void OrderSubmission::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void OrderSubmission::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderSubmission.price)
}

// uint64 size = 3 [json_name = "size", (.validator.field) = {
inline void OrderSubmission::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderSubmission::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderSubmission::size() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderSubmission.size)
  return _internal_size();
}
inline void OrderSubmission::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  size_ = value;
}
inline void OrderSubmission::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderSubmission.size)
}

// .vega.Side side = 4 [json_name = "side"];
inline void OrderSubmission::clear_side() {
  side_ = 0;
}
inline ::vega::Side OrderSubmission::_internal_side() const {
  return static_cast< ::vega::Side >(side_);
}
inline ::vega::Side OrderSubmission::side() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderSubmission.side)
  return _internal_side();
}
inline void OrderSubmission::_internal_set_side(::vega::Side value) {

  side_ = value;
}
inline void OrderSubmission::set_side(::vega::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderSubmission.side)
}

// .vega.Order.TimeInForce time_in_force = 5 [json_name = "timeInForce"];
inline void OrderSubmission::clear_time_in_force() {
  time_in_force_ = 0;
}
inline ::vega::Order_TimeInForce OrderSubmission::_internal_time_in_force() const {
  return static_cast< ::vega::Order_TimeInForce >(time_in_force_);
}
inline ::vega::Order_TimeInForce OrderSubmission::time_in_force() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderSubmission.time_in_force)
  return _internal_time_in_force();
}
inline void OrderSubmission::_internal_set_time_in_force(::vega::Order_TimeInForce value) {

  time_in_force_ = value;
}
inline void OrderSubmission::set_time_in_force(::vega::Order_TimeInForce value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderSubmission.time_in_force)
}

// int64 expires_at = 6 [json_name = "expiresAt"];
inline void OrderSubmission::clear_expires_at() {
  expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderSubmission::_internal_expires_at() const {
  return expires_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderSubmission::expires_at() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderSubmission.expires_at)
  return _internal_expires_at();
}
inline void OrderSubmission::_internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  expires_at_ = value;
}
inline void OrderSubmission::set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expires_at(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderSubmission.expires_at)
}

// .vega.Order.Type type = 7 [json_name = "type"];
inline void OrderSubmission::clear_type() {
  type_ = 0;
}
inline ::vega::Order_Type OrderSubmission::_internal_type() const {
  return static_cast< ::vega::Order_Type >(type_);
}
inline ::vega::Order_Type OrderSubmission::type() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderSubmission.type)
  return _internal_type();
}
inline void OrderSubmission::_internal_set_type(::vega::Order_Type value) {

  type_ = value;
}
inline void OrderSubmission::set_type(::vega::Order_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderSubmission.type)
}

// string reference = 8 [json_name = "reference"];
inline void OrderSubmission::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& OrderSubmission::reference() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderSubmission.reference)
  return _internal_reference();
}
inline void OrderSubmission::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderSubmission.reference)
}
inline std::string* OrderSubmission::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OrderSubmission.reference)
  return _internal_mutable_reference();
}
inline const std::string& OrderSubmission::_internal_reference() const {
  return reference_.Get();
}
inline void OrderSubmission::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderSubmission::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.OrderSubmission.reference)
}
inline void OrderSubmission::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.OrderSubmission.reference)
}
inline void OrderSubmission::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.OrderSubmission.reference)
}
inline std::string* OrderSubmission::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderSubmission::release_reference() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OrderSubmission.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderSubmission::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OrderSubmission.reference)
}

// .vega.PeggedOrder pegged_order = 9 [json_name = "peggedOrder"];
inline bool OrderSubmission::_internal_has_pegged_order() const {
  return this != internal_default_instance() && pegged_order_ != nullptr;
}
inline bool OrderSubmission::has_pegged_order() const {
  return _internal_has_pegged_order();
}
inline const ::vega::PeggedOrder& OrderSubmission::_internal_pegged_order() const {
  const ::vega::PeggedOrder* p = pegged_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::PeggedOrder&>(
      ::vega::_PeggedOrder_default_instance_);
}
inline const ::vega::PeggedOrder& OrderSubmission::pegged_order() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderSubmission.pegged_order)
  return _internal_pegged_order();
}
inline void OrderSubmission::unsafe_arena_set_allocated_pegged_order(
    ::vega::PeggedOrder* pegged_order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pegged_order_);
  }
  pegged_order_ = pegged_order;
  if (pegged_order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.commands.v1.OrderSubmission.pegged_order)
}
inline ::vega::PeggedOrder* OrderSubmission::release_pegged_order() {

  ::vega::PeggedOrder* temp = pegged_order_;
  pegged_order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::PeggedOrder* OrderSubmission::unsafe_arena_release_pegged_order() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OrderSubmission.pegged_order)

  ::vega::PeggedOrder* temp = pegged_order_;
  pegged_order_ = nullptr;
  return temp;
}
inline ::vega::PeggedOrder* OrderSubmission::_internal_mutable_pegged_order() {

  if (pegged_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::PeggedOrder>(GetArena());
    pegged_order_ = p;
  }
  return pegged_order_;
}
inline ::vega::PeggedOrder* OrderSubmission::mutable_pegged_order() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OrderSubmission.pegged_order)
  return _internal_mutable_pegged_order();
}
inline void OrderSubmission::set_allocated_pegged_order(::vega::PeggedOrder* pegged_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pegged_order_);
  }
  if (pegged_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pegged_order)->GetArena();
    if (message_arena != submessage_arena) {
      pegged_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pegged_order, submessage_arena);
    }

  } else {

  }
  pegged_order_ = pegged_order;
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OrderSubmission.pegged_order)
}

// -------------------------------------------------------------------

// OrderCancellation

// string order_id = 1 [json_name = "orderId"];
inline void OrderCancellation::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& OrderCancellation::order_id() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderCancellation.order_id)
  return _internal_order_id();
}
inline void OrderCancellation::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderCancellation.order_id)
}
inline std::string* OrderCancellation::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OrderCancellation.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& OrderCancellation::_internal_order_id() const {
  return order_id_.Get();
}
inline void OrderCancellation::_internal_set_order_id(const std::string& value) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderCancellation::set_order_id(std::string&& value) {

  order_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.OrderCancellation.order_id)
}
inline void OrderCancellation::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.OrderCancellation.order_id)
}
inline void OrderCancellation::set_order_id(const char* value,
    size_t size) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.OrderCancellation.order_id)
}
inline std::string* OrderCancellation::_internal_mutable_order_id() {

  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderCancellation::release_order_id() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OrderCancellation.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderCancellation::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {

  } else {

  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OrderCancellation.order_id)
}

// string market_id = 2 [json_name = "marketId"];
inline void OrderCancellation::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& OrderCancellation::market_id() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderCancellation.market_id)
  return _internal_market_id();
}
inline void OrderCancellation::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderCancellation.market_id)
}
inline std::string* OrderCancellation::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OrderCancellation.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& OrderCancellation::_internal_market_id() const {
  return market_id_.Get();
}
inline void OrderCancellation::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderCancellation::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.OrderCancellation.market_id)
}
inline void OrderCancellation::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.OrderCancellation.market_id)
}
inline void OrderCancellation::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.OrderCancellation.market_id)
}
inline std::string* OrderCancellation::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderCancellation::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OrderCancellation.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderCancellation::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OrderCancellation.market_id)
}

// -------------------------------------------------------------------

// OrderAmendment

// string order_id = 1 [json_name = "orderId", (.validator.field) = {
inline void OrderAmendment::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& OrderAmendment::order_id() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderAmendment.order_id)
  return _internal_order_id();
}
inline void OrderAmendment::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderAmendment.order_id)
}
inline std::string* OrderAmendment::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OrderAmendment.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& OrderAmendment::_internal_order_id() const {
  return order_id_.Get();
}
inline void OrderAmendment::_internal_set_order_id(const std::string& value) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderAmendment::set_order_id(std::string&& value) {

  order_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.OrderAmendment.order_id)
}
inline void OrderAmendment::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.OrderAmendment.order_id)
}
inline void OrderAmendment::set_order_id(const char* value,
    size_t size) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.OrderAmendment.order_id)
}
inline std::string* OrderAmendment::_internal_mutable_order_id() {

  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderAmendment::release_order_id() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OrderAmendment.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAmendment::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {

  } else {

  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OrderAmendment.order_id)
}

// string market_id = 2 [json_name = "marketId"];
inline void OrderAmendment::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& OrderAmendment::market_id() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderAmendment.market_id)
  return _internal_market_id();
}
inline void OrderAmendment::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderAmendment.market_id)
}
inline std::string* OrderAmendment::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OrderAmendment.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& OrderAmendment::_internal_market_id() const {
  return market_id_.Get();
}
inline void OrderAmendment::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderAmendment::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.OrderAmendment.market_id)
}
inline void OrderAmendment::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.OrderAmendment.market_id)
}
inline void OrderAmendment::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.OrderAmendment.market_id)
}
inline std::string* OrderAmendment::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderAmendment::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OrderAmendment.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAmendment::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OrderAmendment.market_id)
}

// .vega.Price price = 3 [json_name = "price"];
inline bool OrderAmendment::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool OrderAmendment::has_price() const {
  return _internal_has_price();
}
inline const ::vega::Price& OrderAmendment::_internal_price() const {
  const ::vega::Price* p = price_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Price&>(
      ::vega::_Price_default_instance_);
}
inline const ::vega::Price& OrderAmendment::price() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderAmendment.price)
  return _internal_price();
}
inline void OrderAmendment::unsafe_arena_set_allocated_price(
    ::vega::Price* price) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_);
  }
  price_ = price;
  if (price) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.commands.v1.OrderAmendment.price)
}
inline ::vega::Price* OrderAmendment::release_price() {

  ::vega::Price* temp = price_;
  price_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Price* OrderAmendment::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OrderAmendment.price)

  ::vega::Price* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::vega::Price* OrderAmendment::_internal_mutable_price() {

  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Price>(GetArena());
    price_ = p;
  }
  return price_;
}
inline ::vega::Price* OrderAmendment::mutable_price() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OrderAmendment.price)
  return _internal_mutable_price();
}
inline void OrderAmendment::set_allocated_price(::vega::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price)->GetArena();
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OrderAmendment.price)
}

// int64 size_delta = 4 [json_name = "sizeDelta"];
inline void OrderAmendment::clear_size_delta() {
  size_delta_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderAmendment::_internal_size_delta() const {
  return size_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderAmendment::size_delta() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderAmendment.size_delta)
  return _internal_size_delta();
}
inline void OrderAmendment::_internal_set_size_delta(::PROTOBUF_NAMESPACE_ID::int64 value) {

  size_delta_ = value;
}
inline void OrderAmendment::set_size_delta(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size_delta(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderAmendment.size_delta)
}

// .vega.Timestamp expires_at = 5 [json_name = "expiresAt"];
inline bool OrderAmendment::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool OrderAmendment::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const ::vega::Timestamp& OrderAmendment::_internal_expires_at() const {
  const ::vega::Timestamp* p = expires_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Timestamp&>(
      ::vega::_Timestamp_default_instance_);
}
inline const ::vega::Timestamp& OrderAmendment::expires_at() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderAmendment.expires_at)
  return _internal_expires_at();
}
inline void OrderAmendment::unsafe_arena_set_allocated_expires_at(
    ::vega::Timestamp* expires_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.commands.v1.OrderAmendment.expires_at)
}
inline ::vega::Timestamp* OrderAmendment::release_expires_at() {

  ::vega::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Timestamp* OrderAmendment::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OrderAmendment.expires_at)

  ::vega::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline ::vega::Timestamp* OrderAmendment::_internal_mutable_expires_at() {

  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Timestamp>(GetArena());
    expires_at_ = p;
  }
  return expires_at_;
}
inline ::vega::Timestamp* OrderAmendment::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OrderAmendment.expires_at)
  return _internal_mutable_expires_at();
}
inline void OrderAmendment::set_allocated_expires_at(::vega::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }

  } else {

  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OrderAmendment.expires_at)
}

// .vega.Order.TimeInForce time_in_force = 6 [json_name = "timeInForce"];
inline void OrderAmendment::clear_time_in_force() {
  time_in_force_ = 0;
}
inline ::vega::Order_TimeInForce OrderAmendment::_internal_time_in_force() const {
  return static_cast< ::vega::Order_TimeInForce >(time_in_force_);
}
inline ::vega::Order_TimeInForce OrderAmendment::time_in_force() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderAmendment.time_in_force)
  return _internal_time_in_force();
}
inline void OrderAmendment::_internal_set_time_in_force(::vega::Order_TimeInForce value) {

  time_in_force_ = value;
}
inline void OrderAmendment::set_time_in_force(::vega::Order_TimeInForce value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderAmendment.time_in_force)
}

// .google.protobuf.Int64Value pegged_offset = 7 [json_name = "peggedOffset"];
inline bool OrderAmendment::_internal_has_pegged_offset() const {
  return this != internal_default_instance() && pegged_offset_ != nullptr;
}
inline bool OrderAmendment::has_pegged_offset() const {
  return _internal_has_pegged_offset();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& OrderAmendment::_internal_pegged_offset() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = pegged_offset_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value&>(
      PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& OrderAmendment::pegged_offset() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderAmendment.pegged_offset)
  return _internal_pegged_offset();
}
inline void OrderAmendment::unsafe_arena_set_allocated_pegged_offset(
    PROTOBUF_NAMESPACE_ID::Int64Value* pegged_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pegged_offset_);
  }
  pegged_offset_ = pegged_offset;
  if (pegged_offset) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.commands.v1.OrderAmendment.pegged_offset)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* OrderAmendment::release_pegged_offset() {

  PROTOBUF_NAMESPACE_ID::Int64Value* temp = pegged_offset_;
  pegged_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* OrderAmendment::unsafe_arena_release_pegged_offset() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OrderAmendment.pegged_offset)

  PROTOBUF_NAMESPACE_ID::Int64Value* temp = pegged_offset_;
  pegged_offset_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* OrderAmendment::_internal_mutable_pegged_offset() {

  if (pegged_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    pegged_offset_ = p;
  }
  return pegged_offset_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* OrderAmendment::mutable_pegged_offset() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OrderAmendment.pegged_offset)
  return _internal_mutable_pegged_offset();
}
inline void OrderAmendment::set_allocated_pegged_offset(PROTOBUF_NAMESPACE_ID::Int64Value* pegged_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pegged_offset_);
  }
  if (pegged_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pegged_offset)->GetArena();
    if (message_arena != submessage_arena) {
      pegged_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pegged_offset, submessage_arena);
    }

  } else {

  }
  pegged_offset_ = pegged_offset;
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OrderAmendment.pegged_offset)
}

// .vega.PeggedReference pegged_reference = 8 [json_name = "peggedReference"];
inline void OrderAmendment::clear_pegged_reference() {
  pegged_reference_ = 0;
}
inline ::vega::PeggedReference OrderAmendment::_internal_pegged_reference() const {
  return static_cast< ::vega::PeggedReference >(pegged_reference_);
}
inline ::vega::PeggedReference OrderAmendment::pegged_reference() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OrderAmendment.pegged_reference)
  return _internal_pegged_reference();
}
inline void OrderAmendment::_internal_set_pegged_reference(::vega::PeggedReference value) {

  pegged_reference_ = value;
}
inline void OrderAmendment::set_pegged_reference(::vega::PeggedReference value) {
  _internal_set_pegged_reference(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OrderAmendment.pegged_reference)
}

// -------------------------------------------------------------------

// LiquidityProvisionSubmission

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void LiquidityProvisionSubmission::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& LiquidityProvisionSubmission::market_id() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.LiquidityProvisionSubmission.market_id)
  return _internal_market_id();
}
inline void LiquidityProvisionSubmission::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.LiquidityProvisionSubmission.market_id)
}
inline std::string* LiquidityProvisionSubmission::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.LiquidityProvisionSubmission.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& LiquidityProvisionSubmission::_internal_market_id() const {
  return market_id_.Get();
}
inline void LiquidityProvisionSubmission::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvisionSubmission::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.LiquidityProvisionSubmission.market_id)
}
inline void LiquidityProvisionSubmission::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.LiquidityProvisionSubmission.market_id)
}
inline void LiquidityProvisionSubmission::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.LiquidityProvisionSubmission.market_id)
}
inline std::string* LiquidityProvisionSubmission::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvisionSubmission::release_market_id() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.LiquidityProvisionSubmission.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvisionSubmission::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.LiquidityProvisionSubmission.market_id)
}

// uint64 commitment_amount = 2 [json_name = "commitmentAmount"];
inline void LiquidityProvisionSubmission::clear_commitment_amount() {
  commitment_amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiquidityProvisionSubmission::_internal_commitment_amount() const {
  return commitment_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiquidityProvisionSubmission::commitment_amount() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.LiquidityProvisionSubmission.commitment_amount)
  return _internal_commitment_amount();
}
inline void LiquidityProvisionSubmission::_internal_set_commitment_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  commitment_amount_ = value;
}
inline void LiquidityProvisionSubmission::set_commitment_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commitment_amount(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.LiquidityProvisionSubmission.commitment_amount)
}

// string fee = 3 [json_name = "fee"];
inline void LiquidityProvisionSubmission::clear_fee() {
  fee_.ClearToEmpty();
}
inline const std::string& LiquidityProvisionSubmission::fee() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.LiquidityProvisionSubmission.fee)
  return _internal_fee();
}
inline void LiquidityProvisionSubmission::set_fee(const std::string& value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.LiquidityProvisionSubmission.fee)
}
inline std::string* LiquidityProvisionSubmission::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.LiquidityProvisionSubmission.fee)
  return _internal_mutable_fee();
}
inline const std::string& LiquidityProvisionSubmission::_internal_fee() const {
  return fee_.Get();
}
inline void LiquidityProvisionSubmission::_internal_set_fee(const std::string& value) {

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvisionSubmission::set_fee(std::string&& value) {

  fee_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.LiquidityProvisionSubmission.fee)
}
inline void LiquidityProvisionSubmission::set_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.LiquidityProvisionSubmission.fee)
}
inline void LiquidityProvisionSubmission::set_fee(const char* value,
    size_t size) {

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.LiquidityProvisionSubmission.fee)
}
inline std::string* LiquidityProvisionSubmission::_internal_mutable_fee() {

  return fee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvisionSubmission::release_fee() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.LiquidityProvisionSubmission.fee)
  return fee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvisionSubmission::set_allocated_fee(std::string* fee) {
  if (fee != nullptr) {

  } else {

  }
  fee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.LiquidityProvisionSubmission.fee)
}

// repeated .vega.LiquidityOrder sells = 4 [json_name = "sells"];
inline int LiquidityProvisionSubmission::_internal_sells_size() const {
  return sells_.size();
}
inline int LiquidityProvisionSubmission::sells_size() const {
  return _internal_sells_size();
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::mutable_sells(int index) {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.LiquidityProvisionSubmission.sells)
  return sells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >*
LiquidityProvisionSubmission::mutable_sells() {
  // @@protoc_insertion_point(field_mutable_list:vega.commands.v1.LiquidityProvisionSubmission.sells)
  return &sells_;
}
inline const ::vega::LiquidityOrder& LiquidityProvisionSubmission::_internal_sells(int index) const {
  return sells_.Get(index);
}
inline const ::vega::LiquidityOrder& LiquidityProvisionSubmission::sells(int index) const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.LiquidityProvisionSubmission.sells)
  return _internal_sells(index);
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::_internal_add_sells() {
  return sells_.Add();
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::add_sells() {
  // @@protoc_insertion_point(field_add:vega.commands.v1.LiquidityProvisionSubmission.sells)
  return _internal_add_sells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >&
LiquidityProvisionSubmission::sells() const {
  // @@protoc_insertion_point(field_list:vega.commands.v1.LiquidityProvisionSubmission.sells)
  return sells_;
}

// repeated .vega.LiquidityOrder buys = 5 [json_name = "buys"];
inline int LiquidityProvisionSubmission::_internal_buys_size() const {
  return buys_.size();
}
inline int LiquidityProvisionSubmission::buys_size() const {
  return _internal_buys_size();
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::mutable_buys(int index) {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.LiquidityProvisionSubmission.buys)
  return buys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >*
LiquidityProvisionSubmission::mutable_buys() {
  // @@protoc_insertion_point(field_mutable_list:vega.commands.v1.LiquidityProvisionSubmission.buys)
  return &buys_;
}
inline const ::vega::LiquidityOrder& LiquidityProvisionSubmission::_internal_buys(int index) const {
  return buys_.Get(index);
}
inline const ::vega::LiquidityOrder& LiquidityProvisionSubmission::buys(int index) const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.LiquidityProvisionSubmission.buys)
  return _internal_buys(index);
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::_internal_add_buys() {
  return buys_.Add();
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::add_buys() {
  // @@protoc_insertion_point(field_add:vega.commands.v1.LiquidityProvisionSubmission.buys)
  return _internal_add_buys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >&
LiquidityProvisionSubmission::buys() const {
  // @@protoc_insertion_point(field_list:vega.commands.v1.LiquidityProvisionSubmission.buys)
  return buys_;
}

// string reference = 6 [json_name = "reference"];
inline void LiquidityProvisionSubmission::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& LiquidityProvisionSubmission::reference() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.LiquidityProvisionSubmission.reference)
  return _internal_reference();
}
inline void LiquidityProvisionSubmission::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.LiquidityProvisionSubmission.reference)
}
inline std::string* LiquidityProvisionSubmission::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.LiquidityProvisionSubmission.reference)
  return _internal_mutable_reference();
}
inline const std::string& LiquidityProvisionSubmission::_internal_reference() const {
  return reference_.Get();
}
inline void LiquidityProvisionSubmission::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvisionSubmission::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.LiquidityProvisionSubmission.reference)
}
inline void LiquidityProvisionSubmission::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.LiquidityProvisionSubmission.reference)
}
inline void LiquidityProvisionSubmission::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.LiquidityProvisionSubmission.reference)
}
inline std::string* LiquidityProvisionSubmission::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvisionSubmission::release_reference() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.LiquidityProvisionSubmission.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvisionSubmission::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.LiquidityProvisionSubmission.reference)
}

// -------------------------------------------------------------------

// WithdrawSubmission

// uint64 amount = 1 [json_name = "amount"];
inline void WithdrawSubmission::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WithdrawSubmission::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WithdrawSubmission::amount() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.WithdrawSubmission.amount)
  return _internal_amount();
}
inline void WithdrawSubmission::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void WithdrawSubmission::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.WithdrawSubmission.amount)
}

// string asset = 2 [json_name = "asset"];
inline void WithdrawSubmission::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& WithdrawSubmission::asset() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.WithdrawSubmission.asset)
  return _internal_asset();
}
inline void WithdrawSubmission::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.WithdrawSubmission.asset)
}
inline std::string* WithdrawSubmission::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.WithdrawSubmission.asset)
  return _internal_mutable_asset();
}
inline const std::string& WithdrawSubmission::_internal_asset() const {
  return asset_.Get();
}
inline void WithdrawSubmission::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WithdrawSubmission::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.WithdrawSubmission.asset)
}
inline void WithdrawSubmission::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.WithdrawSubmission.asset)
}
inline void WithdrawSubmission::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.WithdrawSubmission.asset)
}
inline std::string* WithdrawSubmission::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WithdrawSubmission::release_asset() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.WithdrawSubmission.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WithdrawSubmission::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.WithdrawSubmission.asset)
}

// .vega.WithdrawExt ext = 3 [json_name = "ext"];
inline bool WithdrawSubmission::_internal_has_ext() const {
  return this != internal_default_instance() && ext_ != nullptr;
}
inline bool WithdrawSubmission::has_ext() const {
  return _internal_has_ext();
}
inline const ::vega::WithdrawExt& WithdrawSubmission::_internal_ext() const {
  const ::vega::WithdrawExt* p = ext_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::WithdrawExt&>(
      ::vega::_WithdrawExt_default_instance_);
}
inline const ::vega::WithdrawExt& WithdrawSubmission::ext() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.WithdrawSubmission.ext)
  return _internal_ext();
}
inline void WithdrawSubmission::unsafe_arena_set_allocated_ext(
    ::vega::WithdrawExt* ext) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_);
  }
  ext_ = ext;
  if (ext) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.commands.v1.WithdrawSubmission.ext)
}
inline ::vega::WithdrawExt* WithdrawSubmission::release_ext() {

  ::vega::WithdrawExt* temp = ext_;
  ext_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::WithdrawExt* WithdrawSubmission::unsafe_arena_release_ext() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.WithdrawSubmission.ext)

  ::vega::WithdrawExt* temp = ext_;
  ext_ = nullptr;
  return temp;
}
inline ::vega::WithdrawExt* WithdrawSubmission::_internal_mutable_ext() {

  if (ext_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::WithdrawExt>(GetArena());
    ext_ = p;
  }
  return ext_;
}
inline ::vega::WithdrawExt* WithdrawSubmission::mutable_ext() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.WithdrawSubmission.ext)
  return _internal_mutable_ext();
}
inline void WithdrawSubmission::set_allocated_ext(::vega::WithdrawExt* ext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_);
  }
  if (ext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext)->GetArena();
    if (message_arena != submessage_arena) {
      ext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext, submessage_arena);
    }

  } else {

  }
  ext_ = ext;
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.WithdrawSubmission.ext)
}

// -------------------------------------------------------------------

// ProposalSubmission

// string reference = 1 [json_name = "reference"];
inline void ProposalSubmission::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& ProposalSubmission::reference() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.ProposalSubmission.reference)
  return _internal_reference();
}
inline void ProposalSubmission::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.ProposalSubmission.reference)
}
inline std::string* ProposalSubmission::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.ProposalSubmission.reference)
  return _internal_mutable_reference();
}
inline const std::string& ProposalSubmission::_internal_reference() const {
  return reference_.Get();
}
inline void ProposalSubmission::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProposalSubmission::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.ProposalSubmission.reference)
}
inline void ProposalSubmission::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.ProposalSubmission.reference)
}
inline void ProposalSubmission::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.ProposalSubmission.reference)
}
inline std::string* ProposalSubmission::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProposalSubmission::release_reference() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.ProposalSubmission.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposalSubmission::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.ProposalSubmission.reference)
}

// .vega.ProposalTerms terms = 2 [json_name = "terms", (.validator.field) = {
inline bool ProposalSubmission::_internal_has_terms() const {
  return this != internal_default_instance() && terms_ != nullptr;
}
inline bool ProposalSubmission::has_terms() const {
  return _internal_has_terms();
}
inline const ::vega::ProposalTerms& ProposalSubmission::_internal_terms() const {
  const ::vega::ProposalTerms* p = terms_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::ProposalTerms&>(
      ::vega::_ProposalTerms_default_instance_);
}
inline const ::vega::ProposalTerms& ProposalSubmission::terms() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.ProposalSubmission.terms)
  return _internal_terms();
}
inline void ProposalSubmission::unsafe_arena_set_allocated_terms(
    ::vega::ProposalTerms* terms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(terms_);
  }
  terms_ = terms;
  if (terms) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.commands.v1.ProposalSubmission.terms)
}
inline ::vega::ProposalTerms* ProposalSubmission::release_terms() {

  ::vega::ProposalTerms* temp = terms_;
  terms_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::ProposalTerms* ProposalSubmission::unsafe_arena_release_terms() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.ProposalSubmission.terms)

  ::vega::ProposalTerms* temp = terms_;
  terms_ = nullptr;
  return temp;
}
inline ::vega::ProposalTerms* ProposalSubmission::_internal_mutable_terms() {

  if (terms_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::ProposalTerms>(GetArena());
    terms_ = p;
  }
  return terms_;
}
inline ::vega::ProposalTerms* ProposalSubmission::mutable_terms() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.ProposalSubmission.terms)
  return _internal_mutable_terms();
}
inline void ProposalSubmission::set_allocated_terms(::vega::ProposalTerms* terms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(terms_);
  }
  if (terms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(terms)->GetArena();
    if (message_arena != submessage_arena) {
      terms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, terms, submessage_arena);
    }

  } else {

  }
  terms_ = terms;
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.ProposalSubmission.terms)
}

// -------------------------------------------------------------------

// VoteSubmission

// string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
inline void VoteSubmission::clear_proposal_id() {
  proposal_id_.ClearToEmpty();
}
inline const std::string& VoteSubmission::proposal_id() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.VoteSubmission.proposal_id)
  return _internal_proposal_id();
}
inline void VoteSubmission::set_proposal_id(const std::string& value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.VoteSubmission.proposal_id)
}
inline std::string* VoteSubmission::mutable_proposal_id() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.VoteSubmission.proposal_id)
  return _internal_mutable_proposal_id();
}
inline const std::string& VoteSubmission::_internal_proposal_id() const {
  return proposal_id_.Get();
}
inline void VoteSubmission::_internal_set_proposal_id(const std::string& value) {

  proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VoteSubmission::set_proposal_id(std::string&& value) {

  proposal_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.VoteSubmission.proposal_id)
}
inline void VoteSubmission::set_proposal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.VoteSubmission.proposal_id)
}
inline void VoteSubmission::set_proposal_id(const char* value,
    size_t size) {

  proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.VoteSubmission.proposal_id)
}
inline std::string* VoteSubmission::_internal_mutable_proposal_id() {

  return proposal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VoteSubmission::release_proposal_id() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.VoteSubmission.proposal_id)
  return proposal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoteSubmission::set_allocated_proposal_id(std::string* proposal_id) {
  if (proposal_id != nullptr) {

  } else {

  }
  proposal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.VoteSubmission.proposal_id)
}

// .vega.Vote.Value value = 2 [json_name = "value"];
inline void VoteSubmission::clear_value() {
  value_ = 0;
}
inline ::vega::Vote_Value VoteSubmission::_internal_value() const {
  return static_cast< ::vega::Vote_Value >(value_);
}
inline ::vega::Vote_Value VoteSubmission::value() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.VoteSubmission.value)
  return _internal_value();
}
inline void VoteSubmission::_internal_set_value(::vega::Vote_Value value) {

  value_ = value;
}
inline void VoteSubmission::set_value(::vega::Vote_Value value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.VoteSubmission.value)
}

// -------------------------------------------------------------------

// DelegateSubmission

// string node_id = 1 [json_name = "nodeId", (.validator.field) = {
inline void DelegateSubmission::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& DelegateSubmission::node_id() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.DelegateSubmission.node_id)
  return _internal_node_id();
}
inline void DelegateSubmission::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.DelegateSubmission.node_id)
}
inline std::string* DelegateSubmission::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.DelegateSubmission.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& DelegateSubmission::_internal_node_id() const {
  return node_id_.Get();
}
inline void DelegateSubmission::_internal_set_node_id(const std::string& value) {

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelegateSubmission::set_node_id(std::string&& value) {

  node_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.DelegateSubmission.node_id)
}
inline void DelegateSubmission::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.DelegateSubmission.node_id)
}
inline void DelegateSubmission::set_node_id(const char* value,
    size_t size) {

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.DelegateSubmission.node_id)
}
inline std::string* DelegateSubmission::_internal_mutable_node_id() {

  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelegateSubmission::release_node_id() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.DelegateSubmission.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegateSubmission::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {

  } else {

  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.DelegateSubmission.node_id)
}

// uint64 amount = 2 [json_name = "amount"];
inline void DelegateSubmission::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DelegateSubmission::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DelegateSubmission::amount() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.DelegateSubmission.amount)
  return _internal_amount();
}
inline void DelegateSubmission::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void DelegateSubmission::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.DelegateSubmission.amount)
}

// -------------------------------------------------------------------

// UndelegateSubmission

// string node_id = 1 [json_name = "nodeId", (.validator.field) = {
inline void UndelegateSubmission::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& UndelegateSubmission::node_id() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.UndelegateSubmission.node_id)
  return _internal_node_id();
}
inline void UndelegateSubmission::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.UndelegateSubmission.node_id)
}
inline std::string* UndelegateSubmission::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.UndelegateSubmission.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& UndelegateSubmission::_internal_node_id() const {
  return node_id_.Get();
}
inline void UndelegateSubmission::_internal_set_node_id(const std::string& value) {

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UndelegateSubmission::set_node_id(std::string&& value) {

  node_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.UndelegateSubmission.node_id)
}
inline void UndelegateSubmission::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.UndelegateSubmission.node_id)
}
inline void UndelegateSubmission::set_node_id(const char* value,
    size_t size) {

  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.UndelegateSubmission.node_id)
}
inline std::string* UndelegateSubmission::_internal_mutable_node_id() {

  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UndelegateSubmission::release_node_id() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.UndelegateSubmission.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UndelegateSubmission::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {

  } else {

  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.UndelegateSubmission.node_id)
}

// uint64 amount = 2 [json_name = "amount"];
inline void UndelegateSubmission::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UndelegateSubmission::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UndelegateSubmission::amount() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.UndelegateSubmission.amount)
  return _internal_amount();
}
inline void UndelegateSubmission::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void UndelegateSubmission::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.UndelegateSubmission.amount)
}

// .vega.commands.v1.UndelegateSubmission.Method method = 3 [json_name = "method"];
inline void UndelegateSubmission::clear_method() {
  method_ = 0;
}
inline ::vega::commands::v1::UndelegateSubmission_Method UndelegateSubmission::_internal_method() const {
  return static_cast< ::vega::commands::v1::UndelegateSubmission_Method >(method_);
}
inline ::vega::commands::v1::UndelegateSubmission_Method UndelegateSubmission::method() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.UndelegateSubmission.method)
  return _internal_method();
}
inline void UndelegateSubmission::_internal_set_method(::vega::commands::v1::UndelegateSubmission_Method value) {

  method_ = value;
}
inline void UndelegateSubmission::set_method(::vega::commands::v1::UndelegateSubmission_Method value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.UndelegateSubmission.method)
}

// -------------------------------------------------------------------

// RestoreSnapshot

// bytes data = 1 [json_name = "data"];
inline void RestoreSnapshot::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& RestoreSnapshot::data() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.RestoreSnapshot.data)
  return _internal_data();
}
inline void RestoreSnapshot::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.RestoreSnapshot.data)
}
inline std::string* RestoreSnapshot::mutable_data() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.RestoreSnapshot.data)
  return _internal_mutable_data();
}
inline const std::string& RestoreSnapshot::_internal_data() const {
  return data_.Get();
}
inline void RestoreSnapshot::_internal_set_data(const std::string& value) {

  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreSnapshot::set_data(std::string&& value) {

  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.RestoreSnapshot.data)
}
inline void RestoreSnapshot::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.RestoreSnapshot.data)
}
inline void RestoreSnapshot::set_data(const void* value,
    size_t size) {

  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.RestoreSnapshot.data)
}
inline std::string* RestoreSnapshot::_internal_mutable_data() {

  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreSnapshot::release_data() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.RestoreSnapshot.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreSnapshot::set_allocated_data(std::string* data) {
  if (data != nullptr) {

  } else {

  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.RestoreSnapshot.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace commands
}  // namespace vega

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vega::commands::v1::UndelegateSubmission_Method> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::commands::v1::UndelegateSubmission_Method>() {
  return ::vega::commands::v1::UndelegateSubmission_Method_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_commands_2fv1_2fcommands_2eproto
