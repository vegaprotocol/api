// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands/v1/transaction.proto

#include "commands/v1/transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fvalidator_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ChainEvent_commands_2fv1_2fvalidator_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fvalidator_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeRegistration_commands_2fv1_2fvalidator_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fvalidator_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fvalidator_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeVote_commands_2fv1_2fvalidator_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2foracles_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OracleDataSubmission_commands_2fv1_2foracles_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestoreSnapshot_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_commands_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UndelegateSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto;
namespace vega {
namespace commands {
namespace v1 {
class InputDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputData> _instance;
} _InputData_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class SignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signature> _instance;
} _Signature_default_instance_;
}  // namespace v1
}  // namespace commands
}  // namespace vega
static void InitDefaultsscc_info_InputData_commands_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_InputData_default_instance_;
    new (ptr) ::vega::commands::v1::InputData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_InputData_commands_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_InputData_commands_2fv1_2ftransaction_2eproto}, {
      &scc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_DelegateSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_UndelegateSubmission_commands_2fv1_2fcommands_2eproto.base,
      &scc_info_NodeRegistration_commands_2fv1_2fvalidator_5fcommands_2eproto.base,
      &scc_info_NodeVote_commands_2fv1_2fvalidator_5fcommands_2eproto.base,
      &scc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto.base,
      &scc_info_ChainEvent_commands_2fv1_2fvalidator_5fcommands_2eproto.base,
      &scc_info_OracleDataSubmission_commands_2fv1_2foracles_2eproto.base,
      &scc_info_RestoreSnapshot_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Signature_commands_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_Signature_default_instance_;
    new (ptr) ::vega::commands::v1::Signature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_commands_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Signature_commands_2fv1_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_commands_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_Transaction_default_instance_;
    new (ptr) ::vega::commands::v1::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_commands_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transaction_commands_2fv1_2ftransaction_2eproto}, {
      &scc_info_Signature_commands_2fv1_2ftransaction_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_commands_2fv1_2ftransaction_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_commands_2fv1_2ftransaction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_commands_2fv1_2ftransaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_commands_2fv1_2ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::InputData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::InputData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::InputData, nonce_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::InputData, block_height_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::InputData, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::Transaction, input_data_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::Transaction, signature_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::Transaction, version_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::Transaction, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::Signature, value_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::Signature, algo_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::Signature, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::commands::v1::InputData)},
  { 23, -1, sizeof(::vega::commands::v1::Transaction)},
  { 34, -1, sizeof(::vega::commands::v1::Signature)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_InputData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_Signature_default_instance_),
};

const char descriptor_table_protodef_commands_2fv1_2ftransaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035commands/v1/transaction.proto\022\020vega.co"
  "mmands.v1\032\032commands/v1/commands.proto\032$c"
  "ommands/v1/validator_commands.proto\032\031com"
  "mands/v1/oracles.proto\"\336\n\n\tInputData\022\024\n\005"
  "nonce\030\001 \001(\004R\005nonce\022!\n\014block_height\030\002 \001(\004"
  "R\013blockHeight\022O\n\020order_submission\030\351\007 \001(\013"
  "2!.vega.commands.v1.OrderSubmissionH\000R\017o"
  "rderSubmission\022U\n\022order_cancellation\030\352\007 "
  "\001(\0132#.vega.commands.v1.OrderCancellation"
  "H\000R\021orderCancellation\022L\n\017order_amendment"
  "\030\353\007 \001(\0132 .vega.commands.v1.OrderAmendmen"
  "tH\000R\016orderAmendment\022X\n\023withdraw_submissi"
  "on\030\354\007 \001(\0132$.vega.commands.v1.WithdrawSub"
  "missionH\000R\022withdrawSubmission\022X\n\023proposa"
  "l_submission\030\355\007 \001(\0132$.vega.commands.v1.P"
  "roposalSubmissionH\000R\022proposalSubmission\022"
  "L\n\017vote_submission\030\356\007 \001(\0132 .vega.command"
  "s.v1.VoteSubmissionH\000R\016voteSubmission\022w\n"
  "\036liquidity_provision_submission\030\357\007 \001(\0132."
  ".vega.commands.v1.LiquidityProvisionSubm"
  "issionH\000R\034liquidityProvisionSubmission\022X"
  "\n\023delegate_submission\030\360\007 \001(\0132$.vega.comm"
  "ands.v1.DelegateSubmissionH\000R\022delegateSu"
  "bmission\022^\n\025undelegate_submission\030\361\007 \001(\013"
  "2&.vega.commands.v1.UndelegateSubmission"
  "H\000R\024undelegateSubmission\022R\n\021node_registr"
  "ation\030\321\017 \001(\0132\".vega.commands.v1.NodeRegi"
  "strationH\000R\020nodeRegistration\022:\n\tnode_vot"
  "e\030\322\017 \001(\0132\032.vega.commands.v1.NodeVoteH\000R\010"
  "nodeVote\022I\n\016node_signature\030\323\017 \001(\0132\037.vega"
  ".commands.v1.NodeSignatureH\000R\rnodeSignat"
  "ure\022@\n\013chain_event\030\324\017 \001(\0132\034.vega.command"
  "s.v1.ChainEventH\000R\nchainEvent\022_\n\026oracle_"
  "data_submission\030\271\027 \001(\0132&.vega.commands.v"
  "1.OracleDataSubmissionH\000R\024oracleDataSubm"
  "ission\022d\n\033restore_snapshot_submission\030\241\037"
  " \001(\0132!.vega.commands.v1.RestoreSnapshotH"
  "\000R\031restoreSnapshotSubmissionB\t\n\007command\""
  "\303\001\n\013Transaction\022\035\n\ninput_data\030\001 \001(\014R\tinp"
  "utData\0229\n\tsignature\030\002 \001(\0132\033.vega.command"
  "s.v1.SignatureR\tsignature\022\033\n\007address\030\351\007 "
  "\001(\tH\000R\007address\022\032\n\007pub_key\030\352\007 \001(\tH\000R\006pubK"
  "ey\022\031\n\007version\030\320\017 \001(\rR\007versionB\006\n\004from\"O\n"
  "\tSignature\022\024\n\005value\030\001 \001(\tR\005value\022\022\n\004algo"
  "\030\002 \001(\tR\004algo\022\030\n\007version\030\003 \001(\rR\007versionBO"
  "\n io.vegaprotocol.vega.commands.v1Z+code"
  ".vegaprotocol.io/vega/proto/commands/v1b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_commands_2fv1_2ftransaction_2eproto_deps[3] = {
  &::descriptor_table_commands_2fv1_2fcommands_2eproto,
  &::descriptor_table_commands_2fv1_2foracles_2eproto,
  &::descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_commands_2fv1_2ftransaction_2eproto_sccs[3] = {
  &scc_info_InputData_commands_2fv1_2ftransaction_2eproto.base,
  &scc_info_Signature_commands_2fv1_2ftransaction_2eproto.base,
  &scc_info_Transaction_commands_2fv1_2ftransaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_commands_2fv1_2ftransaction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands_2fv1_2ftransaction_2eproto = {
  false, false, descriptor_table_protodef_commands_2fv1_2ftransaction_2eproto, "commands/v1/transaction.proto", 1887,
  &descriptor_table_commands_2fv1_2ftransaction_2eproto_once, descriptor_table_commands_2fv1_2ftransaction_2eproto_sccs, descriptor_table_commands_2fv1_2ftransaction_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_commands_2fv1_2ftransaction_2eproto::offsets,
  file_level_metadata_commands_2fv1_2ftransaction_2eproto, 3, file_level_enum_descriptors_commands_2fv1_2ftransaction_2eproto, file_level_service_descriptors_commands_2fv1_2ftransaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_commands_2fv1_2ftransaction_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_commands_2fv1_2ftransaction_2eproto)), true);
namespace vega {
namespace commands {
namespace v1 {

// ===================================================================

class InputData::_Internal {
 public:
  static const ::vega::commands::v1::OrderSubmission& order_submission(const InputData* msg);
  static const ::vega::commands::v1::OrderCancellation& order_cancellation(const InputData* msg);
  static const ::vega::commands::v1::OrderAmendment& order_amendment(const InputData* msg);
  static const ::vega::commands::v1::WithdrawSubmission& withdraw_submission(const InputData* msg);
  static const ::vega::commands::v1::ProposalSubmission& proposal_submission(const InputData* msg);
  static const ::vega::commands::v1::VoteSubmission& vote_submission(const InputData* msg);
  static const ::vega::commands::v1::LiquidityProvisionSubmission& liquidity_provision_submission(const InputData* msg);
  static const ::vega::commands::v1::DelegateSubmission& delegate_submission(const InputData* msg);
  static const ::vega::commands::v1::UndelegateSubmission& undelegate_submission(const InputData* msg);
  static const ::vega::commands::v1::NodeRegistration& node_registration(const InputData* msg);
  static const ::vega::commands::v1::NodeVote& node_vote(const InputData* msg);
  static const ::vega::commands::v1::NodeSignature& node_signature(const InputData* msg);
  static const ::vega::commands::v1::ChainEvent& chain_event(const InputData* msg);
  static const ::vega::commands::v1::OracleDataSubmission& oracle_data_submission(const InputData* msg);
  static const ::vega::commands::v1::RestoreSnapshot& restore_snapshot_submission(const InputData* msg);
};

const ::vega::commands::v1::OrderSubmission&
InputData::_Internal::order_submission(const InputData* msg) {
  return *msg->command_.order_submission_;
}
const ::vega::commands::v1::OrderCancellation&
InputData::_Internal::order_cancellation(const InputData* msg) {
  return *msg->command_.order_cancellation_;
}
const ::vega::commands::v1::OrderAmendment&
InputData::_Internal::order_amendment(const InputData* msg) {
  return *msg->command_.order_amendment_;
}
const ::vega::commands::v1::WithdrawSubmission&
InputData::_Internal::withdraw_submission(const InputData* msg) {
  return *msg->command_.withdraw_submission_;
}
const ::vega::commands::v1::ProposalSubmission&
InputData::_Internal::proposal_submission(const InputData* msg) {
  return *msg->command_.proposal_submission_;
}
const ::vega::commands::v1::VoteSubmission&
InputData::_Internal::vote_submission(const InputData* msg) {
  return *msg->command_.vote_submission_;
}
const ::vega::commands::v1::LiquidityProvisionSubmission&
InputData::_Internal::liquidity_provision_submission(const InputData* msg) {
  return *msg->command_.liquidity_provision_submission_;
}
const ::vega::commands::v1::DelegateSubmission&
InputData::_Internal::delegate_submission(const InputData* msg) {
  return *msg->command_.delegate_submission_;
}
const ::vega::commands::v1::UndelegateSubmission&
InputData::_Internal::undelegate_submission(const InputData* msg) {
  return *msg->command_.undelegate_submission_;
}
const ::vega::commands::v1::NodeRegistration&
InputData::_Internal::node_registration(const InputData* msg) {
  return *msg->command_.node_registration_;
}
const ::vega::commands::v1::NodeVote&
InputData::_Internal::node_vote(const InputData* msg) {
  return *msg->command_.node_vote_;
}
const ::vega::commands::v1::NodeSignature&
InputData::_Internal::node_signature(const InputData* msg) {
  return *msg->command_.node_signature_;
}
const ::vega::commands::v1::ChainEvent&
InputData::_Internal::chain_event(const InputData* msg) {
  return *msg->command_.chain_event_;
}
const ::vega::commands::v1::OracleDataSubmission&
InputData::_Internal::oracle_data_submission(const InputData* msg) {
  return *msg->command_.oracle_data_submission_;
}
const ::vega::commands::v1::RestoreSnapshot&
InputData::_Internal::restore_snapshot_submission(const InputData* msg) {
  return *msg->command_.restore_snapshot_submission_;
}
void InputData::set_allocated_order_submission(::vega::commands::v1::OrderSubmission* order_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (order_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_submission)->GetArena();
    if (message_arena != submessage_arena) {
      order_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_submission, submessage_arena);
    }
    set_has_order_submission();
    command_.order_submission_ = order_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.order_submission)
}
void InputData::clear_order_submission() {
  if (_internal_has_order_submission()) {
    if (GetArena() == nullptr) {
      delete command_.order_submission_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_order_cancellation(::vega::commands::v1::OrderCancellation* order_cancellation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (order_cancellation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_cancellation)->GetArena();
    if (message_arena != submessage_arena) {
      order_cancellation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_cancellation, submessage_arena);
    }
    set_has_order_cancellation();
    command_.order_cancellation_ = order_cancellation;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.order_cancellation)
}
void InputData::clear_order_cancellation() {
  if (_internal_has_order_cancellation()) {
    if (GetArena() == nullptr) {
      delete command_.order_cancellation_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_order_amendment(::vega::commands::v1::OrderAmendment* order_amendment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (order_amendment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_amendment)->GetArena();
    if (message_arena != submessage_arena) {
      order_amendment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_amendment, submessage_arena);
    }
    set_has_order_amendment();
    command_.order_amendment_ = order_amendment;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.order_amendment)
}
void InputData::clear_order_amendment() {
  if (_internal_has_order_amendment()) {
    if (GetArena() == nullptr) {
      delete command_.order_amendment_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_withdraw_submission(::vega::commands::v1::WithdrawSubmission* withdraw_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (withdraw_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdraw_submission)->GetArena();
    if (message_arena != submessage_arena) {
      withdraw_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_submission, submessage_arena);
    }
    set_has_withdraw_submission();
    command_.withdraw_submission_ = withdraw_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.withdraw_submission)
}
void InputData::clear_withdraw_submission() {
  if (_internal_has_withdraw_submission()) {
    if (GetArena() == nullptr) {
      delete command_.withdraw_submission_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_proposal_submission(::vega::commands::v1::ProposalSubmission* proposal_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (proposal_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_submission)->GetArena();
    if (message_arena != submessage_arena) {
      proposal_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal_submission, submessage_arena);
    }
    set_has_proposal_submission();
    command_.proposal_submission_ = proposal_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.proposal_submission)
}
void InputData::clear_proposal_submission() {
  if (_internal_has_proposal_submission()) {
    if (GetArena() == nullptr) {
      delete command_.proposal_submission_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_vote_submission(::vega::commands::v1::VoteSubmission* vote_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (vote_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_submission)->GetArena();
    if (message_arena != submessage_arena) {
      vote_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_submission, submessage_arena);
    }
    set_has_vote_submission();
    command_.vote_submission_ = vote_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.vote_submission)
}
void InputData::clear_vote_submission() {
  if (_internal_has_vote_submission()) {
    if (GetArena() == nullptr) {
      delete command_.vote_submission_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_liquidity_provision_submission(::vega::commands::v1::LiquidityProvisionSubmission* liquidity_provision_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (liquidity_provision_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liquidity_provision_submission)->GetArena();
    if (message_arena != submessage_arena) {
      liquidity_provision_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquidity_provision_submission, submessage_arena);
    }
    set_has_liquidity_provision_submission();
    command_.liquidity_provision_submission_ = liquidity_provision_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.liquidity_provision_submission)
}
void InputData::clear_liquidity_provision_submission() {
  if (_internal_has_liquidity_provision_submission()) {
    if (GetArena() == nullptr) {
      delete command_.liquidity_provision_submission_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_delegate_submission(::vega::commands::v1::DelegateSubmission* delegate_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (delegate_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delegate_submission)->GetArena();
    if (message_arena != submessage_arena) {
      delegate_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegate_submission, submessage_arena);
    }
    set_has_delegate_submission();
    command_.delegate_submission_ = delegate_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.delegate_submission)
}
void InputData::clear_delegate_submission() {
  if (_internal_has_delegate_submission()) {
    if (GetArena() == nullptr) {
      delete command_.delegate_submission_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_undelegate_submission(::vega::commands::v1::UndelegateSubmission* undelegate_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (undelegate_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undelegate_submission)->GetArena();
    if (message_arena != submessage_arena) {
      undelegate_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undelegate_submission, submessage_arena);
    }
    set_has_undelegate_submission();
    command_.undelegate_submission_ = undelegate_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.undelegate_submission)
}
void InputData::clear_undelegate_submission() {
  if (_internal_has_undelegate_submission()) {
    if (GetArena() == nullptr) {
      delete command_.undelegate_submission_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_node_registration(::vega::commands::v1::NodeRegistration* node_registration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (node_registration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_registration)->GetArena();
    if (message_arena != submessage_arena) {
      node_registration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_registration, submessage_arena);
    }
    set_has_node_registration();
    command_.node_registration_ = node_registration;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.node_registration)
}
void InputData::clear_node_registration() {
  if (_internal_has_node_registration()) {
    if (GetArena() == nullptr) {
      delete command_.node_registration_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_node_vote(::vega::commands::v1::NodeVote* node_vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (node_vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_vote)->GetArena();
    if (message_arena != submessage_arena) {
      node_vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_vote, submessage_arena);
    }
    set_has_node_vote();
    command_.node_vote_ = node_vote;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.node_vote)
}
void InputData::clear_node_vote() {
  if (_internal_has_node_vote()) {
    if (GetArena() == nullptr) {
      delete command_.node_vote_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_node_signature(::vega::commands::v1::NodeSignature* node_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (node_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_signature)->GetArena();
    if (message_arena != submessage_arena) {
      node_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_signature, submessage_arena);
    }
    set_has_node_signature();
    command_.node_signature_ = node_signature;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.node_signature)
}
void InputData::clear_node_signature() {
  if (_internal_has_node_signature()) {
    if (GetArena() == nullptr) {
      delete command_.node_signature_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_chain_event(::vega::commands::v1::ChainEvent* chain_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (chain_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chain_event)->GetArena();
    if (message_arena != submessage_arena) {
      chain_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chain_event, submessage_arena);
    }
    set_has_chain_event();
    command_.chain_event_ = chain_event;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.chain_event)
}
void InputData::clear_chain_event() {
  if (_internal_has_chain_event()) {
    if (GetArena() == nullptr) {
      delete command_.chain_event_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_oracle_data_submission(::vega::commands::v1::OracleDataSubmission* oracle_data_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (oracle_data_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oracle_data_submission)->GetArena();
    if (message_arena != submessage_arena) {
      oracle_data_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oracle_data_submission, submessage_arena);
    }
    set_has_oracle_data_submission();
    command_.oracle_data_submission_ = oracle_data_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.oracle_data_submission)
}
void InputData::clear_oracle_data_submission() {
  if (_internal_has_oracle_data_submission()) {
    if (GetArena() == nullptr) {
      delete command_.oracle_data_submission_;
    }
    clear_has_command();
  }
}
void InputData::set_allocated_restore_snapshot_submission(::vega::commands::v1::RestoreSnapshot* restore_snapshot_submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (restore_snapshot_submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restore_snapshot_submission)->GetArena();
    if (message_arena != submessage_arena) {
      restore_snapshot_submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restore_snapshot_submission, submessage_arena);
    }
    set_has_restore_snapshot_submission();
    command_.restore_snapshot_submission_ = restore_snapshot_submission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.InputData.restore_snapshot_submission)
}
void InputData::clear_restore_snapshot_submission() {
  if (_internal_has_restore_snapshot_submission()) {
    if (GetArena() == nullptr) {
      delete command_.restore_snapshot_submission_;
    }
    clear_has_command();
  }
}
InputData::InputData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.InputData)
}
InputData::InputData(const InputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_height_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(block_height_));
  clear_has_command();
  switch (from.command_case()) {
    case kOrderSubmission: {
      _internal_mutable_order_submission()->::vega::commands::v1::OrderSubmission::MergeFrom(from._internal_order_submission());
      break;
    }
    case kOrderCancellation: {
      _internal_mutable_order_cancellation()->::vega::commands::v1::OrderCancellation::MergeFrom(from._internal_order_cancellation());
      break;
    }
    case kOrderAmendment: {
      _internal_mutable_order_amendment()->::vega::commands::v1::OrderAmendment::MergeFrom(from._internal_order_amendment());
      break;
    }
    case kWithdrawSubmission: {
      _internal_mutable_withdraw_submission()->::vega::commands::v1::WithdrawSubmission::MergeFrom(from._internal_withdraw_submission());
      break;
    }
    case kProposalSubmission: {
      _internal_mutable_proposal_submission()->::vega::commands::v1::ProposalSubmission::MergeFrom(from._internal_proposal_submission());
      break;
    }
    case kVoteSubmission: {
      _internal_mutable_vote_submission()->::vega::commands::v1::VoteSubmission::MergeFrom(from._internal_vote_submission());
      break;
    }
    case kLiquidityProvisionSubmission: {
      _internal_mutable_liquidity_provision_submission()->::vega::commands::v1::LiquidityProvisionSubmission::MergeFrom(from._internal_liquidity_provision_submission());
      break;
    }
    case kDelegateSubmission: {
      _internal_mutable_delegate_submission()->::vega::commands::v1::DelegateSubmission::MergeFrom(from._internal_delegate_submission());
      break;
    }
    case kUndelegateSubmission: {
      _internal_mutable_undelegate_submission()->::vega::commands::v1::UndelegateSubmission::MergeFrom(from._internal_undelegate_submission());
      break;
    }
    case kNodeRegistration: {
      _internal_mutable_node_registration()->::vega::commands::v1::NodeRegistration::MergeFrom(from._internal_node_registration());
      break;
    }
    case kNodeVote: {
      _internal_mutable_node_vote()->::vega::commands::v1::NodeVote::MergeFrom(from._internal_node_vote());
      break;
    }
    case kNodeSignature: {
      _internal_mutable_node_signature()->::vega::commands::v1::NodeSignature::MergeFrom(from._internal_node_signature());
      break;
    }
    case kChainEvent: {
      _internal_mutable_chain_event()->::vega::commands::v1::ChainEvent::MergeFrom(from._internal_chain_event());
      break;
    }
    case kOracleDataSubmission: {
      _internal_mutable_oracle_data_submission()->::vega::commands::v1::OracleDataSubmission::MergeFrom(from._internal_oracle_data_submission());
      break;
    }
    case kRestoreSnapshotSubmission: {
      _internal_mutable_restore_snapshot_submission()->::vega::commands::v1::RestoreSnapshot::MergeFrom(from._internal_restore_snapshot_submission());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.InputData)
}

void InputData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputData_commands_2fv1_2ftransaction_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&block_height_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(block_height_));
  clear_has_command();
}

InputData::~InputData() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.InputData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void InputData::ArenaDtor(void* object) {
  InputData* _this = reinterpret_cast< InputData* >(object);
  (void)_this;
}
void InputData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputData& InputData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputData_commands_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void InputData::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:vega.commands.v1.InputData)
  switch (command_case()) {
    case kOrderSubmission: {
      if (GetArena() == nullptr) {
        delete command_.order_submission_;
      }
      break;
    }
    case kOrderCancellation: {
      if (GetArena() == nullptr) {
        delete command_.order_cancellation_;
      }
      break;
    }
    case kOrderAmendment: {
      if (GetArena() == nullptr) {
        delete command_.order_amendment_;
      }
      break;
    }
    case kWithdrawSubmission: {
      if (GetArena() == nullptr) {
        delete command_.withdraw_submission_;
      }
      break;
    }
    case kProposalSubmission: {
      if (GetArena() == nullptr) {
        delete command_.proposal_submission_;
      }
      break;
    }
    case kVoteSubmission: {
      if (GetArena() == nullptr) {
        delete command_.vote_submission_;
      }
      break;
    }
    case kLiquidityProvisionSubmission: {
      if (GetArena() == nullptr) {
        delete command_.liquidity_provision_submission_;
      }
      break;
    }
    case kDelegateSubmission: {
      if (GetArena() == nullptr) {
        delete command_.delegate_submission_;
      }
      break;
    }
    case kUndelegateSubmission: {
      if (GetArena() == nullptr) {
        delete command_.undelegate_submission_;
      }
      break;
    }
    case kNodeRegistration: {
      if (GetArena() == nullptr) {
        delete command_.node_registration_;
      }
      break;
    }
    case kNodeVote: {
      if (GetArena() == nullptr) {
        delete command_.node_vote_;
      }
      break;
    }
    case kNodeSignature: {
      if (GetArena() == nullptr) {
        delete command_.node_signature_;
      }
      break;
    }
    case kChainEvent: {
      if (GetArena() == nullptr) {
        delete command_.chain_event_;
      }
      break;
    }
    case kOracleDataSubmission: {
      if (GetArena() == nullptr) {
        delete command_.oracle_data_submission_;
      }
      break;
    }
    case kRestoreSnapshotSubmission: {
      if (GetArena() == nullptr) {
        delete command_.restore_snapshot_submission_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void InputData::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.InputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_height_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(block_height_));
  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 nonce = 1 [json_name = "nonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_height = 2 [json_name = "blockHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.OrderSubmission order_submission = 1001 [json_name = "orderSubmission"];
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.OrderCancellation order_cancellation = 1002 [json_name = "orderCancellation"];
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_cancellation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.OrderAmendment order_amendment = 1003 [json_name = "orderAmendment"];
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_amendment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.WithdrawSubmission withdraw_submission = 1004 [json_name = "withdrawSubmission"];
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.ProposalSubmission proposal_submission = 1005 [json_name = "proposalSubmission"];
      case 1005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.VoteSubmission vote_submission = 1006 [json_name = "voteSubmission"];
      case 1006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 1007 [json_name = "liquidityProvisionSubmission"];
      case 1007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidity_provision_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.DelegateSubmission delegate_submission = 1008 [json_name = "delegateSubmission"];
      case 1008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegate_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.UndelegateSubmission undelegate_submission = 1009 [json_name = "undelegateSubmission"];
      case 1009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_undelegate_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.NodeRegistration node_registration = 2001 [json_name = "nodeRegistration"];
      case 2001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_registration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.NodeVote node_vote = 2002 [json_name = "nodeVote"];
      case 2002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_vote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.NodeSignature node_signature = 2003 [json_name = "nodeSignature"];
      case 2003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.ChainEvent chain_event = 2004 [json_name = "chainEvent"];
      case 2004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_chain_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.OracleDataSubmission oracle_data_submission = 3001 [json_name = "oracleDataSubmission"];
      case 3001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_data_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.RestoreSnapshot restore_snapshot_submission = 4001 [json_name = "restoreSnapshotSubmission"];
      case 4001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_restore_snapshot_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.InputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1 [json_name = "nonce"];
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  // uint64 block_height = 2 [json_name = "blockHeight"];
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_height(), target);
  }

  // .vega.commands.v1.OrderSubmission order_submission = 1001 [json_name = "orderSubmission"];
  if (_internal_has_order_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::order_submission(this), target, stream);
  }

  // .vega.commands.v1.OrderCancellation order_cancellation = 1002 [json_name = "orderCancellation"];
  if (_internal_has_order_cancellation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1002, _Internal::order_cancellation(this), target, stream);
  }

  // .vega.commands.v1.OrderAmendment order_amendment = 1003 [json_name = "orderAmendment"];
  if (_internal_has_order_amendment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1003, _Internal::order_amendment(this), target, stream);
  }

  // .vega.commands.v1.WithdrawSubmission withdraw_submission = 1004 [json_name = "withdrawSubmission"];
  if (_internal_has_withdraw_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1004, _Internal::withdraw_submission(this), target, stream);
  }

  // .vega.commands.v1.ProposalSubmission proposal_submission = 1005 [json_name = "proposalSubmission"];
  if (_internal_has_proposal_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1005, _Internal::proposal_submission(this), target, stream);
  }

  // .vega.commands.v1.VoteSubmission vote_submission = 1006 [json_name = "voteSubmission"];
  if (_internal_has_vote_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1006, _Internal::vote_submission(this), target, stream);
  }

  // .vega.commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 1007 [json_name = "liquidityProvisionSubmission"];
  if (_internal_has_liquidity_provision_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1007, _Internal::liquidity_provision_submission(this), target, stream);
  }

  // .vega.commands.v1.DelegateSubmission delegate_submission = 1008 [json_name = "delegateSubmission"];
  if (_internal_has_delegate_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1008, _Internal::delegate_submission(this), target, stream);
  }

  // .vega.commands.v1.UndelegateSubmission undelegate_submission = 1009 [json_name = "undelegateSubmission"];
  if (_internal_has_undelegate_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1009, _Internal::undelegate_submission(this), target, stream);
  }

  // .vega.commands.v1.NodeRegistration node_registration = 2001 [json_name = "nodeRegistration"];
  if (_internal_has_node_registration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2001, _Internal::node_registration(this), target, stream);
  }

  // .vega.commands.v1.NodeVote node_vote = 2002 [json_name = "nodeVote"];
  if (_internal_has_node_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2002, _Internal::node_vote(this), target, stream);
  }

  // .vega.commands.v1.NodeSignature node_signature = 2003 [json_name = "nodeSignature"];
  if (_internal_has_node_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2003, _Internal::node_signature(this), target, stream);
  }

  // .vega.commands.v1.ChainEvent chain_event = 2004 [json_name = "chainEvent"];
  if (_internal_has_chain_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2004, _Internal::chain_event(this), target, stream);
  }

  // .vega.commands.v1.OracleDataSubmission oracle_data_submission = 3001 [json_name = "oracleDataSubmission"];
  if (_internal_has_oracle_data_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3001, _Internal::oracle_data_submission(this), target, stream);
  }

  // .vega.commands.v1.RestoreSnapshot restore_snapshot_submission = 4001 [json_name = "restoreSnapshotSubmission"];
  if (_internal_has_restore_snapshot_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4001, _Internal::restore_snapshot_submission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.InputData)
  return target;
}

size_t InputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.InputData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 nonce = 1 [json_name = "nonce"];
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // uint64 block_height = 2 [json_name = "blockHeight"];
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_height());
  }

  switch (command_case()) {
    // .vega.commands.v1.OrderSubmission order_submission = 1001 [json_name = "orderSubmission"];
    case kOrderSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.order_submission_);
      break;
    }
    // .vega.commands.v1.OrderCancellation order_cancellation = 1002 [json_name = "orderCancellation"];
    case kOrderCancellation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.order_cancellation_);
      break;
    }
    // .vega.commands.v1.OrderAmendment order_amendment = 1003 [json_name = "orderAmendment"];
    case kOrderAmendment: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.order_amendment_);
      break;
    }
    // .vega.commands.v1.WithdrawSubmission withdraw_submission = 1004 [json_name = "withdrawSubmission"];
    case kWithdrawSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.withdraw_submission_);
      break;
    }
    // .vega.commands.v1.ProposalSubmission proposal_submission = 1005 [json_name = "proposalSubmission"];
    case kProposalSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.proposal_submission_);
      break;
    }
    // .vega.commands.v1.VoteSubmission vote_submission = 1006 [json_name = "voteSubmission"];
    case kVoteSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.vote_submission_);
      break;
    }
    // .vega.commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 1007 [json_name = "liquidityProvisionSubmission"];
    case kLiquidityProvisionSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.liquidity_provision_submission_);
      break;
    }
    // .vega.commands.v1.DelegateSubmission delegate_submission = 1008 [json_name = "delegateSubmission"];
    case kDelegateSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.delegate_submission_);
      break;
    }
    // .vega.commands.v1.UndelegateSubmission undelegate_submission = 1009 [json_name = "undelegateSubmission"];
    case kUndelegateSubmission: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.undelegate_submission_);
      break;
    }
    // .vega.commands.v1.NodeRegistration node_registration = 2001 [json_name = "nodeRegistration"];
    case kNodeRegistration: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.node_registration_);
      break;
    }
    // .vega.commands.v1.NodeVote node_vote = 2002 [json_name = "nodeVote"];
    case kNodeVote: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.node_vote_);
      break;
    }
    // .vega.commands.v1.NodeSignature node_signature = 2003 [json_name = "nodeSignature"];
    case kNodeSignature: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.node_signature_);
      break;
    }
    // .vega.commands.v1.ChainEvent chain_event = 2004 [json_name = "chainEvent"];
    case kChainEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.chain_event_);
      break;
    }
    // .vega.commands.v1.OracleDataSubmission oracle_data_submission = 3001 [json_name = "oracleDataSubmission"];
    case kOracleDataSubmission: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.oracle_data_submission_);
      break;
    }
    // .vega.commands.v1.RestoreSnapshot restore_snapshot_submission = 4001 [json_name = "restoreSnapshotSubmission"];
    case kRestoreSnapshotSubmission: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.restore_snapshot_submission_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.InputData)
  GOOGLE_DCHECK_NE(&from, this);
  const InputData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.InputData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.InputData)
    MergeFrom(*source);
  }
}

void InputData::MergeFrom(const InputData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.InputData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  switch (from.command_case()) {
    case kOrderSubmission: {
      _internal_mutable_order_submission()->::vega::commands::v1::OrderSubmission::MergeFrom(from._internal_order_submission());
      break;
    }
    case kOrderCancellation: {
      _internal_mutable_order_cancellation()->::vega::commands::v1::OrderCancellation::MergeFrom(from._internal_order_cancellation());
      break;
    }
    case kOrderAmendment: {
      _internal_mutable_order_amendment()->::vega::commands::v1::OrderAmendment::MergeFrom(from._internal_order_amendment());
      break;
    }
    case kWithdrawSubmission: {
      _internal_mutable_withdraw_submission()->::vega::commands::v1::WithdrawSubmission::MergeFrom(from._internal_withdraw_submission());
      break;
    }
    case kProposalSubmission: {
      _internal_mutable_proposal_submission()->::vega::commands::v1::ProposalSubmission::MergeFrom(from._internal_proposal_submission());
      break;
    }
    case kVoteSubmission: {
      _internal_mutable_vote_submission()->::vega::commands::v1::VoteSubmission::MergeFrom(from._internal_vote_submission());
      break;
    }
    case kLiquidityProvisionSubmission: {
      _internal_mutable_liquidity_provision_submission()->::vega::commands::v1::LiquidityProvisionSubmission::MergeFrom(from._internal_liquidity_provision_submission());
      break;
    }
    case kDelegateSubmission: {
      _internal_mutable_delegate_submission()->::vega::commands::v1::DelegateSubmission::MergeFrom(from._internal_delegate_submission());
      break;
    }
    case kUndelegateSubmission: {
      _internal_mutable_undelegate_submission()->::vega::commands::v1::UndelegateSubmission::MergeFrom(from._internal_undelegate_submission());
      break;
    }
    case kNodeRegistration: {
      _internal_mutable_node_registration()->::vega::commands::v1::NodeRegistration::MergeFrom(from._internal_node_registration());
      break;
    }
    case kNodeVote: {
      _internal_mutable_node_vote()->::vega::commands::v1::NodeVote::MergeFrom(from._internal_node_vote());
      break;
    }
    case kNodeSignature: {
      _internal_mutable_node_signature()->::vega::commands::v1::NodeSignature::MergeFrom(from._internal_node_signature());
      break;
    }
    case kChainEvent: {
      _internal_mutable_chain_event()->::vega::commands::v1::ChainEvent::MergeFrom(from._internal_chain_event());
      break;
    }
    case kOracleDataSubmission: {
      _internal_mutable_oracle_data_submission()->::vega::commands::v1::OracleDataSubmission::MergeFrom(from._internal_oracle_data_submission());
      break;
    }
    case kRestoreSnapshotSubmission: {
      _internal_mutable_restore_snapshot_submission()->::vega::commands::v1::RestoreSnapshot::MergeFrom(from._internal_restore_snapshot_submission());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void InputData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.InputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputData::CopyFrom(const InputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.InputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputData::IsInitialized() const {
  return true;
}

void InputData::InternalSwap(InputData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputData, block_height_)
      + sizeof(InputData::block_height_)
      - PROTOBUF_FIELD_OFFSET(InputData, nonce_)>(
          reinterpret_cast<char*>(&nonce_),
          reinterpret_cast<char*>(&other->nonce_));
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction::_Internal {
 public:
  static const ::vega::commands::v1::Signature& signature(const Transaction* msg);
};

const ::vega::commands::v1::Signature&
Transaction::_Internal::signature(const Transaction* msg) {
  return *msg->signature_;
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_data().empty()) {
    input_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_data(),
      GetArena());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::vega::commands::v1::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  version_ = from.version_;
  clear_has_from();
  switch (from.from_case()) {
    case kAddress: {
      _internal_set_address(from._internal_address());
      break;
    }
    case kPubKey: {
      _internal_set_pub_key(from._internal_pub_key());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_commands_2fv1_2ftransaction_2eproto.base);
  input_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&signature_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(version_));
  clear_has_from();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  input_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
  if (has_from()) {
    clear_from();
  }
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_commands_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void Transaction::clear_from() {
// @@protoc_insertion_point(one_of_clear_start:vega.commands.v1.Transaction)
  switch (from_case()) {
    case kAddress: {
      from_.address_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kPubKey: {
      from_.pub_key_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FROM_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_data_.ClearToEmpty();
  if (GetArena() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  version_ = 0u;
  clear_from();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes input_data = 1 [json_name = "inputData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_input_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.Signature signature = 2 [json_name = "signature"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 1001 [json_name = "address"];
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.Transaction.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pub_key = 1002 [json_name = "pubKey"];
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.Transaction.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2000 [json_name = "version"];
      case 2000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes input_data = 1 [json_name = "inputData"];
  if (this->input_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_input_data(), target);
  }

  // .vega.commands.v1.Signature signature = 2 [json_name = "signature"];
  if (this->has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  // string address = 1001 [json_name = "address"];
  if (_internal_has_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.Transaction.address");
    target = stream->WriteStringMaybeAliased(
        1001, this->_internal_address(), target);
  }

  // string pub_key = 1002 [json_name = "pubKey"];
  if (_internal_has_pub_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.Transaction.pub_key");
    target = stream->WriteStringMaybeAliased(
        1002, this->_internal_pub_key(), target);
  }

  // uint32 version = 2000 [json_name = "version"];
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2000, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes input_data = 1 [json_name = "inputData"];
  if (this->input_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input_data());
  }

  // .vega.commands.v1.Signature signature = 2 [json_name = "signature"];
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  // uint32 version = 2000 [json_name = "version"];
  if (this->version() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  switch (from_case()) {
    // string address = 1001 [json_name = "address"];
    case kAddress: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address());
      break;
    }
    // string pub_key = 1002 [json_name = "pubKey"];
    case kPubKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pub_key());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_data().size() > 0) {
    _internal_set_input_data(from._internal_input_data());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::vega::commands::v1::Signature::MergeFrom(from._internal_signature());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  switch (from.from_case()) {
    case kAddress: {
      _internal_set_address(from._internal_address());
      break;
    }
    case kPubKey: {
      _internal_set_pub_key(from._internal_pub_key());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_data_.Swap(&other->input_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, version_)
      + sizeof(Transaction::version_)
      - PROTOBUF_FIELD_OFFSET(Transaction, signature_)>(
          reinterpret_cast<char*>(&signature_),
          reinterpret_cast<char*>(&other->signature_));
  swap(from_, other->from_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Signature::_Internal {
 public:
};

Signature::Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.Signature)
}
Signature::Signature(const Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(),
      GetArena());
  }
  algo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_algo().empty()) {
    algo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_algo(),
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.Signature)
}

void Signature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signature_commands_2fv1_2ftransaction_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.Signature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Signature::ArenaDtor(void* object) {
  Signature* _this = reinterpret_cast< Signature* >(object);
  (void)_this;
}
void Signature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signature& Signature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signature_commands_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  algo_.ClearToEmpty();
  version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.Signature.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string algo = 2 [json_name = "algo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_algo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.Signature.algo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3 [json_name = "version"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1 [json_name = "value"];
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.Signature.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // string algo = 2 [json_name = "algo"];
  if (this->algo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_algo().data(), static_cast<int>(this->_internal_algo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.Signature.algo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_algo(), target);
  }

  // uint32 version = 3 [json_name = "version"];
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.Signature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1 [json_name = "value"];
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string algo = 2 [json_name = "algo"];
  if (this->algo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_algo());
  }

  // uint32 version = 3 [json_name = "version"];
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.Signature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.algo().size() > 0) {
    _internal_set_algo(from._internal_algo());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void Signature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::InternalSwap(Signature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  algo_.Swap(&other->algo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace commands
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::commands::v1::InputData* Arena::CreateMaybeMessage< ::vega::commands::v1::InputData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::InputData >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::Transaction* Arena::CreateMaybeMessage< ::vega::commands::v1::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::Signature* Arena::CreateMaybeMessage< ::vega::commands::v1::Signature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::Signature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
