// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands/v1/commands.proto

#include "commands/v1/commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiquidityOrder_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeggedOrder_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Price_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProposalTerms_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawExt_vega_2eproto;
namespace vega {
namespace commands {
namespace v1 {
class OrderSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderSubmission> _instance;
} _OrderSubmission_default_instance_;
class OrderCancellationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderCancellation> _instance;
} _OrderCancellation_default_instance_;
class OrderAmendmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderAmendment> _instance;
} _OrderAmendment_default_instance_;
class LiquidityProvisionSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityProvisionSubmission> _instance;
} _LiquidityProvisionSubmission_default_instance_;
class WithdrawSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawSubmission> _instance;
} _WithdrawSubmission_default_instance_;
class ProposalSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProposalSubmission> _instance;
} _ProposalSubmission_default_instance_;
class VoteSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteSubmission> _instance;
} _VoteSubmission_default_instance_;
class DelegateSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegateSubmission> _instance;
} _DelegateSubmission_default_instance_;
class UndelegateSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UndelegateSubmission> _instance;
} _UndelegateSubmission_default_instance_;
class RestoreSnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreSnapshot> _instance;
} _RestoreSnapshot_default_instance_;
}  // namespace v1
}  // namespace commands
}  // namespace vega
static void InitDefaultsscc_info_DelegateSubmission_commands_2fv1_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_DelegateSubmission_default_instance_;
    new (ptr) ::vega::commands::v1::DelegateSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateSubmission_commands_2fv1_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelegateSubmission_commands_2fv1_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_LiquidityProvisionSubmission_default_instance_;
    new (ptr) ::vega::commands::v1::LiquidityProvisionSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto}, {
      &scc_info_LiquidityOrder_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_OrderAmendment_default_instance_;
    new (ptr) ::vega::commands::v1::OrderAmendment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto}, {
      &scc_info_Price_vega_2eproto.base,
      &scc_info_Timestamp_vega_2eproto.base,
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_OrderCancellation_default_instance_;
    new (ptr) ::vega::commands::v1::OrderCancellation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_OrderSubmission_default_instance_;
    new (ptr) ::vega::commands::v1::OrderSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto}, {
      &scc_info_PeggedOrder_vega_2eproto.base,}};

static void InitDefaultsscc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_ProposalSubmission_default_instance_;
    new (ptr) ::vega::commands::v1::ProposalSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto}, {
      &scc_info_ProposalTerms_governance_2eproto.base,}};

static void InitDefaultsscc_info_RestoreSnapshot_commands_2fv1_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_RestoreSnapshot_default_instance_;
    new (ptr) ::vega::commands::v1::RestoreSnapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestoreSnapshot_commands_2fv1_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RestoreSnapshot_commands_2fv1_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_UndelegateSubmission_commands_2fv1_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_UndelegateSubmission_default_instance_;
    new (ptr) ::vega::commands::v1::UndelegateSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UndelegateSubmission_commands_2fv1_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UndelegateSubmission_commands_2fv1_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_VoteSubmission_default_instance_;
    new (ptr) ::vega::commands::v1::VoteSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::commands::v1::_WithdrawSubmission_default_instance_;
    new (ptr) ::vega::commands::v1::WithdrawSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto}, {
      &scc_info_WithdrawExt_vega_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_commands_2fv1_2fcommands_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_commands_2fv1_2fcommands_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_commands_2fv1_2fcommands_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_commands_2fv1_2fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderSubmission, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderSubmission, price_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderSubmission, size_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderSubmission, side_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderSubmission, time_in_force_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderSubmission, expires_at_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderSubmission, type_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderSubmission, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderSubmission, pegged_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderCancellation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderCancellation, order_id_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderCancellation, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderAmendment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderAmendment, order_id_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderAmendment, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderAmendment, price_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderAmendment, size_delta_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderAmendment, expires_at_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderAmendment, time_in_force_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderAmendment, pegged_offset_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::OrderAmendment, pegged_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::LiquidityProvisionSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::LiquidityProvisionSubmission, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::LiquidityProvisionSubmission, commitment_amount_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::LiquidityProvisionSubmission, fee_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::LiquidityProvisionSubmission, sells_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::LiquidityProvisionSubmission, buys_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::LiquidityProvisionSubmission, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::WithdrawSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::WithdrawSubmission, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::WithdrawSubmission, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::WithdrawSubmission, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::ProposalSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::ProposalSubmission, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::ProposalSubmission, terms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::VoteSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::VoteSubmission, proposal_id_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::VoteSubmission, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::DelegateSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::DelegateSubmission, node_id_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::DelegateSubmission, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::UndelegateSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::UndelegateSubmission, node_id_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::UndelegateSubmission, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::UndelegateSubmission, method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::RestoreSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::commands::v1::RestoreSnapshot, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::commands::v1::OrderSubmission)},
  { 14, -1, sizeof(::vega::commands::v1::OrderCancellation)},
  { 21, -1, sizeof(::vega::commands::v1::OrderAmendment)},
  { 34, -1, sizeof(::vega::commands::v1::LiquidityProvisionSubmission)},
  { 45, -1, sizeof(::vega::commands::v1::WithdrawSubmission)},
  { 53, -1, sizeof(::vega::commands::v1::ProposalSubmission)},
  { 60, -1, sizeof(::vega::commands::v1::VoteSubmission)},
  { 67, -1, sizeof(::vega::commands::v1::DelegateSubmission)},
  { 74, -1, sizeof(::vega::commands::v1::UndelegateSubmission)},
  { 82, -1, sizeof(::vega::commands::v1::RestoreSnapshot)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_OrderSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_OrderCancellation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_OrderAmendment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_LiquidityProvisionSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_WithdrawSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_ProposalSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_VoteSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_DelegateSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_UndelegateSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::commands::v1::_RestoreSnapshot_default_instance_),
};

const char descriptor_table_protodef_commands_2fv1_2fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032commands/v1/commands.proto\022\020vega.comma"
  "nds.v1\032\020governance.proto\032\nvega.proto\032\036go"
  "ogle/protobuf/wrappers.proto\0326github.com"
  "/mwitkow/go-proto-validators/validator.p"
  "roto\"\336\002\n\017OrderSubmission\022#\n\tmarket_id\030\001 "
  "\001(\tB\006\342\337\037\002X\001R\010marketId\022\024\n\005price\030\002 \001(\tR\005pr"
  "ice\022\032\n\004size\030\003 \001(\004B\006\342\337\037\002\020\000R\004size\022\036\n\004side\030"
  "\004 \001(\0162\n.vega.SideR\004side\022;\n\rtime_in_force"
  "\030\005 \001(\0162\027.vega.Order.TimeInForceR\013timeInF"
  "orce\022\035\n\nexpires_at\030\006 \001(\003R\texpiresAt\022$\n\004t"
  "ype\030\007 \001(\0162\020.vega.Order.TypeR\004type\022\034\n\tref"
  "erence\030\010 \001(\tR\treference\0224\n\014pegged_order\030"
  "\t \001(\0132\021.vega.PeggedOrderR\013peggedOrder\"K\n"
  "\021OrderCancellation\022\031\n\010order_id\030\001 \001(\tR\007or"
  "derId\022\033\n\tmarket_id\030\002 \001(\tR\010marketId\"\203\003\n\016O"
  "rderAmendment\022!\n\010order_id\030\001 \001(\tB\006\342\337\037\002X\001R"
  "\007orderId\022\033\n\tmarket_id\030\002 \001(\tR\010marketId\022!\n"
  "\005price\030\003 \001(\0132\013.vega.PriceR\005price\022\035\n\nsize"
  "_delta\030\004 \001(\003R\tsizeDelta\022.\n\nexpires_at\030\005 "
  "\001(\0132\017.vega.TimestampR\texpiresAt\022;\n\rtime_"
  "in_force\030\006 \001(\0162\027.vega.Order.TimeInForceR"
  "\013timeInForce\022@\n\rpegged_offset\030\007 \001(\0132\033.go"
  "ogle.protobuf.Int64ValueR\014peggedOffset\022@"
  "\n\020pegged_reference\030\010 \001(\0162\025.vega.PeggedRe"
  "ferenceR\017peggedReference\"\366\001\n\034LiquidityPr"
  "ovisionSubmission\022#\n\tmarket_id\030\001 \001(\tB\006\342\337"
  "\037\002X\001R\010marketId\022+\n\021commitment_amount\030\002 \001("
  "\tR\020commitmentAmount\022\020\n\003fee\030\003 \001(\tR\003fee\022*\n"
  "\005sells\030\004 \003(\0132\024.vega.LiquidityOrderR\005sell"
  "s\022(\n\004buys\030\005 \003(\0132\024.vega.LiquidityOrderR\004b"
  "uys\022\034\n\treference\030\006 \001(\tR\treference\"g\n\022Wit"
  "hdrawSubmission\022\026\n\006amount\030\001 \001(\tR\006amount\022"
  "\024\n\005asset\030\002 \001(\tR\005asset\022#\n\003ext\030\003 \001(\0132\021.veg"
  "a.WithdrawExtR\003ext\"e\n\022ProposalSubmission"
  "\022\034\n\treference\030\001 \001(\tR\treference\0221\n\005terms\030"
  "\002 \001(\0132\023.vega.ProposalTermsB\006\342\337\037\002 \001R\005term"
  "s\"a\n\016VoteSubmission\022\'\n\013proposal_id\030\001 \001(\t"
  "B\006\342\337\037\002X\001R\nproposalId\022&\n\005value\030\002 \001(\0162\020.ve"
  "ga.Vote.ValueR\005value\"M\n\022DelegateSubmissi"
  "on\022\037\n\007node_id\030\001 \001(\tB\006\342\337\037\002X\001R\006nodeId\022\026\n\006a"
  "mount\030\002 \001(\tR\006amount\"\371\001\n\024UndelegateSubmis"
  "sion\022\037\n\007node_id\030\001 \001(\tB\006\342\337\037\002X\001R\006nodeId\022\026\n"
  "\006amount\030\002 \001(\tR\006amount\022E\n\006method\030\003 \001(\0162-."
  "vega.commands.v1.UndelegateSubmission.Me"
  "thodR\006method\"a\n\006Method\022\026\n\022METHOD_UNSPECI"
  "FIED\020\000\022\016\n\nMETHOD_NOW\020\001\022\032\n\026METHOD_AT_END_"
  "OF_EPOCH\020\002\022\023\n\017METHOD_IN_ANGER\020\003\"%\n\017Resto"
  "reSnapshot\022\022\n\004data\030\001 \001(\014R\004dataBO\n io.veg"
  "aprotocol.vega.commands.v1Z+code.vegapro"
  "tocol.io/vega/proto/commands/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_commands_2fv1_2fcommands_2eproto_deps[4] = {
  &::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_governance_2eproto,
  &::descriptor_table_vega_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_commands_2fv1_2fcommands_2eproto_sccs[10] = {
  &scc_info_DelegateSubmission_commands_2fv1_2fcommands_2eproto.base,
  &scc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto.base,
  &scc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto.base,
  &scc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto.base,
  &scc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto.base,
  &scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto.base,
  &scc_info_RestoreSnapshot_commands_2fv1_2fcommands_2eproto.base,
  &scc_info_UndelegateSubmission_commands_2fv1_2fcommands_2eproto.base,
  &scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto.base,
  &scc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_commands_2fv1_2fcommands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands_2fv1_2fcommands_2eproto = {
  false, false, descriptor_table_protodef_commands_2fv1_2fcommands_2eproto, "commands/v1/commands.proto", 1999,
  &descriptor_table_commands_2fv1_2fcommands_2eproto_once, descriptor_table_commands_2fv1_2fcommands_2eproto_sccs, descriptor_table_commands_2fv1_2fcommands_2eproto_deps, 10, 4,
  schemas, file_default_instances, TableStruct_commands_2fv1_2fcommands_2eproto::offsets,
  file_level_metadata_commands_2fv1_2fcommands_2eproto, 10, file_level_enum_descriptors_commands_2fv1_2fcommands_2eproto, file_level_service_descriptors_commands_2fv1_2fcommands_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_commands_2fv1_2fcommands_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_commands_2fv1_2fcommands_2eproto)), true);
namespace vega {
namespace commands {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UndelegateSubmission_Method_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commands_2fv1_2fcommands_2eproto);
  return file_level_enum_descriptors_commands_2fv1_2fcommands_2eproto[0];
}
bool UndelegateSubmission_Method_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UndelegateSubmission_Method UndelegateSubmission::METHOD_UNSPECIFIED;
constexpr UndelegateSubmission_Method UndelegateSubmission::METHOD_NOW;
constexpr UndelegateSubmission_Method UndelegateSubmission::METHOD_AT_END_OF_EPOCH;
constexpr UndelegateSubmission_Method UndelegateSubmission::METHOD_IN_ANGER;
constexpr UndelegateSubmission_Method UndelegateSubmission::Method_MIN;
constexpr UndelegateSubmission_Method UndelegateSubmission::Method_MAX;
constexpr int UndelegateSubmission::Method_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class OrderSubmission::_Internal {
 public:
  static const ::vega::PeggedOrder& pegged_order(const OrderSubmission* msg);
};

const ::vega::PeggedOrder&
OrderSubmission::_Internal::pegged_order(const OrderSubmission* msg) {
  return *msg->pegged_order_;
}
void OrderSubmission::clear_pegged_order() {
  if (GetArena() == nullptr && pegged_order_ != nullptr) {
    delete pegged_order_;
  }
  pegged_order_ = nullptr;
}
OrderSubmission::OrderSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.OrderSubmission)
}
OrderSubmission::OrderSubmission(const OrderSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_price().empty()) {
    price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_price(),
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  if (from._internal_has_pegged_order()) {
    pegged_order_ = new ::vega::PeggedOrder(*from.pegged_order_);
  } else {
    pegged_order_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&size_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.OrderSubmission)
}

void OrderSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pegged_order_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pegged_order_)) + sizeof(type_));
}

OrderSubmission::~OrderSubmission() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.OrderSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pegged_order_;
}

void OrderSubmission::ArenaDtor(void* object) {
  OrderSubmission* _this = reinterpret_cast< OrderSubmission* >(object);
  (void)_this;
}
void OrderSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderSubmission& OrderSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void OrderSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.OrderSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  price_.ClearToEmpty();
  reference_.ClearToEmpty();
  if (GetArena() == nullptr && pegged_order_ != nullptr) {
    delete pegged_order_;
  }
  pegged_order_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&size_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.OrderSubmission.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string price = 2 [json_name = "price"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.OrderSubmission.price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3 [json_name = "size", (.validator.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Side side = 4 [json_name = "side"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::vega::Side>(val));
        } else goto handle_unusual;
        continue;
      // .vega.Order.TimeInForce time_in_force = 5 [json_name = "timeInForce"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_time_in_force(static_cast<::vega::Order_TimeInForce>(val));
        } else goto handle_unusual;
        continue;
      // int64 expires_at = 6 [json_name = "expiresAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          expires_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Order.Type type = 7 [json_name = "type"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::Order_Type>(val));
        } else goto handle_unusual;
        continue;
      // string reference = 8 [json_name = "reference"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.OrderSubmission.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.PeggedOrder pegged_order = 9 [json_name = "peggedOrder"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pegged_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.OrderSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.OrderSubmission.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string price = 2 [json_name = "price"];
  if (this->price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.OrderSubmission.price");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_price(), target);
  }

  // uint64 size = 3 [json_name = "size", (.validator.field) = {
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // .vega.Side side = 4 [json_name = "side"];
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side(), target);
  }

  // .vega.Order.TimeInForce time_in_force = 5 [json_name = "timeInForce"];
  if (this->time_in_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_time_in_force(), target);
  }

  // int64 expires_at = 6 [json_name = "expiresAt"];
  if (this->expires_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_expires_at(), target);
  }

  // .vega.Order.Type type = 7 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // string reference = 8 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.OrderSubmission.reference");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_reference(), target);
  }

  // .vega.PeggedOrder pegged_order = 9 [json_name = "peggedOrder"];
  if (this->has_pegged_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::pegged_order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.OrderSubmission)
  return target;
}

size_t OrderSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.OrderSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string price = 2 [json_name = "price"];
  if (this->price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  // string reference = 8 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // .vega.PeggedOrder pegged_order = 9 [json_name = "peggedOrder"];
  if (this->has_pegged_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pegged_order_);
  }

  // uint64 size = 3 [json_name = "size", (.validator.field) = {
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // .vega.Side side = 4 [json_name = "side"];
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .vega.Order.TimeInForce time_in_force = 5 [json_name = "timeInForce"];
  if (this->time_in_force() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_in_force());
  }

  // int64 expires_at = 6 [json_name = "expiresAt"];
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expires_at());
  }

  // .vega.Order.Type type = 7 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.OrderSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.OrderSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.OrderSubmission)
    MergeFrom(*source);
  }
}

void OrderSubmission::MergeFrom(const OrderSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.OrderSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.price().size() > 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.has_pegged_order()) {
    _internal_mutable_pegged_order()->::vega::PeggedOrder::MergeFrom(from._internal_pegged_order());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.time_in_force() != 0) {
    _internal_set_time_in_force(from._internal_time_in_force());
  }
  if (from.expires_at() != 0) {
    _internal_set_expires_at(from._internal_expires_at());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void OrderSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.OrderSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderSubmission::CopyFrom(const OrderSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.OrderSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderSubmission::IsInitialized() const {
  return true;
}

void OrderSubmission::InternalSwap(OrderSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  price_.Swap(&other->price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderSubmission, type_)
      + sizeof(OrderSubmission::type_)
      - PROTOBUF_FIELD_OFFSET(OrderSubmission, pegged_order_)>(
          reinterpret_cast<char*>(&pegged_order_),
          reinterpret_cast<char*>(&other->pegged_order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderCancellation::_Internal {
 public:
};

OrderCancellation::OrderCancellation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.OrderCancellation)
}
OrderCancellation::OrderCancellation(const OrderCancellation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.OrderCancellation)
}

void OrderCancellation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto.base);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OrderCancellation::~OrderCancellation() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.OrderCancellation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderCancellation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderCancellation::ArenaDtor(void* object) {
  OrderCancellation* _this = reinterpret_cast< OrderCancellation* >(object);
  (void)_this;
}
void OrderCancellation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderCancellation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderCancellation& OrderCancellation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void OrderCancellation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.OrderCancellation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderCancellation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string order_id = 1 [json_name = "orderId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.OrderCancellation.order_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.OrderCancellation.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderCancellation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.OrderCancellation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId"];
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.OrderCancellation.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.OrderCancellation.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.OrderCancellation)
  return target;
}

size_t OrderCancellation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.OrderCancellation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId"];
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderCancellation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.OrderCancellation)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderCancellation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderCancellation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.OrderCancellation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.OrderCancellation)
    MergeFrom(*source);
  }
}

void OrderCancellation::MergeFrom(const OrderCancellation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.OrderCancellation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order_id().size() > 0) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void OrderCancellation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.OrderCancellation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCancellation::CopyFrom(const OrderCancellation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.OrderCancellation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCancellation::IsInitialized() const {
  return true;
}

void OrderCancellation::InternalSwap(OrderCancellation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  order_id_.Swap(&other->order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderCancellation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderAmendment::_Internal {
 public:
  static const ::vega::Price& price(const OrderAmendment* msg);
  static const ::vega::Timestamp& expires_at(const OrderAmendment* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& pegged_offset(const OrderAmendment* msg);
};

const ::vega::Price&
OrderAmendment::_Internal::price(const OrderAmendment* msg) {
  return *msg->price_;
}
const ::vega::Timestamp&
OrderAmendment::_Internal::expires_at(const OrderAmendment* msg) {
  return *msg->expires_at_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
OrderAmendment::_Internal::pegged_offset(const OrderAmendment* msg) {
  return *msg->pegged_offset_;
}
void OrderAmendment::clear_price() {
  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
void OrderAmendment::clear_expires_at() {
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
void OrderAmendment::clear_pegged_offset() {
  if (GetArena() == nullptr && pegged_offset_ != nullptr) {
    delete pegged_offset_;
  }
  pegged_offset_ = nullptr;
}
OrderAmendment::OrderAmendment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.OrderAmendment)
}
OrderAmendment::OrderAmendment(const OrderAmendment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  if (from._internal_has_price()) {
    price_ = new ::vega::Price(*from.price_);
  } else {
    price_ = nullptr;
  }
  if (from._internal_has_expires_at()) {
    expires_at_ = new ::vega::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  if (from._internal_has_pegged_offset()) {
    pegged_offset_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.pegged_offset_);
  } else {
    pegged_offset_ = nullptr;
  }
  ::memcpy(&size_delta_, &from.size_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&pegged_reference_) -
    reinterpret_cast<char*>(&size_delta_)) + sizeof(pegged_reference_));
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.OrderAmendment)
}

void OrderAmendment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto.base);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pegged_reference_) -
      reinterpret_cast<char*>(&price_)) + sizeof(pegged_reference_));
}

OrderAmendment::~OrderAmendment() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.OrderAmendment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderAmendment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete price_;
  if (this != internal_default_instance()) delete expires_at_;
  if (this != internal_default_instance()) delete pegged_offset_;
}

void OrderAmendment::ArenaDtor(void* object) {
  OrderAmendment* _this = reinterpret_cast< OrderAmendment* >(object);
  (void)_this;
}
void OrderAmendment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderAmendment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderAmendment& OrderAmendment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void OrderAmendment::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.OrderAmendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
  if (GetArena() == nullptr && pegged_offset_ != nullptr) {
    delete pegged_offset_;
  }
  pegged_offset_ = nullptr;
  ::memset(&size_delta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pegged_reference_) -
      reinterpret_cast<char*>(&size_delta_)) + sizeof(pegged_reference_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderAmendment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string order_id = 1 [json_name = "orderId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.OrderAmendment.order_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.OrderAmendment.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Price price = 3 [json_name = "price"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size_delta = 4 [json_name = "sizeDelta"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Timestamp expires_at = 5 [json_name = "expiresAt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Order.TimeInForce time_in_force = 6 [json_name = "timeInForce"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_time_in_force(static_cast<::vega::Order_TimeInForce>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value pegged_offset = 7 [json_name = "peggedOffset"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pegged_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.PeggedReference pegged_reference = 8 [json_name = "peggedReference"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pegged_reference(static_cast<::vega::PeggedReference>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderAmendment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.OrderAmendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId", (.validator.field) = {
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.OrderAmendment.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.OrderAmendment.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  // .vega.Price price = 3 [json_name = "price"];
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::price(this), target, stream);
  }

  // int64 size_delta = 4 [json_name = "sizeDelta"];
  if (this->size_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_size_delta(), target);
  }

  // .vega.Timestamp expires_at = 5 [json_name = "expiresAt"];
  if (this->has_expires_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::expires_at(this), target, stream);
  }

  // .vega.Order.TimeInForce time_in_force = 6 [json_name = "timeInForce"];
  if (this->time_in_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_time_in_force(), target);
  }

  // .google.protobuf.Int64Value pegged_offset = 7 [json_name = "peggedOffset"];
  if (this->has_pegged_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pegged_offset(this), target, stream);
  }

  // .vega.PeggedReference pegged_reference = 8 [json_name = "peggedReference"];
  if (this->pegged_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_pegged_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.OrderAmendment)
  return target;
}

size_t OrderAmendment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.OrderAmendment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId", (.validator.field) = {
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // .vega.Price price = 3 [json_name = "price"];
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .vega.Timestamp expires_at = 5 [json_name = "expiresAt"];
  if (this->has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expires_at_);
  }

  // .google.protobuf.Int64Value pegged_offset = 7 [json_name = "peggedOffset"];
  if (this->has_pegged_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pegged_offset_);
  }

  // int64 size_delta = 4 [json_name = "sizeDelta"];
  if (this->size_delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size_delta());
  }

  // .vega.Order.TimeInForce time_in_force = 6 [json_name = "timeInForce"];
  if (this->time_in_force() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_in_force());
  }

  // .vega.PeggedReference pegged_reference = 8 [json_name = "peggedReference"];
  if (this->pegged_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pegged_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderAmendment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.OrderAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderAmendment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderAmendment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.OrderAmendment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.OrderAmendment)
    MergeFrom(*source);
  }
}

void OrderAmendment::MergeFrom(const OrderAmendment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.OrderAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order_id().size() > 0) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.has_price()) {
    _internal_mutable_price()->::vega::Price::MergeFrom(from._internal_price());
  }
  if (from.has_expires_at()) {
    _internal_mutable_expires_at()->::vega::Timestamp::MergeFrom(from._internal_expires_at());
  }
  if (from.has_pegged_offset()) {
    _internal_mutable_pegged_offset()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_pegged_offset());
  }
  if (from.size_delta() != 0) {
    _internal_set_size_delta(from._internal_size_delta());
  }
  if (from.time_in_force() != 0) {
    _internal_set_time_in_force(from._internal_time_in_force());
  }
  if (from.pegged_reference() != 0) {
    _internal_set_pegged_reference(from._internal_pegged_reference());
  }
}

void OrderAmendment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.OrderAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderAmendment::CopyFrom(const OrderAmendment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.OrderAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderAmendment::IsInitialized() const {
  return true;
}

void OrderAmendment::InternalSwap(OrderAmendment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  order_id_.Swap(&other->order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderAmendment, pegged_reference_)
      + sizeof(OrderAmendment::pegged_reference_)
      - PROTOBUF_FIELD_OFFSET(OrderAmendment, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderAmendment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityProvisionSubmission::_Internal {
 public:
};

void LiquidityProvisionSubmission::clear_sells() {
  sells_.Clear();
}
void LiquidityProvisionSubmission::clear_buys() {
  buys_.Clear();
}
LiquidityProvisionSubmission::LiquidityProvisionSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sells_(arena),
  buys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.LiquidityProvisionSubmission)
}
LiquidityProvisionSubmission::LiquidityProvisionSubmission(const LiquidityProvisionSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sells_(from.sells_),
      buys_(from.buys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  commitment_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commitment_amount().empty()) {
    commitment_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commitment_amount(),
      GetArena());
  }
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee().empty()) {
    fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fee(),
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.LiquidityProvisionSubmission)
}

void LiquidityProvisionSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commitment_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LiquidityProvisionSubmission::~LiquidityProvisionSubmission() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.LiquidityProvisionSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityProvisionSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commitment_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiquidityProvisionSubmission::ArenaDtor(void* object) {
  LiquidityProvisionSubmission* _this = reinterpret_cast< LiquidityProvisionSubmission* >(object);
  (void)_this;
}
void LiquidityProvisionSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityProvisionSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProvisionSubmission& LiquidityProvisionSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProvisionSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.LiquidityProvisionSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sells_.Clear();
  buys_.Clear();
  market_id_.ClearToEmpty();
  commitment_amount_.ClearToEmpty();
  fee_.ClearToEmpty();
  reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityProvisionSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.LiquidityProvisionSubmission.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string commitment_amount = 2 [json_name = "commitmentAmount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_commitment_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.LiquidityProvisionSubmission.commitment_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fee = 3 [json_name = "fee"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.LiquidityProvisionSubmission.fee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityOrder sells = 4 [json_name = "sells"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityOrder buys = 5 [json_name = "buys"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string reference = 6 [json_name = "reference"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.LiquidityProvisionSubmission.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityProvisionSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.LiquidityProvisionSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.LiquidityProvisionSubmission.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string commitment_amount = 2 [json_name = "commitmentAmount"];
  if (this->commitment_amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commitment_amount().data(), static_cast<int>(this->_internal_commitment_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.LiquidityProvisionSubmission.commitment_amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_commitment_amount(), target);
  }

  // string fee = 3 [json_name = "fee"];
  if (this->fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee().data(), static_cast<int>(this->_internal_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.LiquidityProvisionSubmission.fee");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fee(), target);
  }

  // repeated .vega.LiquidityOrder sells = 4 [json_name = "sells"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sells(i), target, stream);
  }

  // repeated .vega.LiquidityOrder buys = 5 [json_name = "buys"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_buys(i), target, stream);
  }

  // string reference = 6 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.LiquidityProvisionSubmission.reference");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.LiquidityProvisionSubmission)
  return target;
}

size_t LiquidityProvisionSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.LiquidityProvisionSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LiquidityOrder sells = 4 [json_name = "sells"];
  total_size += 1UL * this->_internal_sells_size();
  for (const auto& msg : this->sells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.LiquidityOrder buys = 5 [json_name = "buys"];
  total_size += 1UL * this->_internal_buys_size();
  for (const auto& msg : this->buys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string commitment_amount = 2 [json_name = "commitmentAmount"];
  if (this->commitment_amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commitment_amount());
  }

  // string fee = 3 [json_name = "fee"];
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee());
  }

  // string reference = 6 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProvisionSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.LiquidityProvisionSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProvisionSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityProvisionSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.LiquidityProvisionSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.LiquidityProvisionSubmission)
    MergeFrom(*source);
  }
}

void LiquidityProvisionSubmission::MergeFrom(const LiquidityProvisionSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.LiquidityProvisionSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sells_.MergeFrom(from.sells_);
  buys_.MergeFrom(from.buys_);
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.commitment_amount().size() > 0) {
    _internal_set_commitment_amount(from._internal_commitment_amount());
  }
  if (from.fee().size() > 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void LiquidityProvisionSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.LiquidityProvisionSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProvisionSubmission::CopyFrom(const LiquidityProvisionSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.LiquidityProvisionSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProvisionSubmission::IsInitialized() const {
  return true;
}

void LiquidityProvisionSubmission::InternalSwap(LiquidityProvisionSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sells_.InternalSwap(&other->sells_);
  buys_.InternalSwap(&other->buys_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  commitment_amount_.Swap(&other->commitment_amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fee_.Swap(&other->fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityProvisionSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawSubmission::_Internal {
 public:
  static const ::vega::WithdrawExt& ext(const WithdrawSubmission* msg);
};

const ::vega::WithdrawExt&
WithdrawSubmission::_Internal::ext(const WithdrawSubmission* msg) {
  return *msg->ext_;
}
void WithdrawSubmission::clear_ext() {
  if (GetArena() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
}
WithdrawSubmission::WithdrawSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.WithdrawSubmission)
}
WithdrawSubmission::WithdrawSubmission(const WithdrawSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  if (from._internal_has_ext()) {
    ext_ = new ::vega::WithdrawExt(*from.ext_);
  } else {
    ext_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.WithdrawSubmission)
}

void WithdrawSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto.base);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_ = nullptr;
}

WithdrawSubmission::~WithdrawSubmission() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.WithdrawSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_;
}

void WithdrawSubmission::ArenaDtor(void* object) {
  WithdrawSubmission* _this = reinterpret_cast< WithdrawSubmission* >(object);
  (void)_this;
}
void WithdrawSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawSubmission& WithdrawSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void WithdrawSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.WithdrawSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  asset_.ClearToEmpty();
  if (GetArena() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string amount = 1 [json_name = "amount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.WithdrawSubmission.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 2 [json_name = "asset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.WithdrawSubmission.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.WithdrawExt ext = 3 [json_name = "ext"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.WithdrawSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string amount = 1 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.WithdrawSubmission.amount");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_amount(), target);
  }

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.WithdrawSubmission.asset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asset(), target);
  }

  // .vega.WithdrawExt ext = 3 [json_name = "ext"];
  if (this->has_ext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.WithdrawSubmission)
  return target;
}

size_t WithdrawSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.WithdrawSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 1 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // .vega.WithdrawExt ext = 3 [json_name = "ext"];
  if (this->has_ext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ext_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.WithdrawSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.WithdrawSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.WithdrawSubmission)
    MergeFrom(*source);
  }
}

void WithdrawSubmission::MergeFrom(const WithdrawSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.WithdrawSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.has_ext()) {
    _internal_mutable_ext()->::vega::WithdrawExt::MergeFrom(from._internal_ext());
  }
}

void WithdrawSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.WithdrawSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawSubmission::CopyFrom(const WithdrawSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.WithdrawSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawSubmission::IsInitialized() const {
  return true;
}

void WithdrawSubmission::InternalSwap(WithdrawSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_, other->ext_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProposalSubmission::_Internal {
 public:
  static const ::vega::ProposalTerms& terms(const ProposalSubmission* msg);
};

const ::vega::ProposalTerms&
ProposalSubmission::_Internal::terms(const ProposalSubmission* msg) {
  return *msg->terms_;
}
void ProposalSubmission::clear_terms() {
  if (GetArena() == nullptr && terms_ != nullptr) {
    delete terms_;
  }
  terms_ = nullptr;
}
ProposalSubmission::ProposalSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.ProposalSubmission)
}
ProposalSubmission::ProposalSubmission(const ProposalSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  if (from._internal_has_terms()) {
    terms_ = new ::vega::ProposalTerms(*from.terms_);
  } else {
    terms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.ProposalSubmission)
}

void ProposalSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto.base);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terms_ = nullptr;
}

ProposalSubmission::~ProposalSubmission() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.ProposalSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposalSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete terms_;
}

void ProposalSubmission::ArenaDtor(void* object) {
  ProposalSubmission* _this = reinterpret_cast< ProposalSubmission* >(object);
  (void)_this;
}
void ProposalSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposalSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposalSubmission& ProposalSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void ProposalSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.ProposalSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmpty();
  if (GetArena() == nullptr && terms_ != nullptr) {
    delete terms_;
  }
  terms_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reference = 1 [json_name = "reference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.ProposalSubmission.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ProposalTerms terms = 2 [json_name = "terms", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_terms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposalSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.ProposalSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference = 1 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.ProposalSubmission.reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference(), target);
  }

  // .vega.ProposalTerms terms = 2 [json_name = "terms", (.validator.field) = {
  if (this->has_terms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::terms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.ProposalSubmission)
  return target;
}

size_t ProposalSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.ProposalSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 1 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // .vega.ProposalTerms terms = 2 [json_name = "terms", (.validator.field) = {
  if (this->has_terms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *terms_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.ProposalSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposalSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.ProposalSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.ProposalSubmission)
    MergeFrom(*source);
  }
}

void ProposalSubmission::MergeFrom(const ProposalSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.ProposalSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.has_terms()) {
    _internal_mutable_terms()->::vega::ProposalTerms::MergeFrom(from._internal_terms());
  }
}

void ProposalSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.ProposalSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalSubmission::CopyFrom(const ProposalSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.ProposalSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalSubmission::IsInitialized() const {
  return true;
}

void ProposalSubmission::InternalSwap(ProposalSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(terms_, other->terms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteSubmission::_Internal {
 public:
};

VoteSubmission::VoteSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.VoteSubmission)
}
VoteSubmission::VoteSubmission(const VoteSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal_id().empty()) {
    proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposal_id(),
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.VoteSubmission)
}

void VoteSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto.base);
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

VoteSubmission::~VoteSubmission() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.VoteSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proposal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteSubmission::ArenaDtor(void* object) {
  VoteSubmission* _this = reinterpret_cast< VoteSubmission* >(object);
  (void)_this;
}
void VoteSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteSubmission& VoteSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void VoteSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.VoteSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposal_id_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proposal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.VoteSubmission.proposal_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Vote.Value value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::vega::Vote_Value>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.VoteSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
  if (this->proposal_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposal_id().data(), static_cast<int>(this->_internal_proposal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.VoteSubmission.proposal_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proposal_id(), target);
  }

  // .vega.Vote.Value value = 2 [json_name = "value"];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.VoteSubmission)
  return target;
}

size_t VoteSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.VoteSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
  if (this->proposal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposal_id());
  }

  // .vega.Vote.Value value = 2 [json_name = "value"];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.VoteSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.VoteSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.VoteSubmission)
    MergeFrom(*source);
  }
}

void VoteSubmission::MergeFrom(const VoteSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.VoteSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposal_id().size() > 0) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void VoteSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.VoteSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteSubmission::CopyFrom(const VoteSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.VoteSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteSubmission::IsInitialized() const {
  return true;
}

void VoteSubmission::InternalSwap(VoteSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposal_id_.Swap(&other->proposal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DelegateSubmission::_Internal {
 public:
};

DelegateSubmission::DelegateSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.DelegateSubmission)
}
DelegateSubmission::DelegateSubmission(const DelegateSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.DelegateSubmission)
}

void DelegateSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegateSubmission_commands_2fv1_2fcommands_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DelegateSubmission::~DelegateSubmission() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.DelegateSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegateSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegateSubmission::ArenaDtor(void* object) {
  DelegateSubmission* _this = reinterpret_cast< DelegateSubmission* >(object);
  (void)_this;
}
void DelegateSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegateSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegateSubmission& DelegateSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegateSubmission_commands_2fv1_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void DelegateSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.DelegateSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1 [json_name = "nodeId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.DelegateSubmission.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.DelegateSubmission.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegateSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.DelegateSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1 [json_name = "nodeId", (.validator.field) = {
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.DelegateSubmission.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // string amount = 2 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.DelegateSubmission.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.DelegateSubmission)
  return target;
}

size_t DelegateSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.DelegateSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1 [json_name = "nodeId", (.validator.field) = {
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string amount = 2 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegateSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.DelegateSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegateSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegateSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.DelegateSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.DelegateSubmission)
    MergeFrom(*source);
  }
}

void DelegateSubmission::MergeFrom(const DelegateSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.DelegateSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void DelegateSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.DelegateSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegateSubmission::CopyFrom(const DelegateSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.DelegateSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateSubmission::IsInitialized() const {
  return true;
}

void DelegateSubmission::InternalSwap(DelegateSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UndelegateSubmission::_Internal {
 public:
};

UndelegateSubmission::UndelegateSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.UndelegateSubmission)
}
UndelegateSubmission::UndelegateSubmission(const UndelegateSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  method_ = from.method_;
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.UndelegateSubmission)
}

void UndelegateSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UndelegateSubmission_commands_2fv1_2fcommands_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_ = 0;
}

UndelegateSubmission::~UndelegateSubmission() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.UndelegateSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UndelegateSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UndelegateSubmission::ArenaDtor(void* object) {
  UndelegateSubmission* _this = reinterpret_cast< UndelegateSubmission* >(object);
  (void)_this;
}
void UndelegateSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndelegateSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UndelegateSubmission& UndelegateSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UndelegateSubmission_commands_2fv1_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void UndelegateSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.UndelegateSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  amount_.ClearToEmpty();
  method_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndelegateSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1 [json_name = "nodeId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.UndelegateSubmission.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.commands.v1.UndelegateSubmission.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.UndelegateSubmission.Method method = 3 [json_name = "method"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::vega::commands::v1::UndelegateSubmission_Method>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndelegateSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.UndelegateSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1 [json_name = "nodeId", (.validator.field) = {
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.UndelegateSubmission.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // string amount = 2 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.commands.v1.UndelegateSubmission.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // .vega.commands.v1.UndelegateSubmission.Method method = 3 [json_name = "method"];
  if (this->method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.UndelegateSubmission)
  return target;
}

size_t UndelegateSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.UndelegateSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1 [json_name = "nodeId", (.validator.field) = {
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string amount = 2 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // .vega.commands.v1.UndelegateSubmission.Method method = 3 [json_name = "method"];
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UndelegateSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.UndelegateSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const UndelegateSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UndelegateSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.UndelegateSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.UndelegateSubmission)
    MergeFrom(*source);
  }
}

void UndelegateSubmission::MergeFrom(const UndelegateSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.UndelegateSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.method() != 0) {
    _internal_set_method(from._internal_method());
  }
}

void UndelegateSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.UndelegateSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndelegateSubmission::CopyFrom(const UndelegateSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.UndelegateSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndelegateSubmission::IsInitialized() const {
  return true;
}

void UndelegateSubmission::InternalSwap(UndelegateSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndelegateSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RestoreSnapshot::_Internal {
 public:
};

RestoreSnapshot::RestoreSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.commands.v1.RestoreSnapshot)
}
RestoreSnapshot::RestoreSnapshot(const RestoreSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.commands.v1.RestoreSnapshot)
}

void RestoreSnapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreSnapshot_commands_2fv1_2fcommands_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RestoreSnapshot::~RestoreSnapshot() {
  // @@protoc_insertion_point(destructor:vega.commands.v1.RestoreSnapshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestoreSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestoreSnapshot::ArenaDtor(void* object) {
  RestoreSnapshot* _this = reinterpret_cast< RestoreSnapshot* >(object);
  (void)_this;
}
void RestoreSnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestoreSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreSnapshot& RestoreSnapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreSnapshot_commands_2fv1_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RestoreSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.commands.v1.RestoreSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestoreSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreSnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.commands.v1.RestoreSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.commands.v1.RestoreSnapshot)
  return target;
}

size_t RestoreSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.commands.v1.RestoreSnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreSnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.commands.v1.RestoreSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreSnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.commands.v1.RestoreSnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.commands.v1.RestoreSnapshot)
    MergeFrom(*source);
  }
}

void RestoreSnapshot::MergeFrom(const RestoreSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.commands.v1.RestoreSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void RestoreSnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.commands.v1.RestoreSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreSnapshot::CopyFrom(const RestoreSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.commands.v1.RestoreSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreSnapshot::IsInitialized() const {
  return true;
}

void RestoreSnapshot::InternalSwap(RestoreSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreSnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace commands
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::commands::v1::OrderSubmission* Arena::CreateMaybeMessage< ::vega::commands::v1::OrderSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::OrderSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::OrderCancellation* Arena::CreateMaybeMessage< ::vega::commands::v1::OrderCancellation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::OrderCancellation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::OrderAmendment* Arena::CreateMaybeMessage< ::vega::commands::v1::OrderAmendment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::OrderAmendment >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::LiquidityProvisionSubmission* Arena::CreateMaybeMessage< ::vega::commands::v1::LiquidityProvisionSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::LiquidityProvisionSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::WithdrawSubmission* Arena::CreateMaybeMessage< ::vega::commands::v1::WithdrawSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::WithdrawSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::ProposalSubmission* Arena::CreateMaybeMessage< ::vega::commands::v1::ProposalSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::ProposalSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::VoteSubmission* Arena::CreateMaybeMessage< ::vega::commands::v1::VoteSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::VoteSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::DelegateSubmission* Arena::CreateMaybeMessage< ::vega::commands::v1::DelegateSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::DelegateSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::UndelegateSubmission* Arena::CreateMaybeMessage< ::vega::commands::v1::UndelegateSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::UndelegateSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::commands::v1::RestoreSnapshot* Arena::CreateMaybeMessage< ::vega::commands::v1::RestoreSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::commands::v1::RestoreSnapshot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
