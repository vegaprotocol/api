// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chain_events.proto

#include "chain_events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddValidator_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BTCDeposit_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BTCWithdrawal_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitcoinAddress_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuiltinAssetDeposit_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuiltinAssetWithdrawal_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20AssetDelist_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20AssetList_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20Deposit_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20Withdrawal_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthereumAddress_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Identifier_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoveValidator_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StakeDeposited_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StakeRemoved_chain_5fevents_2eproto;
namespace vega {
class BuiltinAssetDepositDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuiltinAssetDeposit> _instance;
} _BuiltinAssetDeposit_default_instance_;
class BuiltinAssetWithdrawalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuiltinAssetWithdrawal> _instance;
} _BuiltinAssetWithdrawal_default_instance_;
class BuiltinAssetEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuiltinAssetEvent> _instance;
} _BuiltinAssetEvent_default_instance_;
class ERC20AssetListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ERC20AssetList> _instance;
} _ERC20AssetList_default_instance_;
class ERC20AssetDelistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ERC20AssetDelist> _instance;
} _ERC20AssetDelist_default_instance_;
class ERC20DepositDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ERC20Deposit> _instance;
} _ERC20Deposit_default_instance_;
class ERC20WithdrawalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ERC20Withdrawal> _instance;
} _ERC20Withdrawal_default_instance_;
class ERC20EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ERC20Event> _instance;
} _ERC20Event_default_instance_;
class BTCDepositDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BTCDeposit> _instance;
} _BTCDeposit_default_instance_;
class BTCWithdrawalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BTCWithdrawal> _instance;
} _BTCWithdrawal_default_instance_;
class BTCEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BTCEvent> _instance;
} _BTCEvent_default_instance_;
class EthereumAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EthereumAddress> _instance;
} _EthereumAddress_default_instance_;
class BitcoinAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitcoinAddress> _instance;
} _BitcoinAddress_default_instance_;
class IdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Identifier> _instance;
} _Identifier_default_instance_;
class AddValidatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddValidator> _instance;
} _AddValidator_default_instance_;
class RemoveValidatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveValidator> _instance;
} _RemoveValidator_default_instance_;
class ValidatorEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatorEvent> _instance;
} _ValidatorEvent_default_instance_;
class StakingEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StakingEvent> _instance;
} _StakingEvent_default_instance_;
class StakeDepositedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StakeDeposited> _instance;
} _StakeDeposited_default_instance_;
class StakeRemovedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StakeRemoved> _instance;
} _StakeRemoved_default_instance_;
}  // namespace vega
static void InitDefaultsscc_info_AddValidator_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_AddValidator_default_instance_;
    new (ptr) ::vega::AddValidator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddValidator_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddValidator_chain_5fevents_2eproto}, {
      &scc_info_Identifier_chain_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_BTCDeposit_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_BTCDeposit_default_instance_;
    new (ptr) ::vega::BTCDeposit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BTCDeposit_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BTCDeposit_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_BTCEvent_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_BTCEvent_default_instance_;
    new (ptr) ::vega::BTCEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BTCEvent_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BTCEvent_chain_5fevents_2eproto}, {
      &scc_info_BTCDeposit_chain_5fevents_2eproto.base,
      &scc_info_BTCWithdrawal_chain_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_BTCWithdrawal_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_BTCWithdrawal_default_instance_;
    new (ptr) ::vega::BTCWithdrawal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BTCWithdrawal_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BTCWithdrawal_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_BitcoinAddress_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_BitcoinAddress_default_instance_;
    new (ptr) ::vega::BitcoinAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitcoinAddress_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BitcoinAddress_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_BuiltinAssetDeposit_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_BuiltinAssetDeposit_default_instance_;
    new (ptr) ::vega::BuiltinAssetDeposit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuiltinAssetDeposit_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuiltinAssetDeposit_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_BuiltinAssetEvent_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_BuiltinAssetEvent_default_instance_;
    new (ptr) ::vega::BuiltinAssetEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BuiltinAssetEvent_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BuiltinAssetEvent_chain_5fevents_2eproto}, {
      &scc_info_BuiltinAssetDeposit_chain_5fevents_2eproto.base,
      &scc_info_BuiltinAssetWithdrawal_chain_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_BuiltinAssetWithdrawal_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_BuiltinAssetWithdrawal_default_instance_;
    new (ptr) ::vega::BuiltinAssetWithdrawal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuiltinAssetWithdrawal_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuiltinAssetWithdrawal_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_ERC20AssetDelist_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ERC20AssetDelist_default_instance_;
    new (ptr) ::vega::ERC20AssetDelist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20AssetDelist_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ERC20AssetDelist_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_ERC20AssetList_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ERC20AssetList_default_instance_;
    new (ptr) ::vega::ERC20AssetList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20AssetList_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ERC20AssetList_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_ERC20Deposit_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ERC20Deposit_default_instance_;
    new (ptr) ::vega::ERC20Deposit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20Deposit_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ERC20Deposit_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_ERC20Event_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ERC20Event_default_instance_;
    new (ptr) ::vega::ERC20Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ERC20Event_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ERC20Event_chain_5fevents_2eproto}, {
      &scc_info_ERC20AssetList_chain_5fevents_2eproto.base,
      &scc_info_ERC20AssetDelist_chain_5fevents_2eproto.base,
      &scc_info_ERC20Deposit_chain_5fevents_2eproto.base,
      &scc_info_ERC20Withdrawal_chain_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_ERC20Withdrawal_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ERC20Withdrawal_default_instance_;
    new (ptr) ::vega::ERC20Withdrawal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20Withdrawal_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ERC20Withdrawal_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_EthereumAddress_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_EthereumAddress_default_instance_;
    new (ptr) ::vega::EthereumAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthereumAddress_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EthereumAddress_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_Identifier_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Identifier_default_instance_;
    new (ptr) ::vega::Identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Identifier_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Identifier_chain_5fevents_2eproto}, {
      &scc_info_EthereumAddress_chain_5fevents_2eproto.base,
      &scc_info_BitcoinAddress_chain_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_RemoveValidator_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RemoveValidator_default_instance_;
    new (ptr) ::vega::RemoveValidator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoveValidator_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoveValidator_chain_5fevents_2eproto}, {
      &scc_info_Identifier_chain_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_StakeDeposited_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_StakeDeposited_default_instance_;
    new (ptr) ::vega::StakeDeposited();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StakeDeposited_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StakeDeposited_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_StakeRemoved_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_StakeRemoved_default_instance_;
    new (ptr) ::vega::StakeRemoved();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StakeRemoved_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StakeRemoved_chain_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_StakingEvent_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_StakingEvent_default_instance_;
    new (ptr) ::vega::StakingEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StakingEvent_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StakingEvent_chain_5fevents_2eproto}, {
      &scc_info_StakeDeposited_chain_5fevents_2eproto.base,
      &scc_info_StakeRemoved_chain_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_ValidatorEvent_chain_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ValidatorEvent_default_instance_;
    new (ptr) ::vega::ValidatorEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ValidatorEvent_chain_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ValidatorEvent_chain_5fevents_2eproto}, {
      &scc_info_AddValidator_chain_5fevents_2eproto.base,
      &scc_info_RemoveValidator_chain_5fevents_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chain_5fevents_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chain_5fevents_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chain_5fevents_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chain_5fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetDeposit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetDeposit, vega_asset_id_),
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetDeposit, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetDeposit, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetWithdrawal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetWithdrawal, vega_asset_id_),
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetWithdrawal, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetWithdrawal, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::BuiltinAssetEvent, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20AssetList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20AssetList, vega_asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20AssetDelist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20AssetDelist, vega_asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Deposit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Deposit, vega_asset_id_),
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Deposit, source_ethereum_address_),
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Deposit, target_party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Deposit, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Withdrawal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Withdrawal, vega_asset_id_),
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Withdrawal, target_ethereum_address_),
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Withdrawal, reference_nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Event, index_),
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Event, block_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::ERC20Event, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::BTCDeposit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::BTCDeposit, vega_asset_id_),
  PROTOBUF_FIELD_OFFSET(::vega::BTCDeposit, source_btc_address_),
  PROTOBUF_FIELD_OFFSET(::vega::BTCDeposit, target_party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::BTCWithdrawal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::BTCWithdrawal, vega_asset_id_),
  PROTOBUF_FIELD_OFFSET(::vega::BTCWithdrawal, source_party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::BTCWithdrawal, target_btc_address_),
  PROTOBUF_FIELD_OFFSET(::vega::BTCWithdrawal, reference_nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::BTCEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::BTCEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::BTCEvent, index_),
  PROTOBUF_FIELD_OFFSET(::vega::BTCEvent, block_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::BTCEvent, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::EthereumAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::EthereumAddress, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::BitcoinAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::BitcoinAddress, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::Identifier, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::Identifier, identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::AddValidator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::AddValidator, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RemoveValidator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RemoveValidator, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ValidatorEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::ValidatorEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ValidatorEvent, source_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::ValidatorEvent, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::StakingEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::StakingEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::StakingEvent, index_),
  PROTOBUF_FIELD_OFFSET(::vega::StakingEvent, block_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::StakingEvent, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::StakeDeposited, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::StakeDeposited, ethereum_address_),
  PROTOBUF_FIELD_OFFSET(::vega::StakeDeposited, vega_public_key_),
  PROTOBUF_FIELD_OFFSET(::vega::StakeDeposited, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::StakeDeposited, block_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::StakeRemoved, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::StakeRemoved, ethereum_address_),
  PROTOBUF_FIELD_OFFSET(::vega::StakeRemoved, vega_public_key_),
  PROTOBUF_FIELD_OFFSET(::vega::StakeRemoved, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::StakeRemoved, block_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::BuiltinAssetDeposit)},
  { 8, -1, sizeof(::vega::BuiltinAssetWithdrawal)},
  { 16, -1, sizeof(::vega::BuiltinAssetEvent)},
  { 24, -1, sizeof(::vega::ERC20AssetList)},
  { 30, -1, sizeof(::vega::ERC20AssetDelist)},
  { 36, -1, sizeof(::vega::ERC20Deposit)},
  { 45, -1, sizeof(::vega::ERC20Withdrawal)},
  { 53, -1, sizeof(::vega::ERC20Event)},
  { 65, -1, sizeof(::vega::BTCDeposit)},
  { 73, -1, sizeof(::vega::BTCWithdrawal)},
  { 82, -1, sizeof(::vega::BTCEvent)},
  { 92, -1, sizeof(::vega::EthereumAddress)},
  { 98, -1, sizeof(::vega::BitcoinAddress)},
  { 104, -1, sizeof(::vega::Identifier)},
  { 112, -1, sizeof(::vega::AddValidator)},
  { 118, -1, sizeof(::vega::RemoveValidator)},
  { 124, -1, sizeof(::vega::ValidatorEvent)},
  { 133, -1, sizeof(::vega::StakingEvent)},
  { 143, -1, sizeof(::vega::StakeDeposited)},
  { 152, -1, sizeof(::vega::StakeRemoved)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_BuiltinAssetDeposit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_BuiltinAssetWithdrawal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_BuiltinAssetEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ERC20AssetList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ERC20AssetDelist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ERC20Deposit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ERC20Withdrawal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ERC20Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_BTCDeposit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_BTCWithdrawal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_BTCEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_EthereumAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_BitcoinAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Identifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_AddValidator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RemoveValidator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ValidatorEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_StakingEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_StakeDeposited_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_StakeRemoved_default_instance_),
};

const char descriptor_table_protodef_chain_5fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022chain_events.proto\022\004vega\"l\n\023BuiltinAss"
  "etDeposit\022\"\n\rvega_asset_id\030\001 \001(\tR\013vegaAs"
  "setId\022\031\n\010party_id\030\002 \001(\tR\007partyId\022\026\n\006amou"
  "nt\030\003 \001(\004R\006amount\"o\n\026BuiltinAssetWithdraw"
  "al\022\"\n\rvega_asset_id\030\001 \001(\tR\013vegaAssetId\022\031"
  "\n\010party_id\030\002 \001(\tR\007partyId\022\026\n\006amount\030\003 \001("
  "\tR\006amount\"\226\001\n\021BuiltinAssetEvent\0226\n\007depos"
  "it\030\351\007 \001(\0132\031.vega.BuiltinAssetDepositH\000R\007"
  "deposit\022\?\n\nwithdrawal\030\352\007 \001(\0132\034.vega.Buil"
  "tinAssetWithdrawalH\000R\nwithdrawalB\010\n\006acti"
  "on\"4\n\016ERC20AssetList\022\"\n\rvega_asset_id\030\001 "
  "\001(\tR\013vegaAssetId\"6\n\020ERC20AssetDelist\022\"\n\r"
  "vega_asset_id\030\001 \001(\tR\013vegaAssetId\"\252\001\n\014ERC"
  "20Deposit\022\"\n\rvega_asset_id\030\001 \001(\tR\013vegaAs"
  "setId\0226\n\027source_ethereum_address\030\002 \001(\tR\025"
  "sourceEthereumAddress\022&\n\017target_party_id"
  "\030\003 \001(\tR\rtargetPartyId\022\026\n\006amount\030\004 \001(\tR\006a"
  "mount\"\226\001\n\017ERC20Withdrawal\022\"\n\rvega_asset_"
  "id\030\001 \001(\tR\013vegaAssetId\0226\n\027target_ethereum"
  "_address\030\002 \001(\tR\025targetEthereumAddress\022\'\n"
  "\017reference_nonce\030\003 \001(\tR\016referenceNonce\"\243"
  "\002\n\nERC20Event\022\024\n\005index\030\001 \001(\004R\005index\022\024\n\005b"
  "lock\030\002 \001(\004R\005block\0226\n\nasset_list\030\351\007 \001(\0132\024"
  ".vega.ERC20AssetListH\000R\tassetList\022<\n\014ass"
  "et_delist\030\352\007 \001(\0132\026.vega.ERC20AssetDelist"
  "H\000R\013assetDelist\022/\n\007deposit\030\353\007 \001(\0132\022.vega"
  ".ERC20DepositH\000R\007deposit\0228\n\nwithdrawal\030\354"
  "\007 \001(\0132\025.vega.ERC20WithdrawalH\000R\nwithdraw"
  "alB\010\n\006action\"\206\001\n\nBTCDeposit\022\"\n\rvega_asse"
  "t_id\030\001 \001(\tR\013vegaAssetId\022,\n\022source_btc_ad"
  "dress\030\002 \001(\tR\020sourceBtcAddress\022&\n\017target_"
  "party_id\030\003 \001(\tR\rtargetPartyId\"\262\001\n\rBTCWit"
  "hdrawal\022\"\n\rvega_asset_id\030\001 \001(\tR\013vegaAsse"
  "tId\022&\n\017source_party_id\030\002 \001(\tR\rsourcePart"
  "yId\022,\n\022target_btc_address\030\003 \001(\tR\020targetB"
  "tcAddress\022\'\n\017reference_nonce\030\004 \001(\tR\016refe"
  "renceNonce\"\247\001\n\010BTCEvent\022\024\n\005index\030\001 \001(\004R\005"
  "index\022\024\n\005block\030\002 \001(\004R\005block\022-\n\007deposit\030\351"
  "\007 \001(\0132\020.vega.BTCDepositH\000R\007deposit\0226\n\nwi"
  "thdrawal\030\352\007 \001(\0132\023.vega.BTCWithdrawalH\000R\n"
  "withdrawalB\010\n\006action\"+\n\017EthereumAddress\022"
  "\030\n\007address\030\001 \001(\tR\007address\"*\n\016BitcoinAddr"
  "ess\022\030\n\007address\030\001 \001(\tR\007address\"\237\001\n\nIdenti"
  "fier\022B\n\020ethereum_address\030\001 \001(\0132\025.vega.Et"
  "hereumAddressH\000R\017ethereumAddress\022\?\n\017bitc"
  "oin_address\030\002 \001(\0132\024.vega.BitcoinAddressH"
  "\000R\016bitcoinAddressB\014\n\nidentifier\"0\n\014AddVa"
  "lidator\022 \n\002id\030\001 \001(\0132\020.vega.IdentifierR\002i"
  "d\"3\n\017RemoveValidator\022 \n\002id\030\001 \001(\0132\020.vega."
  "IdentifierR\002id\"\212\001\n\016ValidatorEvent\022\033\n\tsou"
  "rce_id\030\001 \001(\tR\010sourceId\022\'\n\003add\030\351\007 \001(\0132\022.v"
  "ega.AddValidatorH\000R\003add\022(\n\002rm\030\352\007 \001(\0132\025.v"
  "ega.RemoveValidatorH\000R\002rmB\010\n\006action\"\302\001\n\014"
  "StakingEvent\022\024\n\005index\030\001 \001(\004R\005index\022\024\n\005bl"
  "ock\030\002 \001(\004R\005block\022@\n\017stake_deposited\030\351\007 \001"
  "(\0132\024.vega.StakeDepositedH\000R\016stakeDeposit"
  "ed\022:\n\rstake_removed\030\352\007 \001(\0132\022.vega.StakeR"
  "emovedH\000R\014stakeRemovedB\010\n\006action\"\232\001\n\016Sta"
  "keDeposited\022)\n\020ethereum_address\030\001 \001(\tR\017e"
  "thereumAddress\022&\n\017vega_public_key\030\002 \001(\tR"
  "\rvegaPublicKey\022\026\n\006amount\030\003 \001(\tR\006amount\022\035"
  "\n\nblock_time\030\004 \001(\003R\tblockTime\"\230\001\n\014StakeR"
  "emoved\022)\n\020ethereum_address\030\001 \001(\tR\017ethere"
  "umAddress\022&\n\017vega_public_key\030\002 \001(\tR\rvega"
  "PublicKey\022\026\n\006amount\030\003 \001(\tR\006amount\022\035\n\nblo"
  "ck_time\030\004 \001(\003R\tblockTimeB7\n\024io.vegaproto"
  "col.vegaZ\037code.vegaprotocol.io/vega/prot"
  "ob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chain_5fevents_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chain_5fevents_2eproto_sccs[20] = {
  &scc_info_AddValidator_chain_5fevents_2eproto.base,
  &scc_info_BTCDeposit_chain_5fevents_2eproto.base,
  &scc_info_BTCEvent_chain_5fevents_2eproto.base,
  &scc_info_BTCWithdrawal_chain_5fevents_2eproto.base,
  &scc_info_BitcoinAddress_chain_5fevents_2eproto.base,
  &scc_info_BuiltinAssetDeposit_chain_5fevents_2eproto.base,
  &scc_info_BuiltinAssetEvent_chain_5fevents_2eproto.base,
  &scc_info_BuiltinAssetWithdrawal_chain_5fevents_2eproto.base,
  &scc_info_ERC20AssetDelist_chain_5fevents_2eproto.base,
  &scc_info_ERC20AssetList_chain_5fevents_2eproto.base,
  &scc_info_ERC20Deposit_chain_5fevents_2eproto.base,
  &scc_info_ERC20Event_chain_5fevents_2eproto.base,
  &scc_info_ERC20Withdrawal_chain_5fevents_2eproto.base,
  &scc_info_EthereumAddress_chain_5fevents_2eproto.base,
  &scc_info_Identifier_chain_5fevents_2eproto.base,
  &scc_info_RemoveValidator_chain_5fevents_2eproto.base,
  &scc_info_StakeDeposited_chain_5fevents_2eproto.base,
  &scc_info_StakeRemoved_chain_5fevents_2eproto.base,
  &scc_info_StakingEvent_chain_5fevents_2eproto.base,
  &scc_info_ValidatorEvent_chain_5fevents_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chain_5fevents_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chain_5fevents_2eproto = {
  false, false, descriptor_table_protodef_chain_5fevents_2eproto, "chain_events.proto", 2689,
  &descriptor_table_chain_5fevents_2eproto_once, descriptor_table_chain_5fevents_2eproto_sccs, descriptor_table_chain_5fevents_2eproto_deps, 20, 0,
  schemas, file_default_instances, TableStruct_chain_5fevents_2eproto::offsets,
  file_level_metadata_chain_5fevents_2eproto, 20, file_level_enum_descriptors_chain_5fevents_2eproto, file_level_service_descriptors_chain_5fevents_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chain_5fevents_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chain_5fevents_2eproto)), true);
namespace vega {

// ===================================================================

class BuiltinAssetDeposit::_Internal {
 public:
};

BuiltinAssetDeposit::BuiltinAssetDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.BuiltinAssetDeposit)
}
BuiltinAssetDeposit::BuiltinAssetDeposit(const BuiltinAssetDeposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_asset_id().empty()) {
    vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_asset_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vega.BuiltinAssetDeposit)
}

void BuiltinAssetDeposit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuiltinAssetDeposit_chain_5fevents_2eproto.base);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

BuiltinAssetDeposit::~BuiltinAssetDeposit() {
  // @@protoc_insertion_point(destructor:vega.BuiltinAssetDeposit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuiltinAssetDeposit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vega_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuiltinAssetDeposit::ArenaDtor(void* object) {
  BuiltinAssetDeposit* _this = reinterpret_cast< BuiltinAssetDeposit* >(object);
  (void)_this;
}
void BuiltinAssetDeposit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuiltinAssetDeposit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuiltinAssetDeposit& BuiltinAssetDeposit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuiltinAssetDeposit_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void BuiltinAssetDeposit::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.BuiltinAssetDeposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vega_asset_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuiltinAssetDeposit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vega_asset_id = 1 [json_name = "vegaAssetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vega_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BuiltinAssetDeposit.vega_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BuiltinAssetDeposit.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuiltinAssetDeposit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.BuiltinAssetDeposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_asset_id().data(), static_cast<int>(this->_internal_vega_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BuiltinAssetDeposit.vega_asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vega_asset_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BuiltinAssetDeposit.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.BuiltinAssetDeposit)
  return target;
}

size_t BuiltinAssetDeposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.BuiltinAssetDeposit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_asset_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuiltinAssetDeposit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.BuiltinAssetDeposit)
  GOOGLE_DCHECK_NE(&from, this);
  const BuiltinAssetDeposit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuiltinAssetDeposit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.BuiltinAssetDeposit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.BuiltinAssetDeposit)
    MergeFrom(*source);
  }
}

void BuiltinAssetDeposit::MergeFrom(const BuiltinAssetDeposit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.BuiltinAssetDeposit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vega_asset_id().size() > 0) {
    _internal_set_vega_asset_id(from._internal_vega_asset_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void BuiltinAssetDeposit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.BuiltinAssetDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuiltinAssetDeposit::CopyFrom(const BuiltinAssetDeposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.BuiltinAssetDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuiltinAssetDeposit::IsInitialized() const {
  return true;
}

void BuiltinAssetDeposit::InternalSwap(BuiltinAssetDeposit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vega_asset_id_.Swap(&other->vega_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuiltinAssetDeposit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuiltinAssetWithdrawal::_Internal {
 public:
};

BuiltinAssetWithdrawal::BuiltinAssetWithdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.BuiltinAssetWithdrawal)
}
BuiltinAssetWithdrawal::BuiltinAssetWithdrawal(const BuiltinAssetWithdrawal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_asset_id().empty()) {
    vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_asset_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.BuiltinAssetWithdrawal)
}

void BuiltinAssetWithdrawal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuiltinAssetWithdrawal_chain_5fevents_2eproto.base);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BuiltinAssetWithdrawal::~BuiltinAssetWithdrawal() {
  // @@protoc_insertion_point(destructor:vega.BuiltinAssetWithdrawal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuiltinAssetWithdrawal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vega_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuiltinAssetWithdrawal::ArenaDtor(void* object) {
  BuiltinAssetWithdrawal* _this = reinterpret_cast< BuiltinAssetWithdrawal* >(object);
  (void)_this;
}
void BuiltinAssetWithdrawal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuiltinAssetWithdrawal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuiltinAssetWithdrawal& BuiltinAssetWithdrawal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuiltinAssetWithdrawal_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void BuiltinAssetWithdrawal::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.BuiltinAssetWithdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vega_asset_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuiltinAssetWithdrawal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vega_asset_id = 1 [json_name = "vegaAssetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vega_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BuiltinAssetWithdrawal.vega_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BuiltinAssetWithdrawal.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BuiltinAssetWithdrawal.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuiltinAssetWithdrawal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.BuiltinAssetWithdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_asset_id().data(), static_cast<int>(this->_internal_vega_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BuiltinAssetWithdrawal.vega_asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vega_asset_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BuiltinAssetWithdrawal.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // string amount = 3 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BuiltinAssetWithdrawal.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.BuiltinAssetWithdrawal)
  return target;
}

size_t BuiltinAssetWithdrawal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.BuiltinAssetWithdrawal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_asset_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string amount = 3 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuiltinAssetWithdrawal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.BuiltinAssetWithdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  const BuiltinAssetWithdrawal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuiltinAssetWithdrawal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.BuiltinAssetWithdrawal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.BuiltinAssetWithdrawal)
    MergeFrom(*source);
  }
}

void BuiltinAssetWithdrawal::MergeFrom(const BuiltinAssetWithdrawal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.BuiltinAssetWithdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vega_asset_id().size() > 0) {
    _internal_set_vega_asset_id(from._internal_vega_asset_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void BuiltinAssetWithdrawal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.BuiltinAssetWithdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuiltinAssetWithdrawal::CopyFrom(const BuiltinAssetWithdrawal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.BuiltinAssetWithdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuiltinAssetWithdrawal::IsInitialized() const {
  return true;
}

void BuiltinAssetWithdrawal::InternalSwap(BuiltinAssetWithdrawal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vega_asset_id_.Swap(&other->vega_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BuiltinAssetWithdrawal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuiltinAssetEvent::_Internal {
 public:
  static const ::vega::BuiltinAssetDeposit& deposit(const BuiltinAssetEvent* msg);
  static const ::vega::BuiltinAssetWithdrawal& withdrawal(const BuiltinAssetEvent* msg);
};

const ::vega::BuiltinAssetDeposit&
BuiltinAssetEvent::_Internal::deposit(const BuiltinAssetEvent* msg) {
  return *msg->action_.deposit_;
}
const ::vega::BuiltinAssetWithdrawal&
BuiltinAssetEvent::_Internal::withdrawal(const BuiltinAssetEvent* msg) {
  return *msg->action_.withdrawal_;
}
void BuiltinAssetEvent::set_allocated_deposit(::vega::BuiltinAssetDeposit* deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deposit);
    if (message_arena != submessage_arena) {
      deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit, submessage_arena);
    }
    set_has_deposit();
    action_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAssetEvent.deposit)
}
void BuiltinAssetEvent::set_allocated_withdrawal(::vega::BuiltinAssetWithdrawal* withdrawal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (withdrawal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(withdrawal);
    if (message_arena != submessage_arena) {
      withdrawal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdrawal, submessage_arena);
    }
    set_has_withdrawal();
    action_.withdrawal_ = withdrawal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAssetEvent.withdrawal)
}
BuiltinAssetEvent::BuiltinAssetEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.BuiltinAssetEvent)
}
BuiltinAssetEvent::BuiltinAssetEvent(const BuiltinAssetEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kDeposit: {
      _internal_mutable_deposit()->::vega::BuiltinAssetDeposit::MergeFrom(from._internal_deposit());
      break;
    }
    case kWithdrawal: {
      _internal_mutable_withdrawal()->::vega::BuiltinAssetWithdrawal::MergeFrom(from._internal_withdrawal());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.BuiltinAssetEvent)
}

void BuiltinAssetEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuiltinAssetEvent_chain_5fevents_2eproto.base);
  clear_has_action();
}

BuiltinAssetEvent::~BuiltinAssetEvent() {
  // @@protoc_insertion_point(destructor:vega.BuiltinAssetEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuiltinAssetEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void BuiltinAssetEvent::ArenaDtor(void* object) {
  BuiltinAssetEvent* _this = reinterpret_cast< BuiltinAssetEvent* >(object);
  (void)_this;
}
void BuiltinAssetEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuiltinAssetEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuiltinAssetEvent& BuiltinAssetEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuiltinAssetEvent_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void BuiltinAssetEvent::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:vega.BuiltinAssetEvent)
  switch (action_case()) {
    case kDeposit: {
      if (GetArena() == nullptr) {
        delete action_.deposit_;
      }
      break;
    }
    case kWithdrawal: {
      if (GetArena() == nullptr) {
        delete action_.withdrawal_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void BuiltinAssetEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.BuiltinAssetEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuiltinAssetEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.BuiltinAssetDeposit deposit = 1001 [json_name = "deposit"];
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.BuiltinAssetWithdrawal withdrawal = 1002 [json_name = "withdrawal"];
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuiltinAssetEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.BuiltinAssetEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.BuiltinAssetDeposit deposit = 1001 [json_name = "deposit"];
  if (_internal_has_deposit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::deposit(this), target, stream);
  }

  // .vega.BuiltinAssetWithdrawal withdrawal = 1002 [json_name = "withdrawal"];
  if (_internal_has_withdrawal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1002, _Internal::withdrawal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.BuiltinAssetEvent)
  return target;
}

size_t BuiltinAssetEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.BuiltinAssetEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // .vega.BuiltinAssetDeposit deposit = 1001 [json_name = "deposit"];
    case kDeposit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.deposit_);
      break;
    }
    // .vega.BuiltinAssetWithdrawal withdrawal = 1002 [json_name = "withdrawal"];
    case kWithdrawal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.withdrawal_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuiltinAssetEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.BuiltinAssetEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BuiltinAssetEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuiltinAssetEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.BuiltinAssetEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.BuiltinAssetEvent)
    MergeFrom(*source);
  }
}

void BuiltinAssetEvent::MergeFrom(const BuiltinAssetEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.BuiltinAssetEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kDeposit: {
      _internal_mutable_deposit()->::vega::BuiltinAssetDeposit::MergeFrom(from._internal_deposit());
      break;
    }
    case kWithdrawal: {
      _internal_mutable_withdrawal()->::vega::BuiltinAssetWithdrawal::MergeFrom(from._internal_withdrawal());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void BuiltinAssetEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.BuiltinAssetEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuiltinAssetEvent::CopyFrom(const BuiltinAssetEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.BuiltinAssetEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuiltinAssetEvent::IsInitialized() const {
  return true;
}

void BuiltinAssetEvent::InternalSwap(BuiltinAssetEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuiltinAssetEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ERC20AssetList::_Internal {
 public:
};

ERC20AssetList::ERC20AssetList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ERC20AssetList)
}
ERC20AssetList::ERC20AssetList(const ERC20AssetList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_asset_id().empty()) {
    vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_asset_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.ERC20AssetList)
}

void ERC20AssetList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ERC20AssetList_chain_5fevents_2eproto.base);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ERC20AssetList::~ERC20AssetList() {
  // @@protoc_insertion_point(destructor:vega.ERC20AssetList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ERC20AssetList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vega_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ERC20AssetList::ArenaDtor(void* object) {
  ERC20AssetList* _this = reinterpret_cast< ERC20AssetList* >(object);
  (void)_this;
}
void ERC20AssetList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ERC20AssetList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ERC20AssetList& ERC20AssetList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ERC20AssetList_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void ERC20AssetList::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ERC20AssetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vega_asset_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20AssetList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vega_asset_id = 1 [json_name = "vegaAssetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vega_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ERC20AssetList.vega_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ERC20AssetList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ERC20AssetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_asset_id().data(), static_cast<int>(this->_internal_vega_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ERC20AssetList.vega_asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vega_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ERC20AssetList)
  return target;
}

size_t ERC20AssetList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ERC20AssetList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_asset_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERC20AssetList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ERC20AssetList)
  GOOGLE_DCHECK_NE(&from, this);
  const ERC20AssetList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ERC20AssetList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ERC20AssetList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ERC20AssetList)
    MergeFrom(*source);
  }
}

void ERC20AssetList::MergeFrom(const ERC20AssetList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ERC20AssetList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vega_asset_id().size() > 0) {
    _internal_set_vega_asset_id(from._internal_vega_asset_id());
  }
}

void ERC20AssetList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ERC20AssetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ERC20AssetList::CopyFrom(const ERC20AssetList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ERC20AssetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20AssetList::IsInitialized() const {
  return true;
}

void ERC20AssetList::InternalSwap(ERC20AssetList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vega_asset_id_.Swap(&other->vega_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20AssetList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ERC20AssetDelist::_Internal {
 public:
};

ERC20AssetDelist::ERC20AssetDelist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ERC20AssetDelist)
}
ERC20AssetDelist::ERC20AssetDelist(const ERC20AssetDelist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_asset_id().empty()) {
    vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_asset_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.ERC20AssetDelist)
}

void ERC20AssetDelist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ERC20AssetDelist_chain_5fevents_2eproto.base);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ERC20AssetDelist::~ERC20AssetDelist() {
  // @@protoc_insertion_point(destructor:vega.ERC20AssetDelist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ERC20AssetDelist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vega_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ERC20AssetDelist::ArenaDtor(void* object) {
  ERC20AssetDelist* _this = reinterpret_cast< ERC20AssetDelist* >(object);
  (void)_this;
}
void ERC20AssetDelist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ERC20AssetDelist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ERC20AssetDelist& ERC20AssetDelist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ERC20AssetDelist_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void ERC20AssetDelist::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ERC20AssetDelist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vega_asset_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20AssetDelist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vega_asset_id = 1 [json_name = "vegaAssetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vega_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ERC20AssetDelist.vega_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ERC20AssetDelist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ERC20AssetDelist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_asset_id().data(), static_cast<int>(this->_internal_vega_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ERC20AssetDelist.vega_asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vega_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ERC20AssetDelist)
  return target;
}

size_t ERC20AssetDelist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ERC20AssetDelist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_asset_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERC20AssetDelist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ERC20AssetDelist)
  GOOGLE_DCHECK_NE(&from, this);
  const ERC20AssetDelist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ERC20AssetDelist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ERC20AssetDelist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ERC20AssetDelist)
    MergeFrom(*source);
  }
}

void ERC20AssetDelist::MergeFrom(const ERC20AssetDelist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ERC20AssetDelist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vega_asset_id().size() > 0) {
    _internal_set_vega_asset_id(from._internal_vega_asset_id());
  }
}

void ERC20AssetDelist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ERC20AssetDelist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ERC20AssetDelist::CopyFrom(const ERC20AssetDelist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ERC20AssetDelist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20AssetDelist::IsInitialized() const {
  return true;
}

void ERC20AssetDelist::InternalSwap(ERC20AssetDelist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vega_asset_id_.Swap(&other->vega_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20AssetDelist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ERC20Deposit::_Internal {
 public:
};

ERC20Deposit::ERC20Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ERC20Deposit)
}
ERC20Deposit::ERC20Deposit(const ERC20Deposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_asset_id().empty()) {
    vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_asset_id(),
      GetArena());
  }
  source_ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_ethereum_address().empty()) {
    source_ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_ethereum_address(),
      GetArena());
  }
  target_party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_party_id().empty()) {
    target_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_party_id(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.ERC20Deposit)
}

void ERC20Deposit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ERC20Deposit_chain_5fevents_2eproto.base);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ERC20Deposit::~ERC20Deposit() {
  // @@protoc_insertion_point(destructor:vega.ERC20Deposit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ERC20Deposit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vega_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_ethereum_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ERC20Deposit::ArenaDtor(void* object) {
  ERC20Deposit* _this = reinterpret_cast< ERC20Deposit* >(object);
  (void)_this;
}
void ERC20Deposit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ERC20Deposit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ERC20Deposit& ERC20Deposit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ERC20Deposit_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void ERC20Deposit::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ERC20Deposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vega_asset_id_.ClearToEmpty();
  source_ethereum_address_.ClearToEmpty();
  target_party_id_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20Deposit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vega_asset_id = 1 [json_name = "vegaAssetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vega_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ERC20Deposit.vega_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_ethereum_address = 2 [json_name = "sourceEthereumAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_ethereum_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ERC20Deposit.source_ethereum_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_party_id = 3 [json_name = "targetPartyId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ERC20Deposit.target_party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 4 [json_name = "amount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ERC20Deposit.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ERC20Deposit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ERC20Deposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_asset_id().data(), static_cast<int>(this->_internal_vega_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ERC20Deposit.vega_asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vega_asset_id(), target);
  }

  // string source_ethereum_address = 2 [json_name = "sourceEthereumAddress"];
  if (this->source_ethereum_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_ethereum_address().data(), static_cast<int>(this->_internal_source_ethereum_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ERC20Deposit.source_ethereum_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_ethereum_address(), target);
  }

  // string target_party_id = 3 [json_name = "targetPartyId"];
  if (this->target_party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_party_id().data(), static_cast<int>(this->_internal_target_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ERC20Deposit.target_party_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_party_id(), target);
  }

  // string amount = 4 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ERC20Deposit.amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ERC20Deposit)
  return target;
}

size_t ERC20Deposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ERC20Deposit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_asset_id());
  }

  // string source_ethereum_address = 2 [json_name = "sourceEthereumAddress"];
  if (this->source_ethereum_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_ethereum_address());
  }

  // string target_party_id = 3 [json_name = "targetPartyId"];
  if (this->target_party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_party_id());
  }

  // string amount = 4 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERC20Deposit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ERC20Deposit)
  GOOGLE_DCHECK_NE(&from, this);
  const ERC20Deposit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ERC20Deposit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ERC20Deposit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ERC20Deposit)
    MergeFrom(*source);
  }
}

void ERC20Deposit::MergeFrom(const ERC20Deposit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ERC20Deposit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vega_asset_id().size() > 0) {
    _internal_set_vega_asset_id(from._internal_vega_asset_id());
  }
  if (from.source_ethereum_address().size() > 0) {
    _internal_set_source_ethereum_address(from._internal_source_ethereum_address());
  }
  if (from.target_party_id().size() > 0) {
    _internal_set_target_party_id(from._internal_target_party_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void ERC20Deposit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ERC20Deposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ERC20Deposit::CopyFrom(const ERC20Deposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ERC20Deposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20Deposit::IsInitialized() const {
  return true;
}

void ERC20Deposit::InternalSwap(ERC20Deposit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vega_asset_id_.Swap(&other->vega_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_ethereum_address_.Swap(&other->source_ethereum_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_party_id_.Swap(&other->target_party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20Deposit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ERC20Withdrawal::_Internal {
 public:
};

ERC20Withdrawal::ERC20Withdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ERC20Withdrawal)
}
ERC20Withdrawal::ERC20Withdrawal(const ERC20Withdrawal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_asset_id().empty()) {
    vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_asset_id(),
      GetArena());
  }
  target_ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_ethereum_address().empty()) {
    target_ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_ethereum_address(),
      GetArena());
  }
  reference_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_nonce().empty()) {
    reference_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_nonce(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.ERC20Withdrawal)
}

void ERC20Withdrawal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ERC20Withdrawal_chain_5fevents_2eproto.base);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ERC20Withdrawal::~ERC20Withdrawal() {
  // @@protoc_insertion_point(destructor:vega.ERC20Withdrawal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ERC20Withdrawal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vega_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_ethereum_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ERC20Withdrawal::ArenaDtor(void* object) {
  ERC20Withdrawal* _this = reinterpret_cast< ERC20Withdrawal* >(object);
  (void)_this;
}
void ERC20Withdrawal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ERC20Withdrawal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ERC20Withdrawal& ERC20Withdrawal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ERC20Withdrawal_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void ERC20Withdrawal::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ERC20Withdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vega_asset_id_.ClearToEmpty();
  target_ethereum_address_.ClearToEmpty();
  reference_nonce_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20Withdrawal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vega_asset_id = 1 [json_name = "vegaAssetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vega_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ERC20Withdrawal.vega_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_ethereum_address = 2 [json_name = "targetEthereumAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_ethereum_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ERC20Withdrawal.target_ethereum_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_nonce = 3 [json_name = "referenceNonce"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reference_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ERC20Withdrawal.reference_nonce"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ERC20Withdrawal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ERC20Withdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_asset_id().data(), static_cast<int>(this->_internal_vega_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ERC20Withdrawal.vega_asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vega_asset_id(), target);
  }

  // string target_ethereum_address = 2 [json_name = "targetEthereumAddress"];
  if (this->target_ethereum_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_ethereum_address().data(), static_cast<int>(this->_internal_target_ethereum_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ERC20Withdrawal.target_ethereum_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_ethereum_address(), target);
  }

  // string reference_nonce = 3 [json_name = "referenceNonce"];
  if (this->reference_nonce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_nonce().data(), static_cast<int>(this->_internal_reference_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ERC20Withdrawal.reference_nonce");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reference_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ERC20Withdrawal)
  return target;
}

size_t ERC20Withdrawal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ERC20Withdrawal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_asset_id());
  }

  // string target_ethereum_address = 2 [json_name = "targetEthereumAddress"];
  if (this->target_ethereum_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_ethereum_address());
  }

  // string reference_nonce = 3 [json_name = "referenceNonce"];
  if (this->reference_nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERC20Withdrawal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ERC20Withdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  const ERC20Withdrawal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ERC20Withdrawal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ERC20Withdrawal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ERC20Withdrawal)
    MergeFrom(*source);
  }
}

void ERC20Withdrawal::MergeFrom(const ERC20Withdrawal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ERC20Withdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vega_asset_id().size() > 0) {
    _internal_set_vega_asset_id(from._internal_vega_asset_id());
  }
  if (from.target_ethereum_address().size() > 0) {
    _internal_set_target_ethereum_address(from._internal_target_ethereum_address());
  }
  if (from.reference_nonce().size() > 0) {
    _internal_set_reference_nonce(from._internal_reference_nonce());
  }
}

void ERC20Withdrawal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ERC20Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ERC20Withdrawal::CopyFrom(const ERC20Withdrawal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ERC20Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20Withdrawal::IsInitialized() const {
  return true;
}

void ERC20Withdrawal::InternalSwap(ERC20Withdrawal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vega_asset_id_.Swap(&other->vega_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_ethereum_address_.Swap(&other->target_ethereum_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_nonce_.Swap(&other->reference_nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20Withdrawal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ERC20Event::_Internal {
 public:
  static const ::vega::ERC20AssetList& asset_list(const ERC20Event* msg);
  static const ::vega::ERC20AssetDelist& asset_delist(const ERC20Event* msg);
  static const ::vega::ERC20Deposit& deposit(const ERC20Event* msg);
  static const ::vega::ERC20Withdrawal& withdrawal(const ERC20Event* msg);
};

const ::vega::ERC20AssetList&
ERC20Event::_Internal::asset_list(const ERC20Event* msg) {
  return *msg->action_.asset_list_;
}
const ::vega::ERC20AssetDelist&
ERC20Event::_Internal::asset_delist(const ERC20Event* msg) {
  return *msg->action_.asset_delist_;
}
const ::vega::ERC20Deposit&
ERC20Event::_Internal::deposit(const ERC20Event* msg) {
  return *msg->action_.deposit_;
}
const ::vega::ERC20Withdrawal&
ERC20Event::_Internal::withdrawal(const ERC20Event* msg) {
  return *msg->action_.withdrawal_;
}
void ERC20Event::set_allocated_asset_list(::vega::ERC20AssetList* asset_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (asset_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asset_list);
    if (message_arena != submessage_arena) {
      asset_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset_list, submessage_arena);
    }
    set_has_asset_list();
    action_.asset_list_ = asset_list;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Event.asset_list)
}
void ERC20Event::set_allocated_asset_delist(::vega::ERC20AssetDelist* asset_delist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (asset_delist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asset_delist);
    if (message_arena != submessage_arena) {
      asset_delist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset_delist, submessage_arena);
    }
    set_has_asset_delist();
    action_.asset_delist_ = asset_delist;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Event.asset_delist)
}
void ERC20Event::set_allocated_deposit(::vega::ERC20Deposit* deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deposit);
    if (message_arena != submessage_arena) {
      deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit, submessage_arena);
    }
    set_has_deposit();
    action_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Event.deposit)
}
void ERC20Event::set_allocated_withdrawal(::vega::ERC20Withdrawal* withdrawal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (withdrawal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(withdrawal);
    if (message_arena != submessage_arena) {
      withdrawal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdrawal, submessage_arena);
    }
    set_has_withdrawal();
    action_.withdrawal_ = withdrawal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20Event.withdrawal)
}
ERC20Event::ERC20Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ERC20Event)
}
ERC20Event::ERC20Event(const ERC20Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_) -
    reinterpret_cast<char*>(&index_)) + sizeof(block_));
  clear_has_action();
  switch (from.action_case()) {
    case kAssetList: {
      _internal_mutable_asset_list()->::vega::ERC20AssetList::MergeFrom(from._internal_asset_list());
      break;
    }
    case kAssetDelist: {
      _internal_mutable_asset_delist()->::vega::ERC20AssetDelist::MergeFrom(from._internal_asset_delist());
      break;
    }
    case kDeposit: {
      _internal_mutable_deposit()->::vega::ERC20Deposit::MergeFrom(from._internal_deposit());
      break;
    }
    case kWithdrawal: {
      _internal_mutable_withdrawal()->::vega::ERC20Withdrawal::MergeFrom(from._internal_withdrawal());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.ERC20Event)
}

void ERC20Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ERC20Event_chain_5fevents_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&index_)) + sizeof(block_));
  clear_has_action();
}

ERC20Event::~ERC20Event() {
  // @@protoc_insertion_point(destructor:vega.ERC20Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ERC20Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void ERC20Event::ArenaDtor(void* object) {
  ERC20Event* _this = reinterpret_cast< ERC20Event* >(object);
  (void)_this;
}
void ERC20Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ERC20Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ERC20Event& ERC20Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ERC20Event_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void ERC20Event::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:vega.ERC20Event)
  switch (action_case()) {
    case kAssetList: {
      if (GetArena() == nullptr) {
        delete action_.asset_list_;
      }
      break;
    }
    case kAssetDelist: {
      if (GetArena() == nullptr) {
        delete action_.asset_delist_;
      }
      break;
    }
    case kDeposit: {
      if (GetArena() == nullptr) {
        delete action_.deposit_;
      }
      break;
    }
    case kWithdrawal: {
      if (GetArena() == nullptr) {
        delete action_.withdrawal_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ERC20Event::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ERC20Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&index_)) + sizeof(block_));
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block = 2 [json_name = "block"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ERC20AssetList asset_list = 1001 [json_name = "assetList"];
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ERC20AssetDelist asset_delist = 1002 [json_name = "assetDelist"];
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset_delist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ERC20Deposit deposit = 1003 [json_name = "deposit"];
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ERC20Withdrawal withdrawal = 1004 [json_name = "withdrawal"];
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ERC20Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ERC20Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1 [json_name = "index"];
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // uint64 block = 2 [json_name = "block"];
  if (this->block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block(), target);
  }

  // .vega.ERC20AssetList asset_list = 1001 [json_name = "assetList"];
  if (_internal_has_asset_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::asset_list(this), target, stream);
  }

  // .vega.ERC20AssetDelist asset_delist = 1002 [json_name = "assetDelist"];
  if (_internal_has_asset_delist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1002, _Internal::asset_delist(this), target, stream);
  }

  // .vega.ERC20Deposit deposit = 1003 [json_name = "deposit"];
  if (_internal_has_deposit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1003, _Internal::deposit(this), target, stream);
  }

  // .vega.ERC20Withdrawal withdrawal = 1004 [json_name = "withdrawal"];
  if (_internal_has_withdrawal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1004, _Internal::withdrawal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ERC20Event)
  return target;
}

size_t ERC20Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ERC20Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 index = 1 [json_name = "index"];
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index());
  }

  // uint64 block = 2 [json_name = "block"];
  if (this->block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block());
  }

  switch (action_case()) {
    // .vega.ERC20AssetList asset_list = 1001 [json_name = "assetList"];
    case kAssetList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.asset_list_);
      break;
    }
    // .vega.ERC20AssetDelist asset_delist = 1002 [json_name = "assetDelist"];
    case kAssetDelist: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.asset_delist_);
      break;
    }
    // .vega.ERC20Deposit deposit = 1003 [json_name = "deposit"];
    case kDeposit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.deposit_);
      break;
    }
    // .vega.ERC20Withdrawal withdrawal = 1004 [json_name = "withdrawal"];
    case kWithdrawal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.withdrawal_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERC20Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ERC20Event)
  GOOGLE_DCHECK_NE(&from, this);
  const ERC20Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ERC20Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ERC20Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ERC20Event)
    MergeFrom(*source);
  }
}

void ERC20Event::MergeFrom(const ERC20Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ERC20Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.block() != 0) {
    _internal_set_block(from._internal_block());
  }
  switch (from.action_case()) {
    case kAssetList: {
      _internal_mutable_asset_list()->::vega::ERC20AssetList::MergeFrom(from._internal_asset_list());
      break;
    }
    case kAssetDelist: {
      _internal_mutable_asset_delist()->::vega::ERC20AssetDelist::MergeFrom(from._internal_asset_delist());
      break;
    }
    case kDeposit: {
      _internal_mutable_deposit()->::vega::ERC20Deposit::MergeFrom(from._internal_deposit());
      break;
    }
    case kWithdrawal: {
      _internal_mutable_withdrawal()->::vega::ERC20Withdrawal::MergeFrom(from._internal_withdrawal());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void ERC20Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ERC20Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ERC20Event::CopyFrom(const ERC20Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ERC20Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20Event::IsInitialized() const {
  return true;
}

void ERC20Event::InternalSwap(ERC20Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ERC20Event, block_)
      + sizeof(ERC20Event::block_)
      - PROTOBUF_FIELD_OFFSET(ERC20Event, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BTCDeposit::_Internal {
 public:
};

BTCDeposit::BTCDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.BTCDeposit)
}
BTCDeposit::BTCDeposit(const BTCDeposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_asset_id().empty()) {
    vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_asset_id(),
      GetArena());
  }
  source_btc_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_btc_address().empty()) {
    source_btc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_btc_address(),
      GetArena());
  }
  target_party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_party_id().empty()) {
    target_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_party_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.BTCDeposit)
}

void BTCDeposit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BTCDeposit_chain_5fevents_2eproto.base);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_btc_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BTCDeposit::~BTCDeposit() {
  // @@protoc_insertion_point(destructor:vega.BTCDeposit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTCDeposit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vega_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_btc_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BTCDeposit::ArenaDtor(void* object) {
  BTCDeposit* _this = reinterpret_cast< BTCDeposit* >(object);
  (void)_this;
}
void BTCDeposit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTCDeposit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BTCDeposit& BTCDeposit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BTCDeposit_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void BTCDeposit::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.BTCDeposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vega_asset_id_.ClearToEmpty();
  source_btc_address_.ClearToEmpty();
  target_party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTCDeposit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vega_asset_id = 1 [json_name = "vegaAssetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vega_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BTCDeposit.vega_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_btc_address = 2 [json_name = "sourceBtcAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_btc_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BTCDeposit.source_btc_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_party_id = 3 [json_name = "targetPartyId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BTCDeposit.target_party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTCDeposit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.BTCDeposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_asset_id().data(), static_cast<int>(this->_internal_vega_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BTCDeposit.vega_asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vega_asset_id(), target);
  }

  // string source_btc_address = 2 [json_name = "sourceBtcAddress"];
  if (this->source_btc_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_btc_address().data(), static_cast<int>(this->_internal_source_btc_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BTCDeposit.source_btc_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_btc_address(), target);
  }

  // string target_party_id = 3 [json_name = "targetPartyId"];
  if (this->target_party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_party_id().data(), static_cast<int>(this->_internal_target_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BTCDeposit.target_party_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.BTCDeposit)
  return target;
}

size_t BTCDeposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.BTCDeposit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_asset_id());
  }

  // string source_btc_address = 2 [json_name = "sourceBtcAddress"];
  if (this->source_btc_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_btc_address());
  }

  // string target_party_id = 3 [json_name = "targetPartyId"];
  if (this->target_party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTCDeposit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.BTCDeposit)
  GOOGLE_DCHECK_NE(&from, this);
  const BTCDeposit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTCDeposit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.BTCDeposit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.BTCDeposit)
    MergeFrom(*source);
  }
}

void BTCDeposit::MergeFrom(const BTCDeposit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.BTCDeposit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vega_asset_id().size() > 0) {
    _internal_set_vega_asset_id(from._internal_vega_asset_id());
  }
  if (from.source_btc_address().size() > 0) {
    _internal_set_source_btc_address(from._internal_source_btc_address());
  }
  if (from.target_party_id().size() > 0) {
    _internal_set_target_party_id(from._internal_target_party_id());
  }
}

void BTCDeposit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.BTCDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTCDeposit::CopyFrom(const BTCDeposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.BTCDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTCDeposit::IsInitialized() const {
  return true;
}

void BTCDeposit::InternalSwap(BTCDeposit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vega_asset_id_.Swap(&other->vega_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_btc_address_.Swap(&other->source_btc_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_party_id_.Swap(&other->target_party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BTCDeposit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BTCWithdrawal::_Internal {
 public:
};

BTCWithdrawal::BTCWithdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.BTCWithdrawal)
}
BTCWithdrawal::BTCWithdrawal(const BTCWithdrawal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_asset_id().empty()) {
    vega_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_asset_id(),
      GetArena());
  }
  source_party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_party_id().empty()) {
    source_party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_party_id(),
      GetArena());
  }
  target_btc_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_btc_address().empty()) {
    target_btc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_btc_address(),
      GetArena());
  }
  reference_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_nonce().empty()) {
    reference_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_nonce(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.BTCWithdrawal)
}

void BTCWithdrawal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BTCWithdrawal_chain_5fevents_2eproto.base);
  vega_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_btc_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BTCWithdrawal::~BTCWithdrawal() {
  // @@protoc_insertion_point(destructor:vega.BTCWithdrawal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTCWithdrawal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vega_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_btc_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BTCWithdrawal::ArenaDtor(void* object) {
  BTCWithdrawal* _this = reinterpret_cast< BTCWithdrawal* >(object);
  (void)_this;
}
void BTCWithdrawal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTCWithdrawal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BTCWithdrawal& BTCWithdrawal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BTCWithdrawal_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void BTCWithdrawal::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.BTCWithdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vega_asset_id_.ClearToEmpty();
  source_party_id_.ClearToEmpty();
  target_btc_address_.ClearToEmpty();
  reference_nonce_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTCWithdrawal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vega_asset_id = 1 [json_name = "vegaAssetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vega_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BTCWithdrawal.vega_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_party_id = 2 [json_name = "sourcePartyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BTCWithdrawal.source_party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_btc_address = 3 [json_name = "targetBtcAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_btc_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BTCWithdrawal.target_btc_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_nonce = 4 [json_name = "referenceNonce"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reference_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BTCWithdrawal.reference_nonce"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTCWithdrawal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.BTCWithdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_asset_id().data(), static_cast<int>(this->_internal_vega_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BTCWithdrawal.vega_asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vega_asset_id(), target);
  }

  // string source_party_id = 2 [json_name = "sourcePartyId"];
  if (this->source_party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_party_id().data(), static_cast<int>(this->_internal_source_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BTCWithdrawal.source_party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_party_id(), target);
  }

  // string target_btc_address = 3 [json_name = "targetBtcAddress"];
  if (this->target_btc_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_btc_address().data(), static_cast<int>(this->_internal_target_btc_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BTCWithdrawal.target_btc_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_btc_address(), target);
  }

  // string reference_nonce = 4 [json_name = "referenceNonce"];
  if (this->reference_nonce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_nonce().data(), static_cast<int>(this->_internal_reference_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BTCWithdrawal.reference_nonce");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reference_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.BTCWithdrawal)
  return target;
}

size_t BTCWithdrawal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.BTCWithdrawal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vega_asset_id = 1 [json_name = "vegaAssetId"];
  if (this->vega_asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_asset_id());
  }

  // string source_party_id = 2 [json_name = "sourcePartyId"];
  if (this->source_party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_party_id());
  }

  // string target_btc_address = 3 [json_name = "targetBtcAddress"];
  if (this->target_btc_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_btc_address());
  }

  // string reference_nonce = 4 [json_name = "referenceNonce"];
  if (this->reference_nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTCWithdrawal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.BTCWithdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  const BTCWithdrawal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTCWithdrawal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.BTCWithdrawal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.BTCWithdrawal)
    MergeFrom(*source);
  }
}

void BTCWithdrawal::MergeFrom(const BTCWithdrawal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.BTCWithdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vega_asset_id().size() > 0) {
    _internal_set_vega_asset_id(from._internal_vega_asset_id());
  }
  if (from.source_party_id().size() > 0) {
    _internal_set_source_party_id(from._internal_source_party_id());
  }
  if (from.target_btc_address().size() > 0) {
    _internal_set_target_btc_address(from._internal_target_btc_address());
  }
  if (from.reference_nonce().size() > 0) {
    _internal_set_reference_nonce(from._internal_reference_nonce());
  }
}

void BTCWithdrawal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.BTCWithdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTCWithdrawal::CopyFrom(const BTCWithdrawal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.BTCWithdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTCWithdrawal::IsInitialized() const {
  return true;
}

void BTCWithdrawal::InternalSwap(BTCWithdrawal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vega_asset_id_.Swap(&other->vega_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_party_id_.Swap(&other->source_party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_btc_address_.Swap(&other->target_btc_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_nonce_.Swap(&other->reference_nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BTCWithdrawal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BTCEvent::_Internal {
 public:
  static const ::vega::BTCDeposit& deposit(const BTCEvent* msg);
  static const ::vega::BTCWithdrawal& withdrawal(const BTCEvent* msg);
};

const ::vega::BTCDeposit&
BTCEvent::_Internal::deposit(const BTCEvent* msg) {
  return *msg->action_.deposit_;
}
const ::vega::BTCWithdrawal&
BTCEvent::_Internal::withdrawal(const BTCEvent* msg) {
  return *msg->action_.withdrawal_;
}
void BTCEvent::set_allocated_deposit(::vega::BTCDeposit* deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deposit);
    if (message_arena != submessage_arena) {
      deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit, submessage_arena);
    }
    set_has_deposit();
    action_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BTCEvent.deposit)
}
void BTCEvent::set_allocated_withdrawal(::vega::BTCWithdrawal* withdrawal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (withdrawal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(withdrawal);
    if (message_arena != submessage_arena) {
      withdrawal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdrawal, submessage_arena);
    }
    set_has_withdrawal();
    action_.withdrawal_ = withdrawal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BTCEvent.withdrawal)
}
BTCEvent::BTCEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.BTCEvent)
}
BTCEvent::BTCEvent(const BTCEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_) -
    reinterpret_cast<char*>(&index_)) + sizeof(block_));
  clear_has_action();
  switch (from.action_case()) {
    case kDeposit: {
      _internal_mutable_deposit()->::vega::BTCDeposit::MergeFrom(from._internal_deposit());
      break;
    }
    case kWithdrawal: {
      _internal_mutable_withdrawal()->::vega::BTCWithdrawal::MergeFrom(from._internal_withdrawal());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.BTCEvent)
}

void BTCEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BTCEvent_chain_5fevents_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&index_)) + sizeof(block_));
  clear_has_action();
}

BTCEvent::~BTCEvent() {
  // @@protoc_insertion_point(destructor:vega.BTCEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTCEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void BTCEvent::ArenaDtor(void* object) {
  BTCEvent* _this = reinterpret_cast< BTCEvent* >(object);
  (void)_this;
}
void BTCEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTCEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BTCEvent& BTCEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BTCEvent_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void BTCEvent::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:vega.BTCEvent)
  switch (action_case()) {
    case kDeposit: {
      if (GetArena() == nullptr) {
        delete action_.deposit_;
      }
      break;
    }
    case kWithdrawal: {
      if (GetArena() == nullptr) {
        delete action_.withdrawal_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void BTCEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.BTCEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&index_)) + sizeof(block_));
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTCEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block = 2 [json_name = "block"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.BTCDeposit deposit = 1001 [json_name = "deposit"];
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.BTCWithdrawal withdrawal = 1002 [json_name = "withdrawal"];
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTCEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.BTCEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1 [json_name = "index"];
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // uint64 block = 2 [json_name = "block"];
  if (this->block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block(), target);
  }

  // .vega.BTCDeposit deposit = 1001 [json_name = "deposit"];
  if (_internal_has_deposit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::deposit(this), target, stream);
  }

  // .vega.BTCWithdrawal withdrawal = 1002 [json_name = "withdrawal"];
  if (_internal_has_withdrawal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1002, _Internal::withdrawal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.BTCEvent)
  return target;
}

size_t BTCEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.BTCEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 index = 1 [json_name = "index"];
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index());
  }

  // uint64 block = 2 [json_name = "block"];
  if (this->block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block());
  }

  switch (action_case()) {
    // .vega.BTCDeposit deposit = 1001 [json_name = "deposit"];
    case kDeposit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.deposit_);
      break;
    }
    // .vega.BTCWithdrawal withdrawal = 1002 [json_name = "withdrawal"];
    case kWithdrawal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.withdrawal_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTCEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.BTCEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BTCEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTCEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.BTCEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.BTCEvent)
    MergeFrom(*source);
  }
}

void BTCEvent::MergeFrom(const BTCEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.BTCEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.block() != 0) {
    _internal_set_block(from._internal_block());
  }
  switch (from.action_case()) {
    case kDeposit: {
      _internal_mutable_deposit()->::vega::BTCDeposit::MergeFrom(from._internal_deposit());
      break;
    }
    case kWithdrawal: {
      _internal_mutable_withdrawal()->::vega::BTCWithdrawal::MergeFrom(from._internal_withdrawal());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void BTCEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.BTCEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTCEvent::CopyFrom(const BTCEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.BTCEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTCEvent::IsInitialized() const {
  return true;
}

void BTCEvent::InternalSwap(BTCEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTCEvent, block_)
      + sizeof(BTCEvent::block_)
      - PROTOBUF_FIELD_OFFSET(BTCEvent, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTCEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EthereumAddress::_Internal {
 public:
};

EthereumAddress::EthereumAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.EthereumAddress)
}
EthereumAddress::EthereumAddress(const EthereumAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.EthereumAddress)
}

void EthereumAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EthereumAddress_chain_5fevents_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EthereumAddress::~EthereumAddress() {
  // @@protoc_insertion_point(destructor:vega.EthereumAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EthereumAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EthereumAddress::ArenaDtor(void* object) {
  EthereumAddress* _this = reinterpret_cast< EthereumAddress* >(object);
  (void)_this;
}
void EthereumAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EthereumAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EthereumAddress& EthereumAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EthereumAddress_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void EthereumAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.EthereumAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EthereumAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.EthereumAddress.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EthereumAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.EthereumAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.EthereumAddress.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.EthereumAddress)
  return target;
}

size_t EthereumAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.EthereumAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EthereumAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.EthereumAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const EthereumAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EthereumAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.EthereumAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.EthereumAddress)
    MergeFrom(*source);
  }
}

void EthereumAddress::MergeFrom(const EthereumAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.EthereumAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void EthereumAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.EthereumAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthereumAddress::CopyFrom(const EthereumAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.EthereumAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthereumAddress::IsInitialized() const {
  return true;
}

void EthereumAddress::InternalSwap(EthereumAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EthereumAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BitcoinAddress::_Internal {
 public:
};

BitcoinAddress::BitcoinAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.BitcoinAddress)
}
BitcoinAddress::BitcoinAddress(const BitcoinAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.BitcoinAddress)
}

void BitcoinAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BitcoinAddress_chain_5fevents_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BitcoinAddress::~BitcoinAddress() {
  // @@protoc_insertion_point(destructor:vega.BitcoinAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BitcoinAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BitcoinAddress::ArenaDtor(void* object) {
  BitcoinAddress* _this = reinterpret_cast< BitcoinAddress* >(object);
  (void)_this;
}
void BitcoinAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BitcoinAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinAddress& BitcoinAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitcoinAddress_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void BitcoinAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.BitcoinAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BitcoinAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.BitcoinAddress.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BitcoinAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.BitcoinAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.BitcoinAddress.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.BitcoinAddress)
  return target;
}

size_t BitcoinAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.BitcoinAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.BitcoinAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const BitcoinAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BitcoinAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.BitcoinAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.BitcoinAddress)
    MergeFrom(*source);
  }
}

void BitcoinAddress::MergeFrom(const BitcoinAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.BitcoinAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void BitcoinAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.BitcoinAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitcoinAddress::CopyFrom(const BitcoinAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.BitcoinAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinAddress::IsInitialized() const {
  return true;
}

void BitcoinAddress::InternalSwap(BitcoinAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BitcoinAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Identifier::_Internal {
 public:
  static const ::vega::EthereumAddress& ethereum_address(const Identifier* msg);
  static const ::vega::BitcoinAddress& bitcoin_address(const Identifier* msg);
};

const ::vega::EthereumAddress&
Identifier::_Internal::ethereum_address(const Identifier* msg) {
  return *msg->identifier_.ethereum_address_;
}
const ::vega::BitcoinAddress&
Identifier::_Internal::bitcoin_address(const Identifier* msg) {
  return *msg->identifier_.bitcoin_address_;
}
void Identifier::set_allocated_ethereum_address(::vega::EthereumAddress* ethereum_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_identifier();
  if (ethereum_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ethereum_address);
    if (message_arena != submessage_arena) {
      ethereum_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ethereum_address, submessage_arena);
    }
    set_has_ethereum_address();
    identifier_.ethereum_address_ = ethereum_address;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.Identifier.ethereum_address)
}
void Identifier::set_allocated_bitcoin_address(::vega::BitcoinAddress* bitcoin_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_identifier();
  if (bitcoin_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bitcoin_address);
    if (message_arena != submessage_arena) {
      bitcoin_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitcoin_address, submessage_arena);
    }
    set_has_bitcoin_address();
    identifier_.bitcoin_address_ = bitcoin_address;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.Identifier.bitcoin_address)
}
Identifier::Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Identifier)
}
Identifier::Identifier(const Identifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kEthereumAddress: {
      _internal_mutable_ethereum_address()->::vega::EthereumAddress::MergeFrom(from._internal_ethereum_address());
      break;
    }
    case kBitcoinAddress: {
      _internal_mutable_bitcoin_address()->::vega::BitcoinAddress::MergeFrom(from._internal_bitcoin_address());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.Identifier)
}

void Identifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Identifier_chain_5fevents_2eproto.base);
  clear_has_identifier();
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:vega.Identifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Identifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_identifier()) {
    clear_identifier();
  }
}

void Identifier::ArenaDtor(void* object) {
  Identifier* _this = reinterpret_cast< Identifier* >(object);
  (void)_this;
}
void Identifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identifier& Identifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Identifier_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void Identifier::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:vega.Identifier)
  switch (identifier_case()) {
    case kEthereumAddress: {
      if (GetArena() == nullptr) {
        delete identifier_.ethereum_address_;
      }
      break;
    }
    case kBitcoinAddress: {
      if (GetArena() == nullptr) {
        delete identifier_.bitcoin_address_;
      }
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_identifier();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Identifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.EthereumAddress ethereum_address = 1 [json_name = "ethereumAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethereum_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.BitcoinAddress bitcoin_address = 2 [json_name = "bitcoinAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitcoin_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.EthereumAddress ethereum_address = 1 [json_name = "ethereumAddress"];
  if (_internal_has_ethereum_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ethereum_address(this), target, stream);
  }

  // .vega.BitcoinAddress bitcoin_address = 2 [json_name = "bitcoinAddress"];
  if (_internal_has_bitcoin_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bitcoin_address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Identifier)
  return target;
}

size_t Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Identifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (identifier_case()) {
    // .vega.EthereumAddress ethereum_address = 1 [json_name = "ethereumAddress"];
    case kEthereumAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_.ethereum_address_);
      break;
    }
    // .vega.BitcoinAddress bitcoin_address = 2 [json_name = "bitcoinAddress"];
    case kBitcoinAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_.bitcoin_address_);
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Identifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Identifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Identifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Identifier)
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.identifier_case()) {
    case kEthereumAddress: {
      _internal_mutable_ethereum_address()->::vega::EthereumAddress::MergeFrom(from._internal_ethereum_address());
      break;
    }
    case kBitcoinAddress: {
      _internal_mutable_bitcoin_address()->::vega::BitcoinAddress::MergeFrom(from._internal_bitcoin_address());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
}

void Identifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {
  return true;
}

void Identifier::InternalSwap(Identifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(identifier_, other->identifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Identifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddValidator::_Internal {
 public:
  static const ::vega::Identifier& id(const AddValidator* msg);
};

const ::vega::Identifier&
AddValidator::_Internal::id(const AddValidator* msg) {
  return *msg->id_;
}
AddValidator::AddValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.AddValidator)
}
AddValidator::AddValidator(const AddValidator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::vega::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.AddValidator)
}

void AddValidator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddValidator_chain_5fevents_2eproto.base);
  id_ = nullptr;
}

AddValidator::~AddValidator() {
  // @@protoc_insertion_point(destructor:vega.AddValidator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddValidator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void AddValidator::ArenaDtor(void* object) {
  AddValidator* _this = reinterpret_cast< AddValidator* >(object);
  (void)_this;
}
void AddValidator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddValidator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddValidator& AddValidator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddValidator_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void AddValidator::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.AddValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddValidator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Identifier id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddValidator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.AddValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Identifier id = 1 [json_name = "id"];
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.AddValidator)
  return target;
}

size_t AddValidator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.AddValidator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Identifier id = 1 [json_name = "id"];
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddValidator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.AddValidator)
  GOOGLE_DCHECK_NE(&from, this);
  const AddValidator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddValidator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.AddValidator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.AddValidator)
    MergeFrom(*source);
  }
}

void AddValidator::MergeFrom(const AddValidator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.AddValidator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::vega::Identifier::MergeFrom(from._internal_id());
  }
}

void AddValidator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.AddValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddValidator::CopyFrom(const AddValidator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.AddValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddValidator::IsInitialized() const {
  return true;
}

void AddValidator::InternalSwap(AddValidator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddValidator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoveValidator::_Internal {
 public:
  static const ::vega::Identifier& id(const RemoveValidator* msg);
};

const ::vega::Identifier&
RemoveValidator::_Internal::id(const RemoveValidator* msg) {
  return *msg->id_;
}
RemoveValidator::RemoveValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.RemoveValidator)
}
RemoveValidator::RemoveValidator(const RemoveValidator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::vega::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.RemoveValidator)
}

void RemoveValidator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveValidator_chain_5fevents_2eproto.base);
  id_ = nullptr;
}

RemoveValidator::~RemoveValidator() {
  // @@protoc_insertion_point(destructor:vega.RemoveValidator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveValidator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void RemoveValidator::ArenaDtor(void* object) {
  RemoveValidator* _this = reinterpret_cast< RemoveValidator* >(object);
  (void)_this;
}
void RemoveValidator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveValidator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveValidator& RemoveValidator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveValidator_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void RemoveValidator::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RemoveValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveValidator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Identifier id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveValidator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RemoveValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Identifier id = 1 [json_name = "id"];
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RemoveValidator)
  return target;
}

size_t RemoveValidator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RemoveValidator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Identifier id = 1 [json_name = "id"];
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveValidator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RemoveValidator)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveValidator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveValidator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RemoveValidator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RemoveValidator)
    MergeFrom(*source);
  }
}

void RemoveValidator::MergeFrom(const RemoveValidator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RemoveValidator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::vega::Identifier::MergeFrom(from._internal_id());
  }
}

void RemoveValidator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RemoveValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveValidator::CopyFrom(const RemoveValidator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RemoveValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveValidator::IsInitialized() const {
  return true;
}

void RemoveValidator::InternalSwap(RemoveValidator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveValidator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatorEvent::_Internal {
 public:
  static const ::vega::AddValidator& add(const ValidatorEvent* msg);
  static const ::vega::RemoveValidator& rm(const ValidatorEvent* msg);
};

const ::vega::AddValidator&
ValidatorEvent::_Internal::add(const ValidatorEvent* msg) {
  return *msg->action_.add_;
}
const ::vega::RemoveValidator&
ValidatorEvent::_Internal::rm(const ValidatorEvent* msg) {
  return *msg->action_.rm_;
}
void ValidatorEvent::set_allocated_add(::vega::AddValidator* add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add);
    if (message_arena != submessage_arena) {
      add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add, submessage_arena);
    }
    set_has_add();
    action_.add_ = add;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ValidatorEvent.add)
}
void ValidatorEvent::set_allocated_rm(::vega::RemoveValidator* rm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (rm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rm);
    if (message_arena != submessage_arena) {
      rm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rm, submessage_arena);
    }
    set_has_rm();
    action_.rm_ = rm;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ValidatorEvent.rm)
}
ValidatorEvent::ValidatorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ValidatorEvent)
}
ValidatorEvent::ValidatorEvent(const ValidatorEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_id().empty()) {
    source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_id(),
      GetArena());
  }
  clear_has_action();
  switch (from.action_case()) {
    case kAdd: {
      _internal_mutable_add()->::vega::AddValidator::MergeFrom(from._internal_add());
      break;
    }
    case kRm: {
      _internal_mutable_rm()->::vega::RemoveValidator::MergeFrom(from._internal_rm());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.ValidatorEvent)
}

void ValidatorEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatorEvent_chain_5fevents_2eproto.base);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_action();
}

ValidatorEvent::~ValidatorEvent() {
  // @@protoc_insertion_point(destructor:vega.ValidatorEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatorEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_action()) {
    clear_action();
  }
}

void ValidatorEvent::ArenaDtor(void* object) {
  ValidatorEvent* _this = reinterpret_cast< ValidatorEvent* >(object);
  (void)_this;
}
void ValidatorEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorEvent& ValidatorEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatorEvent_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void ValidatorEvent::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:vega.ValidatorEvent)
  switch (action_case()) {
    case kAdd: {
      if (GetArena() == nullptr) {
        delete action_.add_;
      }
      break;
    }
    case kRm: {
      if (GetArena() == nullptr) {
        delete action_.rm_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ValidatorEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ValidatorEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_id_.ClearToEmpty();
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source_id = 1 [json_name = "sourceId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ValidatorEvent.source_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.AddValidator add = 1001 [json_name = "add"];
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_add(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.RemoveValidator rm = 1002 [json_name = "rm"];
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ValidatorEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_id = 1 [json_name = "sourceId"];
  if (this->source_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_id().data(), static_cast<int>(this->_internal_source_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ValidatorEvent.source_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_id(), target);
  }

  // .vega.AddValidator add = 1001 [json_name = "add"];
  if (_internal_has_add()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::add(this), target, stream);
  }

  // .vega.RemoveValidator rm = 1002 [json_name = "rm"];
  if (_internal_has_rm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1002, _Internal::rm(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ValidatorEvent)
  return target;
}

size_t ValidatorEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ValidatorEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_id = 1 [json_name = "sourceId"];
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_id());
  }

  switch (action_case()) {
    // .vega.AddValidator add = 1001 [json_name = "add"];
    case kAdd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.add_);
      break;
    }
    // .vega.RemoveValidator rm = 1002 [json_name = "rm"];
    case kRm: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.rm_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ValidatorEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatorEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ValidatorEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ValidatorEvent)
    MergeFrom(*source);
  }
}

void ValidatorEvent::MergeFrom(const ValidatorEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ValidatorEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_id().size() > 0) {
    _internal_set_source_id(from._internal_source_id());
  }
  switch (from.action_case()) {
    case kAdd: {
      _internal_mutable_add()->::vega::AddValidator::MergeFrom(from._internal_add());
      break;
    }
    case kRm: {
      _internal_mutable_rm()->::vega::RemoveValidator::MergeFrom(from._internal_rm());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void ValidatorEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ValidatorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorEvent::CopyFrom(const ValidatorEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ValidatorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorEvent::IsInitialized() const {
  return true;
}

void ValidatorEvent::InternalSwap(ValidatorEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_id_.Swap(&other->source_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StakingEvent::_Internal {
 public:
  static const ::vega::StakeDeposited& stake_deposited(const StakingEvent* msg);
  static const ::vega::StakeRemoved& stake_removed(const StakingEvent* msg);
};

const ::vega::StakeDeposited&
StakingEvent::_Internal::stake_deposited(const StakingEvent* msg) {
  return *msg->action_.stake_deposited_;
}
const ::vega::StakeRemoved&
StakingEvent::_Internal::stake_removed(const StakingEvent* msg) {
  return *msg->action_.stake_removed_;
}
void StakingEvent::set_allocated_stake_deposited(::vega::StakeDeposited* stake_deposited) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stake_deposited) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stake_deposited);
    if (message_arena != submessage_arena) {
      stake_deposited = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stake_deposited, submessage_arena);
    }
    set_has_stake_deposited();
    action_.stake_deposited_ = stake_deposited;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.StakingEvent.stake_deposited)
}
void StakingEvent::set_allocated_stake_removed(::vega::StakeRemoved* stake_removed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stake_removed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stake_removed);
    if (message_arena != submessage_arena) {
      stake_removed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stake_removed, submessage_arena);
    }
    set_has_stake_removed();
    action_.stake_removed_ = stake_removed;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.StakingEvent.stake_removed)
}
StakingEvent::StakingEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.StakingEvent)
}
StakingEvent::StakingEvent(const StakingEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_) -
    reinterpret_cast<char*>(&index_)) + sizeof(block_));
  clear_has_action();
  switch (from.action_case()) {
    case kStakeDeposited: {
      _internal_mutable_stake_deposited()->::vega::StakeDeposited::MergeFrom(from._internal_stake_deposited());
      break;
    }
    case kStakeRemoved: {
      _internal_mutable_stake_removed()->::vega::StakeRemoved::MergeFrom(from._internal_stake_removed());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.StakingEvent)
}

void StakingEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StakingEvent_chain_5fevents_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&index_)) + sizeof(block_));
  clear_has_action();
}

StakingEvent::~StakingEvent() {
  // @@protoc_insertion_point(destructor:vega.StakingEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StakingEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void StakingEvent::ArenaDtor(void* object) {
  StakingEvent* _this = reinterpret_cast< StakingEvent* >(object);
  (void)_this;
}
void StakingEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StakingEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StakingEvent& StakingEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StakingEvent_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void StakingEvent::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:vega.StakingEvent)
  switch (action_case()) {
    case kStakeDeposited: {
      if (GetArena() == nullptr) {
        delete action_.stake_deposited_;
      }
      break;
    }
    case kStakeRemoved: {
      if (GetArena() == nullptr) {
        delete action_.stake_removed_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void StakingEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.StakingEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&index_)) + sizeof(block_));
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StakingEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block = 2 [json_name = "block"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.StakeDeposited stake_deposited = 1001 [json_name = "stakeDeposited"];
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stake_deposited(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.StakeRemoved stake_removed = 1002 [json_name = "stakeRemoved"];
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stake_removed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StakingEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.StakingEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1 [json_name = "index"];
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // uint64 block = 2 [json_name = "block"];
  if (this->block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block(), target);
  }

  // .vega.StakeDeposited stake_deposited = 1001 [json_name = "stakeDeposited"];
  if (_internal_has_stake_deposited()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::stake_deposited(this), target, stream);
  }

  // .vega.StakeRemoved stake_removed = 1002 [json_name = "stakeRemoved"];
  if (_internal_has_stake_removed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1002, _Internal::stake_removed(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.StakingEvent)
  return target;
}

size_t StakingEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.StakingEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 index = 1 [json_name = "index"];
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index());
  }

  // uint64 block = 2 [json_name = "block"];
  if (this->block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block());
  }

  switch (action_case()) {
    // .vega.StakeDeposited stake_deposited = 1001 [json_name = "stakeDeposited"];
    case kStakeDeposited: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stake_deposited_);
      break;
    }
    // .vega.StakeRemoved stake_removed = 1002 [json_name = "stakeRemoved"];
    case kStakeRemoved: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stake_removed_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StakingEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.StakingEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const StakingEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StakingEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.StakingEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.StakingEvent)
    MergeFrom(*source);
  }
}

void StakingEvent::MergeFrom(const StakingEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.StakingEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.block() != 0) {
    _internal_set_block(from._internal_block());
  }
  switch (from.action_case()) {
    case kStakeDeposited: {
      _internal_mutable_stake_deposited()->::vega::StakeDeposited::MergeFrom(from._internal_stake_deposited());
      break;
    }
    case kStakeRemoved: {
      _internal_mutable_stake_removed()->::vega::StakeRemoved::MergeFrom(from._internal_stake_removed());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void StakingEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.StakingEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StakingEvent::CopyFrom(const StakingEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.StakingEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StakingEvent::IsInitialized() const {
  return true;
}

void StakingEvent::InternalSwap(StakingEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StakingEvent, block_)
      + sizeof(StakingEvent::block_)
      - PROTOBUF_FIELD_OFFSET(StakingEvent, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StakingEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StakeDeposited::_Internal {
 public:
};

StakeDeposited::StakeDeposited(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.StakeDeposited)
}
StakeDeposited::StakeDeposited(const StakeDeposited& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ethereum_address().empty()) {
    ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ethereum_address(),
      GetArena());
  }
  vega_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_public_key().empty()) {
    vega_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_public_key(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  block_time_ = from.block_time_;
  // @@protoc_insertion_point(copy_constructor:vega.StakeDeposited)
}

void StakeDeposited::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StakeDeposited_chain_5fevents_2eproto.base);
  ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vega_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_time_ = PROTOBUF_LONGLONG(0);
}

StakeDeposited::~StakeDeposited() {
  // @@protoc_insertion_point(destructor:vega.StakeDeposited)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StakeDeposited::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ethereum_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vega_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StakeDeposited::ArenaDtor(void* object) {
  StakeDeposited* _this = reinterpret_cast< StakeDeposited* >(object);
  (void)_this;
}
void StakeDeposited::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StakeDeposited::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StakeDeposited& StakeDeposited::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StakeDeposited_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void StakeDeposited::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.StakeDeposited)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ethereum_address_.ClearToEmpty();
  vega_public_key_.ClearToEmpty();
  amount_.ClearToEmpty();
  block_time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StakeDeposited::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ethereum_address = 1 [json_name = "ethereumAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ethereum_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.StakeDeposited.ethereum_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vega_public_key = 2 [json_name = "vegaPublicKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vega_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.StakeDeposited.vega_public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.StakeDeposited.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 block_time = 4 [json_name = "blockTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StakeDeposited::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.StakeDeposited)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ethereum_address = 1 [json_name = "ethereumAddress"];
  if (this->ethereum_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ethereum_address().data(), static_cast<int>(this->_internal_ethereum_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.StakeDeposited.ethereum_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ethereum_address(), target);
  }

  // string vega_public_key = 2 [json_name = "vegaPublicKey"];
  if (this->vega_public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_public_key().data(), static_cast<int>(this->_internal_vega_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.StakeDeposited.vega_public_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vega_public_key(), target);
  }

  // string amount = 3 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.StakeDeposited.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  // int64 block_time = 4 [json_name = "blockTime"];
  if (this->block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_block_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.StakeDeposited)
  return target;
}

size_t StakeDeposited::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.StakeDeposited)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ethereum_address = 1 [json_name = "ethereumAddress"];
  if (this->ethereum_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ethereum_address());
  }

  // string vega_public_key = 2 [json_name = "vegaPublicKey"];
  if (this->vega_public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_public_key());
  }

  // string amount = 3 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // int64 block_time = 4 [json_name = "blockTime"];
  if (this->block_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_block_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StakeDeposited::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.StakeDeposited)
  GOOGLE_DCHECK_NE(&from, this);
  const StakeDeposited* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StakeDeposited>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.StakeDeposited)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.StakeDeposited)
    MergeFrom(*source);
  }
}

void StakeDeposited::MergeFrom(const StakeDeposited& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.StakeDeposited)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ethereum_address().size() > 0) {
    _internal_set_ethereum_address(from._internal_ethereum_address());
  }
  if (from.vega_public_key().size() > 0) {
    _internal_set_vega_public_key(from._internal_vega_public_key());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.block_time() != 0) {
    _internal_set_block_time(from._internal_block_time());
  }
}

void StakeDeposited::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.StakeDeposited)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StakeDeposited::CopyFrom(const StakeDeposited& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.StakeDeposited)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StakeDeposited::IsInitialized() const {
  return true;
}

void StakeDeposited::InternalSwap(StakeDeposited* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ethereum_address_.Swap(&other->ethereum_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vega_public_key_.Swap(&other->vega_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(block_time_, other->block_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StakeDeposited::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StakeRemoved::_Internal {
 public:
};

StakeRemoved::StakeRemoved(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.StakeRemoved)
}
StakeRemoved::StakeRemoved(const StakeRemoved& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ethereum_address().empty()) {
    ethereum_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ethereum_address(),
      GetArena());
  }
  vega_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vega_public_key().empty()) {
    vega_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vega_public_key(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  block_time_ = from.block_time_;
  // @@protoc_insertion_point(copy_constructor:vega.StakeRemoved)
}

void StakeRemoved::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StakeRemoved_chain_5fevents_2eproto.base);
  ethereum_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vega_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_time_ = PROTOBUF_LONGLONG(0);
}

StakeRemoved::~StakeRemoved() {
  // @@protoc_insertion_point(destructor:vega.StakeRemoved)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StakeRemoved::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ethereum_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vega_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StakeRemoved::ArenaDtor(void* object) {
  StakeRemoved* _this = reinterpret_cast< StakeRemoved* >(object);
  (void)_this;
}
void StakeRemoved::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StakeRemoved::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StakeRemoved& StakeRemoved::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StakeRemoved_chain_5fevents_2eproto.base);
  return *internal_default_instance();
}


void StakeRemoved::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.StakeRemoved)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ethereum_address_.ClearToEmpty();
  vega_public_key_.ClearToEmpty();
  amount_.ClearToEmpty();
  block_time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StakeRemoved::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ethereum_address = 1 [json_name = "ethereumAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ethereum_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.StakeRemoved.ethereum_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vega_public_key = 2 [json_name = "vegaPublicKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vega_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.StakeRemoved.vega_public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.StakeRemoved.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 block_time = 4 [json_name = "blockTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StakeRemoved::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.StakeRemoved)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ethereum_address = 1 [json_name = "ethereumAddress"];
  if (this->ethereum_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ethereum_address().data(), static_cast<int>(this->_internal_ethereum_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.StakeRemoved.ethereum_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ethereum_address(), target);
  }

  // string vega_public_key = 2 [json_name = "vegaPublicKey"];
  if (this->vega_public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vega_public_key().data(), static_cast<int>(this->_internal_vega_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.StakeRemoved.vega_public_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vega_public_key(), target);
  }

  // string amount = 3 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.StakeRemoved.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  // int64 block_time = 4 [json_name = "blockTime"];
  if (this->block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_block_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.StakeRemoved)
  return target;
}

size_t StakeRemoved::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.StakeRemoved)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ethereum_address = 1 [json_name = "ethereumAddress"];
  if (this->ethereum_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ethereum_address());
  }

  // string vega_public_key = 2 [json_name = "vegaPublicKey"];
  if (this->vega_public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vega_public_key());
  }

  // string amount = 3 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // int64 block_time = 4 [json_name = "blockTime"];
  if (this->block_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_block_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StakeRemoved::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.StakeRemoved)
  GOOGLE_DCHECK_NE(&from, this);
  const StakeRemoved* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StakeRemoved>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.StakeRemoved)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.StakeRemoved)
    MergeFrom(*source);
  }
}

void StakeRemoved::MergeFrom(const StakeRemoved& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.StakeRemoved)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ethereum_address().size() > 0) {
    _internal_set_ethereum_address(from._internal_ethereum_address());
  }
  if (from.vega_public_key().size() > 0) {
    _internal_set_vega_public_key(from._internal_vega_public_key());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.block_time() != 0) {
    _internal_set_block_time(from._internal_block_time());
  }
}

void StakeRemoved::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.StakeRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StakeRemoved::CopyFrom(const StakeRemoved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.StakeRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StakeRemoved::IsInitialized() const {
  return true;
}

void StakeRemoved::InternalSwap(StakeRemoved* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ethereum_address_.Swap(&other->ethereum_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vega_public_key_.Swap(&other->vega_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(block_time_, other->block_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StakeRemoved::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::BuiltinAssetDeposit* Arena::CreateMaybeMessage< ::vega::BuiltinAssetDeposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::BuiltinAssetDeposit >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::BuiltinAssetWithdrawal* Arena::CreateMaybeMessage< ::vega::BuiltinAssetWithdrawal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::BuiltinAssetWithdrawal >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::BuiltinAssetEvent* Arena::CreateMaybeMessage< ::vega::BuiltinAssetEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::BuiltinAssetEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ERC20AssetList* Arena::CreateMaybeMessage< ::vega::ERC20AssetList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ERC20AssetList >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ERC20AssetDelist* Arena::CreateMaybeMessage< ::vega::ERC20AssetDelist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ERC20AssetDelist >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ERC20Deposit* Arena::CreateMaybeMessage< ::vega::ERC20Deposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ERC20Deposit >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ERC20Withdrawal* Arena::CreateMaybeMessage< ::vega::ERC20Withdrawal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ERC20Withdrawal >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ERC20Event* Arena::CreateMaybeMessage< ::vega::ERC20Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ERC20Event >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::BTCDeposit* Arena::CreateMaybeMessage< ::vega::BTCDeposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::BTCDeposit >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::BTCWithdrawal* Arena::CreateMaybeMessage< ::vega::BTCWithdrawal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::BTCWithdrawal >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::BTCEvent* Arena::CreateMaybeMessage< ::vega::BTCEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::BTCEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::EthereumAddress* Arena::CreateMaybeMessage< ::vega::EthereumAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::EthereumAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::BitcoinAddress* Arena::CreateMaybeMessage< ::vega::BitcoinAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::BitcoinAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Identifier* Arena::CreateMaybeMessage< ::vega::Identifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Identifier >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::AddValidator* Arena::CreateMaybeMessage< ::vega::AddValidator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::AddValidator >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RemoveValidator* Arena::CreateMaybeMessage< ::vega::RemoveValidator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RemoveValidator >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ValidatorEvent* Arena::CreateMaybeMessage< ::vega::ValidatorEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ValidatorEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::StakingEvent* Arena::CreateMaybeMessage< ::vega::StakingEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::StakingEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::StakeDeposited* Arena::CreateMaybeMessage< ::vega::StakeDeposited >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::StakeDeposited >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::StakeRemoved* Arena::CreateMaybeMessage< ::vega::StakeRemoved >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::StakeRemoved >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
