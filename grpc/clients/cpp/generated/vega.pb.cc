// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vega.proto

#include "vega.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Delegation_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Epoch_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EpochData_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EpochTimestamps_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Erc20WithdrawExt_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fee_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinancialAmount_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerEntry_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiquidityOrder_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityOrderReference_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiquidityProviderFeeShare_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Node_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeggedOrder_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceLevel_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceMonitoringBounds_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceMonitoringTrigger_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardDetails_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RiskFactor_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trade_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferBalance_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawExt_vega_2eproto;
namespace vega {
class PriceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Price> _instance;
} _Price_default_instance_;
class TimestampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Timestamp> _instance;
} _Timestamp_default_instance_;
class PartyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Party> _instance;
} _Party_default_instance_;
class RiskFactorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RiskFactor> _instance;
} _RiskFactor_default_instance_;
class RiskResult_RiskFactorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RiskResult_RiskFactorsEntry_DoNotUse> _instance;
} _RiskResult_RiskFactorsEntry_DoNotUse_default_instance_;
class RiskResult_PredictedNextRiskFactorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse> _instance;
} _RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_;
class RiskResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RiskResult> _instance;
} _RiskResult_default_instance_;
class PeggedOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeggedOrder> _instance;
} _PeggedOrder_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
class OrderCancellationConfirmationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderCancellationConfirmation> _instance;
} _OrderCancellationConfirmation_default_instance_;
class OrderConfirmationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderConfirmation> _instance;
} _OrderConfirmation_default_instance_;
class AuctionIndicativeStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuctionIndicativeState> _instance;
} _AuctionIndicativeState_default_instance_;
class TradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trade> _instance;
} _Trade_default_instance_;
class FeeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fee> _instance;
} _Fee_default_instance_;
class TradeSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeSet> _instance;
} _TradeSet_default_instance_;
class CandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candle> _instance;
} _Candle_default_instance_;
class PriceLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceLevel> _instance;
} _PriceLevel_default_instance_;
class MarketDepthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepth> _instance;
} _MarketDepth_default_instance_;
class MarketDepthUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthUpdate> _instance;
} _MarketDepthUpdate_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class PositionTradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionTrade> _instance;
} _PositionTrade_default_instance_;
class DepositDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deposit> _instance;
} _Deposit_default_instance_;
class WithdrawalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Withdrawal> _instance;
} _Withdrawal_default_instance_;
class WithdrawExtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawExt> _instance;
} _WithdrawExt_default_instance_;
class Erc20WithdrawExtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Erc20WithdrawExt> _instance;
} _Erc20WithdrawExt_default_instance_;
class AccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account> _instance;
} _Account_default_instance_;
class FinancialAmountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinancialAmount> _instance;
} _FinancialAmount_default_instance_;
class TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transfer> _instance;
} _Transfer_default_instance_;
class TransferRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferRequest> _instance;
} _TransferRequest_default_instance_;
class LedgerEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LedgerEntry> _instance;
} _LedgerEntry_default_instance_;
class TransferBalanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferBalance> _instance;
} _TransferBalance_default_instance_;
class TransferResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferResponse> _instance;
} _TransferResponse_default_instance_;
class MarginLevelsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarginLevels> _instance;
} _MarginLevels_default_instance_;
class MarketDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketData> _instance;
} _MarketData_default_instance_;
class LiquidityProviderFeeShareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityProviderFeeShare> _instance;
} _LiquidityProviderFeeShare_default_instance_;
class PriceMonitoringBoundsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceMonitoringBounds> _instance;
} _PriceMonitoringBounds_default_instance_;
class ErrorDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorDetail> _instance;
} _ErrorDetail_default_instance_;
class NetworkParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkParameter> _instance;
} _NetworkParameter_default_instance_;
class LiquidityOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityOrder> _instance;
} _LiquidityOrder_default_instance_;
class LiquidityOrderReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityOrderReference> _instance;
} _LiquidityOrderReference_default_instance_;
class LiquidityProvisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityProvision> _instance;
} _LiquidityProvision_default_instance_;
class EthereumConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EthereumConfig> _instance;
} _EthereumConfig_default_instance_;
class EpochTimestampsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EpochTimestamps> _instance;
} _EpochTimestamps_default_instance_;
class EpochDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Epoch> _instance;
} _Epoch_default_instance_;
class EpochParticipationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EpochParticipation> _instance;
} _EpochParticipation_default_instance_;
class EpochDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EpochData> _instance;
} _EpochData_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class NodeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeData> _instance;
} _NodeData_default_instance_;
class DelegationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Delegation> _instance;
} _Delegation_default_instance_;
class RewardDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardDetails> _instance;
} _RewardDetails_default_instance_;
class RewardPerAssetDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardPerAssetDetail> _instance;
} _RewardPerAssetDetail_default_instance_;
}  // namespace vega
static void InitDefaultsscc_info_Account_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Account_default_instance_;
    new (ptr) ::vega::Account();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Account_vega_2eproto}, {}};

static void InitDefaultsscc_info_AuctionIndicativeState_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_AuctionIndicativeState_default_instance_;
    new (ptr) ::vega::AuctionIndicativeState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuctionIndicativeState_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuctionIndicativeState_vega_2eproto}, {}};

static void InitDefaultsscc_info_Candle_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Candle_default_instance_;
    new (ptr) ::vega::Candle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Candle_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Candle_vega_2eproto}, {}};

static void InitDefaultsscc_info_Delegation_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Delegation_default_instance_;
    new (ptr) ::vega::Delegation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Delegation_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Delegation_vega_2eproto}, {}};

static void InitDefaultsscc_info_Deposit_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Deposit_default_instance_;
    new (ptr) ::vega::Deposit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deposit_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Deposit_vega_2eproto}, {}};

static void InitDefaultsscc_info_Epoch_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Epoch_default_instance_;
    new (ptr) ::vega::Epoch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Epoch_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Epoch_vega_2eproto}, {
      &scc_info_EpochTimestamps_vega_2eproto.base,
      &scc_info_Node_vega_2eproto.base,
      &scc_info_Delegation_vega_2eproto.base,}};

static void InitDefaultsscc_info_EpochData_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_EpochData_default_instance_;
    new (ptr) ::vega::EpochData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EpochData_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EpochData_vega_2eproto}, {}};

static void InitDefaultsscc_info_EpochParticipation_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_EpochParticipation_default_instance_;
    new (ptr) ::vega::EpochParticipation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EpochParticipation_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EpochParticipation_vega_2eproto}, {
      &scc_info_Epoch_vega_2eproto.base,}};

static void InitDefaultsscc_info_EpochTimestamps_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_EpochTimestamps_default_instance_;
    new (ptr) ::vega::EpochTimestamps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EpochTimestamps_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EpochTimestamps_vega_2eproto}, {}};

static void InitDefaultsscc_info_Erc20WithdrawExt_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Erc20WithdrawExt_default_instance_;
    new (ptr) ::vega::Erc20WithdrawExt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Erc20WithdrawExt_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Erc20WithdrawExt_vega_2eproto}, {}};

static void InitDefaultsscc_info_ErrorDetail_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ErrorDetail_default_instance_;
    new (ptr) ::vega::ErrorDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorDetail_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorDetail_vega_2eproto}, {}};

static void InitDefaultsscc_info_EthereumConfig_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_EthereumConfig_default_instance_;
    new (ptr) ::vega::EthereumConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthereumConfig_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EthereumConfig_vega_2eproto}, {}};

static void InitDefaultsscc_info_Fee_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Fee_default_instance_;
    new (ptr) ::vega::Fee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fee_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fee_vega_2eproto}, {}};

static void InitDefaultsscc_info_FinancialAmount_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_FinancialAmount_default_instance_;
    new (ptr) ::vega::FinancialAmount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinancialAmount_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FinancialAmount_vega_2eproto}, {}};

static void InitDefaultsscc_info_LedgerEntry_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LedgerEntry_default_instance_;
    new (ptr) ::vega::LedgerEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerEntry_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LedgerEntry_vega_2eproto}, {}};

static void InitDefaultsscc_info_LiquidityOrder_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityOrder_default_instance_;
    new (ptr) ::vega::LiquidityOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiquidityOrder_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiquidityOrder_vega_2eproto}, {}};

static void InitDefaultsscc_info_LiquidityOrderReference_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityOrderReference_default_instance_;
    new (ptr) ::vega::LiquidityOrderReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityOrderReference_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidityOrderReference_vega_2eproto}, {
      &scc_info_LiquidityOrder_vega_2eproto.base,}};

static void InitDefaultsscc_info_LiquidityProviderFeeShare_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityProviderFeeShare_default_instance_;
    new (ptr) ::vega::LiquidityProviderFeeShare();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiquidityProviderFeeShare_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiquidityProviderFeeShare_vega_2eproto}, {}};

static void InitDefaultsscc_info_LiquidityProvision_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityProvision_default_instance_;
    new (ptr) ::vega::LiquidityProvision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvision_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidityProvision_vega_2eproto}, {
      &scc_info_LiquidityOrderReference_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarginLevels_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarginLevels_default_instance_;
    new (ptr) ::vega::MarginLevels();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarginLevels_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarginLevels_vega_2eproto}, {}};

static void InitDefaultsscc_info_MarketData_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketData_default_instance_;
    new (ptr) ::vega::MarketData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MarketData_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MarketData_vega_2eproto}, {
      &scc_info_PriceMonitoringBounds_vega_2eproto.base,
      &scc_info_LiquidityProviderFeeShare_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketDepth_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketDepth_default_instance_;
    new (ptr) ::vega::MarketDepth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDepth_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketDepth_vega_2eproto}, {
      &scc_info_PriceLevel_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketDepthUpdate_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketDepthUpdate_default_instance_;
    new (ptr) ::vega::MarketDepthUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDepthUpdate_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketDepthUpdate_vega_2eproto}, {
      &scc_info_PriceLevel_vega_2eproto.base,}};

static void InitDefaultsscc_info_NetworkParameter_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NetworkParameter_default_instance_;
    new (ptr) ::vega::NetworkParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParameter_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkParameter_vega_2eproto}, {}};

static void InitDefaultsscc_info_Node_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Node_default_instance_;
    new (ptr) ::vega::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Node_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Node_vega_2eproto}, {
      &scc_info_EpochData_vega_2eproto.base,
      &scc_info_Delegation_vega_2eproto.base,}};

static void InitDefaultsscc_info_NodeData_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NodeData_default_instance_;
    new (ptr) ::vega::NodeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeData_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeData_vega_2eproto}, {}};

static void InitDefaultsscc_info_Order_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Order_default_instance_;
    new (ptr) ::vega::Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Order_vega_2eproto}, {
      &scc_info_PeggedOrder_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderCancellationConfirmation_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderCancellationConfirmation_default_instance_;
    new (ptr) ::vega::OrderCancellationConfirmation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderCancellationConfirmation_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderCancellationConfirmation_vega_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderConfirmation_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderConfirmation_default_instance_;
    new (ptr) ::vega::OrderConfirmation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OrderConfirmation_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OrderConfirmation_vega_2eproto}, {
      &scc_info_Order_vega_2eproto.base,
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_Party_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Party_default_instance_;
    new (ptr) ::vega::Party();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Party_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Party_vega_2eproto}, {
      &scc_info_Delegation_vega_2eproto.base,}};

static void InitDefaultsscc_info_PeggedOrder_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PeggedOrder_default_instance_;
    new (ptr) ::vega::PeggedOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeggedOrder_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeggedOrder_vega_2eproto}, {}};

static void InitDefaultsscc_info_Position_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Position_default_instance_;
    new (ptr) ::vega::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_vega_2eproto}, {}};

static void InitDefaultsscc_info_PositionTrade_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PositionTrade_default_instance_;
    new (ptr) ::vega::PositionTrade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionTrade_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionTrade_vega_2eproto}, {}};

static void InitDefaultsscc_info_Price_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Price_default_instance_;
    new (ptr) ::vega::Price();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Price_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Price_vega_2eproto}, {}};

static void InitDefaultsscc_info_PriceLevel_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PriceLevel_default_instance_;
    new (ptr) ::vega::PriceLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceLevel_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriceLevel_vega_2eproto}, {}};

static void InitDefaultsscc_info_PriceMonitoringBounds_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PriceMonitoringBounds_default_instance_;
    new (ptr) ::vega::PriceMonitoringBounds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceMonitoringBounds_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PriceMonitoringBounds_vega_2eproto}, {
      &scc_info_PriceMonitoringTrigger_markets_2eproto.base,}};

static void InitDefaultsscc_info_RewardDetails_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RewardDetails_default_instance_;
    new (ptr) ::vega::RewardDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardDetails_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RewardDetails_vega_2eproto}, {}};

static void InitDefaultsscc_info_RewardPerAssetDetail_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RewardPerAssetDetail_default_instance_;
    new (ptr) ::vega::RewardPerAssetDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewardPerAssetDetail_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RewardPerAssetDetail_vega_2eproto}, {
      &scc_info_RewardDetails_vega_2eproto.base,}};

static void InitDefaultsscc_info_RiskFactor_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskFactor_default_instance_;
    new (ptr) ::vega::RiskFactor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RiskFactor_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RiskFactor_vega_2eproto}, {}};

static void InitDefaultsscc_info_RiskResult_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskResult_default_instance_;
    new (ptr) ::vega::RiskResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RiskResult_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RiskResult_vega_2eproto}, {
      &scc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto.base,
      &scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto.base,}};

static void InitDefaultsscc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_;
    new (ptr) ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto}, {
      &scc_info_RiskFactor_vega_2eproto.base,}};

static void InitDefaultsscc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskResult_RiskFactorsEntry_DoNotUse_default_instance_;
    new (ptr) ::vega::RiskResult_RiskFactorsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto}, {
      &scc_info_RiskFactor_vega_2eproto.base,}};

static void InitDefaultsscc_info_Timestamp_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Timestamp_default_instance_;
    new (ptr) ::vega::Timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Timestamp_vega_2eproto}, {}};

static void InitDefaultsscc_info_Trade_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Trade_default_instance_;
    new (ptr) ::vega::Trade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trade_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trade_vega_2eproto}, {
      &scc_info_Fee_vega_2eproto.base,}};

static void InitDefaultsscc_info_TradeSet_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TradeSet_default_instance_;
    new (ptr) ::vega::TradeSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeSet_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradeSet_vega_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_Transfer_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Transfer_default_instance_;
    new (ptr) ::vega::Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transfer_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transfer_vega_2eproto}, {
      &scc_info_FinancialAmount_vega_2eproto.base,}};

static void InitDefaultsscc_info_TransferBalance_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TransferBalance_default_instance_;
    new (ptr) ::vega::TransferBalance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferBalance_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferBalance_vega_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_TransferRequest_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TransferRequest_default_instance_;
    new (ptr) ::vega::TransferRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferRequest_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferRequest_vega_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_TransferResponse_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TransferResponse_default_instance_;
    new (ptr) ::vega::TransferResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransferResponse_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransferResponse_vega_2eproto}, {
      &scc_info_LedgerEntry_vega_2eproto.base,
      &scc_info_TransferBalance_vega_2eproto.base,}};

static void InitDefaultsscc_info_WithdrawExt_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_WithdrawExt_default_instance_;
    new (ptr) ::vega::WithdrawExt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawExt_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WithdrawExt_vega_2eproto}, {
      &scc_info_Erc20WithdrawExt_vega_2eproto.base,}};

static void InitDefaultsscc_info_Withdrawal_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Withdrawal_default_instance_;
    new (ptr) ::vega::Withdrawal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Withdrawal_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Withdrawal_vega_2eproto}, {
      &scc_info_WithdrawExt_vega_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vega_2eproto[51];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vega_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vega_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vega_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Price, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Price, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Timestamp, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Party, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Party, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Party, delegations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, market_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, short__),
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, long__),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, updated_timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, risk_factors_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, next_update_timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, predicted_next_risk_factors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PeggedOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PeggedOrder, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::PeggedOrder, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Order, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, side_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, price_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, size_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, remaining_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, time_in_force_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, created_at_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, expires_at_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, reason_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, updated_at_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, version_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, batch_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, pegged_order_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, liquidity_provision_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellationConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellationConfirmation, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, order_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, trades_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, passive_orders_affected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, indicative_price_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, indicative_volume_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, auction_start_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, auction_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Trade, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, price_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, size_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyer_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, seller_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, aggressor_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buy_order_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, sell_order_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyer_fee_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, seller_fee_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyer_auction_batch_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, seller_auction_batch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Fee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Fee, maker_fee_),
  PROTOBUF_FIELD_OFFSET(::vega::Fee, infrastructure_fee_),
  PROTOBUF_FIELD_OFFSET(::vega::Fee, liquidity_fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TradeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TradeSet, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Candle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Candle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, datetime_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, high_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, low_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, open_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, close_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, volume_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, price_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, number_of_orders_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, buy_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, sell_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, buy_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, sell_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Position, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, open_volume_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, realised_pnl_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, unrealised_pnl_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, average_entry_price_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PositionTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PositionTrade, volume_),
  PROTOBUF_FIELD_OFFSET(::vega::PositionTrade, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, credited_timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, created_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, ref_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, expiry_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, created_timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, withdrawn_timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawExt, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawExt, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawExt, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Erc20WithdrawExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Erc20WithdrawExt, receiver_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Account, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, owner_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, balance_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::FinancialAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::FinancialAmount, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::FinancialAmount, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, owner_),
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, min_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, from_account_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, to_account_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, min_amount_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, from_account_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, to_account_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, type_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TransferBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TransferBalance, account_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferBalance, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponse, transfers_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponse, balances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, maintenance_margin_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, search_level_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, initial_margin_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, collateral_release_level_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, mark_price_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, best_bid_price_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, best_bid_volume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, best_offer_price_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, best_offer_volume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, best_static_bid_price_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, best_static_bid_volume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, best_static_offer_price_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, best_static_offer_volume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, mid_price_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, static_mid_price_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, market_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, open_interest_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, auction_end_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, auction_start_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, indicative_price_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, indicative_volume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, market_trading_mode_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, trigger_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, extension_trigger_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, target_stake_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, supplied_stake_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, price_monitoring_bounds_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, market_value_proxy_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, liquidity_provider_fee_share_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProviderFeeShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProviderFeeShare, party_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProviderFeeShare, equity_like_share_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProviderFeeShare, average_entry_valuation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, min_valid_price_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, max_valid_price_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, trigger_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, reference_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, code_),
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, message_),
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NetworkParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NetworkParameter, key_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkParameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, proportion_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrderReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrderReference, order_id_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrderReference, liquidity_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, id_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, created_at_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, updated_at_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, market_id_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, commitment_amount_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, fee_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, sells_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, buys_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, version_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, status_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, network_id_),
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, chain_id_),
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, bridge_address_),
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, confirmations_),
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, staking_bridge_addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::EpochTimestamps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::EpochTimestamps, start_time_),
  PROTOBUF_FIELD_OFFSET(::vega::EpochTimestamps, end_time_),
  PROTOBUF_FIELD_OFFSET(::vega::EpochTimestamps, first_block_),
  PROTOBUF_FIELD_OFFSET(::vega::EpochTimestamps, last_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Epoch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Epoch, seq_),
  PROTOBUF_FIELD_OFFSET(::vega::Epoch, timestamps_),
  PROTOBUF_FIELD_OFFSET(::vega::Epoch, validators_),
  PROTOBUF_FIELD_OFFSET(::vega::Epoch, delegations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::EpochParticipation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::EpochParticipation, epoch_),
  PROTOBUF_FIELD_OFFSET(::vega::EpochParticipation, offline_),
  PROTOBUF_FIELD_OFFSET(::vega::EpochParticipation, online_),
  PROTOBUF_FIELD_OFFSET(::vega::EpochParticipation, total_rewards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::EpochData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::EpochData, total_),
  PROTOBUF_FIELD_OFFSET(::vega::EpochData, offline_),
  PROTOBUF_FIELD_OFFSET(::vega::EpochData, online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Node, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, pub_key_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, info_url_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, location_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, staked_by_operator_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, staked_by_delegates_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, staked_total_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, max_intended_stake_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, pending_stake_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, epoch_data_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Node, delagations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NodeData, staked_total_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeData, total_nodes_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeData, inactive_nodes_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeData, validating_nodes_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeData, uptime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Delegation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Delegation, party_),
  PROTOBUF_FIELD_OFFSET(::vega::Delegation, node_id_),
  PROTOBUF_FIELD_OFFSET(::vega::Delegation, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::Delegation, epoch_seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RewardDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RewardDetails, asset_id_),
  PROTOBUF_FIELD_OFFSET(::vega::RewardDetails, party_id_),
  PROTOBUF_FIELD_OFFSET(::vega::RewardDetails, epoch_),
  PROTOBUF_FIELD_OFFSET(::vega::RewardDetails, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::RewardDetails, percentage_of_total_),
  PROTOBUF_FIELD_OFFSET(::vega::RewardDetails, received_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RewardPerAssetDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RewardPerAssetDetail, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::RewardPerAssetDetail, details_),
  PROTOBUF_FIELD_OFFSET(::vega::RewardPerAssetDetail, total_for_asset_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::Price)},
  { 6, -1, sizeof(::vega::Timestamp)},
  { 12, -1, sizeof(::vega::Party)},
  { 19, -1, sizeof(::vega::RiskFactor)},
  { 27, 34, sizeof(::vega::RiskResult_RiskFactorsEntry_DoNotUse)},
  { 36, 43, sizeof(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse)},
  { 45, -1, sizeof(::vega::RiskResult)},
  { 54, -1, sizeof(::vega::PeggedOrder)},
  { 61, -1, sizeof(::vega::Order)},
  { 85, -1, sizeof(::vega::OrderCancellationConfirmation)},
  { 91, -1, sizeof(::vega::OrderConfirmation)},
  { 99, -1, sizeof(::vega::AuctionIndicativeState)},
  { 109, -1, sizeof(::vega::Trade)},
  { 129, -1, sizeof(::vega::Fee)},
  { 137, -1, sizeof(::vega::TradeSet)},
  { 143, -1, sizeof(::vega::Candle)},
  { 156, -1, sizeof(::vega::PriceLevel)},
  { 164, -1, sizeof(::vega::MarketDepth)},
  { 173, -1, sizeof(::vega::MarketDepthUpdate)},
  { 182, -1, sizeof(::vega::Position)},
  { 194, -1, sizeof(::vega::PositionTrade)},
  { 201, -1, sizeof(::vega::Deposit)},
  { 214, -1, sizeof(::vega::Withdrawal)},
  { 230, -1, sizeof(::vega::WithdrawExt)},
  { 237, -1, sizeof(::vega::Erc20WithdrawExt)},
  { 243, -1, sizeof(::vega::Account)},
  { 254, -1, sizeof(::vega::FinancialAmount)},
  { 261, -1, sizeof(::vega::Transfer)},
  { 270, -1, sizeof(::vega::TransferRequest)},
  { 281, -1, sizeof(::vega::LedgerEntry)},
  { 292, -1, sizeof(::vega::TransferBalance)},
  { 299, -1, sizeof(::vega::TransferResponse)},
  { 306, -1, sizeof(::vega::MarginLevels)},
  { 319, -1, sizeof(::vega::MarketData)},
  { 350, -1, sizeof(::vega::LiquidityProviderFeeShare)},
  { 358, -1, sizeof(::vega::PriceMonitoringBounds)},
  { 367, -1, sizeof(::vega::ErrorDetail)},
  { 375, -1, sizeof(::vega::NetworkParameter)},
  { 382, -1, sizeof(::vega::LiquidityOrder)},
  { 390, -1, sizeof(::vega::LiquidityOrderReference)},
  { 397, -1, sizeof(::vega::LiquidityProvision)},
  { 414, -1, sizeof(::vega::EthereumConfig)},
  { 424, -1, sizeof(::vega::EpochTimestamps)},
  { 433, -1, sizeof(::vega::Epoch)},
  { 442, -1, sizeof(::vega::EpochParticipation)},
  { 451, -1, sizeof(::vega::EpochData)},
  { 459, -1, sizeof(::vega::Node)},
  { 476, -1, sizeof(::vega::NodeData)},
  { 486, -1, sizeof(::vega::Delegation)},
  { 495, -1, sizeof(::vega::RewardDetails)},
  { 506, -1, sizeof(::vega::RewardPerAssetDetail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Price_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Party_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RiskFactor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RiskResult_RiskFactorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RiskResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PeggedOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_OrderCancellationConfirmation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_OrderConfirmation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_AuctionIndicativeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Trade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Fee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TradeSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Candle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PriceLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_MarketDepth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_MarketDepthUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PositionTrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Deposit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Withdrawal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_WithdrawExt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Erc20WithdrawExt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_FinancialAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TransferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LedgerEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TransferBalance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TransferResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_MarginLevels_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_MarketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LiquidityProviderFeeShare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PriceMonitoringBounds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ErrorDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_NetworkParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LiquidityOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LiquidityOrderReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LiquidityProvision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_EthereumConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_EpochTimestamps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Epoch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_EpochParticipation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_EpochData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_NodeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Delegation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RewardDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RewardPerAssetDetail_default_instance_),
};

const char descriptor_table_protodef_vega_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nvega.proto\022\004vega\0326github.com/mwitkow/g"
  "o-proto-validators/validator.proto\032\rmark"
  "ets.proto\032\014assets.proto\"\035\n\005Price\022\024\n\005valu"
  "e\030\001 \001(\004R\005value\"!\n\tTimestamp\022\024\n\005value\030\001 \001"
  "(\003R\005value\"S\n\005Party\022\026\n\002id\030\001 \001(\tB\006\342\337\037\002 \001R\002"
  "id\0222\n\013delegations\030\002 \003(\0132\020.vega.Delegatio"
  "nR\013delegations\"N\n\nRiskFactor\022\026\n\006market\030\001"
  " \001(\tR\006market\022\024\n\005short\030\002 \001(\001R\005short\022\022\n\004lo"
  "ng\030\003 \001(\001R\004long\"\323\003\n\nRiskResult\022+\n\021updated"
  "_timestamp\030\001 \001(\003R\020updatedTimestamp\022D\n\014ri"
  "sk_factors\030\002 \003(\0132!.vega.RiskResult.RiskF"
  "actorsEntryR\013riskFactors\0222\n\025next_update_"
  "timestamp\030\003 \001(\003R\023nextUpdateTimestamp\022m\n\033"
  "predicted_next_risk_factors\030\004 \003(\0132..vega"
  ".RiskResult.PredictedNextRiskFactorsEntr"
  "yR\030predictedNextRiskFactors\032P\n\020RiskFacto"
  "rsEntry\022\020\n\003key\030\001 \001(\tR\003key\022&\n\005value\030\002 \001(\013"
  "2\020.vega.RiskFactorR\005value:\0028\001\032]\n\035Predict"
  "edNextRiskFactorsEntry\022\020\n\003key\030\001 \001(\tR\003key"
  "\022&\n\005value\030\002 \001(\0132\020.vega.RiskFactorR\005value"
  ":\0028\001\"Z\n\013PeggedOrder\0223\n\treference\030\001 \001(\0162\025"
  ".vega.PeggedReferenceR\treference\022\026\n\006offs"
  "et\030\002 \001(\003R\006offset\"\342\010\n\005Order\022\016\n\002id\030\001 \001(\tR\002"
  "id\022\033\n\tmarket_id\030\002 \001(\tR\010marketId\022\031\n\010party"
  "_id\030\003 \001(\tR\007partyId\022\036\n\004side\030\004 \001(\0162\n.vega."
  "SideR\004side\022\024\n\005price\030\005 \001(\004R\005price\022\022\n\004size"
  "\030\006 \001(\004R\004size\022\034\n\tremaining\030\007 \001(\004R\tremaini"
  "ng\022;\n\rtime_in_force\030\010 \001(\0162\027.vega.Order.T"
  "imeInForceR\013timeInForce\022$\n\004type\030\t \001(\0162\020."
  "vega.Order.TypeR\004type\022\035\n\ncreated_at\030\n \001("
  "\003R\tcreatedAt\022*\n\006status\030\013 \001(\0162\022.vega.Orde"
  "r.StatusR\006status\022\035\n\nexpires_at\030\014 \001(\003R\tex"
  "piresAt\022\034\n\treference\030\r \001(\tR\treference\022(\n"
  "\006reason\030\016 \001(\0162\020.vega.OrderErrorR\006reason\022"
  "\035\n\nupdated_at\030\017 \001(\003R\tupdatedAt\022\030\n\007versio"
  "n\030\020 \001(\004R\007version\022\031\n\010batch_id\030\021 \001(\004R\007batc"
  "hId\0224\n\014pegged_order\030\022 \001(\0132\021.vega.PeggedO"
  "rderR\013peggedOrder\0224\n\026liquidity_provision"
  "_id\030\023 \001(\tR\024liquidityProvisionId\"\266\001\n\013Time"
  "InForce\022\035\n\031TIME_IN_FORCE_UNSPECIFIED\020\000\022\025"
  "\n\021TIME_IN_FORCE_GTC\020\001\022\025\n\021TIME_IN_FORCE_G"
  "TT\020\002\022\025\n\021TIME_IN_FORCE_IOC\020\003\022\025\n\021TIME_IN_F"
  "ORCE_FOK\020\004\022\025\n\021TIME_IN_FORCE_GFA\020\005\022\025\n\021TIM"
  "E_IN_FORCE_GFN\020\006\"O\n\004Type\022\024\n\020TYPE_UNSPECI"
  "FIED\020\000\022\016\n\nTYPE_LIMIT\020\001\022\017\n\013TYPE_MARKET\020\002\022"
  "\020\n\014TYPE_NETWORK\020\003\"\311\001\n\006Status\022\026\n\022STATUS_U"
  "NSPECIFIED\020\000\022\021\n\rSTATUS_ACTIVE\020\001\022\022\n\016STATU"
  "S_EXPIRED\020\002\022\024\n\020STATUS_CANCELLED\020\003\022\022\n\016STA"
  "TUS_STOPPED\020\004\022\021\n\rSTATUS_FILLED\020\005\022\023\n\017STAT"
  "US_REJECTED\020\006\022\033\n\027STATUS_PARTIALLY_FILLED"
  "\020\007\022\021\n\rSTATUS_PARKED\020\010\"B\n\035OrderCancellati"
  "onConfirmation\022!\n\005order\030\001 \001(\0132\013.vega.Ord"
  "erR\005order\"\240\001\n\021OrderConfirmation\022!\n\005order"
  "\030\001 \001(\0132\013.vega.OrderR\005order\022#\n\006trades\030\002 \003"
  "(\0132\013.vega.TradeR\006trades\022C\n\027passive_order"
  "s_affected\030\003 \003(\0132\013.vega.OrderR\025passiveOr"
  "dersAffected\"\323\001\n\026AuctionIndicativeState\022"
  "\033\n\tmarket_id\030\001 \001(\tR\010marketId\022)\n\020indicati"
  "ve_price\030\002 \001(\004R\017indicativePrice\022+\n\021indic"
  "ative_volume\030\003 \001(\004R\020indicativeVolume\022#\n\r"
  "auction_start\030\004 \001(\003R\014auctionStart\022\037\n\013auc"
  "tion_end\030\005 \001(\003R\nauctionEnd\"\333\004\n\005Trade\022\016\n\002"
  "id\030\001 \001(\tR\002id\022\033\n\tmarket_id\030\002 \001(\tR\010marketI"
  "d\022\024\n\005price\030\003 \001(\004R\005price\022\022\n\004size\030\004 \001(\004R\004s"
  "ize\022\024\n\005buyer\030\005 \001(\tR\005buyer\022\026\n\006seller\030\006 \001("
  "\tR\006seller\022(\n\taggressor\030\007 \001(\0162\n.vega.Side"
  "R\taggressor\022\033\n\tbuy_order\030\010 \001(\tR\010buyOrder"
  "\022\035\n\nsell_order\030\t \001(\tR\tsellOrder\022\034\n\ttimes"
  "tamp\030\n \001(\003R\ttimestamp\022$\n\004type\030\013 \001(\0162\020.ve"
  "ga.Trade.TypeR\004type\022&\n\tbuyer_fee\030\014 \001(\0132\t"
  ".vega.FeeR\010buyerFee\022(\n\nseller_fee\030\r \001(\0132"
  "\t.vega.FeeR\tsellerFee\022.\n\023buyer_auction_b"
  "atch\030\016 \001(\004R\021buyerAuctionBatch\0220\n\024seller_"
  "auction_batch\030\017 \001(\004R\022sellerAuctionBatch\""
  "o\n\004Type\022\024\n\020TYPE_UNSPECIFIED\020\000\022\020\n\014TYPE_DE"
  "FAULT\020\001\022\037\n\033TYPE_NETWORK_CLOSE_OUT_GOOD\020\002"
  "\022\036\n\032TYPE_NETWORK_CLOSE_OUT_BAD\020\003\"v\n\003Fee\022"
  "\033\n\tmaker_fee\030\001 \001(\004R\010makerFee\022-\n\022infrastr"
  "ucture_fee\030\002 \001(\004R\021infrastructureFee\022#\n\rl"
  "iquidity_fee\030\003 \001(\004R\014liquidityFee\"/\n\010Trad"
  "eSet\022#\n\006trades\030\001 \003(\0132\013.vega.TradeR\006trade"
  "s\"\326\001\n\006Candle\022\034\n\ttimestamp\030\001 \001(\003R\ttimesta"
  "mp\022\032\n\010datetime\030\002 \001(\tR\010datetime\022\022\n\004high\030\003"
  " \001(\004R\004high\022\020\n\003low\030\004 \001(\004R\003low\022\022\n\004open\030\005 \001"
  "(\004R\004open\022\024\n\005close\030\006 \001(\004R\005close\022\026\n\006volume"
  "\030\007 \001(\004R\006volume\022*\n\010interval\030\010 \001(\0162\016.vega."
  "IntervalR\010interval\"d\n\nPriceLevel\022\024\n\005pric"
  "e\030\001 \001(\004R\005price\022(\n\020number_of_orders\030\002 \001(\004"
  "R\016numberOfOrders\022\026\n\006volume\030\003 \001(\004R\006volume"
  "\"\235\001\n\013MarketDepth\022\033\n\tmarket_id\030\001 \001(\tR\010mar"
  "ketId\022\"\n\003buy\030\002 \003(\0132\020.vega.PriceLevelR\003bu"
  "y\022$\n\004sell\030\003 \003(\0132\020.vega.PriceLevelR\004sell\022"
  "\'\n\017sequence_number\030\004 \001(\004R\016sequenceNumber"
  "\"\243\001\n\021MarketDepthUpdate\022\033\n\tmarket_id\030\001 \001("
  "\tR\010marketId\022\"\n\003buy\030\002 \003(\0132\020.vega.PriceLev"
  "elR\003buy\022$\n\004sell\030\003 \003(\0132\020.vega.PriceLevelR"
  "\004sell\022\'\n\017sequence_number\030\004 \001(\004R\016sequence"
  "Number\"\374\001\n\010Position\022\033\n\tmarket_id\030\001 \001(\tR\010"
  "marketId\022\031\n\010party_id\030\002 \001(\tR\007partyId\022\037\n\013o"
  "pen_volume\030\003 \001(\003R\nopenVolume\022!\n\014realised"
  "_pnl\030\004 \001(\003R\013realisedPnl\022%\n\016unrealised_pn"
  "l\030\005 \001(\003R\runrealisedPnl\022.\n\023average_entry_"
  "price\030\006 \001(\004R\021averageEntryPrice\022\035\n\nupdate"
  "d_at\030\007 \001(\003R\tupdatedAt\"=\n\rPositionTrade\022\026"
  "\n\006volume\030\001 \001(\003R\006volume\022\024\n\005price\030\002 \001(\004R\005p"
  "rice\"\344\002\n\007Deposit\022\016\n\002id\030\001 \001(\tR\002id\022,\n\006stat"
  "us\030\002 \001(\0162\024.vega.Deposit.StatusR\006status\022\031"
  "\n\010party_id\030\003 \001(\tR\007partyId\022\024\n\005asset\030\004 \001(\t"
  "R\005asset\022\026\n\006amount\030\005 \001(\tR\006amount\022\027\n\007tx_ha"
  "sh\030\006 \001(\tR\006txHash\022-\n\022credited_timestamp\030\007"
  " \001(\003R\021creditedTimestamp\022+\n\021created_times"
  "tamp\030\010 \001(\003R\020createdTimestamp\"]\n\006Status\022\026"
  "\n\022STATUS_UNSPECIFIED\020\000\022\017\n\013STATUS_OPEN\020\001\022"
  "\024\n\020STATUS_CANCELLED\020\002\022\024\n\020STATUS_FINALIZE"
  "D\020\003\"\273\003\n\nWithdrawal\022\016\n\002id\030\001 \001(\tR\002id\022\031\n\010pa"
  "rty_id\030\002 \001(\tR\007partyId\022\026\n\006amount\030\003 \001(\004R\006a"
  "mount\022\024\n\005asset\030\004 \001(\tR\005asset\022/\n\006status\030\005 "
  "\001(\0162\027.vega.Withdrawal.StatusR\006status\022\020\n\003"
  "ref\030\006 \001(\tR\003ref\022\026\n\006expiry\030\007 \001(\003R\006expiry\022\027"
  "\n\007tx_hash\030\010 \001(\tR\006txHash\022+\n\021created_times"
  "tamp\030\t \001(\003R\020createdTimestamp\022/\n\023withdraw"
  "n_timestamp\030\n \001(\003R\022withdrawnTimestamp\022#\n"
  "\003ext\030\013 \001(\0132\021.vega.WithdrawExtR\003ext\"]\n\006St"
  "atus\022\026\n\022STATUS_UNSPECIFIED\020\000\022\017\n\013STATUS_O"
  "PEN\020\001\022\024\n\020STATUS_CANCELLED\020\002\022\024\n\020STATUS_FI"
  "NALIZED\020\003\"D\n\013WithdrawExt\022.\n\005erc20\030\001 \001(\0132"
  "\026.vega.Erc20WithdrawExtH\000R\005erc20B\005\n\003ext\""
  "=\n\020Erc20WithdrawExt\022)\n\020receiver_address\030"
  "\001 \001(\tR\017receiverAddress\"\243\001\n\007Account\022\016\n\002id"
  "\030\001 \001(\tR\002id\022\024\n\005owner\030\002 \001(\tR\005owner\022\030\n\007bala"
  "nce\030\003 \001(\004R\007balance\022\024\n\005asset\030\004 \001(\tR\005asset"
  "\022\033\n\tmarket_id\030\005 \001(\tR\010marketId\022%\n\004type\030\006 "
  "\001(\0162\021.vega.AccountTypeR\004type\"\?\n\017Financia"
  "lAmount\022\026\n\006amount\030\001 \001(\004R\006amount\022\024\n\005asset"
  "\030\002 \001(\tR\005asset\"\226\001\n\010Transfer\022\024\n\005owner\030\001 \001("
  "\tR\005owner\022-\n\006amount\030\002 \001(\0132\025.vega.Financia"
  "lAmountR\006amount\022&\n\004type\030\003 \001(\0162\022.vega.Tra"
  "nsferTypeR\004type\022\035\n\nmin_amount\030\004 \001(\004R\tmin"
  "Amount\"\334\001\n\017TransferRequest\0220\n\014from_accou"
  "nt\030\001 \003(\0132\r.vega.AccountR\013fromAccount\022,\n\n"
  "to_account\030\002 \003(\0132\r.vega.AccountR\ttoAccou"
  "nt\022\026\n\006amount\030\003 \001(\004R\006amount\022\035\n\nmin_amount"
  "\030\004 \001(\004R\tminAmount\022\024\n\005asset\030\005 \001(\tR\005asset\022"
  "\034\n\treference\030\006 \001(\tR\treference\"\267\001\n\013Ledger"
  "Entry\022!\n\014from_account\030\001 \001(\tR\013fromAccount"
  "\022\035\n\nto_account\030\002 \001(\tR\ttoAccount\022\026\n\006amoun"
  "t\030\003 \001(\004R\006amount\022\034\n\treference\030\004 \001(\tR\trefe"
  "rence\022\022\n\004type\030\005 \001(\tR\004type\022\034\n\ttimestamp\030\006"
  " \001(\003R\ttimestamp\"T\n\017TransferBalance\022\'\n\007ac"
  "count\030\001 \001(\0132\r.vega.AccountR\007account\022\030\n\007b"
  "alance\030\002 \001(\004R\007balance\"v\n\020TransferRespons"
  "e\022/\n\ttransfers\030\001 \003(\0132\021.vega.LedgerEntryR"
  "\ttransfers\0221\n\010balances\030\002 \003(\0132\025.vega.Tran"
  "sferBalanceR\010balances\"\255\002\n\014MarginLevels\022-"
  "\n\022maintenance_margin\030\001 \001(\004R\021maintenanceM"
  "argin\022!\n\014search_level\030\002 \001(\004R\013searchLevel"
  "\022%\n\016initial_margin\030\003 \001(\004R\rinitialMargin\022"
  "8\n\030collateral_release_level\030\004 \001(\004R\026colla"
  "teralReleaseLevel\022\031\n\010party_id\030\005 \001(\tR\007par"
  "tyId\022\033\n\tmarket_id\030\006 \001(\tR\010marketId\022\024\n\005ass"
  "et\030\007 \001(\tR\005asset\022\034\n\ttimestamp\030\010 \001(\003R\ttime"
  "stamp\"\323\t\n\nMarketData\022\035\n\nmark_price\030\001 \001(\004"
  "R\tmarkPrice\022$\n\016best_bid_price\030\002 \001(\004R\014bes"
  "tBidPrice\022&\n\017best_bid_volume\030\003 \001(\004R\rbest"
  "BidVolume\022(\n\020best_offer_price\030\004 \001(\004R\016bes"
  "tOfferPrice\022*\n\021best_offer_volume\030\005 \001(\004R\017"
  "bestOfferVolume\0221\n\025best_static_bid_price"
  "\030\006 \001(\004R\022bestStaticBidPrice\0223\n\026best_stati"
  "c_bid_volume\030\007 \001(\004R\023bestStaticBidVolume\022"
  "5\n\027best_static_offer_price\030\010 \001(\004R\024bestSt"
  "aticOfferPrice\0227\n\030best_static_offer_volu"
  "me\030\t \001(\004R\025bestStaticOfferVolume\022\033\n\tmid_p"
  "rice\030\n \001(\004R\010midPrice\022(\n\020static_mid_price"
  "\030\013 \001(\004R\016staticMidPrice\022\026\n\006market\030\014 \001(\tR\006"
  "market\022\034\n\ttimestamp\030\r \001(\003R\ttimestamp\022#\n\r"
  "open_interest\030\016 \001(\004R\014openInterest\022\037\n\013auc"
  "tion_end\030\017 \001(\003R\nauctionEnd\022#\n\rauction_st"
  "art\030\020 \001(\003R\014auctionStart\022)\n\020indicative_pr"
  "ice\030\021 \001(\004R\017indicativePrice\022+\n\021indicative"
  "_volume\030\022 \001(\004R\020indicativeVolume\022H\n\023marke"
  "t_trading_mode\030\023 \001(\0162\030.vega.Market.Tradi"
  "ngModeR\021marketTradingMode\022.\n\007trigger\030\024 \001"
  "(\0162\024.vega.AuctionTriggerR\007trigger\022A\n\021ext"
  "ension_trigger\030\025 \001(\0162\024.vega.AuctionTrigg"
  "erR\020extensionTrigger\022!\n\014target_stake\030\026 \001"
  "(\tR\013targetStake\022%\n\016supplied_stake\030\027 \001(\tR"
  "\rsuppliedStake\022S\n\027price_monitoring_bound"
  "s\030\030 \003(\0132\033.vega.PriceMonitoringBoundsR\025pr"
  "iceMonitoringBounds\022,\n\022market_value_prox"
  "y\030\031 \001(\tR\020marketValueProxy\022`\n\034liquidity_p"
  "rovider_fee_share\030\032 \003(\0132\037.vega.Liquidity"
  "ProviderFeeShareR\031liquidityProviderFeeSh"
  "are\"\225\001\n\031LiquidityProviderFeeShare\022\024\n\005par"
  "ty\030\001 \001(\tR\005party\022*\n\021equity_like_share\030\002 \001"
  "(\tR\017equityLikeShare\0226\n\027average_entry_val"
  "uation\030\003 \001(\tR\025averageEntryValuation\"\310\001\n\025"
  "PriceMonitoringBounds\022&\n\017min_valid_price"
  "\030\001 \001(\004R\rminValidPrice\022&\n\017max_valid_price"
  "\030\002 \001(\004R\rmaxValidPrice\0226\n\007trigger\030\003 \001(\0132\034"
  ".vega.PriceMonitoringTriggerR\007trigger\022\'\n"
  "\017reference_price\030\004 \001(\001R\016referencePrice\"Q"
  "\n\013ErrorDetail\022\022\n\004code\030\001 \001(\005R\004code\022\030\n\007mes"
  "sage\030\002 \001(\tR\007message\022\024\n\005inner\030\003 \001(\tR\005inne"
  "r\":\n\020NetworkParameter\022\020\n\003key\030\001 \001(\tR\003key\022"
  "\024\n\005value\030\002 \001(\tR\005value\"}\n\016LiquidityOrder\022"
  "3\n\treference\030\001 \001(\0162\025.vega.PeggedReferenc"
  "eR\treference\022\036\n\nproportion\030\002 \001(\rR\npropor"
  "tion\022\026\n\006offset\030\003 \001(\003R\006offset\"s\n\027Liquidit"
  "yOrderReference\022\031\n\010order_id\030\001 \001(\tR\007order"
  "Id\022=\n\017liquidity_order\030\002 \001(\0132\024.vega.Liqui"
  "dityOrderR\016liquidityOrder\"\332\004\n\022LiquidityP"
  "rovision\022\016\n\002id\030\001 \001(\tR\002id\022\031\n\010party_id\030\002 \001"
  "(\tR\007partyId\022\035\n\ncreated_at\030\003 \001(\003R\tcreated"
  "At\022\035\n\nupdated_at\030\004 \001(\003R\tupdatedAt\022#\n\tmar"
  "ket_id\030\005 \001(\tB\006\342\337\037\002X\001R\010marketId\022+\n\021commit"
  "ment_amount\030\006 \001(\004R\020commitmentAmount\022\020\n\003f"
  "ee\030\007 \001(\tR\003fee\0223\n\005sells\030\010 \003(\0132\035.vega.Liqu"
  "idityOrderReferenceR\005sells\0221\n\004buys\030\t \003(\013"
  "2\035.vega.LiquidityOrderReferenceR\004buys\022\030\n"
  "\007version\030\n \001(\tR\007version\0227\n\006status\030\013 \001(\0162"
  "\037.vega.LiquidityProvision.StatusR\006status"
  "\022\034\n\treference\030\014 \001(\tR\treference\"\235\001\n\006Statu"
  "s\022\026\n\022STATUS_UNSPECIFIED\020\000\022\021\n\rSTATUS_ACTI"
  "VE\020\001\022\022\n\016STATUS_STOPPED\020\002\022\024\n\020STATUS_CANCE"
  "LLED\020\003\022\023\n\017STATUS_REJECTED\020\004\022\025\n\021STATUS_UN"
  "DEPLOYED\020\005\022\022\n\016STATUS_PENDING\020\006\"\321\001\n\016Ether"
  "eumConfig\022\035\n\nnetwork_id\030\001 \001(\tR\tnetworkId"
  "\022\031\n\010chain_id\030\002 \001(\tR\007chainId\022%\n\016bridge_ad"
  "dress\030\003 \001(\tR\rbridgeAddress\022$\n\rconfirmati"
  "ons\030\004 \001(\rR\rconfirmations\0228\n\030staking_brid"
  "ge_addresses\030\005 \003(\tR\026stakingBridgeAddress"
  "es\"\213\001\n\017EpochTimestamps\022\035\n\nstart_time\030\001 \001"
  "(\003R\tstartTime\022\031\n\010end_time\030\002 \001(\003R\007endTime"
  "\022\037\n\013first_block\030\003 \001(\004R\nfirstBlock\022\035\n\nlas"
  "t_block\030\004 \001(\004R\tlastBlock\"\270\001\n\005Epoch\022\020\n\003se"
  "q\030\001 \001(\004R\003seq\022=\n\ntimestamps\030\002 \001(\0132\025.vega."
  "EpochTimestampsB\006\342\337\037\002 \001R\ntimestamps\022*\n\nv"
  "alidators\030\003 \003(\0132\n.vega.NodeR\nvalidators\022"
  "2\n\013delegations\030\004 \003(\0132\020.vega.DelegationR\013"
  "delegations\"\226\001\n\022EpochParticipation\022)\n\005ep"
  "och\030\001 \001(\0132\013.vega.EpochB\006\342\337\037\002X\001R\005epoch\022\030\n"
  "\007offline\030\002 \001(\004R\007offline\022\026\n\006online\030\003 \001(\004R"
  "\006online\022#\n\rtotal_rewards\030\004 \001(\001R\014totalRew"
  "ards\"S\n\tEpochData\022\024\n\005total\030\001 \001(\005R\005total\022"
  "\030\n\007offline\030\002 \001(\005R\007offline\022\026\n\006online\030\003 \001("
  "\005R\006online\"\340\003\n\004Node\022\016\n\002id\030\001 \001(\tR\002id\022\037\n\007pu"
  "b_key\030\002 \001(\tB\006\342\337\037\002X\001R\006pubKey\022\031\n\010info_url\030"
  "\003 \001(\tR\007infoUrl\022\032\n\010location\030\004 \001(\tR\010locati"
  "on\022,\n\022staked_by_operator\030\005 \001(\tR\020stakedBy"
  "Operator\022.\n\023staked_by_delegates\030\006 \001(\tR\021s"
  "takedByDelegates\022!\n\014staked_total\030\007 \001(\tR\013"
  "stakedTotal\022,\n\022max_intended_stake\030\010 \001(\tR"
  "\020maxIntendedStake\022#\n\rpending_stake\030\t \001(\t"
  "R\014pendingStake\0226\n\nepoch_data\030\n \001(\0132\017.veg"
  "a.EpochDataB\006\342\337\037\002 \001R\tepochData\0220\n\006status"
  "\030\013 \001(\0162\020.vega.NodeStatusB\006\342\337\037\002 \001R\006status"
  "\0222\n\013delagations\030\014 \003(\0132\020.vega.DelegationR"
  "\013delagations\"\270\001\n\010NodeData\022!\n\014staked_tota"
  "l\030\001 \001(\tR\013stakedTotal\022\037\n\013total_nodes\030\002 \001("
  "\rR\ntotalNodes\022%\n\016inactive_nodes\030\003 \001(\rR\ri"
  "nactiveNodes\022)\n\020validating_nodes\030\004 \001(\rR\017"
  "validatingNodes\022\026\n\006uptime\030\005 \001(\002R\006uptime\""
  "p\n\nDelegation\022\024\n\005party\030\001 \001(\tR\005party\022\027\n\007n"
  "ode_id\030\002 \001(\tR\006nodeId\022\026\n\006amount\030\003 \001(\tR\006am"
  "ount\022\033\n\tepoch_seq\030\004 \001(\tR\010epochSeq\"\304\001\n\rRe"
  "wardDetails\022\031\n\010asset_id\030\001 \001(\tR\007assetId\022\031"
  "\n\010party_id\030\002 \001(\tR\007partyId\022\024\n\005epoch\030\003 \001(\004"
  "R\005epoch\022\026\n\006amount\030\004 \001(\tR\006amount\022.\n\023perce"
  "ntage_of_total\030\005 \001(\tR\021percentageOfTotal\022"
  "\037\n\013received_at\030\006 \001(\003R\nreceivedAt\"\203\001\n\024Rew"
  "ardPerAssetDetail\022\024\n\005asset\030\001 \001(\tR\005asset\022"
  "-\n\007details\030\002 \003(\0132\023.vega.RewardDetailsR\007d"
  "etails\022&\n\017total_for_asset\030\003 \001(\tR\rtotalFo"
  "rAsset*9\n\004Side\022\024\n\020SIDE_UNSPECIFIED\020\000\022\014\n\010"
  "SIDE_BUY\020\001\022\r\n\tSIDE_SELL\020\002*\230\001\n\010Interval\022\030"
  "\n\024INTERVAL_UNSPECIFIED\020\000\022\020\n\014INTERVAL_I1M"
  "\020<\022\021\n\014INTERVAL_I5M\020\254\002\022\022\n\rINTERVAL_I15M\020\204"
  "\007\022\021\n\014INTERVAL_I1H\020\220\034\022\022\n\014INTERVAL_I6H\020\340\250\001"
  "\022\022\n\014INTERVAL_I1D\020\200\243\005*\243\001\n\016AuctionTrigger\022"
  "\037\n\033AUCTION_TRIGGER_UNSPECIFIED\020\000\022\031\n\025AUCT"
  "ION_TRIGGER_BATCH\020\001\022\033\n\027AUCTION_TRIGGER_O"
  "PENING\020\002\022\031\n\025AUCTION_TRIGGER_PRICE\020\003\022\035\n\031A"
  "UCTION_TRIGGER_LIQUIDITY\020\004*\213\001\n\017PeggedRef"
  "erence\022 \n\034PEGGED_REFERENCE_UNSPECIFIED\020\000"
  "\022\030\n\024PEGGED_REFERENCE_MID\020\001\022\035\n\031PEGGED_REF"
  "ERENCE_BEST_BID\020\002\022\035\n\031PEGGED_REFERENCE_BE"
  "ST_ASK\020\003*\370\017\n\nOrderError\022\033\n\027ORDER_ERROR_U"
  "NSPECIFIED\020\000\022!\n\035ORDER_ERROR_INVALID_MARK"
  "ET_ID\020\001\022 \n\034ORDER_ERROR_INVALID_ORDER_ID\020"
  "\002\022\037\n\033ORDER_ERROR_OUT_OF_SEQUENCE\020\003\022&\n\"OR"
  "DER_ERROR_INVALID_REMAINING_SIZE\020\004\022\034\n\030OR"
  "DER_ERROR_TIME_FAILURE\020\005\022\037\n\033ORDER_ERROR_"
  "REMOVAL_FAILURE\020\006\022+\n\'ORDER_ERROR_INVALID"
  "_EXPIRATION_DATETIME\020\007\022\'\n#ORDER_ERROR_IN"
  "VALID_ORDER_REFERENCE\020\010\022 \n\034ORDER_ERROR_E"
  "DIT_NOT_ALLOWED\020\t\022\035\n\031ORDER_ERROR_AMEND_F"
  "AILURE\020\n\022\031\n\025ORDER_ERROR_NOT_FOUND\020\013\022 \n\034O"
  "RDER_ERROR_INVALID_PARTY_ID\020\014\022\035\n\031ORDER_E"
  "RROR_MARKET_CLOSED\020\r\022#\n\037ORDER_ERROR_MARG"
  "IN_CHECK_FAILED\020\016\022\'\n#ORDER_ERROR_MISSING"
  "_GENERAL_ACCOUNT\020\017\022\036\n\032ORDER_ERROR_INTERN"
  "AL_ERROR\020\020\022\034\n\030ORDER_ERROR_INVALID_SIZE\020\021"
  "\022#\n\037ORDER_ERROR_INVALID_PERSISTENCE\020\022\022\034\n"
  "\030ORDER_ERROR_INVALID_TYPE\020\023\022\034\n\030ORDER_ERR"
  "OR_SELF_TRADING\020\024\022.\n*ORDER_ERROR_INSUFFI"
  "CIENT_FUNDS_TO_PAY_FEES\020\025\022%\n!ORDER_ERROR"
  "_INCORRECT_MARKET_TYPE\020\026\022%\n!ORDER_ERROR_"
  "INVALID_TIME_IN_FORCE\020\027\022+\n\'ORDER_ERROR_G"
  "FN_ORDER_DURING_AN_AUCTION\020\030\0223\n/ORDER_ER"
  "ROR_GFA_ORDER_DURING_CONTINUOUS_TRADING\020"
  "\031\0224\n0ORDER_ERROR_CANNOT_AMEND_TO_GTT_WIT"
  "HOUT_EXPIRYAT\020\032\022)\n%ORDER_ERROR_EXPIRYAT_"
  "BEFORE_CREATEDAT\020\033\022,\n(ORDER_ERROR_CANNOT"
  "_HAVE_GTC_AND_EXPIRYAT\020\034\022*\n&ORDER_ERROR_"
  "CANNOT_AMEND_TO_FOK_OR_IOC\020\035\022*\n&ORDER_ER"
  "ROR_CANNOT_AMEND_TO_GFA_OR_GFN\020\036\022,\n(ORDE"
  "R_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN\020\037\0224"
  "\n0ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURI"
  "NG_AUCTION\020 \0224\n0ORDER_ERROR_CANNOT_SEND_"
  "FOK_ORDER_DURING_AUCTION\020!\022#\n\037ORDER_ERRO"
  "R_MUST_BE_LIMIT_ORDER\020\"\022\"\n\036ORDER_ERROR_M"
  "UST_BE_GTT_OR_GTC\020#\022\'\n#ORDER_ERROR_WITHO"
  "UT_REFERENCE_PRICE\020$\0223\n/ORDER_ERROR_BUY_"
  "CANNOT_REFERENCE_BEST_ASK_PRICE\020%\0224\n0ORD"
  "ER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO"
  "_ZERO\020&\022-\n)ORDER_ERROR_OFFSET_MUST_BE_LE"
  "SS_THAN_ZERO\020\'\0227\n3ORDER_ERROR_OFFSET_MUS"
  "T_BE_GREATER_OR_EQUAL_TO_ZERO\020(\0224\n0ORDER"
  "_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PR"
  "ICE\020)\0220\n,ORDER_ERROR_OFFSET_MUST_BE_GREA"
  "TER_THAN_ZERO\020*\022*\n&ORDER_ERROR_INSUFFICI"
  "ENT_ASSET_BALANCE\020+\022E\nAORDER_ERROR_CANNO"
  "T_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGG"
  "ED_ORDER\020,\022.\n*ORDER_ERROR_UNABLE_TO_REPR"
  "ICE_PEGGED_ORDER\020-\0225\n1ORDER_ERROR_UNABLE"
  "_TO_AMEND_PRICE_ON_PEGGED_ORDER\020.\0228\n4ORD"
  "ER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRI"
  "CE_BOUNDS\020/*\202\001\n\013ChainStatus\022\034\n\030CHAIN_STA"
  "TUS_UNSPECIFIED\020\000\022\035\n\031CHAIN_STATUS_DISCON"
  "NECTED\020\001\022\032\n\026CHAIN_STATUS_REPLAYING\020\002\022\032\n\026"
  "CHAIN_STATUS_CONNECTED\020\003*\220\003\n\013AccountType"
  "\022\034\n\030ACCOUNT_TYPE_UNSPECIFIED\020\000\022\032\n\026ACCOUN"
  "T_TYPE_INSURANCE\020\001\022\033\n\027ACCOUNT_TYPE_SETTL"
  "EMENT\020\002\022\027\n\023ACCOUNT_TYPE_MARGIN\020\003\022\030\n\024ACCO"
  "UNT_TYPE_GENERAL\020\004\022$\n ACCOUNT_TYPE_FEES_"
  "INFRASTRUCTURE\020\005\022\037\n\033ACCOUNT_TYPE_FEES_LI"
  "QUIDITY\020\006\022\033\n\027ACCOUNT_TYPE_FEES_MAKER\020\007\022\036"
  "\n\032ACCOUNT_TYPE_LOCK_WITHDRAW\020\010\022\025\n\021ACCOUN"
  "T_TYPE_BOND\020\t\022\031\n\025ACCOUNT_TYPE_EXTERNAL\020\n"
  "\022!\n\035ACCOUNT_TYPE_GLOBAL_INSURANCE\020\013\022\036\n\032A"
  "CCOUNT_TYPE_GLOBAL_REWARD\020\014*\323\005\n\014Transfer"
  "Type\022\035\n\031TRANSFER_TYPE_UNSPECIFIED\020\000\022\026\n\022T"
  "RANSFER_TYPE_LOSS\020\001\022\025\n\021TRANSFER_TYPE_WIN"
  "\020\002\022\027\n\023TRANSFER_TYPE_CLOSE\020\003\022\032\n\026TRANSFER_"
  "TYPE_MTM_LOSS\020\004\022\031\n\025TRANSFER_TYPE_MTM_WIN"
  "\020\005\022\034\n\030TRANSFER_TYPE_MARGIN_LOW\020\006\022\035\n\031TRAN"
  "SFER_TYPE_MARGIN_HIGH\020\007\022$\n TRANSFER_TYPE"
  "_MARGIN_CONFISCATED\020\010\022\037\n\033TRANSFER_TYPE_M"
  "AKER_FEE_PAY\020\t\022#\n\037TRANSFER_TYPE_MAKER_FE"
  "E_RECEIVE\020\n\022(\n$TRANSFER_TYPE_INFRASTRUCT"
  "URE_FEE_PAY\020\013\022/\n+TRANSFER_TYPE_INFRASTRU"
  "CTURE_FEE_DISTRIBUTE\020\014\022#\n\037TRANSFER_TYPE_"
  "LIQUIDITY_FEE_PAY\020\r\022*\n&TRANSFER_TYPE_LIQ"
  "UIDITY_FEE_DISTRIBUTE\020\016\022\032\n\026TRANSFER_TYPE"
  "_BOND_LOW\020\017\022\033\n\027TRANSFER_TYPE_BOND_HIGH\020\020"
  "\022\037\n\033TRANSFER_TYPE_WITHDRAW_LOCK\020\021\022\032\n\026TRA"
  "NSFER_TYPE_WITHDRAW\020\022\022\031\n\025TRANSFER_TYPE_D"
  "EPOSIT\020\023\022\037\n\033TRANSFER_TYPE_BOND_SLASHING\020"
  "\024\022\036\n\032TRANSFER_TYPE_STAKE_REWARD\020\025*c\n\nNod"
  "eStatus\022\033\n\027NODE_STATUS_UNSPECIFIED\020\000\022\031\n\025"
  "NODE_STATUS_VALIDATOR\020\001\022\035\n\031NODE_STATUS_N"
  "ON_VALIDATOR\020\002B7\n\024io.vegaprotocol.vegaZ\037"
  "code.vegaprotocol.io/vega/protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vega_2eproto_deps[3] = {
  &::descriptor_table_assets_2eproto,
  &::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
  &::descriptor_table_markets_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vega_2eproto_sccs[51] = {
  &scc_info_Account_vega_2eproto.base,
  &scc_info_AuctionIndicativeState_vega_2eproto.base,
  &scc_info_Candle_vega_2eproto.base,
  &scc_info_Delegation_vega_2eproto.base,
  &scc_info_Deposit_vega_2eproto.base,
  &scc_info_Epoch_vega_2eproto.base,
  &scc_info_EpochData_vega_2eproto.base,
  &scc_info_EpochParticipation_vega_2eproto.base,
  &scc_info_EpochTimestamps_vega_2eproto.base,
  &scc_info_Erc20WithdrawExt_vega_2eproto.base,
  &scc_info_ErrorDetail_vega_2eproto.base,
  &scc_info_EthereumConfig_vega_2eproto.base,
  &scc_info_Fee_vega_2eproto.base,
  &scc_info_FinancialAmount_vega_2eproto.base,
  &scc_info_LedgerEntry_vega_2eproto.base,
  &scc_info_LiquidityOrder_vega_2eproto.base,
  &scc_info_LiquidityOrderReference_vega_2eproto.base,
  &scc_info_LiquidityProviderFeeShare_vega_2eproto.base,
  &scc_info_LiquidityProvision_vega_2eproto.base,
  &scc_info_MarginLevels_vega_2eproto.base,
  &scc_info_MarketData_vega_2eproto.base,
  &scc_info_MarketDepth_vega_2eproto.base,
  &scc_info_MarketDepthUpdate_vega_2eproto.base,
  &scc_info_NetworkParameter_vega_2eproto.base,
  &scc_info_Node_vega_2eproto.base,
  &scc_info_NodeData_vega_2eproto.base,
  &scc_info_Order_vega_2eproto.base,
  &scc_info_OrderCancellationConfirmation_vega_2eproto.base,
  &scc_info_OrderConfirmation_vega_2eproto.base,
  &scc_info_Party_vega_2eproto.base,
  &scc_info_PeggedOrder_vega_2eproto.base,
  &scc_info_Position_vega_2eproto.base,
  &scc_info_PositionTrade_vega_2eproto.base,
  &scc_info_Price_vega_2eproto.base,
  &scc_info_PriceLevel_vega_2eproto.base,
  &scc_info_PriceMonitoringBounds_vega_2eproto.base,
  &scc_info_RewardDetails_vega_2eproto.base,
  &scc_info_RewardPerAssetDetail_vega_2eproto.base,
  &scc_info_RiskFactor_vega_2eproto.base,
  &scc_info_RiskResult_vega_2eproto.base,
  &scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto.base,
  &scc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto.base,
  &scc_info_Timestamp_vega_2eproto.base,
  &scc_info_Trade_vega_2eproto.base,
  &scc_info_TradeSet_vega_2eproto.base,
  &scc_info_Transfer_vega_2eproto.base,
  &scc_info_TransferBalance_vega_2eproto.base,
  &scc_info_TransferRequest_vega_2eproto.base,
  &scc_info_TransferResponse_vega_2eproto.base,
  &scc_info_WithdrawExt_vega_2eproto.base,
  &scc_info_Withdrawal_vega_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vega_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vega_2eproto = {
  false, false, descriptor_table_protodef_vega_2eproto, "vega.proto", 14919,
  &descriptor_table_vega_2eproto_once, descriptor_table_vega_2eproto_sccs, descriptor_table_vega_2eproto_deps, 51, 3,
  schemas, file_default_instances, TableStruct_vega_2eproto::offsets,
  file_level_metadata_vega_2eproto, 51, file_level_enum_descriptors_vega_2eproto, file_level_service_descriptors_vega_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vega_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vega_2eproto)), true);
namespace vega {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_TimeInForce_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[0];
}
bool Order_TimeInForce_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Order_TimeInForce Order::TIME_IN_FORCE_UNSPECIFIED;
constexpr Order_TimeInForce Order::TIME_IN_FORCE_GTC;
constexpr Order_TimeInForce Order::TIME_IN_FORCE_GTT;
constexpr Order_TimeInForce Order::TIME_IN_FORCE_IOC;
constexpr Order_TimeInForce Order::TIME_IN_FORCE_FOK;
constexpr Order_TimeInForce Order::TIME_IN_FORCE_GFA;
constexpr Order_TimeInForce Order::TIME_IN_FORCE_GFN;
constexpr Order_TimeInForce Order::TimeInForce_MIN;
constexpr Order_TimeInForce Order::TimeInForce_MAX;
constexpr int Order::TimeInForce_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[1];
}
bool Order_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Order_Type Order::TYPE_UNSPECIFIED;
constexpr Order_Type Order::TYPE_LIMIT;
constexpr Order_Type Order::TYPE_MARKET;
constexpr Order_Type Order::TYPE_NETWORK;
constexpr Order_Type Order::Type_MIN;
constexpr Order_Type Order::Type_MAX;
constexpr int Order::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[2];
}
bool Order_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Order_Status Order::STATUS_UNSPECIFIED;
constexpr Order_Status Order::STATUS_ACTIVE;
constexpr Order_Status Order::STATUS_EXPIRED;
constexpr Order_Status Order::STATUS_CANCELLED;
constexpr Order_Status Order::STATUS_STOPPED;
constexpr Order_Status Order::STATUS_FILLED;
constexpr Order_Status Order::STATUS_REJECTED;
constexpr Order_Status Order::STATUS_PARTIALLY_FILLED;
constexpr Order_Status Order::STATUS_PARKED;
constexpr Order_Status Order::Status_MIN;
constexpr Order_Status Order::Status_MAX;
constexpr int Order::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trade_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[3];
}
bool Trade_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Trade_Type Trade::TYPE_UNSPECIFIED;
constexpr Trade_Type Trade::TYPE_DEFAULT;
constexpr Trade_Type Trade::TYPE_NETWORK_CLOSE_OUT_GOOD;
constexpr Trade_Type Trade::TYPE_NETWORK_CLOSE_OUT_BAD;
constexpr Trade_Type Trade::Type_MIN;
constexpr Trade_Type Trade::Type_MAX;
constexpr int Trade::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Deposit_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[4];
}
bool Deposit_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Deposit_Status Deposit::STATUS_UNSPECIFIED;
constexpr Deposit_Status Deposit::STATUS_OPEN;
constexpr Deposit_Status Deposit::STATUS_CANCELLED;
constexpr Deposit_Status Deposit::STATUS_FINALIZED;
constexpr Deposit_Status Deposit::Status_MIN;
constexpr Deposit_Status Deposit::Status_MAX;
constexpr int Deposit::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Withdrawal_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[5];
}
bool Withdrawal_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Withdrawal_Status Withdrawal::STATUS_UNSPECIFIED;
constexpr Withdrawal_Status Withdrawal::STATUS_OPEN;
constexpr Withdrawal_Status Withdrawal::STATUS_CANCELLED;
constexpr Withdrawal_Status Withdrawal::STATUS_FINALIZED;
constexpr Withdrawal_Status Withdrawal::Status_MIN;
constexpr Withdrawal_Status Withdrawal::Status_MAX;
constexpr int Withdrawal::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiquidityProvision_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[6];
}
bool LiquidityProvision_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LiquidityProvision_Status LiquidityProvision::STATUS_UNSPECIFIED;
constexpr LiquidityProvision_Status LiquidityProvision::STATUS_ACTIVE;
constexpr LiquidityProvision_Status LiquidityProvision::STATUS_STOPPED;
constexpr LiquidityProvision_Status LiquidityProvision::STATUS_CANCELLED;
constexpr LiquidityProvision_Status LiquidityProvision::STATUS_REJECTED;
constexpr LiquidityProvision_Status LiquidityProvision::STATUS_UNDEPLOYED;
constexpr LiquidityProvision_Status LiquidityProvision::STATUS_PENDING;
constexpr LiquidityProvision_Status LiquidityProvision::Status_MIN;
constexpr LiquidityProvision_Status LiquidityProvision::Status_MAX;
constexpr int LiquidityProvision::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[7];
}
bool Side_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Interval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[8];
}
bool Interval_IsValid(int value) {
  switch (value) {
    case 0:
    case 60:
    case 300:
    case 900:
    case 3600:
    case 21600:
    case 86400:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuctionTrigger_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[9];
}
bool AuctionTrigger_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeggedReference_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[10];
}
bool PeggedReference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[11];
}
bool OrderError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChainStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[12];
}
bool ChainStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[13];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[14];
}
bool TransferType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[15];
}
bool NodeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Price::_Internal {
 public:
};

Price::Price(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Price)
}
Price::Price(const Price& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:vega.Price)
}

void Price::SharedCtor() {
  value_ = PROTOBUF_ULONGLONG(0);
}

Price::~Price() {
  // @@protoc_insertion_point(destructor:vega.Price)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Price::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Price::ArenaDtor(void* object) {
  Price* _this = reinterpret_cast< Price* >(object);
  (void)_this;
}
void Price::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Price::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Price& Price::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Price_vega_2eproto.base);
  return *internal_default_instance();
}


void Price::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Price)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Price::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Price::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Price)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [json_name = "value"];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Price)
  return target;
}

size_t Price::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Price)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [json_name = "value"];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Price::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Price)
  GOOGLE_DCHECK_NE(&from, this);
  const Price* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Price>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Price)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Price)
    MergeFrom(*source);
  }
}

void Price::MergeFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Price)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Price::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Price::CopyFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Price::IsInitialized() const {
  return true;
}

void Price::InternalSwap(Price* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Price::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:vega.Timestamp)
}

void Timestamp::SharedCtor() {
  value_ = PROTOBUF_LONGLONG(0);
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:vega.Timestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Timestamp::ArenaDtor(void* object) {
  Timestamp* _this = reinterpret_cast< Timestamp* >(object);
  (void)_this;
}
void Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timestamp& Timestamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Timestamp_vega_2eproto.base);
  return *internal_default_instance();
}


void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1 [json_name = "value"];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Timestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1 [json_name = "value"];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Timestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Timestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Party::_Internal {
 public:
};

Party::Party(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  delegations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Party)
}
Party::Party(const Party& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      delegations_(from.delegations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.Party)
}

void Party::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Party_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Party::~Party() {
  // @@protoc_insertion_point(destructor:vega.Party)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Party::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Party::ArenaDtor(void* object) {
  Party* _this = reinterpret_cast< Party* >(object);
  (void)_this;
}
void Party::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Party::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Party& Party::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Party_vega_2eproto.base);
  return *internal_default_instance();
}


void Party::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegations_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Party::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Party.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.Delegation delegations = 2 [json_name = "delegations"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Party::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Party.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .vega.Delegation delegations = 2 [json_name = "delegations"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delegations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_delegations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Party)
  return target;
}

size_t Party::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Party)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Delegation delegations = 2 [json_name = "delegations"];
  total_size += 1UL * this->_internal_delegations_size();
  for (const auto& msg : this->delegations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Party::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Party)
  GOOGLE_DCHECK_NE(&from, this);
  const Party* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Party>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Party)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Party)
    MergeFrom(*source);
  }
}

void Party::MergeFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Party)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delegations_.MergeFrom(from.delegations_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void Party::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Party::CopyFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Party::IsInitialized() const {
  return true;
}

void Party::InternalSwap(Party* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegations_.InternalSwap(&other->delegations_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Party::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RiskFactor::_Internal {
 public:
};

RiskFactor::RiskFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.RiskFactor)
}
RiskFactor::RiskFactor(const RiskFactor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(),
      GetArena());
  }
  ::memcpy(&short__, &from.short__,
    static_cast<size_t>(reinterpret_cast<char*>(&long__) -
    reinterpret_cast<char*>(&short__)) + sizeof(long__));
  // @@protoc_insertion_point(copy_constructor:vega.RiskFactor)
}

void RiskFactor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RiskFactor_vega_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&short__) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&long__) -
      reinterpret_cast<char*>(&short__)) + sizeof(long__));
}

RiskFactor::~RiskFactor() {
  // @@protoc_insertion_point(destructor:vega.RiskFactor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RiskFactor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RiskFactor::ArenaDtor(void* object) {
  RiskFactor* _this = reinterpret_cast< RiskFactor* >(object);
  (void)_this;
}
void RiskFactor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RiskFactor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RiskFactor& RiskFactor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RiskFactor_vega_2eproto.base);
  return *internal_default_instance();
}


void RiskFactor::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RiskFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmpty();
  ::memset(&short__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&long__) -
      reinterpret_cast<char*>(&short__)) + sizeof(long__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RiskFactor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.RiskFactor.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double short = 2 [json_name = "short"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          short__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double long = 3 [json_name = "long"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          long__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RiskFactor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RiskFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.RiskFactor.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // double short = 2 [json_name = "short"];
  if (!(this->short_() <= 0 && this->short_() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_short_(), target);
  }

  // double long = 3 [json_name = "long"];
  if (!(this->long_() <= 0 && this->long_() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_long_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RiskFactor)
  return target;
}

size_t RiskFactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RiskFactor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // double short = 2 [json_name = "short"];
  if (!(this->short_() <= 0 && this->short_() >= 0)) {
    total_size += 1 + 8;
  }

  // double long = 3 [json_name = "long"];
  if (!(this->long_() <= 0 && this->long_() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RiskFactor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RiskFactor)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskFactor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RiskFactor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RiskFactor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RiskFactor)
    MergeFrom(*source);
  }
}

void RiskFactor::MergeFrom(const RiskFactor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RiskFactor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
  if (!(from.short_() <= 0 && from.short_() >= 0)) {
    _internal_set_short_(from._internal_short_());
  }
  if (!(from.long_() <= 0 && from.long_() >= 0)) {
    _internal_set_long_(from._internal_long_());
  }
}

void RiskFactor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RiskFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskFactor::CopyFrom(const RiskFactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RiskFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskFactor::IsInitialized() const {
  return true;
}

void RiskFactor::InternalSwap(RiskFactor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RiskFactor, long__)
      + sizeof(RiskFactor::long__)
      - PROTOBUF_FIELD_OFFSET(RiskFactor, short__)>(
          reinterpret_cast<char*>(&short__),
          reinterpret_cast<char*>(&other->short__));
}

::PROTOBUF_NAMESPACE_ID::Metadata RiskFactor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RiskResult_RiskFactorsEntry_DoNotUse::RiskResult_RiskFactorsEntry_DoNotUse() {}
RiskResult_RiskFactorsEntry_DoNotUse::RiskResult_RiskFactorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RiskResult_RiskFactorsEntry_DoNotUse::MergeFrom(const RiskResult_RiskFactorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RiskResult_RiskFactorsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RiskResult_RiskFactorsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse() {}
RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::MergeFrom(const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class RiskResult::_Internal {
 public:
};

RiskResult::RiskResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  risk_factors_(arena),
  predicted_next_risk_factors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.RiskResult)
}
RiskResult::RiskResult(const RiskResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  risk_factors_.MergeFrom(from.risk_factors_);
  predicted_next_risk_factors_.MergeFrom(from.predicted_next_risk_factors_);
  ::memcpy(&updated_timestamp_, &from.updated_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_update_timestamp_) -
    reinterpret_cast<char*>(&updated_timestamp_)) + sizeof(next_update_timestamp_));
  // @@protoc_insertion_point(copy_constructor:vega.RiskResult)
}

void RiskResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RiskResult_vega_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&updated_timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&next_update_timestamp_) -
      reinterpret_cast<char*>(&updated_timestamp_)) + sizeof(next_update_timestamp_));
}

RiskResult::~RiskResult() {
  // @@protoc_insertion_point(destructor:vega.RiskResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RiskResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RiskResult::ArenaDtor(void* object) {
  RiskResult* _this = reinterpret_cast< RiskResult* >(object);
  (void)_this;
}
void RiskResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RiskResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RiskResult& RiskResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RiskResult_vega_2eproto.base);
  return *internal_default_instance();
}


void RiskResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RiskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  risk_factors_.Clear();
  predicted_next_risk_factors_.Clear();
  ::memset(&updated_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_update_timestamp_) -
      reinterpret_cast<char*>(&updated_timestamp_)) + sizeof(next_update_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RiskResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 updated_timestamp = 1 [json_name = "updatedTimestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          updated_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .vega.RiskFactor> risk_factors = 2 [json_name = "riskFactors"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&risk_factors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 next_update_timestamp = 3 [json_name = "nextUpdateTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          next_update_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .vega.RiskFactor> predicted_next_risk_factors = 4 [json_name = "predictedNextRiskFactors"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&predicted_next_risk_factors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RiskResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RiskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 updated_timestamp = 1 [json_name = "updatedTimestamp"];
  if (this->updated_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_updated_timestamp(), target);
  }

  // map<string, .vega.RiskFactor> risk_factors = 2 [json_name = "riskFactors"];
  if (!this->_internal_risk_factors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vega.RiskResult.RiskFactorsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_risk_factors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_risk_factors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
          it = this->_internal_risk_factors().begin();
          it != this->_internal_risk_factors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RiskResult_RiskFactorsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
          it = this->_internal_risk_factors().begin();
          it != this->_internal_risk_factors().end(); ++it) {
        target = RiskResult_RiskFactorsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 next_update_timestamp = 3 [json_name = "nextUpdateTimestamp"];
  if (this->next_update_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_next_update_timestamp(), target);
  }

  // map<string, .vega.RiskFactor> predicted_next_risk_factors = 4 [json_name = "predictedNextRiskFactors"];
  if (!this->_internal_predicted_next_risk_factors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vega.RiskResult.PredictedNextRiskFactorsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_predicted_next_risk_factors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_predicted_next_risk_factors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
          it = this->_internal_predicted_next_risk_factors().begin();
          it != this->_internal_predicted_next_risk_factors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
          it = this->_internal_predicted_next_risk_factors().begin();
          it != this->_internal_predicted_next_risk_factors().end(); ++it) {
        target = RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RiskResult)
  return target;
}

size_t RiskResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RiskResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .vega.RiskFactor> risk_factors = 2 [json_name = "riskFactors"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_risk_factors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
      it = this->_internal_risk_factors().begin();
      it != this->_internal_risk_factors().end(); ++it) {
    total_size += RiskResult_RiskFactorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .vega.RiskFactor> predicted_next_risk_factors = 4 [json_name = "predictedNextRiskFactors"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_predicted_next_risk_factors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
      it = this->_internal_predicted_next_risk_factors().begin();
      it != this->_internal_predicted_next_risk_factors().end(); ++it) {
    total_size += RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 updated_timestamp = 1 [json_name = "updatedTimestamp"];
  if (this->updated_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updated_timestamp());
  }

  // int64 next_update_timestamp = 3 [json_name = "nextUpdateTimestamp"];
  if (this->next_update_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_next_update_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RiskResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RiskResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RiskResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RiskResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RiskResult)
    MergeFrom(*source);
  }
}

void RiskResult::MergeFrom(const RiskResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RiskResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  risk_factors_.MergeFrom(from.risk_factors_);
  predicted_next_risk_factors_.MergeFrom(from.predicted_next_risk_factors_);
  if (from.updated_timestamp() != 0) {
    _internal_set_updated_timestamp(from._internal_updated_timestamp());
  }
  if (from.next_update_timestamp() != 0) {
    _internal_set_next_update_timestamp(from._internal_next_update_timestamp());
  }
}

void RiskResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RiskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskResult::CopyFrom(const RiskResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RiskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskResult::IsInitialized() const {
  return true;
}

void RiskResult::InternalSwap(RiskResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  risk_factors_.Swap(&other->risk_factors_);
  predicted_next_risk_factors_.Swap(&other->predicted_next_risk_factors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RiskResult, next_update_timestamp_)
      + sizeof(RiskResult::next_update_timestamp_)
      - PROTOBUF_FIELD_OFFSET(RiskResult, updated_timestamp_)>(
          reinterpret_cast<char*>(&updated_timestamp_),
          reinterpret_cast<char*>(&other->updated_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RiskResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeggedOrder::_Internal {
 public:
};

PeggedOrder::PeggedOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PeggedOrder)
}
PeggedOrder::PeggedOrder(const PeggedOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(reference_));
  // @@protoc_insertion_point(copy_constructor:vega.PeggedOrder)
}

void PeggedOrder::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reference_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(reference_));
}

PeggedOrder::~PeggedOrder() {
  // @@protoc_insertion_point(destructor:vega.PeggedOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeggedOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PeggedOrder::ArenaDtor(void* object) {
  PeggedOrder* _this = reinterpret_cast< PeggedOrder* >(object);
  (void)_this;
}
void PeggedOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeggedOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeggedOrder& PeggedOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeggedOrder_vega_2eproto.base);
  return *internal_default_instance();
}


void PeggedOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PeggedOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(reference_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeggedOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.PeggedReference reference = 1 [json_name = "reference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reference(static_cast<::vega::PeggedReference>(val));
        } else goto handle_unusual;
        continue;
      // int64 offset = 2 [json_name = "offset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeggedOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PeggedOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  if (this->reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reference(), target);
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PeggedOrder)
  return target;
}

size_t PeggedOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PeggedOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 2 [json_name = "offset"];
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  if (this->reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeggedOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PeggedOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const PeggedOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeggedOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PeggedOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PeggedOrder)
    MergeFrom(*source);
  }
}

void PeggedOrder::MergeFrom(const PeggedOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PeggedOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.reference() != 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void PeggedOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PeggedOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeggedOrder::CopyFrom(const PeggedOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PeggedOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeggedOrder::IsInitialized() const {
  return true;
}

void PeggedOrder::InternalSwap(PeggedOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeggedOrder, reference_)
      + sizeof(PeggedOrder::reference_)
      - PROTOBUF_FIELD_OFFSET(PeggedOrder, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeggedOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Order::_Internal {
 public:
  static const ::vega::PeggedOrder& pegged_order(const Order* msg);
};

const ::vega::PeggedOrder&
Order::_Internal::pegged_order(const Order* msg) {
  return *msg->pegged_order_;
}
Order::Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  liquidity_provision_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_liquidity_provision_id().empty()) {
    liquidity_provision_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_liquidity_provision_id(),
      GetArena());
  }
  if (from._internal_has_pegged_order()) {
    pegged_order_ = new ::vega::PeggedOrder(*from.pegged_order_);
  } else {
    pegged_order_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&price_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:vega.Order)
}

void Order::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Order_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  liquidity_provision_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pegged_order_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&pegged_order_)) + sizeof(reason_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:vega.Order)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Order::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  liquidity_provision_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pegged_order_;
}

void Order::ArenaDtor(void* object) {
  Order* _this = reinterpret_cast< Order* >(object);
  (void)_this;
}
void Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Order_vega_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  reference_.ClearToEmpty();
  liquidity_provision_id_.ClearToEmpty();
  if (GetArena() == nullptr && pegged_order_ != nullptr) {
    delete pegged_order_;
  }
  pegged_order_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&price_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Order.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Order.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 3 [json_name = "partyId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Order.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Side side = 4 [json_name = "side"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::vega::Side>(val));
        } else goto handle_unusual;
        continue;
      // uint64 price = 5 [json_name = "price"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 6 [json_name = "size"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 remaining = 7 [json_name = "remaining"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Order.TimeInForce time_in_force = 8 [json_name = "timeInForce"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_time_in_force(static_cast<::vega::Order_TimeInForce>(val));
        } else goto handle_unusual;
        continue;
      // .vega.Order.Type type = 9 [json_name = "type"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::Order_Type>(val));
        } else goto handle_unusual;
        continue;
      // int64 created_at = 10 [json_name = "createdAt"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Order.Status status = 11 [json_name = "status"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::Order_Status>(val));
        } else goto handle_unusual;
        continue;
      // int64 expires_at = 12 [json_name = "expiresAt"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          expires_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 13 [json_name = "reference"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Order.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.OrderError reason = 14 [json_name = "reason"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::vega::OrderError>(val));
        } else goto handle_unusual;
        continue;
      // int64 updated_at = 15 [json_name = "updatedAt"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 16 [json_name = "version"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 batch_id = 17 [json_name = "batchId"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.PeggedOrder pegged_order = 18 [json_name = "peggedOrder"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pegged_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string liquidity_provision_id = 19 [json_name = "liquidityProvisionId"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_liquidity_provision_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Order.liquidity_provision_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Order.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Order.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  // string party_id = 3 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Order.party_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_party_id(), target);
  }

  // .vega.Side side = 4 [json_name = "side"];
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side(), target);
  }

  // uint64 price = 5 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_price(), target);
  }

  // uint64 size = 6 [json_name = "size"];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_size(), target);
  }

  // uint64 remaining = 7 [json_name = "remaining"];
  if (this->remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_remaining(), target);
  }

  // .vega.Order.TimeInForce time_in_force = 8 [json_name = "timeInForce"];
  if (this->time_in_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_time_in_force(), target);
  }

  // .vega.Order.Type type = 9 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // int64 created_at = 10 [json_name = "createdAt"];
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_created_at(), target);
  }

  // .vega.Order.Status status = 11 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_status(), target);
  }

  // int64 expires_at = 12 [json_name = "expiresAt"];
  if (this->expires_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_expires_at(), target);
  }

  // string reference = 13 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Order.reference");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_reference(), target);
  }

  // .vega.OrderError reason = 14 [json_name = "reason"];
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_reason(), target);
  }

  // int64 updated_at = 15 [json_name = "updatedAt"];
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_updated_at(), target);
  }

  // uint64 version = 16 [json_name = "version"];
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_version(), target);
  }

  // uint64 batch_id = 17 [json_name = "batchId"];
  if (this->batch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_batch_id(), target);
  }

  // .vega.PeggedOrder pegged_order = 18 [json_name = "peggedOrder"];
  if (this->has_pegged_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::pegged_order(this), target, stream);
  }

  // string liquidity_provision_id = 19 [json_name = "liquidityProvisionId"];
  if (this->liquidity_provision_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_liquidity_provision_id().data(), static_cast<int>(this->_internal_liquidity_provision_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Order.liquidity_provision_id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_liquidity_provision_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Order)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string party_id = 3 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string reference = 13 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // string liquidity_provision_id = 19 [json_name = "liquidityProvisionId"];
  if (this->liquidity_provision_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_liquidity_provision_id());
  }

  // .vega.PeggedOrder pegged_order = 18 [json_name = "peggedOrder"];
  if (this->has_pegged_order()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pegged_order_);
  }

  // uint64 price = 5 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 size = 6 [json_name = "size"];
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // .vega.Side side = 4 [json_name = "side"];
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .vega.Order.TimeInForce time_in_force = 8 [json_name = "timeInForce"];
  if (this->time_in_force() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_in_force());
  }

  // uint64 remaining = 7 [json_name = "remaining"];
  if (this->remaining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_remaining());
  }

  // int64 created_at = 10 [json_name = "createdAt"];
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created_at());
  }

  // .vega.Order.Type type = 9 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .vega.Order.Status status = 11 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int64 expires_at = 12 [json_name = "expiresAt"];
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expires_at());
  }

  // int64 updated_at = 15 [json_name = "updatedAt"];
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updated_at());
  }

  // uint64 version = 16 [json_name = "version"];
  if (this->version() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  // uint64 batch_id = 17 [json_name = "batchId"];
  if (this->batch_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_batch_id());
  }

  // .vega.OrderError reason = 14 [json_name = "reason"];
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.liquidity_provision_id().size() > 0) {
    _internal_set_liquidity_provision_id(from._internal_liquidity_provision_id());
  }
  if (from.has_pegged_order()) {
    _internal_mutable_pegged_order()->::vega::PeggedOrder::MergeFrom(from._internal_pegged_order());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.time_in_force() != 0) {
    _internal_set_time_in_force(from._internal_time_in_force());
  }
  if (from.remaining() != 0) {
    _internal_set_remaining(from._internal_remaining());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.expires_at() != 0) {
    _internal_set_expires_at(from._internal_expires_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.batch_id() != 0) {
    _internal_set_batch_id(from._internal_batch_id());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  liquidity_provision_id_.Swap(&other->liquidity_provision_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, reason_)
      + sizeof(Order::reason_)
      - PROTOBUF_FIELD_OFFSET(Order, pegged_order_)>(
          reinterpret_cast<char*>(&pegged_order_),
          reinterpret_cast<char*>(&other->pegged_order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderCancellationConfirmation::_Internal {
 public:
  static const ::vega::Order& order(const OrderCancellationConfirmation* msg);
};

const ::vega::Order&
OrderCancellationConfirmation::_Internal::order(const OrderCancellationConfirmation* msg) {
  return *msg->order_;
}
OrderCancellationConfirmation::OrderCancellationConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.OrderCancellationConfirmation)
}
OrderCancellationConfirmation::OrderCancellationConfirmation(const OrderCancellationConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.OrderCancellationConfirmation)
}

void OrderCancellationConfirmation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderCancellationConfirmation_vega_2eproto.base);
  order_ = nullptr;
}

OrderCancellationConfirmation::~OrderCancellationConfirmation() {
  // @@protoc_insertion_point(destructor:vega.OrderCancellationConfirmation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderCancellationConfirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void OrderCancellationConfirmation::ArenaDtor(void* object) {
  OrderCancellationConfirmation* _this = reinterpret_cast< OrderCancellationConfirmation* >(object);
  (void)_this;
}
void OrderCancellationConfirmation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderCancellationConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderCancellationConfirmation& OrderCancellationConfirmation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderCancellationConfirmation_vega_2eproto.base);
  return *internal_default_instance();
}


void OrderCancellationConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderCancellationConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderCancellationConfirmation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderCancellationConfirmation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderCancellationConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderCancellationConfirmation)
  return target;
}

size_t OrderCancellationConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderCancellationConfirmation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderCancellationConfirmation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderCancellationConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderCancellationConfirmation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderCancellationConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderCancellationConfirmation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderCancellationConfirmation)
    MergeFrom(*source);
  }
}

void OrderCancellationConfirmation::MergeFrom(const OrderCancellationConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderCancellationConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void OrderCancellationConfirmation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderCancellationConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCancellationConfirmation::CopyFrom(const OrderCancellationConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderCancellationConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCancellationConfirmation::IsInitialized() const {
  return true;
}

void OrderCancellationConfirmation::InternalSwap(OrderCancellationConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderCancellationConfirmation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderConfirmation::_Internal {
 public:
  static const ::vega::Order& order(const OrderConfirmation* msg);
};

const ::vega::Order&
OrderConfirmation::_Internal::order(const OrderConfirmation* msg) {
  return *msg->order_;
}
OrderConfirmation::OrderConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena),
  passive_orders_affected_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.OrderConfirmation)
}
OrderConfirmation::OrderConfirmation(const OrderConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_),
      passive_orders_affected_(from.passive_orders_affected_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.OrderConfirmation)
}

void OrderConfirmation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderConfirmation_vega_2eproto.base);
  order_ = nullptr;
}

OrderConfirmation::~OrderConfirmation() {
  // @@protoc_insertion_point(destructor:vega.OrderConfirmation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderConfirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void OrderConfirmation::ArenaDtor(void* object) {
  OrderConfirmation* _this = reinterpret_cast< OrderConfirmation* >(object);
  (void)_this;
}
void OrderConfirmation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderConfirmation& OrderConfirmation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderConfirmation_vega_2eproto.base);
  return *internal_default_instance();
}


void OrderConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  passive_orders_affected_.Clear();
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderConfirmation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.Trade trades = 2 [json_name = "trades"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.Order passive_orders_affected = 3 [json_name = "passiveOrdersAffected"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passive_orders_affected(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderConfirmation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  // repeated .vega.Trade trades = 2 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trades(i), target, stream);
  }

  // repeated .vega.Order passive_orders_affected = 3 [json_name = "passiveOrdersAffected"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_passive_orders_affected_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_passive_orders_affected(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderConfirmation)
  return target;
}

size_t OrderConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderConfirmation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 2 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.Order passive_orders_affected = 3 [json_name = "passiveOrdersAffected"];
  total_size += 1UL * this->_internal_passive_orders_affected_size();
  for (const auto& msg : this->passive_orders_affected_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderConfirmation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderConfirmation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderConfirmation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderConfirmation)
    MergeFrom(*source);
  }
}

void OrderConfirmation::MergeFrom(const OrderConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
  passive_orders_affected_.MergeFrom(from.passive_orders_affected_);
  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void OrderConfirmation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderConfirmation::CopyFrom(const OrderConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderConfirmation::IsInitialized() const {
  return true;
}

void OrderConfirmation::InternalSwap(OrderConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
  passive_orders_affected_.InternalSwap(&other->passive_orders_affected_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderConfirmation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuctionIndicativeState::_Internal {
 public:
};

AuctionIndicativeState::AuctionIndicativeState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.AuctionIndicativeState)
}
AuctionIndicativeState::AuctionIndicativeState(const AuctionIndicativeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  ::memcpy(&indicative_price_, &from.indicative_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&auction_end_) -
    reinterpret_cast<char*>(&indicative_price_)) + sizeof(auction_end_));
  // @@protoc_insertion_point(copy_constructor:vega.AuctionIndicativeState)
}

void AuctionIndicativeState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuctionIndicativeState_vega_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&indicative_price_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auction_end_) -
      reinterpret_cast<char*>(&indicative_price_)) + sizeof(auction_end_));
}

AuctionIndicativeState::~AuctionIndicativeState() {
  // @@protoc_insertion_point(destructor:vega.AuctionIndicativeState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuctionIndicativeState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuctionIndicativeState::ArenaDtor(void* object) {
  AuctionIndicativeState* _this = reinterpret_cast< AuctionIndicativeState* >(object);
  (void)_this;
}
void AuctionIndicativeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuctionIndicativeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuctionIndicativeState& AuctionIndicativeState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuctionIndicativeState_vega_2eproto.base);
  return *internal_default_instance();
}


void AuctionIndicativeState::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.AuctionIndicativeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  ::memset(&indicative_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auction_end_) -
      reinterpret_cast<char*>(&indicative_price_)) + sizeof(auction_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuctionIndicativeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.AuctionIndicativeState.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 indicative_price = 2 [json_name = "indicativePrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indicative_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 indicative_volume = 3 [json_name = "indicativeVolume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          indicative_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 auction_start = 4 [json_name = "auctionStart"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          auction_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 auction_end = 5 [json_name = "auctionEnd"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          auction_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuctionIndicativeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.AuctionIndicativeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.AuctionIndicativeState.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // uint64 indicative_price = 2 [json_name = "indicativePrice"];
  if (this->indicative_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_indicative_price(), target);
  }

  // uint64 indicative_volume = 3 [json_name = "indicativeVolume"];
  if (this->indicative_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_indicative_volume(), target);
  }

  // int64 auction_start = 4 [json_name = "auctionStart"];
  if (this->auction_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_auction_start(), target);
  }

  // int64 auction_end = 5 [json_name = "auctionEnd"];
  if (this->auction_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_auction_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.AuctionIndicativeState)
  return target;
}

size_t AuctionIndicativeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.AuctionIndicativeState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // uint64 indicative_price = 2 [json_name = "indicativePrice"];
  if (this->indicative_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_indicative_price());
  }

  // uint64 indicative_volume = 3 [json_name = "indicativeVolume"];
  if (this->indicative_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_indicative_volume());
  }

  // int64 auction_start = 4 [json_name = "auctionStart"];
  if (this->auction_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auction_start());
  }

  // int64 auction_end = 5 [json_name = "auctionEnd"];
  if (this->auction_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auction_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuctionIndicativeState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.AuctionIndicativeState)
  GOOGLE_DCHECK_NE(&from, this);
  const AuctionIndicativeState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuctionIndicativeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.AuctionIndicativeState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.AuctionIndicativeState)
    MergeFrom(*source);
  }
}

void AuctionIndicativeState::MergeFrom(const AuctionIndicativeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.AuctionIndicativeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.indicative_price() != 0) {
    _internal_set_indicative_price(from._internal_indicative_price());
  }
  if (from.indicative_volume() != 0) {
    _internal_set_indicative_volume(from._internal_indicative_volume());
  }
  if (from.auction_start() != 0) {
    _internal_set_auction_start(from._internal_auction_start());
  }
  if (from.auction_end() != 0) {
    _internal_set_auction_end(from._internal_auction_end());
  }
}

void AuctionIndicativeState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.AuctionIndicativeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionIndicativeState::CopyFrom(const AuctionIndicativeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.AuctionIndicativeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionIndicativeState::IsInitialized() const {
  return true;
}

void AuctionIndicativeState::InternalSwap(AuctionIndicativeState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuctionIndicativeState, auction_end_)
      + sizeof(AuctionIndicativeState::auction_end_)
      - PROTOBUF_FIELD_OFFSET(AuctionIndicativeState, indicative_price_)>(
          reinterpret_cast<char*>(&indicative_price_),
          reinterpret_cast<char*>(&other->indicative_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuctionIndicativeState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trade::_Internal {
 public:
  static const ::vega::Fee& buyer_fee(const Trade* msg);
  static const ::vega::Fee& seller_fee(const Trade* msg);
};

const ::vega::Fee&
Trade::_Internal::buyer_fee(const Trade* msg) {
  return *msg->buyer_fee_;
}
const ::vega::Fee&
Trade::_Internal::seller_fee(const Trade* msg) {
  return *msg->seller_fee_;
}
Trade::Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Trade)
}
Trade::Trade(const Trade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  buyer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buyer().empty()) {
    buyer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buyer(),
      GetArena());
  }
  seller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seller().empty()) {
    seller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_seller(),
      GetArena());
  }
  buy_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_order().empty()) {
    buy_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_order(),
      GetArena());
  }
  sell_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_order().empty()) {
    sell_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_order(),
      GetArena());
  }
  if (from._internal_has_buyer_fee()) {
    buyer_fee_ = new ::vega::Fee(*from.buyer_fee_);
  } else {
    buyer_fee_ = nullptr;
  }
  if (from._internal_has_seller_fee()) {
    seller_fee_ = new ::vega::Fee(*from.seller_fee_);
  } else {
    seller_fee_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&seller_auction_batch_) -
    reinterpret_cast<char*>(&price_)) + sizeof(seller_auction_batch_));
  // @@protoc_insertion_point(copy_constructor:vega.Trade)
}

void Trade::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trade_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buyer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&buyer_fee_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&seller_auction_batch_) -
      reinterpret_cast<char*>(&buyer_fee_)) + sizeof(seller_auction_batch_));
}

Trade::~Trade() {
  // @@protoc_insertion_point(destructor:vega.Trade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buyer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buyer_fee_;
  if (this != internal_default_instance()) delete seller_fee_;
}

void Trade::ArenaDtor(void* object) {
  Trade* _this = reinterpret_cast< Trade* >(object);
  (void)_this;
}
void Trade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trade& Trade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trade_vega_2eproto.base);
  return *internal_default_instance();
}


void Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  buyer_.ClearToEmpty();
  seller_.ClearToEmpty();
  buy_order_.ClearToEmpty();
  sell_order_.ClearToEmpty();
  if (GetArena() == nullptr && buyer_fee_ != nullptr) {
    delete buyer_fee_;
  }
  buyer_fee_ = nullptr;
  if (GetArena() == nullptr && seller_fee_ != nullptr) {
    delete seller_fee_;
  }
  seller_fee_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seller_auction_batch_) -
      reinterpret_cast<char*>(&price_)) + sizeof(seller_auction_batch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 3 [json_name = "price"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 4 [json_name = "size"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buyer = 5 [json_name = "buyer"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_buyer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.buyer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string seller = 6 [json_name = "seller"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_seller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.seller"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Side aggressor = 7 [json_name = "aggressor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggressor(static_cast<::vega::Side>(val));
        } else goto handle_unusual;
        continue;
      // string buy_order = 8 [json_name = "buyOrder"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_buy_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.buy_order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_order = 9 [json_name = "sellOrder"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_sell_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.sell_order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 10 [json_name = "timestamp"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Trade.Type type = 11 [json_name = "type"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::Trade_Type>(val));
        } else goto handle_unusual;
        continue;
      // .vega.Fee buyer_fee = 12 [json_name = "buyerFee"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_buyer_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Fee seller_fee = 13 [json_name = "sellerFee"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_seller_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 buyer_auction_batch = 14 [json_name = "buyerAuctionBatch"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          buyer_auction_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seller_auction_batch = 15 [json_name = "sellerAuctionBatch"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          seller_auction_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  // uint64 price = 3 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_price(), target);
  }

  // uint64 size = 4 [json_name = "size"];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_size(), target);
  }

  // string buyer = 5 [json_name = "buyer"];
  if (this->buyer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buyer().data(), static_cast<int>(this->_internal_buyer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.buyer");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_buyer(), target);
  }

  // string seller = 6 [json_name = "seller"];
  if (this->seller().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seller().data(), static_cast<int>(this->_internal_seller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.seller");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_seller(), target);
  }

  // .vega.Side aggressor = 7 [json_name = "aggressor"];
  if (this->aggressor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_aggressor(), target);
  }

  // string buy_order = 8 [json_name = "buyOrder"];
  if (this->buy_order().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_order().data(), static_cast<int>(this->_internal_buy_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.buy_order");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_buy_order(), target);
  }

  // string sell_order = 9 [json_name = "sellOrder"];
  if (this->sell_order().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_order().data(), static_cast<int>(this->_internal_sell_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.sell_order");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sell_order(), target);
  }

  // int64 timestamp = 10 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timestamp(), target);
  }

  // .vega.Trade.Type type = 11 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_type(), target);
  }

  // .vega.Fee buyer_fee = 12 [json_name = "buyerFee"];
  if (this->has_buyer_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::buyer_fee(this), target, stream);
  }

  // .vega.Fee seller_fee = 13 [json_name = "sellerFee"];
  if (this->has_seller_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::seller_fee(this), target, stream);
  }

  // uint64 buyer_auction_batch = 14 [json_name = "buyerAuctionBatch"];
  if (this->buyer_auction_batch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_buyer_auction_batch(), target);
  }

  // uint64 seller_auction_batch = 15 [json_name = "sellerAuctionBatch"];
  if (this->seller_auction_batch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_seller_auction_batch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Trade)
  return target;
}

size_t Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Trade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string buyer = 5 [json_name = "buyer"];
  if (this->buyer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buyer());
  }

  // string seller = 6 [json_name = "seller"];
  if (this->seller().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seller());
  }

  // string buy_order = 8 [json_name = "buyOrder"];
  if (this->buy_order().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_order());
  }

  // string sell_order = 9 [json_name = "sellOrder"];
  if (this->sell_order().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_order());
  }

  // .vega.Fee buyer_fee = 12 [json_name = "buyerFee"];
  if (this->has_buyer_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buyer_fee_);
  }

  // .vega.Fee seller_fee = 13 [json_name = "sellerFee"];
  if (this->has_seller_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seller_fee_);
  }

  // uint64 price = 3 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 size = 4 [json_name = "size"];
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // .vega.Side aggressor = 7 [json_name = "aggressor"];
  if (this->aggressor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggressor());
  }

  // .vega.Trade.Type type = 11 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int64 timestamp = 10 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // uint64 buyer_auction_batch = 14 [json_name = "buyerAuctionBatch"];
  if (this->buyer_auction_batch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_buyer_auction_batch());
  }

  // uint64 seller_auction_batch = 15 [json_name = "sellerAuctionBatch"];
  if (this->seller_auction_batch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seller_auction_batch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const Trade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Trade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Trade)
    MergeFrom(*source);
  }
}

void Trade::MergeFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.buyer().size() > 0) {
    _internal_set_buyer(from._internal_buyer());
  }
  if (from.seller().size() > 0) {
    _internal_set_seller(from._internal_seller());
  }
  if (from.buy_order().size() > 0) {
    _internal_set_buy_order(from._internal_buy_order());
  }
  if (from.sell_order().size() > 0) {
    _internal_set_sell_order(from._internal_sell_order());
  }
  if (from.has_buyer_fee()) {
    _internal_mutable_buyer_fee()->::vega::Fee::MergeFrom(from._internal_buyer_fee());
  }
  if (from.has_seller_fee()) {
    _internal_mutable_seller_fee()->::vega::Fee::MergeFrom(from._internal_seller_fee());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.aggressor() != 0) {
    _internal_set_aggressor(from._internal_aggressor());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.buyer_auction_batch() != 0) {
    _internal_set_buyer_auction_batch(from._internal_buyer_auction_batch());
  }
  if (from.seller_auction_batch() != 0) {
    _internal_set_seller_auction_batch(from._internal_seller_auction_batch());
  }
}

void Trade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trade::CopyFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  return true;
}

void Trade::InternalSwap(Trade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buyer_.Swap(&other->buyer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  seller_.Swap(&other->seller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buy_order_.Swap(&other->buy_order_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sell_order_.Swap(&other->sell_order_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trade, seller_auction_batch_)
      + sizeof(Trade::seller_auction_batch_)
      - PROTOBUF_FIELD_OFFSET(Trade, buyer_fee_)>(
          reinterpret_cast<char*>(&buyer_fee_),
          reinterpret_cast<char*>(&other->buyer_fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Fee::_Internal {
 public:
};

Fee::Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Fee)
}
Fee::Fee(const Fee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&maker_fee_, &from.maker_fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&liquidity_fee_) -
    reinterpret_cast<char*>(&maker_fee_)) + sizeof(liquidity_fee_));
  // @@protoc_insertion_point(copy_constructor:vega.Fee)
}

void Fee::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&maker_fee_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&liquidity_fee_) -
      reinterpret_cast<char*>(&maker_fee_)) + sizeof(liquidity_fee_));
}

Fee::~Fee() {
  // @@protoc_insertion_point(destructor:vega.Fee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Fee::ArenaDtor(void* object) {
  Fee* _this = reinterpret_cast< Fee* >(object);
  (void)_this;
}
void Fee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fee& Fee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fee_vega_2eproto.base);
  return *internal_default_instance();
}


void Fee::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Fee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maker_fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&liquidity_fee_) -
      reinterpret_cast<char*>(&maker_fee_)) + sizeof(liquidity_fee_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 maker_fee = 1 [json_name = "makerFee"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maker_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 infrastructure_fee = 2 [json_name = "infrastructureFee"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          infrastructure_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 liquidity_fee = 3 [json_name = "liquidityFee"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          liquidity_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Fee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 maker_fee = 1 [json_name = "makerFee"];
  if (this->maker_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_maker_fee(), target);
  }

  // uint64 infrastructure_fee = 2 [json_name = "infrastructureFee"];
  if (this->infrastructure_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_infrastructure_fee(), target);
  }

  // uint64 liquidity_fee = 3 [json_name = "liquidityFee"];
  if (this->liquidity_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_liquidity_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Fee)
  return target;
}

size_t Fee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Fee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 maker_fee = 1 [json_name = "makerFee"];
  if (this->maker_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_maker_fee());
  }

  // uint64 infrastructure_fee = 2 [json_name = "infrastructureFee"];
  if (this->infrastructure_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_infrastructure_fee());
  }

  // uint64 liquidity_fee = 3 [json_name = "liquidityFee"];
  if (this->liquidity_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_liquidity_fee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  const Fee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Fee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Fee)
    MergeFrom(*source);
  }
}

void Fee::MergeFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maker_fee() != 0) {
    _internal_set_maker_fee(from._internal_maker_fee());
  }
  if (from.infrastructure_fee() != 0) {
    _internal_set_infrastructure_fee(from._internal_infrastructure_fee());
  }
  if (from.liquidity_fee() != 0) {
    _internal_set_liquidity_fee(from._internal_liquidity_fee());
  }
}

void Fee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fee::CopyFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fee::IsInitialized() const {
  return true;
}

void Fee::InternalSwap(Fee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fee, liquidity_fee_)
      + sizeof(Fee::liquidity_fee_)
      - PROTOBUF_FIELD_OFFSET(Fee, maker_fee_)>(
          reinterpret_cast<char*>(&maker_fee_),
          reinterpret_cast<char*>(&other->maker_fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradeSet::_Internal {
 public:
};

TradeSet::TradeSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TradeSet)
}
TradeSet::TradeSet(const TradeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.TradeSet)
}

void TradeSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeSet_vega_2eproto.base);
}

TradeSet::~TradeSet() {
  // @@protoc_insertion_point(destructor:vega.TradeSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradeSet::ArenaDtor(void* object) {
  TradeSet* _this = reinterpret_cast< TradeSet* >(object);
  (void)_this;
}
void TradeSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeSet& TradeSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeSet_vega_2eproto.base);
  return *internal_default_instance();
}


void TradeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TradeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TradeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TradeSet)
  return target;
}

size_t TradeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TradeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TradeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TradeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TradeSet)
    MergeFrom(*source);
  }
}

void TradeSet::MergeFrom(const TradeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TradeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TradeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeSet::CopyFrom(const TradeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TradeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeSet::IsInitialized() const {
  return true;
}

void TradeSet::InternalSwap(TradeSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Candle::_Internal {
 public:
};

Candle::Candle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Candle)
}
Candle::Candle(const Candle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datetime().empty()) {
    datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_datetime(),
      GetArena());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:vega.Candle)
}

void Candle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Candle_vega_2eproto.base);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(interval_));
}

Candle::~Candle() {
  // @@protoc_insertion_point(destructor:vega.Candle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Candle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Candle::ArenaDtor(void* object) {
  Candle* _this = reinterpret_cast< Candle* >(object);
  (void)_this;
}
void Candle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Candle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candle& Candle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Candle_vega_2eproto.base);
  return *internal_default_instance();
}


void Candle::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Candle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datetime_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Candle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1 [json_name = "timestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string datetime = 2 [json_name = "datetime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_datetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Candle.datetime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 high = 3 [json_name = "high"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 low = 4 [json_name = "low"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 open = 5 [json_name = "open"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 close = 6 [json_name = "close"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 7 [json_name = "volume"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Interval interval = 8 [json_name = "interval"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::vega::Interval>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Candle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string datetime = 2 [json_name = "datetime"];
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datetime().data(), static_cast<int>(this->_internal_datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Candle.datetime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_datetime(), target);
  }

  // uint64 high = 3 [json_name = "high"];
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_high(), target);
  }

  // uint64 low = 4 [json_name = "low"];
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_low(), target);
  }

  // uint64 open = 5 [json_name = "open"];
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_open(), target);
  }

  // uint64 close = 6 [json_name = "close"];
  if (this->close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_close(), target);
  }

  // uint64 volume = 7 [json_name = "volume"];
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_volume(), target);
  }

  // .vega.Interval interval = 8 [json_name = "interval"];
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Candle)
  return target;
}

size_t Candle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Candle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string datetime = 2 [json_name = "datetime"];
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datetime());
  }

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // uint64 high = 3 [json_name = "high"];
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_high());
  }

  // uint64 low = 4 [json_name = "low"];
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_low());
  }

  // uint64 open = 5 [json_name = "open"];
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_open());
  }

  // uint64 close = 6 [json_name = "close"];
  if (this->close() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_close());
  }

  // uint64 volume = 7 [json_name = "volume"];
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  // .vega.Interval interval = 8 [json_name = "interval"];
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  const Candle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Candle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Candle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Candle)
    MergeFrom(*source);
  }
}

void Candle::MergeFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datetime().size() > 0) {
    _internal_set_datetime(from._internal_datetime());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.close() != 0) {
    _internal_set_close(from._internal_close());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
}

void Candle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candle::CopyFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candle::IsInitialized() const {
  return true;
}

void Candle::InternalSwap(Candle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Candle, interval_)
      + sizeof(Candle::interval_)
      - PROTOBUF_FIELD_OFFSET(Candle, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Candle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PriceLevel::_Internal {
 public:
};

PriceLevel::PriceLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PriceLevel)
}
PriceLevel::PriceLevel(const PriceLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:vega.PriceLevel)
}

void PriceLevel::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
}

PriceLevel::~PriceLevel() {
  // @@protoc_insertion_point(destructor:vega.PriceLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PriceLevel::ArenaDtor(void* object) {
  PriceLevel* _this = reinterpret_cast< PriceLevel* >(object);
  (void)_this;
}
void PriceLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceLevel& PriceLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceLevel_vega_2eproto.base);
  return *internal_default_instance();
}


void PriceLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PriceLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 price = 1 [json_name = "price"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 number_of_orders = 2 [json_name = "numberOfOrders"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_of_orders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 3 [json_name = "volume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PriceLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_price(), target);
  }

  // uint64 number_of_orders = 2 [json_name = "numberOfOrders"];
  if (this->number_of_orders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_number_of_orders(), target);
  }

  // uint64 volume = 3 [json_name = "volume"];
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PriceLevel)
  return target;
}

size_t PriceLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PriceLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 number_of_orders = 2 [json_name = "numberOfOrders"];
  if (this->number_of_orders() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_number_of_orders());
  }

  // uint64 volume = 3 [json_name = "volume"];
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PriceLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PriceLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PriceLevel)
    MergeFrom(*source);
  }
}

void PriceLevel::MergeFrom(const PriceLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PriceLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.number_of_orders() != 0) {
    _internal_set_number_of_orders(from._internal_number_of_orders());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
}

void PriceLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PriceLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceLevel::CopyFrom(const PriceLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PriceLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceLevel::IsInitialized() const {
  return true;
}

void PriceLevel::InternalSwap(PriceLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceLevel, volume_)
      + sizeof(PriceLevel::volume_)
      - PROTOBUF_FIELD_OFFSET(PriceLevel, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepth::_Internal {
 public:
};

MarketDepth::MarketDepth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buy_(arena),
  sell_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.MarketDepth)
}
MarketDepth::MarketDepth(const MarketDepth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:vega.MarketDepth)
}

void MarketDepth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepth_vega_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_number_ = PROTOBUF_ULONGLONG(0);
}

MarketDepth::~MarketDepth() {
  // @@protoc_insertion_point(destructor:vega.MarketDepth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepth::ArenaDtor(void* object) {
  MarketDepth* _this = reinterpret_cast< MarketDepth* >(object);
  (void)_this;
}
void MarketDepth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepth& MarketDepth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepth_vega_2eproto.base);
  return *internal_default_instance();
}


void MarketDepth::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketDepth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  market_id_.ClearToEmpty();
  sequence_number_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketDepth.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 sequence_number = 4 [json_name = "sequenceNumber"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketDepth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketDepth.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buy(i), target, stream);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sell(i), target, stream);
  }

  // uint64 sequence_number = 4 [json_name = "sequenceNumber"];
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketDepth)
  return target;
}

size_t MarketDepth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketDepth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  total_size += 1UL * this->_internal_buy_size();
  for (const auto& msg : this->buy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  total_size += 1UL * this->_internal_sell_size();
  for (const auto& msg : this->sell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // uint64 sequence_number = 4 [json_name = "sequenceNumber"];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketDepth)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketDepth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketDepth)
    MergeFrom(*source);
  }
}

void MarketDepth::MergeFrom(const MarketDepth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketDepth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void MarketDepth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepth::CopyFrom(const MarketDepth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepth::IsInitialized() const {
  return true;
}

void MarketDepth::InternalSwap(MarketDepth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buy_.InternalSwap(&other->buy_);
  sell_.InternalSwap(&other->sell_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sequence_number_, other->sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthUpdate::_Internal {
 public:
};

MarketDepthUpdate::MarketDepthUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buy_(arena),
  sell_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.MarketDepthUpdate)
}
MarketDepthUpdate::MarketDepthUpdate(const MarketDepthUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:vega.MarketDepthUpdate)
}

void MarketDepthUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthUpdate_vega_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_number_ = PROTOBUF_ULONGLONG(0);
}

MarketDepthUpdate::~MarketDepthUpdate() {
  // @@protoc_insertion_point(destructor:vega.MarketDepthUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthUpdate::ArenaDtor(void* object) {
  MarketDepthUpdate* _this = reinterpret_cast< MarketDepthUpdate* >(object);
  (void)_this;
}
void MarketDepthUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthUpdate& MarketDepthUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthUpdate_vega_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketDepthUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  market_id_.ClearToEmpty();
  sequence_number_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketDepthUpdate.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 sequence_number = 4 [json_name = "sequenceNumber"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketDepthUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketDepthUpdate.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buy(i), target, stream);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sell(i), target, stream);
  }

  // uint64 sequence_number = 4 [json_name = "sequenceNumber"];
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketDepthUpdate)
  return target;
}

size_t MarketDepthUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketDepthUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  total_size += 1UL * this->_internal_buy_size();
  for (const auto& msg : this->buy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  total_size += 1UL * this->_internal_sell_size();
  for (const auto& msg : this->sell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // uint64 sequence_number = 4 [json_name = "sequenceNumber"];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketDepthUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketDepthUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketDepthUpdate)
    MergeFrom(*source);
  }
}

void MarketDepthUpdate::MergeFrom(const MarketDepthUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketDepthUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void MarketDepthUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketDepthUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdate::CopyFrom(const MarketDepthUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketDepthUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdate::IsInitialized() const {
  return true;
}

void MarketDepthUpdate::InternalSwap(MarketDepthUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buy_.InternalSwap(&other->buy_);
  sell_.InternalSwap(&other->sell_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sequence_number_, other->sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  ::memcpy(&open_volume_, &from.open_volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&open_volume_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:vega.Position)
}

void Position::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Position_vega_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&open_volume_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&open_volume_)) + sizeof(updated_at_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:vega.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_vega_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  ::memset(&open_volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&open_volume_)) + sizeof(updated_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Position.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Position.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 open_volume = 3 [json_name = "openVolume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 realised_pnl = 4 [json_name = "realisedPnl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          realised_pnl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unrealised_pnl = 5 [json_name = "unrealisedPnl"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          unrealised_pnl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 average_entry_price = 6 [json_name = "averageEntryPrice"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          average_entry_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updated_at = 7 [json_name = "updatedAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Position.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Position.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // int64 open_volume = 3 [json_name = "openVolume"];
  if (this->open_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_open_volume(), target);
  }

  // int64 realised_pnl = 4 [json_name = "realisedPnl"];
  if (this->realised_pnl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_realised_pnl(), target);
  }

  // int64 unrealised_pnl = 5 [json_name = "unrealisedPnl"];
  if (this->unrealised_pnl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_unrealised_pnl(), target);
  }

  // uint64 average_entry_price = 6 [json_name = "averageEntryPrice"];
  if (this->average_entry_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_average_entry_price(), target);
  }

  // int64 updated_at = 7 [json_name = "updatedAt"];
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // int64 open_volume = 3 [json_name = "openVolume"];
  if (this->open_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_open_volume());
  }

  // int64 realised_pnl = 4 [json_name = "realisedPnl"];
  if (this->realised_pnl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_realised_pnl());
  }

  // int64 unrealised_pnl = 5 [json_name = "unrealisedPnl"];
  if (this->unrealised_pnl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unrealised_pnl());
  }

  // uint64 average_entry_price = 6 [json_name = "averageEntryPrice"];
  if (this->average_entry_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_average_entry_price());
  }

  // int64 updated_at = 7 [json_name = "updatedAt"];
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.open_volume() != 0) {
    _internal_set_open_volume(from._internal_open_volume());
  }
  if (from.realised_pnl() != 0) {
    _internal_set_realised_pnl(from._internal_realised_pnl());
  }
  if (from.unrealised_pnl() != 0) {
    _internal_set_unrealised_pnl(from._internal_unrealised_pnl());
  }
  if (from.average_entry_price() != 0) {
    _internal_set_average_entry_price(from._internal_average_entry_price());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, updated_at_)
      + sizeof(Position::updated_at_)
      - PROTOBUF_FIELD_OFFSET(Position, open_volume_)>(
          reinterpret_cast<char*>(&open_volume_),
          reinterpret_cast<char*>(&other->open_volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionTrade::_Internal {
 public:
};

PositionTrade::PositionTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PositionTrade)
}
PositionTrade::PositionTrade(const PositionTrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:vega.PositionTrade)
}

void PositionTrade::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(price_));
}

PositionTrade::~PositionTrade() {
  // @@protoc_insertion_point(destructor:vega.PositionTrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionTrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionTrade::ArenaDtor(void* object) {
  PositionTrade* _this = reinterpret_cast< PositionTrade* >(object);
  (void)_this;
}
void PositionTrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionTrade& PositionTrade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionTrade_vega_2eproto.base);
  return *internal_default_instance();
}


void PositionTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PositionTrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionTrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 volume = 1 [json_name = "volume"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 2 [json_name = "price"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionTrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PositionTrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 volume = 1 [json_name = "volume"];
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_volume(), target);
  }

  // uint64 price = 2 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PositionTrade)
  return target;
}

size_t PositionTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PositionTrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 volume = 1 [json_name = "volume"];
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // uint64 price = 2 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionTrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PositionTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionTrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionTrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PositionTrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PositionTrade)
    MergeFrom(*source);
  }
}

void PositionTrade::MergeFrom(const PositionTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PositionTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void PositionTrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PositionTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionTrade::CopyFrom(const PositionTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PositionTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionTrade::IsInitialized() const {
  return true;
}

void PositionTrade::InternalSwap(PositionTrade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionTrade, price_)
      + sizeof(PositionTrade::price_)
      - PROTOBUF_FIELD_OFFSET(PositionTrade, volume_)>(
          reinterpret_cast<char*>(&volume_),
          reinterpret_cast<char*>(&other->volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionTrade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Deposit::_Internal {
 public:
};

Deposit::Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Deposit)
}
Deposit::Deposit(const Deposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_hash(),
      GetArena());
  }
  ::memcpy(&credited_timestamp_, &from.credited_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&credited_timestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:vega.Deposit)
}

void Deposit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Deposit_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&credited_timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&credited_timestamp_)) + sizeof(status_));
}

Deposit::~Deposit() {
  // @@protoc_insertion_point(destructor:vega.Deposit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Deposit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Deposit::ArenaDtor(void* object) {
  Deposit* _this = reinterpret_cast< Deposit* >(object);
  (void)_this;
}
void Deposit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Deposit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deposit& Deposit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Deposit_vega_2eproto.base);
  return *internal_default_instance();
}


void Deposit::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Deposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  asset_.ClearToEmpty();
  amount_.ClearToEmpty();
  tx_hash_.ClearToEmpty();
  ::memset(&credited_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&credited_timestamp_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deposit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Deposit.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Deposit.Status status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::Deposit_Status>(val));
        } else goto handle_unusual;
        continue;
      // string party_id = 3 [json_name = "partyId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Deposit.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 4 [json_name = "asset"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Deposit.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 5 [json_name = "amount"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Deposit.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tx_hash = 6 [json_name = "txHash"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Deposit.tx_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 credited_timestamp = 7 [json_name = "creditedTimestamp"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          credited_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 created_timestamp = 8 [json_name = "createdTimestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          created_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Deposit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Deposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .vega.Deposit.Status status = 2 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string party_id = 3 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.party_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_party_id(), target);
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.asset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset(), target);
  }

  // string amount = 5 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.amount");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_amount(), target);
  }

  // string tx_hash = 6 [json_name = "txHash"];
  if (this->tx_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_hash().data(), static_cast<int>(this->_internal_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.tx_hash");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_tx_hash(), target);
  }

  // int64 credited_timestamp = 7 [json_name = "creditedTimestamp"];
  if (this->credited_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_credited_timestamp(), target);
  }

  // int64 created_timestamp = 8 [json_name = "createdTimestamp"];
  if (this->created_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_created_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Deposit)
  return target;
}

size_t Deposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Deposit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string party_id = 3 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string amount = 5 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string tx_hash = 6 [json_name = "txHash"];
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_hash());
  }

  // int64 credited_timestamp = 7 [json_name = "creditedTimestamp"];
  if (this->credited_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_credited_timestamp());
  }

  // int64 created_timestamp = 8 [json_name = "createdTimestamp"];
  if (this->created_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created_timestamp());
  }

  // .vega.Deposit.Status status = 2 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deposit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Deposit)
  GOOGLE_DCHECK_NE(&from, this);
  const Deposit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Deposit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Deposit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Deposit)
    MergeFrom(*source);
  }
}

void Deposit::MergeFrom(const Deposit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Deposit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from.credited_timestamp() != 0) {
    _internal_set_credited_timestamp(from._internal_credited_timestamp());
  }
  if (from.created_timestamp() != 0) {
    _internal_set_created_timestamp(from._internal_created_timestamp());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Deposit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Deposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deposit::CopyFrom(const Deposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Deposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deposit::IsInitialized() const {
  return true;
}

void Deposit::InternalSwap(Deposit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Deposit, status_)
      + sizeof(Deposit::status_)
      - PROTOBUF_FIELD_OFFSET(Deposit, credited_timestamp_)>(
          reinterpret_cast<char*>(&credited_timestamp_),
          reinterpret_cast<char*>(&other->credited_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Deposit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Withdrawal::_Internal {
 public:
  static const ::vega::WithdrawExt& ext(const Withdrawal* msg);
};

const ::vega::WithdrawExt&
Withdrawal::_Internal::ext(const Withdrawal* msg) {
  return *msg->ext_;
}
Withdrawal::Withdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Withdrawal)
}
Withdrawal::Withdrawal(const Withdrawal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ref().empty()) {
    ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ref(),
      GetArena());
  }
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_hash(),
      GetArena());
  }
  if (from._internal_has_ext()) {
    ext_ = new ::vega::WithdrawExt(*from.ext_);
  } else {
    ext_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:vega.Withdrawal)
}

void Withdrawal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Withdrawal_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ext_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&ext_)) + sizeof(status_));
}

Withdrawal::~Withdrawal() {
  // @@protoc_insertion_point(destructor:vega.Withdrawal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Withdrawal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_;
}

void Withdrawal::ArenaDtor(void* object) {
  Withdrawal* _this = reinterpret_cast< Withdrawal* >(object);
  (void)_this;
}
void Withdrawal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Withdrawal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Withdrawal& Withdrawal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Withdrawal_vega_2eproto.base);
  return *internal_default_instance();
}


void Withdrawal::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Withdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  asset_.ClearToEmpty();
  ref_.ClearToEmpty();
  tx_hash_.ClearToEmpty();
  if (GetArena() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Withdrawal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Withdrawal.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Withdrawal.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 4 [json_name = "asset"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Withdrawal.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Withdrawal.Status status = 5 [json_name = "status"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::Withdrawal_Status>(val));
        } else goto handle_unusual;
        continue;
      // string ref = 6 [json_name = "ref"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Withdrawal.ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiry = 7 [json_name = "expiry"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tx_hash = 8 [json_name = "txHash"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Withdrawal.tx_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 created_timestamp = 9 [json_name = "createdTimestamp"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          created_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 withdrawn_timestamp = 10 [json_name = "withdrawnTimestamp"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          withdrawn_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.WithdrawExt ext = 11 [json_name = "ext"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Withdrawal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Withdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.asset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset(), target);
  }

  // .vega.Withdrawal.Status status = 5 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // string ref = 6 [json_name = "ref"];
  if (this->ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ref().data(), static_cast<int>(this->_internal_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.ref");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ref(), target);
  }

  // int64 expiry = 7 [json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_expiry(), target);
  }

  // string tx_hash = 8 [json_name = "txHash"];
  if (this->tx_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_hash().data(), static_cast<int>(this->_internal_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.tx_hash");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tx_hash(), target);
  }

  // int64 created_timestamp = 9 [json_name = "createdTimestamp"];
  if (this->created_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_created_timestamp(), target);
  }

  // int64 withdrawn_timestamp = 10 [json_name = "withdrawnTimestamp"];
  if (this->withdrawn_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_withdrawn_timestamp(), target);
  }

  // .vega.WithdrawExt ext = 11 [json_name = "ext"];
  if (this->has_ext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ext(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Withdrawal)
  return target;
}

size_t Withdrawal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Withdrawal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string ref = 6 [json_name = "ref"];
  if (this->ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ref());
  }

  // string tx_hash = 8 [json_name = "txHash"];
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_hash());
  }

  // .vega.WithdrawExt ext = 11 [json_name = "ext"];
  if (this->has_ext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ext_);
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // int64 expiry = 7 [json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());
  }

  // int64 created_timestamp = 9 [json_name = "createdTimestamp"];
  if (this->created_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created_timestamp());
  }

  // int64 withdrawn_timestamp = 10 [json_name = "withdrawnTimestamp"];
  if (this->withdrawn_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_withdrawn_timestamp());
  }

  // .vega.Withdrawal.Status status = 5 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Withdrawal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Withdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  const Withdrawal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Withdrawal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Withdrawal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Withdrawal)
    MergeFrom(*source);
  }
}

void Withdrawal::MergeFrom(const Withdrawal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Withdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.ref().size() > 0) {
    _internal_set_ref(from._internal_ref());
  }
  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from.has_ext()) {
    _internal_mutable_ext()->::vega::WithdrawExt::MergeFrom(from._internal_ext());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.created_timestamp() != 0) {
    _internal_set_created_timestamp(from._internal_created_timestamp());
  }
  if (from.withdrawn_timestamp() != 0) {
    _internal_set_withdrawn_timestamp(from._internal_withdrawn_timestamp());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Withdrawal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Withdrawal::CopyFrom(const Withdrawal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Withdrawal::IsInitialized() const {
  return true;
}

void Withdrawal::InternalSwap(Withdrawal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ref_.Swap(&other->ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Withdrawal, status_)
      + sizeof(Withdrawal::status_)
      - PROTOBUF_FIELD_OFFSET(Withdrawal, ext_)>(
          reinterpret_cast<char*>(&ext_),
          reinterpret_cast<char*>(&other->ext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Withdrawal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawExt::_Internal {
 public:
  static const ::vega::Erc20WithdrawExt& erc20(const WithdrawExt* msg);
};

const ::vega::Erc20WithdrawExt&
WithdrawExt::_Internal::erc20(const WithdrawExt* msg) {
  return *msg->ext_.erc20_;
}
void WithdrawExt::set_allocated_erc20(::vega::Erc20WithdrawExt* erc20) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ext();
  if (erc20) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(erc20);
    if (message_arena != submessage_arena) {
      erc20 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc20, submessage_arena);
    }
    set_has_erc20();
    ext_.erc20_ = erc20;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.WithdrawExt.erc20)
}
WithdrawExt::WithdrawExt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.WithdrawExt)
}
WithdrawExt::WithdrawExt(const WithdrawExt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ext();
  switch (from.ext_case()) {
    case kErc20: {
      _internal_mutable_erc20()->::vega::Erc20WithdrawExt::MergeFrom(from._internal_erc20());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.WithdrawExt)
}

void WithdrawExt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawExt_vega_2eproto.base);
  clear_has_ext();
}

WithdrawExt::~WithdrawExt() {
  // @@protoc_insertion_point(destructor:vega.WithdrawExt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawExt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_ext()) {
    clear_ext();
  }
}

void WithdrawExt::ArenaDtor(void* object) {
  WithdrawExt* _this = reinterpret_cast< WithdrawExt* >(object);
  (void)_this;
}
void WithdrawExt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawExt& WithdrawExt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawExt_vega_2eproto.base);
  return *internal_default_instance();
}


void WithdrawExt::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:vega.WithdrawExt)
  switch (ext_case()) {
    case kErc20: {
      if (GetArena() == nullptr) {
        delete ext_.erc20_;
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXT_NOT_SET;
}


void WithdrawExt::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.WithdrawExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ext();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawExt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Erc20WithdrawExt erc20 = 1 [json_name = "erc20"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc20(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawExt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.WithdrawExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Erc20WithdrawExt erc20 = 1 [json_name = "erc20"];
  if (_internal_has_erc20()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::erc20(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.WithdrawExt)
  return target;
}

size_t WithdrawExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.WithdrawExt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ext_case()) {
    // .vega.Erc20WithdrawExt erc20 = 1 [json_name = "erc20"];
    case kErc20: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_.erc20_);
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawExt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawExt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.WithdrawExt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.WithdrawExt)
    MergeFrom(*source);
  }
}

void WithdrawExt::MergeFrom(const WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ext_case()) {
    case kErc20: {
      _internal_mutable_erc20()->::vega::Erc20WithdrawExt::MergeFrom(from._internal_erc20());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
}

void WithdrawExt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawExt::CopyFrom(const WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawExt::IsInitialized() const {
  return true;
}

void WithdrawExt::InternalSwap(WithdrawExt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ext_, other->ext_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawExt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Erc20WithdrawExt::_Internal {
 public:
};

Erc20WithdrawExt::Erc20WithdrawExt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Erc20WithdrawExt)
}
Erc20WithdrawExt::Erc20WithdrawExt(const Erc20WithdrawExt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.Erc20WithdrawExt)
}

void Erc20WithdrawExt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Erc20WithdrawExt_vega_2eproto.base);
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Erc20WithdrawExt::~Erc20WithdrawExt() {
  // @@protoc_insertion_point(destructor:vega.Erc20WithdrawExt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Erc20WithdrawExt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Erc20WithdrawExt::ArenaDtor(void* object) {
  Erc20WithdrawExt* _this = reinterpret_cast< Erc20WithdrawExt* >(object);
  (void)_this;
}
void Erc20WithdrawExt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erc20WithdrawExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Erc20WithdrawExt& Erc20WithdrawExt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Erc20WithdrawExt_vega_2eproto.base);
  return *internal_default_instance();
}


void Erc20WithdrawExt::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Erc20WithdrawExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erc20WithdrawExt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string receiver_address = 1 [json_name = "receiverAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Erc20WithdrawExt.receiver_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Erc20WithdrawExt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Erc20WithdrawExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiver_address = 1 [json_name = "receiverAddress"];
  if (this->receiver_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_address().data(), static_cast<int>(this->_internal_receiver_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Erc20WithdrawExt.receiver_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_receiver_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Erc20WithdrawExt)
  return target;
}

size_t Erc20WithdrawExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Erc20WithdrawExt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receiver_address = 1 [json_name = "receiverAddress"];
  if (this->receiver_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Erc20WithdrawExt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Erc20WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  const Erc20WithdrawExt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Erc20WithdrawExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Erc20WithdrawExt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Erc20WithdrawExt)
    MergeFrom(*source);
  }
}

void Erc20WithdrawExt::MergeFrom(const Erc20WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Erc20WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiver_address().size() > 0) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
}

void Erc20WithdrawExt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Erc20WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Erc20WithdrawExt::CopyFrom(const Erc20WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Erc20WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erc20WithdrawExt::IsInitialized() const {
  return true;
}

void Erc20WithdrawExt::InternalSwap(Erc20WithdrawExt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  receiver_address_.Swap(&other->receiver_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Erc20WithdrawExt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Account::_Internal {
 public:
};

Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vega.Account)
}

void Account::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Account_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(type_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:vega.Account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Account::ArenaDtor(void* object) {
  Account* _this = reinterpret_cast< Account* >(object);
  (void)_this;
}
void Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account& Account::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Account_vega_2eproto.base);
  return *internal_default_instance();
}


void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  owner_.ClearToEmpty();
  asset_.ClearToEmpty();
  market_id_.ClearToEmpty();
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Account.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner = 2 [json_name = "owner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Account.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 balance = 3 [json_name = "balance"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 4 [json_name = "asset"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Account.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 5 [json_name = "marketId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Account.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.AccountType type = 6 [json_name = "type"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::AccountType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Account.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string owner = 2 [json_name = "owner"];
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Account.owner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner(), target);
  }

  // uint64 balance = 3 [json_name = "balance"];
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_balance(), target);
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Account.asset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset(), target);
  }

  // string market_id = 5 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Account.market_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_market_id(), target);
  }

  // .vega.AccountType type = 6 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string owner = 2 [json_name = "owner"];
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string market_id = 5 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // uint64 balance = 3 [json_name = "balance"];
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_balance());
  }

  // .vega.AccountType type = 6 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account, type_)
      + sizeof(Account::type_)
      - PROTOBUF_FIELD_OFFSET(Account, balance_)>(
          reinterpret_cast<char*>(&balance_),
          reinterpret_cast<char*>(&other->balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FinancialAmount::_Internal {
 public:
};

FinancialAmount::FinancialAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.FinancialAmount)
}
FinancialAmount::FinancialAmount(const FinancialAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vega.FinancialAmount)
}

void FinancialAmount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FinancialAmount_vega_2eproto.base);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

FinancialAmount::~FinancialAmount() {
  // @@protoc_insertion_point(destructor:vega.FinancialAmount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinancialAmount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FinancialAmount::ArenaDtor(void* object) {
  FinancialAmount* _this = reinterpret_cast< FinancialAmount* >(object);
  (void)_this;
}
void FinancialAmount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinancialAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinancialAmount& FinancialAmount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinancialAmount_vega_2eproto.base);
  return *internal_default_instance();
}


void FinancialAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.FinancialAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_.ClearToEmpty();
  amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinancialAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 amount = 1 [json_name = "amount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 2 [json_name = "asset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.FinancialAmount.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinancialAmount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.FinancialAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.FinancialAmount.asset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.FinancialAmount)
  return target;
}

size_t FinancialAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.FinancialAmount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // uint64 amount = 1 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinancialAmount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.FinancialAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const FinancialAmount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinancialAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.FinancialAmount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.FinancialAmount)
    MergeFrom(*source);
  }
}

void FinancialAmount::MergeFrom(const FinancialAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.FinancialAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void FinancialAmount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.FinancialAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinancialAmount::CopyFrom(const FinancialAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.FinancialAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinancialAmount::IsInitialized() const {
  return true;
}

void FinancialAmount::InternalSwap(FinancialAmount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinancialAmount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transfer::_Internal {
 public:
  static const ::vega::FinancialAmount& amount(const Transfer* msg);
};

const ::vega::FinancialAmount&
Transfer::_Internal::amount(const Transfer* msg) {
  return *msg->amount_;
}
Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(),
      GetArena());
  }
  if (from._internal_has_amount()) {
    amount_ = new ::vega::FinancialAmount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  ::memcpy(&min_amount_, &from.min_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&min_amount_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vega.Transfer)
}

void Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transfer_vega_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(type_));
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:vega.Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transfer& Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transfer_vega_2eproto.base);
  return *internal_default_instance();
}


void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  ::memset(&min_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&min_amount_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner = 1 [json_name = "owner"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Transfer.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.FinancialAmount amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.TransferType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::TransferType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 min_amount = 4 [json_name = "minAmount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          min_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Transfer.owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // .vega.FinancialAmount amount = 2 [json_name = "amount"];
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::amount(this), target, stream);
  }

  // .vega.TransferType type = 3 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // uint64 min_amount = 4 [json_name = "minAmount"];
  if (this->min_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_min_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // .vega.FinancialAmount amount = 2 [json_name = "amount"];
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // uint64 min_amount = 4 [json_name = "minAmount"];
  if (this->min_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_amount());
  }

  // .vega.TransferType type = 3 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Transfer)
    MergeFrom(*source);
  }
}

void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::vega::FinancialAmount::MergeFrom(from._internal_amount());
  }
  if (from.min_amount() != 0) {
    _internal_set_min_amount(from._internal_min_amount());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transfer, type_)
      + sizeof(Transfer::type_)
      - PROTOBUF_FIELD_OFFSET(Transfer, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferRequest::_Internal {
 public:
};

TransferRequest::TransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  from_account_(arena),
  to_account_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TransferRequest)
}
TransferRequest::TransferRequest(const TransferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      from_account_(from.from_account_),
      to_account_(from.to_account_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_amount_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(min_amount_));
  // @@protoc_insertion_point(copy_constructor:vega.TransferRequest)
}

void TransferRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferRequest_vega_2eproto.base);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&min_amount_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(min_amount_));
}

TransferRequest::~TransferRequest() {
  // @@protoc_insertion_point(destructor:vega.TransferRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferRequest::ArenaDtor(void* object) {
  TransferRequest* _this = reinterpret_cast< TransferRequest* >(object);
  (void)_this;
}
void TransferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferRequest& TransferRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferRequest_vega_2eproto.base);
  return *internal_default_instance();
}


void TransferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TransferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_account_.Clear();
  to_account_.Clear();
  asset_.ClearToEmpty();
  reference_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_amount_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(min_amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account from_account = 1 [json_name = "fromAccount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_from_account(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.Account to_account = 2 [json_name = "toAccount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_to_account(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_amount = 4 [json_name = "minAmount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          min_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 5 [json_name = "asset"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.TransferRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 6 [json_name = "reference"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.TransferRequest.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TransferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account from_account = 1 [json_name = "fromAccount"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_from_account_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_from_account(i), target, stream);
  }

  // repeated .vega.Account to_account = 2 [json_name = "toAccount"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_to_account_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_to_account(i), target, stream);
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // uint64 min_amount = 4 [json_name = "minAmount"];
  if (this->min_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_min_amount(), target);
  }

  // string asset = 5 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.TransferRequest.asset");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_asset(), target);
  }

  // string reference = 6 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.TransferRequest.reference");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TransferRequest)
  return target;
}

size_t TransferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TransferRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account from_account = 1 [json_name = "fromAccount"];
  total_size += 1UL * this->_internal_from_account_size();
  for (const auto& msg : this->from_account_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.Account to_account = 2 [json_name = "toAccount"];
  total_size += 1UL * this->_internal_to_account_size();
  for (const auto& msg : this->to_account_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string asset = 5 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string reference = 6 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // uint64 min_amount = 4 [json_name = "minAmount"];
  if (this->min_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TransferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TransferRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TransferRequest)
    MergeFrom(*source);
  }
}

void TransferRequest::MergeFrom(const TransferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TransferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  from_account_.MergeFrom(from.from_account_);
  to_account_.MergeFrom(from.to_account_);
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.min_amount() != 0) {
    _internal_set_min_amount(from._internal_min_amount());
  }
}

void TransferRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRequest::CopyFrom(const TransferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRequest::IsInitialized() const {
  return true;
}

void TransferRequest::InternalSwap(TransferRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_account_.InternalSwap(&other->from_account_);
  to_account_.InternalSwap(&other->to_account_);
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferRequest, min_amount_)
      + sizeof(TransferRequest::min_amount_)
      - PROTOBUF_FIELD_OFFSET(TransferRequest, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LedgerEntry::_Internal {
 public:
};

LedgerEntry::LedgerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LedgerEntry)
}
LedgerEntry::LedgerEntry(const LedgerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_account().empty()) {
    from_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_account(),
      GetArena());
  }
  to_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_account().empty()) {
    to_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_account(),
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(),
      GetArena());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:vega.LedgerEntry)
}

void LedgerEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LedgerEntry_vega_2eproto.base);
  from_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(timestamp_));
}

LedgerEntry::~LedgerEntry() {
  // @@protoc_insertion_point(destructor:vega.LedgerEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LedgerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LedgerEntry::ArenaDtor(void* object) {
  LedgerEntry* _this = reinterpret_cast< LedgerEntry* >(object);
  (void)_this;
}
void LedgerEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LedgerEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedgerEntry& LedgerEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LedgerEntry_vega_2eproto.base);
  return *internal_default_instance();
}


void LedgerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LedgerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_account_.ClearToEmpty();
  to_account_.ClearToEmpty();
  reference_.ClearToEmpty();
  type_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LedgerEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from_account = 1 [json_name = "fromAccount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LedgerEntry.from_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_account = 2 [json_name = "toAccount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LedgerEntry.to_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 4 [json_name = "reference"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LedgerEntry.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 5 [json_name = "type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LedgerEntry.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 6 [json_name = "timestamp"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LedgerEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LedgerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_account = 1 [json_name = "fromAccount"];
  if (this->from_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_account().data(), static_cast<int>(this->_internal_from_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.from_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_account(), target);
  }

  // string to_account = 2 [json_name = "toAccount"];
  if (this->to_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_account().data(), static_cast<int>(this->_internal_to_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.to_account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_account(), target);
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // string reference = 4 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reference(), target);
  }

  // string type = 5 [json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  // int64 timestamp = 6 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LedgerEntry)
  return target;
}

size_t LedgerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LedgerEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_account = 1 [json_name = "fromAccount"];
  if (this->from_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_account());
  }

  // string to_account = 2 [json_name = "toAccount"];
  if (this->to_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_account());
  }

  // string reference = 4 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // string type = 5 [json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // int64 timestamp = 6 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedgerEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LedgerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LedgerEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LedgerEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LedgerEntry)
    MergeFrom(*source);
  }
}

void LedgerEntry::MergeFrom(const LedgerEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LedgerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_account().size() > 0) {
    _internal_set_from_account(from._internal_from_account());
  }
  if (from.to_account().size() > 0) {
    _internal_set_to_account(from._internal_to_account());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void LedgerEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LedgerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerEntry::CopyFrom(const LedgerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LedgerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerEntry::IsInitialized() const {
  return true;
}

void LedgerEntry::InternalSwap(LedgerEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_account_.Swap(&other->from_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_account_.Swap(&other->to_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LedgerEntry, timestamp_)
      + sizeof(LedgerEntry::timestamp_)
      - PROTOBUF_FIELD_OFFSET(LedgerEntry, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LedgerEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferBalance::_Internal {
 public:
  static const ::vega::Account& account(const TransferBalance* msg);
};

const ::vega::Account&
TransferBalance::_Internal::account(const TransferBalance* msg) {
  return *msg->account_;
}
TransferBalance::TransferBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TransferBalance)
}
TransferBalance::TransferBalance(const TransferBalance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::vega::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:vega.TransferBalance)
}

void TransferBalance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferBalance_vega_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&account_)) + sizeof(balance_));
}

TransferBalance::~TransferBalance() {
  // @@protoc_insertion_point(destructor:vega.TransferBalance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferBalance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void TransferBalance::ArenaDtor(void* object) {
  TransferBalance* _this = reinterpret_cast< TransferBalance* >(object);
  (void)_this;
}
void TransferBalance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferBalance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferBalance& TransferBalance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferBalance_vega_2eproto.base);
  return *internal_default_instance();
}


void TransferBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TransferBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  balance_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferBalance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Account account = 1 [json_name = "account"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 balance = 2 [json_name = "balance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferBalance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TransferBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Account account = 1 [json_name = "account"];
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // uint64 balance = 2 [json_name = "balance"];
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TransferBalance)
  return target;
}

size_t TransferBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TransferBalance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Account account = 1 [json_name = "account"];
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // uint64 balance = 2 [json_name = "balance"];
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferBalance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TransferBalance)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferBalance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferBalance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TransferBalance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TransferBalance)
    MergeFrom(*source);
  }
}

void TransferBalance::MergeFrom(const TransferBalance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TransferBalance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::vega::Account::MergeFrom(from._internal_account());
  }
  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
}

void TransferBalance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TransferBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferBalance::CopyFrom(const TransferBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TransferBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferBalance::IsInitialized() const {
  return true;
}

void TransferBalance::InternalSwap(TransferBalance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferBalance, balance_)
      + sizeof(TransferBalance::balance_)
      - PROTOBUF_FIELD_OFFSET(TransferBalance, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferBalance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferResponse::_Internal {
 public:
};

TransferResponse::TransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transfers_(arena),
  balances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TransferResponse)
}
TransferResponse::TransferResponse(const TransferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transfers_(from.transfers_),
      balances_(from.balances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.TransferResponse)
}

void TransferResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferResponse_vega_2eproto.base);
}

TransferResponse::~TransferResponse() {
  // @@protoc_insertion_point(destructor:vega.TransferResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransferResponse::ArenaDtor(void* object) {
  TransferResponse* _this = reinterpret_cast< TransferResponse* >(object);
  (void)_this;
}
void TransferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferResponse& TransferResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferResponse_vega_2eproto.base);
  return *internal_default_instance();
}


void TransferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TransferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transfers_.Clear();
  balances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.LedgerEntry transfers = 1 [json_name = "transfers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transfers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.TransferBalance balances = 2 [json_name = "balances"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TransferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.LedgerEntry transfers = 1 [json_name = "transfers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transfers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transfers(i), target, stream);
  }

  // repeated .vega.TransferBalance balances = 2 [json_name = "balances"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_balances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TransferResponse)
  return target;
}

size_t TransferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TransferResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LedgerEntry transfers = 1 [json_name = "transfers"];
  total_size += 1UL * this->_internal_transfers_size();
  for (const auto& msg : this->transfers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.TransferBalance balances = 2 [json_name = "balances"];
  total_size += 1UL * this->_internal_balances_size();
  for (const auto& msg : this->balances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TransferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TransferResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TransferResponse)
    MergeFrom(*source);
  }
}

void TransferResponse::MergeFrom(const TransferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TransferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transfers_.MergeFrom(from.transfers_);
  balances_.MergeFrom(from.balances_);
}

void TransferResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferResponse::CopyFrom(const TransferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferResponse::IsInitialized() const {
  return true;
}

void TransferResponse::InternalSwap(TransferResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transfers_.InternalSwap(&other->transfers_);
  balances_.InternalSwap(&other->balances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarginLevels::_Internal {
 public:
};

MarginLevels::MarginLevels(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.MarginLevels)
}
MarginLevels::MarginLevels(const MarginLevels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  ::memcpy(&maintenance_margin_, &from.maintenance_margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&maintenance_margin_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:vega.MarginLevels)
}

void MarginLevels::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarginLevels_vega_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&maintenance_margin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&maintenance_margin_)) + sizeof(timestamp_));
}

MarginLevels::~MarginLevels() {
  // @@protoc_insertion_point(destructor:vega.MarginLevels)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarginLevels::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarginLevels::ArenaDtor(void* object) {
  MarginLevels* _this = reinterpret_cast< MarginLevels* >(object);
  (void)_this;
}
void MarginLevels::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarginLevels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevels& MarginLevels::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarginLevels_vega_2eproto.base);
  return *internal_default_instance();
}


void MarginLevels::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarginLevels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  asset_.ClearToEmpty();
  ::memset(&maintenance_margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&maintenance_margin_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarginLevels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 maintenance_margin = 1 [json_name = "maintenanceMargin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maintenance_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 search_level = 2 [json_name = "searchLevel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          search_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 initial_margin = 3 [json_name = "initialMargin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          initial_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 collateral_release_level = 4 [json_name = "collateralReleaseLevel"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          collateral_release_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 5 [json_name = "partyId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarginLevels.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 6 [json_name = "marketId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarginLevels.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 7 [json_name = "asset"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarginLevels.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 8 [json_name = "timestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarginLevels::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarginLevels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 maintenance_margin = 1 [json_name = "maintenanceMargin"];
  if (this->maintenance_margin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_maintenance_margin(), target);
  }

  // uint64 search_level = 2 [json_name = "searchLevel"];
  if (this->search_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_search_level(), target);
  }

  // uint64 initial_margin = 3 [json_name = "initialMargin"];
  if (this->initial_margin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_initial_margin(), target);
  }

  // uint64 collateral_release_level = 4 [json_name = "collateralReleaseLevel"];
  if (this->collateral_release_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_collateral_release_level(), target);
  }

  // string party_id = 5 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.party_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_party_id(), target);
  }

  // string market_id = 6 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.market_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_market_id(), target);
  }

  // string asset = 7 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.asset");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_asset(), target);
  }

  // int64 timestamp = 8 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarginLevels)
  return target;
}

size_t MarginLevels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarginLevels)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 5 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string market_id = 6 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string asset = 7 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // uint64 maintenance_margin = 1 [json_name = "maintenanceMargin"];
  if (this->maintenance_margin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_maintenance_margin());
  }

  // uint64 search_level = 2 [json_name = "searchLevel"];
  if (this->search_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_search_level());
  }

  // uint64 initial_margin = 3 [json_name = "initialMargin"];
  if (this->initial_margin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_initial_margin());
  }

  // uint64 collateral_release_level = 4 [json_name = "collateralReleaseLevel"];
  if (this->collateral_release_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_collateral_release_level());
  }

  // int64 timestamp = 8 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevels::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarginLevels)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevels* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarginLevels>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarginLevels)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarginLevels)
    MergeFrom(*source);
  }
}

void MarginLevels::MergeFrom(const MarginLevels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarginLevels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.maintenance_margin() != 0) {
    _internal_set_maintenance_margin(from._internal_maintenance_margin());
  }
  if (from.search_level() != 0) {
    _internal_set_search_level(from._internal_search_level());
  }
  if (from.initial_margin() != 0) {
    _internal_set_initial_margin(from._internal_initial_margin());
  }
  if (from.collateral_release_level() != 0) {
    _internal_set_collateral_release_level(from._internal_collateral_release_level());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void MarginLevels::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarginLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevels::CopyFrom(const MarginLevels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarginLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevels::IsInitialized() const {
  return true;
}

void MarginLevels::InternalSwap(MarginLevels* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarginLevels, timestamp_)
      + sizeof(MarginLevels::timestamp_)
      - PROTOBUF_FIELD_OFFSET(MarginLevels, maintenance_margin_)>(
          reinterpret_cast<char*>(&maintenance_margin_),
          reinterpret_cast<char*>(&other->maintenance_margin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarginLevels::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketData::_Internal {
 public:
};

MarketData::MarketData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  price_monitoring_bounds_(arena),
  liquidity_provider_fee_share_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.MarketData)
}
MarketData::MarketData(const MarketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      price_monitoring_bounds_(from.price_monitoring_bounds_),
      liquidity_provider_fee_share_(from.liquidity_provider_fee_share_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(),
      GetArena());
  }
  target_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_stake().empty()) {
    target_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_stake(),
      GetArena());
  }
  supplied_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_supplied_stake().empty()) {
    supplied_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_supplied_stake(),
      GetArena());
  }
  market_value_proxy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_value_proxy().empty()) {
    market_value_proxy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_value_proxy(),
      GetArena());
  }
  ::memcpy(&mark_price_, &from.mark_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&extension_trigger_) -
    reinterpret_cast<char*>(&mark_price_)) + sizeof(extension_trigger_));
  // @@protoc_insertion_point(copy_constructor:vega.MarketData)
}

void MarketData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketData_vega_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supplied_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_value_proxy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mark_price_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&extension_trigger_) -
      reinterpret_cast<char*>(&mark_price_)) + sizeof(extension_trigger_));
}

MarketData::~MarketData() {
  // @@protoc_insertion_point(destructor:vega.MarketData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supplied_stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_value_proxy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketData::ArenaDtor(void* object) {
  MarketData* _this = reinterpret_cast< MarketData* >(object);
  (void)_this;
}
void MarketData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketData& MarketData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketData_vega_2eproto.base);
  return *internal_default_instance();
}


void MarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  price_monitoring_bounds_.Clear();
  liquidity_provider_fee_share_.Clear();
  market_.ClearToEmpty();
  target_stake_.ClearToEmpty();
  supplied_stake_.ClearToEmpty();
  market_value_proxy_.ClearToEmpty();
  ::memset(&mark_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extension_trigger_) -
      reinterpret_cast<char*>(&mark_price_)) + sizeof(extension_trigger_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mark_price = 1 [json_name = "markPrice"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mark_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 best_bid_price = 2 [json_name = "bestBidPrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          best_bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 best_bid_volume = 3 [json_name = "bestBidVolume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          best_bid_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 best_offer_price = 4 [json_name = "bestOfferPrice"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          best_offer_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 best_offer_volume = 5 [json_name = "bestOfferVolume"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          best_offer_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 best_static_bid_price = 6 [json_name = "bestStaticBidPrice"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          best_static_bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 best_static_bid_volume = 7 [json_name = "bestStaticBidVolume"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          best_static_bid_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 best_static_offer_price = 8 [json_name = "bestStaticOfferPrice"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          best_static_offer_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 best_static_offer_volume = 9 [json_name = "bestStaticOfferVolume"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          best_static_offer_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 mid_price = 10 [json_name = "midPrice"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          mid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 static_mid_price = 11 [json_name = "staticMidPrice"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          static_mid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market = 12 [json_name = "market"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketData.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 13 [json_name = "timestamp"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 open_interest = 14 [json_name = "openInterest"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 auction_end = 15 [json_name = "auctionEnd"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          auction_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 auction_start = 16 [json_name = "auctionStart"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          auction_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 indicative_price = 17 [json_name = "indicativePrice"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          indicative_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 indicative_volume = 18 [json_name = "indicativeVolume"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          indicative_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Market.TradingMode market_trading_mode = 19 [json_name = "marketTradingMode"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_market_trading_mode(static_cast<::vega::Market_TradingMode>(val));
        } else goto handle_unusual;
        continue;
      // .vega.AuctionTrigger trigger = 20 [json_name = "trigger"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trigger(static_cast<::vega::AuctionTrigger>(val));
        } else goto handle_unusual;
        continue;
      // .vega.AuctionTrigger extension_trigger = 21 [json_name = "extensionTrigger"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_extension_trigger(static_cast<::vega::AuctionTrigger>(val));
        } else goto handle_unusual;
        continue;
      // string target_stake = 22 [json_name = "targetStake"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_target_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketData.target_stake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string supplied_stake = 23 [json_name = "suppliedStake"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_supplied_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketData.supplied_stake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceMonitoringBounds price_monitoring_bounds = 24 [json_name = "priceMonitoringBounds"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_price_monitoring_bounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // string market_value_proxy = 25 [json_name = "marketValueProxy"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_market_value_proxy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketData.market_value_proxy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityProviderFeeShare liquidity_provider_fee_share = 26 [json_name = "liquidityProviderFeeShare"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_liquidity_provider_fee_share(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mark_price = 1 [json_name = "markPrice"];
  if (this->mark_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mark_price(), target);
  }

  // uint64 best_bid_price = 2 [json_name = "bestBidPrice"];
  if (this->best_bid_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_best_bid_price(), target);
  }

  // uint64 best_bid_volume = 3 [json_name = "bestBidVolume"];
  if (this->best_bid_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_best_bid_volume(), target);
  }

  // uint64 best_offer_price = 4 [json_name = "bestOfferPrice"];
  if (this->best_offer_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_best_offer_price(), target);
  }

  // uint64 best_offer_volume = 5 [json_name = "bestOfferVolume"];
  if (this->best_offer_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_best_offer_volume(), target);
  }

  // uint64 best_static_bid_price = 6 [json_name = "bestStaticBidPrice"];
  if (this->best_static_bid_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_best_static_bid_price(), target);
  }

  // uint64 best_static_bid_volume = 7 [json_name = "bestStaticBidVolume"];
  if (this->best_static_bid_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_best_static_bid_volume(), target);
  }

  // uint64 best_static_offer_price = 8 [json_name = "bestStaticOfferPrice"];
  if (this->best_static_offer_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_best_static_offer_price(), target);
  }

  // uint64 best_static_offer_volume = 9 [json_name = "bestStaticOfferVolume"];
  if (this->best_static_offer_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_best_static_offer_volume(), target);
  }

  // uint64 mid_price = 10 [json_name = "midPrice"];
  if (this->mid_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_mid_price(), target);
  }

  // uint64 static_mid_price = 11 [json_name = "staticMidPrice"];
  if (this->static_mid_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_static_mid_price(), target);
  }

  // string market = 12 [json_name = "market"];
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.market");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_market(), target);
  }

  // int64 timestamp = 13 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_timestamp(), target);
  }

  // uint64 open_interest = 14 [json_name = "openInterest"];
  if (this->open_interest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_open_interest(), target);
  }

  // int64 auction_end = 15 [json_name = "auctionEnd"];
  if (this->auction_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_auction_end(), target);
  }

  // int64 auction_start = 16 [json_name = "auctionStart"];
  if (this->auction_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_auction_start(), target);
  }

  // uint64 indicative_price = 17 [json_name = "indicativePrice"];
  if (this->indicative_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_indicative_price(), target);
  }

  // uint64 indicative_volume = 18 [json_name = "indicativeVolume"];
  if (this->indicative_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_indicative_volume(), target);
  }

  // .vega.Market.TradingMode market_trading_mode = 19 [json_name = "marketTradingMode"];
  if (this->market_trading_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_market_trading_mode(), target);
  }

  // .vega.AuctionTrigger trigger = 20 [json_name = "trigger"];
  if (this->trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_trigger(), target);
  }

  // .vega.AuctionTrigger extension_trigger = 21 [json_name = "extensionTrigger"];
  if (this->extension_trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_extension_trigger(), target);
  }

  // string target_stake = 22 [json_name = "targetStake"];
  if (this->target_stake().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_stake().data(), static_cast<int>(this->_internal_target_stake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.target_stake");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_target_stake(), target);
  }

  // string supplied_stake = 23 [json_name = "suppliedStake"];
  if (this->supplied_stake().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_supplied_stake().data(), static_cast<int>(this->_internal_supplied_stake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.supplied_stake");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_supplied_stake(), target);
  }

  // repeated .vega.PriceMonitoringBounds price_monitoring_bounds = 24 [json_name = "priceMonitoringBounds"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_price_monitoring_bounds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_price_monitoring_bounds(i), target, stream);
  }

  // string market_value_proxy = 25 [json_name = "marketValueProxy"];
  if (this->market_value_proxy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_value_proxy().data(), static_cast<int>(this->_internal_market_value_proxy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.market_value_proxy");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_market_value_proxy(), target);
  }

  // repeated .vega.LiquidityProviderFeeShare liquidity_provider_fee_share = 26 [json_name = "liquidityProviderFeeShare"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_liquidity_provider_fee_share_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_liquidity_provider_fee_share(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketData)
  return target;
}

size_t MarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceMonitoringBounds price_monitoring_bounds = 24 [json_name = "priceMonitoringBounds"];
  total_size += 2UL * this->_internal_price_monitoring_bounds_size();
  for (const auto& msg : this->price_monitoring_bounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.LiquidityProviderFeeShare liquidity_provider_fee_share = 26 [json_name = "liquidityProviderFeeShare"];
  total_size += 2UL * this->_internal_liquidity_provider_fee_share_size();
  for (const auto& msg : this->liquidity_provider_fee_share_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market = 12 [json_name = "market"];
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string target_stake = 22 [json_name = "targetStake"];
  if (this->target_stake().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_stake());
  }

  // string supplied_stake = 23 [json_name = "suppliedStake"];
  if (this->supplied_stake().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_supplied_stake());
  }

  // string market_value_proxy = 25 [json_name = "marketValueProxy"];
  if (this->market_value_proxy().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_value_proxy());
  }

  // uint64 mark_price = 1 [json_name = "markPrice"];
  if (this->mark_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mark_price());
  }

  // uint64 best_bid_price = 2 [json_name = "bestBidPrice"];
  if (this->best_bid_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_best_bid_price());
  }

  // uint64 best_bid_volume = 3 [json_name = "bestBidVolume"];
  if (this->best_bid_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_best_bid_volume());
  }

  // uint64 best_offer_price = 4 [json_name = "bestOfferPrice"];
  if (this->best_offer_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_best_offer_price());
  }

  // uint64 best_offer_volume = 5 [json_name = "bestOfferVolume"];
  if (this->best_offer_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_best_offer_volume());
  }

  // uint64 best_static_bid_price = 6 [json_name = "bestStaticBidPrice"];
  if (this->best_static_bid_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_best_static_bid_price());
  }

  // uint64 best_static_bid_volume = 7 [json_name = "bestStaticBidVolume"];
  if (this->best_static_bid_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_best_static_bid_volume());
  }

  // uint64 best_static_offer_price = 8 [json_name = "bestStaticOfferPrice"];
  if (this->best_static_offer_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_best_static_offer_price());
  }

  // uint64 best_static_offer_volume = 9 [json_name = "bestStaticOfferVolume"];
  if (this->best_static_offer_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_best_static_offer_volume());
  }

  // uint64 mid_price = 10 [json_name = "midPrice"];
  if (this->mid_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mid_price());
  }

  // uint64 static_mid_price = 11 [json_name = "staticMidPrice"];
  if (this->static_mid_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_static_mid_price());
  }

  // int64 timestamp = 13 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // uint64 open_interest = 14 [json_name = "openInterest"];
  if (this->open_interest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_open_interest());
  }

  // int64 auction_end = 15 [json_name = "auctionEnd"];
  if (this->auction_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auction_end());
  }

  // int64 auction_start = 16 [json_name = "auctionStart"];
  if (this->auction_start() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auction_start());
  }

  // uint64 indicative_price = 17 [json_name = "indicativePrice"];
  if (this->indicative_price() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_indicative_price());
  }

  // uint64 indicative_volume = 18 [json_name = "indicativeVolume"];
  if (this->indicative_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_indicative_volume());
  }

  // .vega.Market.TradingMode market_trading_mode = 19 [json_name = "marketTradingMode"];
  if (this->market_trading_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_market_trading_mode());
  }

  // .vega.AuctionTrigger trigger = 20 [json_name = "trigger"];
  if (this->trigger() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trigger());
  }

  // .vega.AuctionTrigger extension_trigger = 21 [json_name = "extensionTrigger"];
  if (this->extension_trigger() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_extension_trigger());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketData)
    MergeFrom(*source);
  }
}

void MarketData::MergeFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  price_monitoring_bounds_.MergeFrom(from.price_monitoring_bounds_);
  liquidity_provider_fee_share_.MergeFrom(from.liquidity_provider_fee_share_);
  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
  if (from.target_stake().size() > 0) {
    _internal_set_target_stake(from._internal_target_stake());
  }
  if (from.supplied_stake().size() > 0) {
    _internal_set_supplied_stake(from._internal_supplied_stake());
  }
  if (from.market_value_proxy().size() > 0) {
    _internal_set_market_value_proxy(from._internal_market_value_proxy());
  }
  if (from.mark_price() != 0) {
    _internal_set_mark_price(from._internal_mark_price());
  }
  if (from.best_bid_price() != 0) {
    _internal_set_best_bid_price(from._internal_best_bid_price());
  }
  if (from.best_bid_volume() != 0) {
    _internal_set_best_bid_volume(from._internal_best_bid_volume());
  }
  if (from.best_offer_price() != 0) {
    _internal_set_best_offer_price(from._internal_best_offer_price());
  }
  if (from.best_offer_volume() != 0) {
    _internal_set_best_offer_volume(from._internal_best_offer_volume());
  }
  if (from.best_static_bid_price() != 0) {
    _internal_set_best_static_bid_price(from._internal_best_static_bid_price());
  }
  if (from.best_static_bid_volume() != 0) {
    _internal_set_best_static_bid_volume(from._internal_best_static_bid_volume());
  }
  if (from.best_static_offer_price() != 0) {
    _internal_set_best_static_offer_price(from._internal_best_static_offer_price());
  }
  if (from.best_static_offer_volume() != 0) {
    _internal_set_best_static_offer_volume(from._internal_best_static_offer_volume());
  }
  if (from.mid_price() != 0) {
    _internal_set_mid_price(from._internal_mid_price());
  }
  if (from.static_mid_price() != 0) {
    _internal_set_static_mid_price(from._internal_static_mid_price());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.open_interest() != 0) {
    _internal_set_open_interest(from._internal_open_interest());
  }
  if (from.auction_end() != 0) {
    _internal_set_auction_end(from._internal_auction_end());
  }
  if (from.auction_start() != 0) {
    _internal_set_auction_start(from._internal_auction_start());
  }
  if (from.indicative_price() != 0) {
    _internal_set_indicative_price(from._internal_indicative_price());
  }
  if (from.indicative_volume() != 0) {
    _internal_set_indicative_volume(from._internal_indicative_volume());
  }
  if (from.market_trading_mode() != 0) {
    _internal_set_market_trading_mode(from._internal_market_trading_mode());
  }
  if (from.trigger() != 0) {
    _internal_set_trigger(from._internal_trigger());
  }
  if (from.extension_trigger() != 0) {
    _internal_set_extension_trigger(from._internal_extension_trigger());
  }
}

void MarketData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketData::CopyFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketData::IsInitialized() const {
  return true;
}

void MarketData::InternalSwap(MarketData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  price_monitoring_bounds_.InternalSwap(&other->price_monitoring_bounds_);
  liquidity_provider_fee_share_.InternalSwap(&other->liquidity_provider_fee_share_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_stake_.Swap(&other->target_stake_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  supplied_stake_.Swap(&other->supplied_stake_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_value_proxy_.Swap(&other->market_value_proxy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketData, extension_trigger_)
      + sizeof(MarketData::extension_trigger_)
      - PROTOBUF_FIELD_OFFSET(MarketData, mark_price_)>(
          reinterpret_cast<char*>(&mark_price_),
          reinterpret_cast<char*>(&other->mark_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityProviderFeeShare::_Internal {
 public:
};

LiquidityProviderFeeShare::LiquidityProviderFeeShare(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LiquidityProviderFeeShare)
}
LiquidityProviderFeeShare::LiquidityProviderFeeShare(const LiquidityProviderFeeShare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  equity_like_share_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_equity_like_share().empty()) {
    equity_like_share_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equity_like_share(),
      GetArena());
  }
  average_entry_valuation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_average_entry_valuation().empty()) {
    average_entry_valuation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_average_entry_valuation(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityProviderFeeShare)
}

void LiquidityProviderFeeShare::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityProviderFeeShare_vega_2eproto.base);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equity_like_share_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  average_entry_valuation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LiquidityProviderFeeShare::~LiquidityProviderFeeShare() {
  // @@protoc_insertion_point(destructor:vega.LiquidityProviderFeeShare)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityProviderFeeShare::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equity_like_share_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  average_entry_valuation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiquidityProviderFeeShare::ArenaDtor(void* object) {
  LiquidityProviderFeeShare* _this = reinterpret_cast< LiquidityProviderFeeShare* >(object);
  (void)_this;
}
void LiquidityProviderFeeShare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityProviderFeeShare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProviderFeeShare& LiquidityProviderFeeShare::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityProviderFeeShare_vega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProviderFeeShare::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityProviderFeeShare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_.ClearToEmpty();
  equity_like_share_.ClearToEmpty();
  average_entry_valuation_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityProviderFeeShare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProviderFeeShare.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string equity_like_share = 2 [json_name = "equityLikeShare"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_equity_like_share();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProviderFeeShare.equity_like_share"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string average_entry_valuation = 3 [json_name = "averageEntryValuation"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_average_entry_valuation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProviderFeeShare.average_entry_valuation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityProviderFeeShare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityProviderFeeShare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProviderFeeShare.party");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party(), target);
  }

  // string equity_like_share = 2 [json_name = "equityLikeShare"];
  if (this->equity_like_share().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_equity_like_share().data(), static_cast<int>(this->_internal_equity_like_share().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProviderFeeShare.equity_like_share");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_equity_like_share(), target);
  }

  // string average_entry_valuation = 3 [json_name = "averageEntryValuation"];
  if (this->average_entry_valuation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_average_entry_valuation().data(), static_cast<int>(this->_internal_average_entry_valuation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProviderFeeShare.average_entry_valuation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_average_entry_valuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityProviderFeeShare)
  return target;
}

size_t LiquidityProviderFeeShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityProviderFeeShare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string equity_like_share = 2 [json_name = "equityLikeShare"];
  if (this->equity_like_share().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_equity_like_share());
  }

  // string average_entry_valuation = 3 [json_name = "averageEntryValuation"];
  if (this->average_entry_valuation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_average_entry_valuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProviderFeeShare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityProviderFeeShare)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProviderFeeShare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityProviderFeeShare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityProviderFeeShare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityProviderFeeShare)
    MergeFrom(*source);
  }
}

void LiquidityProviderFeeShare::MergeFrom(const LiquidityProviderFeeShare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityProviderFeeShare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
  if (from.equity_like_share().size() > 0) {
    _internal_set_equity_like_share(from._internal_equity_like_share());
  }
  if (from.average_entry_valuation().size() > 0) {
    _internal_set_average_entry_valuation(from._internal_average_entry_valuation());
  }
}

void LiquidityProviderFeeShare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityProviderFeeShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProviderFeeShare::CopyFrom(const LiquidityProviderFeeShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityProviderFeeShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProviderFeeShare::IsInitialized() const {
  return true;
}

void LiquidityProviderFeeShare::InternalSwap(LiquidityProviderFeeShare* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equity_like_share_.Swap(&other->equity_like_share_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  average_entry_valuation_.Swap(&other->average_entry_valuation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityProviderFeeShare::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PriceMonitoringBounds::_Internal {
 public:
  static const ::vega::PriceMonitoringTrigger& trigger(const PriceMonitoringBounds* msg);
};

const ::vega::PriceMonitoringTrigger&
PriceMonitoringBounds::_Internal::trigger(const PriceMonitoringBounds* msg) {
  return *msg->trigger_;
}
void PriceMonitoringBounds::clear_trigger() {
  if (GetArena() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
}
PriceMonitoringBounds::PriceMonitoringBounds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PriceMonitoringBounds)
}
PriceMonitoringBounds::PriceMonitoringBounds(const PriceMonitoringBounds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trigger()) {
    trigger_ = new ::vega::PriceMonitoringTrigger(*from.trigger_);
  } else {
    trigger_ = nullptr;
  }
  ::memcpy(&min_valid_price_, &from.min_valid_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_price_) -
    reinterpret_cast<char*>(&min_valid_price_)) + sizeof(reference_price_));
  // @@protoc_insertion_point(copy_constructor:vega.PriceMonitoringBounds)
}

void PriceMonitoringBounds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PriceMonitoringBounds_vega_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reference_price_) -
      reinterpret_cast<char*>(&trigger_)) + sizeof(reference_price_));
}

PriceMonitoringBounds::~PriceMonitoringBounds() {
  // @@protoc_insertion_point(destructor:vega.PriceMonitoringBounds)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceMonitoringBounds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trigger_;
}

void PriceMonitoringBounds::ArenaDtor(void* object) {
  PriceMonitoringBounds* _this = reinterpret_cast< PriceMonitoringBounds* >(object);
  (void)_this;
}
void PriceMonitoringBounds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceMonitoringBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceMonitoringBounds& PriceMonitoringBounds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceMonitoringBounds_vega_2eproto.base);
  return *internal_default_instance();
}


void PriceMonitoringBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PriceMonitoringBounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
  ::memset(&min_valid_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_price_) -
      reinterpret_cast<char*>(&min_valid_price_)) + sizeof(reference_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceMonitoringBounds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 min_valid_price = 1 [json_name = "minValidPrice"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_valid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_valid_price = 2 [json_name = "maxValidPrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_valid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.PriceMonitoringTrigger trigger = 3 [json_name = "trigger"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double reference_price = 4 [json_name = "referencePrice"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          reference_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceMonitoringBounds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PriceMonitoringBounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_valid_price = 1 [json_name = "minValidPrice"];
  if (this->min_valid_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_min_valid_price(), target);
  }

  // uint64 max_valid_price = 2 [json_name = "maxValidPrice"];
  if (this->max_valid_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_valid_price(), target);
  }

  // .vega.PriceMonitoringTrigger trigger = 3 [json_name = "trigger"];
  if (this->has_trigger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trigger(this), target, stream);
  }

  // double reference_price = 4 [json_name = "referencePrice"];
  if (!(this->reference_price() <= 0 && this->reference_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_reference_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PriceMonitoringBounds)
  return target;
}

size_t PriceMonitoringBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PriceMonitoringBounds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.PriceMonitoringTrigger trigger = 3 [json_name = "trigger"];
  if (this->has_trigger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trigger_);
  }

  // uint64 min_valid_price = 1 [json_name = "minValidPrice"];
  if (this->min_valid_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_valid_price());
  }

  // uint64 max_valid_price = 2 [json_name = "maxValidPrice"];
  if (this->max_valid_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_valid_price());
  }

  // double reference_price = 4 [json_name = "referencePrice"];
  if (!(this->reference_price() <= 0 && this->reference_price() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceMonitoringBounds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PriceMonitoringBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceMonitoringBounds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceMonitoringBounds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PriceMonitoringBounds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PriceMonitoringBounds)
    MergeFrom(*source);
  }
}

void PriceMonitoringBounds::MergeFrom(const PriceMonitoringBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PriceMonitoringBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trigger()) {
    _internal_mutable_trigger()->::vega::PriceMonitoringTrigger::MergeFrom(from._internal_trigger());
  }
  if (from.min_valid_price() != 0) {
    _internal_set_min_valid_price(from._internal_min_valid_price());
  }
  if (from.max_valid_price() != 0) {
    _internal_set_max_valid_price(from._internal_max_valid_price());
  }
  if (!(from.reference_price() <= 0 && from.reference_price() >= 0)) {
    _internal_set_reference_price(from._internal_reference_price());
  }
}

void PriceMonitoringBounds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PriceMonitoringBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceMonitoringBounds::CopyFrom(const PriceMonitoringBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PriceMonitoringBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceMonitoringBounds::IsInitialized() const {
  return true;
}

void PriceMonitoringBounds::InternalSwap(PriceMonitoringBounds* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceMonitoringBounds, reference_price_)
      + sizeof(PriceMonitoringBounds::reference_price_)
      - PROTOBUF_FIELD_OFFSET(PriceMonitoringBounds, trigger_)>(
          reinterpret_cast<char*>(&trigger_),
          reinterpret_cast<char*>(&other->trigger_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceMonitoringBounds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ErrorDetail::_Internal {
 public:
};

ErrorDetail::ErrorDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ErrorDetail)
}
ErrorDetail::ErrorDetail(const ErrorDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(),
      GetArena());
  }
  inner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inner().empty()) {
    inner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inner(),
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:vega.ErrorDetail)
}

void ErrorDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorDetail_vega_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

ErrorDetail::~ErrorDetail() {
  // @@protoc_insertion_point(destructor:vega.ErrorDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorDetail::ArenaDtor(void* object) {
  ErrorDetail* _this = reinterpret_cast< ErrorDetail* >(object);
  (void)_this;
}
void ErrorDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorDetail& ErrorDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorDetail_vega_2eproto.base);
  return *internal_default_instance();
}


void ErrorDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ErrorDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  inner_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1 [json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ErrorDetail.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inner = 3 [json_name = "inner"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_inner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ErrorDetail.inner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ErrorDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1 [json_name = "code"];
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2 [json_name = "message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ErrorDetail.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string inner = 3 [json_name = "inner"];
  if (this->inner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inner().data(), static_cast<int>(this->_internal_inner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ErrorDetail.inner");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_inner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ErrorDetail)
  return target;
}

size_t ErrorDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ErrorDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string inner = 3 [json_name = "inner"];
  if (this->inner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inner());
  }

  // int32 code = 1 [json_name = "code"];
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ErrorDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ErrorDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ErrorDetail)
    MergeFrom(*source);
  }
}

void ErrorDetail::MergeFrom(const ErrorDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ErrorDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.inner().size() > 0) {
    _internal_set_inner(from._internal_inner());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ErrorDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ErrorDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorDetail::CopyFrom(const ErrorDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ErrorDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorDetail::IsInitialized() const {
  return true;
}

void ErrorDetail::InternalSwap(ErrorDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inner_.Swap(&other->inner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetworkParameter::_Internal {
 public:
};

NetworkParameter::NetworkParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.NetworkParameter)
}
NetworkParameter::NetworkParameter(const NetworkParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.NetworkParameter)
}

void NetworkParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkParameter_vega_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NetworkParameter::~NetworkParameter() {
  // @@protoc_insertion_point(destructor:vega.NetworkParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkParameter::ArenaDtor(void* object) {
  NetworkParameter* _this = reinterpret_cast< NetworkParameter* >(object);
  (void)_this;
}
void NetworkParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkParameter& NetworkParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkParameter_vega_2eproto.base);
  return *internal_default_instance();
}


void NetworkParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NetworkParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NetworkParameter.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NetworkParameter.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NetworkParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1 [json_name = "key"];
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NetworkParameter.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2 [json_name = "value"];
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NetworkParameter.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NetworkParameter)
  return target;
}

size_t NetworkParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NetworkParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1 [json_name = "key"];
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2 [json_name = "value"];
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NetworkParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NetworkParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NetworkParameter)
    MergeFrom(*source);
  }
}

void NetworkParameter::MergeFrom(const NetworkParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NetworkParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void NetworkParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NetworkParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParameter::CopyFrom(const NetworkParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NetworkParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParameter::IsInitialized() const {
  return true;
}

void NetworkParameter::InternalSwap(NetworkParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityOrder::_Internal {
 public:
};

LiquidityOrder::LiquidityOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LiquidityOrder)
}
LiquidityOrder::LiquidityOrder(const LiquidityOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reference_, &from.reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&reference_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityOrder)
}

void LiquidityOrder::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reference_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&reference_)) + sizeof(offset_));
}

LiquidityOrder::~LiquidityOrder() {
  // @@protoc_insertion_point(destructor:vega.LiquidityOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LiquidityOrder::ArenaDtor(void* object) {
  LiquidityOrder* _this = reinterpret_cast< LiquidityOrder* >(object);
  (void)_this;
}
void LiquidityOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityOrder& LiquidityOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityOrder_vega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&reference_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.PeggedReference reference = 1 [json_name = "reference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reference(static_cast<::vega::PeggedReference>(val));
        } else goto handle_unusual;
        continue;
      // uint32 proportion = 2 [json_name = "proportion"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          proportion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 3 [json_name = "offset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  if (this->reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reference(), target);
  }

  // uint32 proportion = 2 [json_name = "proportion"];
  if (this->proportion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_proportion(), target);
  }

  // int64 offset = 3 [json_name = "offset"];
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityOrder)
  return target;
}

size_t LiquidityOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  if (this->reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reference());
  }

  // uint32 proportion = 2 [json_name = "proportion"];
  if (this->proportion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_proportion());
  }

  // int64 offset = 3 [json_name = "offset"];
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityOrder)
    MergeFrom(*source);
  }
}

void LiquidityOrder::MergeFrom(const LiquidityOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference() != 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.proportion() != 0) {
    _internal_set_proportion(from._internal_proportion());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void LiquidityOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityOrder::CopyFrom(const LiquidityOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityOrder::IsInitialized() const {
  return true;
}

void LiquidityOrder::InternalSwap(LiquidityOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidityOrder, offset_)
      + sizeof(LiquidityOrder::offset_)
      - PROTOBUF_FIELD_OFFSET(LiquidityOrder, reference_)>(
          reinterpret_cast<char*>(&reference_),
          reinterpret_cast<char*>(&other->reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityOrderReference::_Internal {
 public:
  static const ::vega::LiquidityOrder& liquidity_order(const LiquidityOrderReference* msg);
};

const ::vega::LiquidityOrder&
LiquidityOrderReference::_Internal::liquidity_order(const LiquidityOrderReference* msg) {
  return *msg->liquidity_order_;
}
LiquidityOrderReference::LiquidityOrderReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LiquidityOrderReference)
}
LiquidityOrderReference::LiquidityOrderReference(const LiquidityOrderReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(),
      GetArena());
  }
  if (from._internal_has_liquidity_order()) {
    liquidity_order_ = new ::vega::LiquidityOrder(*from.liquidity_order_);
  } else {
    liquidity_order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityOrderReference)
}

void LiquidityOrderReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityOrderReference_vega_2eproto.base);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  liquidity_order_ = nullptr;
}

LiquidityOrderReference::~LiquidityOrderReference() {
  // @@protoc_insertion_point(destructor:vega.LiquidityOrderReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityOrderReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete liquidity_order_;
}

void LiquidityOrderReference::ArenaDtor(void* object) {
  LiquidityOrderReference* _this = reinterpret_cast< LiquidityOrderReference* >(object);
  (void)_this;
}
void LiquidityOrderReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityOrderReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityOrderReference& LiquidityOrderReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityOrderReference_vega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityOrderReference::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityOrderReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_.ClearToEmpty();
  if (GetArena() == nullptr && liquidity_order_ != nullptr) {
    delete liquidity_order_;
  }
  liquidity_order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityOrderReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string order_id = 1 [json_name = "orderId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityOrderReference.order_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.LiquidityOrder liquidity_order = 2 [json_name = "liquidityOrder"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidity_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityOrderReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityOrderReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId"];
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityOrderReference.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // .vega.LiquidityOrder liquidity_order = 2 [json_name = "liquidityOrder"];
  if (this->has_liquidity_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::liquidity_order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityOrderReference)
  return target;
}

size_t LiquidityOrderReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityOrderReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId"];
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // .vega.LiquidityOrder liquidity_order = 2 [json_name = "liquidityOrder"];
  if (this->has_liquidity_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *liquidity_order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityOrderReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityOrderReference)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityOrderReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityOrderReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityOrderReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityOrderReference)
    MergeFrom(*source);
  }
}

void LiquidityOrderReference::MergeFrom(const LiquidityOrderReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityOrderReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order_id().size() > 0) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (from.has_liquidity_order()) {
    _internal_mutable_liquidity_order()->::vega::LiquidityOrder::MergeFrom(from._internal_liquidity_order());
  }
}

void LiquidityOrderReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityOrderReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityOrderReference::CopyFrom(const LiquidityOrderReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityOrderReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityOrderReference::IsInitialized() const {
  return true;
}

void LiquidityOrderReference::InternalSwap(LiquidityOrderReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  order_id_.Swap(&other->order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(liquidity_order_, other->liquidity_order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityOrderReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityProvision::_Internal {
 public:
};

LiquidityProvision::LiquidityProvision(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sells_(arena),
  buys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LiquidityProvision)
}
LiquidityProvision::LiquidityProvision(const LiquidityProvision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sells_(from.sells_),
      buys_(from.buys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee().empty()) {
    fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fee(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(),
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  ::memcpy(&created_at_, &from.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityProvision)
}

void LiquidityProvision::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityProvision_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(status_));
}

LiquidityProvision::~LiquidityProvision() {
  // @@protoc_insertion_point(destructor:vega.LiquidityProvision)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityProvision::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiquidityProvision::ArenaDtor(void* object) {
  LiquidityProvision* _this = reinterpret_cast< LiquidityProvision* >(object);
  (void)_this;
}
void LiquidityProvision::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityProvision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProvision& LiquidityProvision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityProvision_vega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProvision::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityProvision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sells_.Clear();
  buys_.Clear();
  id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  fee_.ClearToEmpty();
  version_.ClearToEmpty();
  reference_.ClearToEmpty();
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityProvision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 created_at = 3 [json_name = "createdAt"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updated_at = 4 [json_name = "updatedAt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 5 [json_name = "marketId", (.validator.field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commitment_amount = 6 [json_name = "commitmentAmount"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          commitment_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fee = 7 [json_name = "fee"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.fee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityOrderReference sells = 8 [json_name = "sells"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityOrderReference buys = 9 [json_name = "buys"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // string version = 10 [json_name = "version"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.LiquidityProvision.Status status = 11 [json_name = "status"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::LiquidityProvision_Status>(val));
        } else goto handle_unusual;
        continue;
      // string reference = 12 [json_name = "reference"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityProvision::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityProvision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // int64 created_at = 3 [json_name = "createdAt"];
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_created_at(), target);
  }

  // int64 updated_at = 4 [json_name = "updatedAt"];
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_updated_at(), target);
  }

  // string market_id = 5 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.market_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_market_id(), target);
  }

  // uint64 commitment_amount = 6 [json_name = "commitmentAmount"];
  if (this->commitment_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_commitment_amount(), target);
  }

  // string fee = 7 [json_name = "fee"];
  if (this->fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee().data(), static_cast<int>(this->_internal_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.fee");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fee(), target);
  }

  // repeated .vega.LiquidityOrderReference sells = 8 [json_name = "sells"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_sells(i), target, stream);
  }

  // repeated .vega.LiquidityOrderReference buys = 9 [json_name = "buys"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_buys(i), target, stream);
  }

  // string version = 10 [json_name = "version"];
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_version(), target);
  }

  // .vega.LiquidityProvision.Status status = 11 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_status(), target);
  }

  // string reference = 12 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.reference");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityProvision)
  return target;
}

size_t LiquidityProvision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityProvision)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LiquidityOrderReference sells = 8 [json_name = "sells"];
  total_size += 1UL * this->_internal_sells_size();
  for (const auto& msg : this->sells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.LiquidityOrderReference buys = 9 [json_name = "buys"];
  total_size += 1UL * this->_internal_buys_size();
  for (const auto& msg : this->buys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string market_id = 5 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string fee = 7 [json_name = "fee"];
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee());
  }

  // string version = 10 [json_name = "version"];
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string reference = 12 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // int64 created_at = 3 [json_name = "createdAt"];
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created_at());
  }

  // int64 updated_at = 4 [json_name = "updatedAt"];
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updated_at());
  }

  // uint64 commitment_amount = 6 [json_name = "commitmentAmount"];
  if (this->commitment_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commitment_amount());
  }

  // .vega.LiquidityProvision.Status status = 11 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProvision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityProvision)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProvision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityProvision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityProvision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityProvision)
    MergeFrom(*source);
  }
}

void LiquidityProvision::MergeFrom(const LiquidityProvision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityProvision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sells_.MergeFrom(from.sells_);
  buys_.MergeFrom(from.buys_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.fee().size() > 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.commitment_amount() != 0) {
    _internal_set_commitment_amount(from._internal_commitment_amount());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void LiquidityProvision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityProvision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProvision::CopyFrom(const LiquidityProvision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityProvision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProvision::IsInitialized() const {
  return true;
}

void LiquidityProvision::InternalSwap(LiquidityProvision* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sells_.InternalSwap(&other->sells_);
  buys_.InternalSwap(&other->buys_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fee_.Swap(&other->fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidityProvision, status_)
      + sizeof(LiquidityProvision::status_)
      - PROTOBUF_FIELD_OFFSET(LiquidityProvision, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityProvision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EthereumConfig::_Internal {
 public:
};

EthereumConfig::EthereumConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  staking_bridge_addresses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.EthereumConfig)
}
EthereumConfig::EthereumConfig(const EthereumConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      staking_bridge_addresses_(from.staking_bridge_addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  network_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network_id().empty()) {
    network_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_network_id(),
      GetArena());
  }
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(),
      GetArena());
  }
  bridge_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bridge_address().empty()) {
    bridge_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bridge_address(),
      GetArena());
  }
  confirmations_ = from.confirmations_;
  // @@protoc_insertion_point(copy_constructor:vega.EthereumConfig)
}

void EthereumConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EthereumConfig_vega_2eproto.base);
  network_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bridge_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confirmations_ = 0u;
}

EthereumConfig::~EthereumConfig() {
  // @@protoc_insertion_point(destructor:vega.EthereumConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EthereumConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  network_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bridge_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EthereumConfig::ArenaDtor(void* object) {
  EthereumConfig* _this = reinterpret_cast< EthereumConfig* >(object);
  (void)_this;
}
void EthereumConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EthereumConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EthereumConfig& EthereumConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EthereumConfig_vega_2eproto.base);
  return *internal_default_instance();
}


void EthereumConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.EthereumConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  staking_bridge_addresses_.Clear();
  network_id_.ClearToEmpty();
  chain_id_.ClearToEmpty();
  bridge_address_.ClearToEmpty();
  confirmations_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EthereumConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string network_id = 1 [json_name = "networkId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_network_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.EthereumConfig.network_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chain_id = 2 [json_name = "chainId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.EthereumConfig.chain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bridge_address = 3 [json_name = "bridgeAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bridge_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.EthereumConfig.bridge_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 confirmations = 4 [json_name = "confirmations"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          confirmations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string staking_bridge_addresses = 5 [json_name = "stakingBridgeAddresses"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_staking_bridge_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.EthereumConfig.staking_bridge_addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EthereumConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.EthereumConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string network_id = 1 [json_name = "networkId"];
  if (this->network_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network_id().data(), static_cast<int>(this->_internal_network_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.EthereumConfig.network_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_network_id(), target);
  }

  // string chain_id = 2 [json_name = "chainId"];
  if (this->chain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.EthereumConfig.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  // string bridge_address = 3 [json_name = "bridgeAddress"];
  if (this->bridge_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bridge_address().data(), static_cast<int>(this->_internal_bridge_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.EthereumConfig.bridge_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bridge_address(), target);
  }

  // uint32 confirmations = 4 [json_name = "confirmations"];
  if (this->confirmations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_confirmations(), target);
  }

  // repeated string staking_bridge_addresses = 5 [json_name = "stakingBridgeAddresses"];
  for (int i = 0, n = this->_internal_staking_bridge_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_staking_bridge_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.EthereumConfig.staking_bridge_addresses");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.EthereumConfig)
  return target;
}

size_t EthereumConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.EthereumConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string staking_bridge_addresses = 5 [json_name = "stakingBridgeAddresses"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(staking_bridge_addresses_.size());
  for (int i = 0, n = staking_bridge_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      staking_bridge_addresses_.Get(i));
  }

  // string network_id = 1 [json_name = "networkId"];
  if (this->network_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network_id());
  }

  // string chain_id = 2 [json_name = "chainId"];
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // string bridge_address = 3 [json_name = "bridgeAddress"];
  if (this->bridge_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bridge_address());
  }

  // uint32 confirmations = 4 [json_name = "confirmations"];
  if (this->confirmations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_confirmations());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EthereumConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.EthereumConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EthereumConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EthereumConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.EthereumConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.EthereumConfig)
    MergeFrom(*source);
  }
}

void EthereumConfig::MergeFrom(const EthereumConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.EthereumConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  staking_bridge_addresses_.MergeFrom(from.staking_bridge_addresses_);
  if (from.network_id().size() > 0) {
    _internal_set_network_id(from._internal_network_id());
  }
  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.bridge_address().size() > 0) {
    _internal_set_bridge_address(from._internal_bridge_address());
  }
  if (from.confirmations() != 0) {
    _internal_set_confirmations(from._internal_confirmations());
  }
}

void EthereumConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.EthereumConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthereumConfig::CopyFrom(const EthereumConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.EthereumConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthereumConfig::IsInitialized() const {
  return true;
}

void EthereumConfig::InternalSwap(EthereumConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  staking_bridge_addresses_.InternalSwap(&other->staking_bridge_addresses_);
  network_id_.Swap(&other->network_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bridge_address_.Swap(&other->bridge_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(confirmations_, other->confirmations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EthereumConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EpochTimestamps::_Internal {
 public:
};

EpochTimestamps::EpochTimestamps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.EpochTimestamps)
}
EpochTimestamps::EpochTimestamps(const EpochTimestamps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_block_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(last_block_));
  // @@protoc_insertion_point(copy_constructor:vega.EpochTimestamps)
}

void EpochTimestamps::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&last_block_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(last_block_));
}

EpochTimestamps::~EpochTimestamps() {
  // @@protoc_insertion_point(destructor:vega.EpochTimestamps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EpochTimestamps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EpochTimestamps::ArenaDtor(void* object) {
  EpochTimestamps* _this = reinterpret_cast< EpochTimestamps* >(object);
  (void)_this;
}
void EpochTimestamps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EpochTimestamps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpochTimestamps& EpochTimestamps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EpochTimestamps_vega_2eproto.base);
  return *internal_default_instance();
}


void EpochTimestamps::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.EpochTimestamps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_block_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(last_block_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochTimestamps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 start_time = 1 [json_name = "startTime"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 2 [json_name = "endTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 first_block = 3 [json_name = "firstBlock"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          first_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_block = 4 [json_name = "lastBlock"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          last_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EpochTimestamps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.EpochTimestamps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_time = 1 [json_name = "startTime"];
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_time(), target);
  }

  // int64 end_time = 2 [json_name = "endTime"];
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_time(), target);
  }

  // uint64 first_block = 3 [json_name = "firstBlock"];
  if (this->first_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_first_block(), target);
  }

  // uint64 last_block = 4 [json_name = "lastBlock"];
  if (this->last_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_last_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.EpochTimestamps)
  return target;
}

size_t EpochTimestamps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.EpochTimestamps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start_time = 1 [json_name = "startTime"];
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_time());
  }

  // int64 end_time = 2 [json_name = "endTime"];
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  // uint64 first_block = 3 [json_name = "firstBlock"];
  if (this->first_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_first_block());
  }

  // uint64 last_block = 4 [json_name = "lastBlock"];
  if (this->last_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochTimestamps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.EpochTimestamps)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochTimestamps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EpochTimestamps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.EpochTimestamps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.EpochTimestamps)
    MergeFrom(*source);
  }
}

void EpochTimestamps::MergeFrom(const EpochTimestamps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.EpochTimestamps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.first_block() != 0) {
    _internal_set_first_block(from._internal_first_block());
  }
  if (from.last_block() != 0) {
    _internal_set_last_block(from._internal_last_block());
  }
}

void EpochTimestamps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.EpochTimestamps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochTimestamps::CopyFrom(const EpochTimestamps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.EpochTimestamps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochTimestamps::IsInitialized() const {
  return true;
}

void EpochTimestamps::InternalSwap(EpochTimestamps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EpochTimestamps, last_block_)
      + sizeof(EpochTimestamps::last_block_)
      - PROTOBUF_FIELD_OFFSET(EpochTimestamps, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochTimestamps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Epoch::_Internal {
 public:
  static const ::vega::EpochTimestamps& timestamps(const Epoch* msg);
};

const ::vega::EpochTimestamps&
Epoch::_Internal::timestamps(const Epoch* msg) {
  return *msg->timestamps_;
}
Epoch::Epoch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  validators_(arena),
  delegations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Epoch)
}
Epoch::Epoch(const Epoch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_),
      delegations_(from.delegations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamps()) {
    timestamps_ = new ::vega::EpochTimestamps(*from.timestamps_);
  } else {
    timestamps_ = nullptr;
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:vega.Epoch)
}

void Epoch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Epoch_vega_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamps_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&timestamps_)) + sizeof(seq_));
}

Epoch::~Epoch() {
  // @@protoc_insertion_point(destructor:vega.Epoch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Epoch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamps_;
}

void Epoch::ArenaDtor(void* object) {
  Epoch* _this = reinterpret_cast< Epoch* >(object);
  (void)_this;
}
void Epoch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Epoch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Epoch& Epoch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Epoch_vega_2eproto.base);
  return *internal_default_instance();
}


void Epoch::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Epoch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  delegations_.Clear();
  if (GetArena() == nullptr && timestamps_ != nullptr) {
    delete timestamps_;
  }
  timestamps_ = nullptr;
  seq_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Epoch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 seq = 1 [json_name = "seq"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.EpochTimestamps timestamps = 2 [json_name = "timestamps", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.Node validators = 3 [json_name = "validators"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.Delegation delegations = 4 [json_name = "delegations"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Epoch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Epoch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq = 1 [json_name = "seq"];
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq(), target);
  }

  // .vega.EpochTimestamps timestamps = 2 [json_name = "timestamps", (.validator.field) = {
  if (this->has_timestamps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamps(this), target, stream);
  }

  // repeated .vega.Node validators = 3 [json_name = "validators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_validators(i), target, stream);
  }

  // repeated .vega.Delegation delegations = 4 [json_name = "delegations"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delegations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_delegations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Epoch)
  return target;
}

size_t Epoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Epoch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Node validators = 3 [json_name = "validators"];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.Delegation delegations = 4 [json_name = "delegations"];
  total_size += 1UL * this->_internal_delegations_size();
  for (const auto& msg : this->delegations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vega.EpochTimestamps timestamps = 2 [json_name = "timestamps", (.validator.field) = {
  if (this->has_timestamps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamps_);
  }

  // uint64 seq = 1 [json_name = "seq"];
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Epoch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Epoch)
  GOOGLE_DCHECK_NE(&from, this);
  const Epoch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Epoch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Epoch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Epoch)
    MergeFrom(*source);
  }
}

void Epoch::MergeFrom(const Epoch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Epoch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  delegations_.MergeFrom(from.delegations_);
  if (from.has_timestamps()) {
    _internal_mutable_timestamps()->::vega::EpochTimestamps::MergeFrom(from._internal_timestamps());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void Epoch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Epoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Epoch::CopyFrom(const Epoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Epoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Epoch::IsInitialized() const {
  return true;
}

void Epoch::InternalSwap(Epoch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
  delegations_.InternalSwap(&other->delegations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Epoch, seq_)
      + sizeof(Epoch::seq_)
      - PROTOBUF_FIELD_OFFSET(Epoch, timestamps_)>(
          reinterpret_cast<char*>(&timestamps_),
          reinterpret_cast<char*>(&other->timestamps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Epoch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EpochParticipation::_Internal {
 public:
  static const ::vega::Epoch& epoch(const EpochParticipation* msg);
};

const ::vega::Epoch&
EpochParticipation::_Internal::epoch(const EpochParticipation* msg) {
  return *msg->epoch_;
}
EpochParticipation::EpochParticipation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.EpochParticipation)
}
EpochParticipation::EpochParticipation(const EpochParticipation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_epoch()) {
    epoch_ = new ::vega::Epoch(*from.epoch_);
  } else {
    epoch_ = nullptr;
  }
  ::memcpy(&offline_, &from.offline_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_rewards_) -
    reinterpret_cast<char*>(&offline_)) + sizeof(total_rewards_));
  // @@protoc_insertion_point(copy_constructor:vega.EpochParticipation)
}

void EpochParticipation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EpochParticipation_vega_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_rewards_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(total_rewards_));
}

EpochParticipation::~EpochParticipation() {
  // @@protoc_insertion_point(destructor:vega.EpochParticipation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EpochParticipation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete epoch_;
}

void EpochParticipation::ArenaDtor(void* object) {
  EpochParticipation* _this = reinterpret_cast< EpochParticipation* >(object);
  (void)_this;
}
void EpochParticipation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EpochParticipation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpochParticipation& EpochParticipation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EpochParticipation_vega_2eproto.base);
  return *internal_default_instance();
}


void EpochParticipation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.EpochParticipation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && epoch_ != nullptr) {
    delete epoch_;
  }
  epoch_ = nullptr;
  ::memset(&offline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_rewards_) -
      reinterpret_cast<char*>(&offline_)) + sizeof(total_rewards_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochParticipation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Epoch epoch = 1 [json_name = "epoch", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offline = 2 [json_name = "offline"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 online = 3 [json_name = "online"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double total_rewards = 4 [json_name = "totalRewards"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          total_rewards_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EpochParticipation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.EpochParticipation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Epoch epoch = 1 [json_name = "epoch", (.validator.field) = {
  if (this->has_epoch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::epoch(this), target, stream);
  }

  // uint64 offline = 2 [json_name = "offline"];
  if (this->offline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offline(), target);
  }

  // uint64 online = 3 [json_name = "online"];
  if (this->online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_online(), target);
  }

  // double total_rewards = 4 [json_name = "totalRewards"];
  if (!(this->total_rewards() <= 0 && this->total_rewards() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_total_rewards(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.EpochParticipation)
  return target;
}

size_t EpochParticipation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.EpochParticipation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Epoch epoch = 1 [json_name = "epoch", (.validator.field) = {
  if (this->has_epoch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_);
  }

  // uint64 offline = 2 [json_name = "offline"];
  if (this->offline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offline());
  }

  // uint64 online = 3 [json_name = "online"];
  if (this->online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_online());
  }

  // double total_rewards = 4 [json_name = "totalRewards"];
  if (!(this->total_rewards() <= 0 && this->total_rewards() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochParticipation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.EpochParticipation)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochParticipation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EpochParticipation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.EpochParticipation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.EpochParticipation)
    MergeFrom(*source);
  }
}

void EpochParticipation::MergeFrom(const EpochParticipation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.EpochParticipation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_epoch()) {
    _internal_mutable_epoch()->::vega::Epoch::MergeFrom(from._internal_epoch());
  }
  if (from.offline() != 0) {
    _internal_set_offline(from._internal_offline());
  }
  if (from.online() != 0) {
    _internal_set_online(from._internal_online());
  }
  if (!(from.total_rewards() <= 0 && from.total_rewards() >= 0)) {
    _internal_set_total_rewards(from._internal_total_rewards());
  }
}

void EpochParticipation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.EpochParticipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochParticipation::CopyFrom(const EpochParticipation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.EpochParticipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochParticipation::IsInitialized() const {
  return true;
}

void EpochParticipation::InternalSwap(EpochParticipation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EpochParticipation, total_rewards_)
      + sizeof(EpochParticipation::total_rewards_)
      - PROTOBUF_FIELD_OFFSET(EpochParticipation, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochParticipation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EpochData::_Internal {
 public:
};

EpochData::EpochData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.EpochData)
}
EpochData::EpochData(const EpochData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&total_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:vega.EpochData)
}

void EpochData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&total_)) + sizeof(online_));
}

EpochData::~EpochData() {
  // @@protoc_insertion_point(destructor:vega.EpochData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EpochData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EpochData::ArenaDtor(void* object) {
  EpochData* _this = reinterpret_cast< EpochData* >(object);
  (void)_this;
}
void EpochData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EpochData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpochData& EpochData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EpochData_vega_2eproto.base);
  return *internal_default_instance();
}


void EpochData::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.EpochData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&total_)) + sizeof(online_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total = 1 [json_name = "total"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offline = 2 [json_name = "offline"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online = 3 [json_name = "online"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EpochData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.EpochData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total = 1 [json_name = "total"];
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total(), target);
  }

  // int32 offline = 2 [json_name = "offline"];
  if (this->offline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_offline(), target);
  }

  // int32 online = 3 [json_name = "online"];
  if (this->online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.EpochData)
  return target;
}

size_t EpochData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.EpochData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total = 1 [json_name = "total"];
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 offline = 2 [json_name = "offline"];
  if (this->offline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offline());
  }

  // int32 online = 3 [json_name = "online"];
  if (this->online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.EpochData)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EpochData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.EpochData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.EpochData)
    MergeFrom(*source);
  }
}

void EpochData::MergeFrom(const EpochData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.EpochData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.offline() != 0) {
    _internal_set_offline(from._internal_offline());
  }
  if (from.online() != 0) {
    _internal_set_online(from._internal_online());
  }
}

void EpochData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.EpochData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochData::CopyFrom(const EpochData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.EpochData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochData::IsInitialized() const {
  return true;
}

void EpochData::InternalSwap(EpochData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EpochData, online_)
      + sizeof(EpochData::online_)
      - PROTOBUF_FIELD_OFFSET(EpochData, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Node::_Internal {
 public:
  static const ::vega::EpochData& epoch_data(const Node* msg);
};

const ::vega::EpochData&
Node::_Internal::epoch_data(const Node* msg) {
  return *msg->epoch_data_;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  delagations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      delagations_(from.delagations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(),
      GetArena());
  }
  info_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info_url().empty()) {
    info_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info_url(),
      GetArena());
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(),
      GetArena());
  }
  staked_by_operator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_staked_by_operator().empty()) {
    staked_by_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staked_by_operator(),
      GetArena());
  }
  staked_by_delegates_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_staked_by_delegates().empty()) {
    staked_by_delegates_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staked_by_delegates(),
      GetArena());
  }
  staked_total_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_staked_total().empty()) {
    staked_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staked_total(),
      GetArena());
  }
  max_intended_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_intended_stake().empty()) {
    max_intended_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_intended_stake(),
      GetArena());
  }
  pending_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pending_stake().empty()) {
    pending_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pending_stake(),
      GetArena());
  }
  if (from._internal_has_epoch_data()) {
    epoch_data_ = new ::vega::EpochData(*from.epoch_data_);
  } else {
    epoch_data_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:vega.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staked_by_operator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staked_by_delegates_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staked_total_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_intended_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_data_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&epoch_data_)) + sizeof(status_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:vega.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staked_by_operator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staked_by_delegates_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staked_total_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_intended_stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete epoch_data_;
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_vega_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delagations_.Clear();
  id_.ClearToEmpty();
  pub_key_.ClearToEmpty();
  info_url_.ClearToEmpty();
  location_.ClearToEmpty();
  staked_by_operator_.ClearToEmpty();
  staked_by_delegates_.ClearToEmpty();
  staked_total_.ClearToEmpty();
  max_intended_stake_.ClearToEmpty();
  pending_stake_.ClearToEmpty();
  if (GetArena() == nullptr && epoch_data_ != nullptr) {
    delete epoch_data_;
  }
  epoch_data_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Node.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pub_key = 2 [json_name = "pubKey", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Node.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info_url = 3 [json_name = "infoUrl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_info_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Node.info_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string location = 4 [json_name = "location"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Node.location"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string staked_by_operator = 5 [json_name = "stakedByOperator"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_staked_by_operator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Node.staked_by_operator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string staked_by_delegates = 6 [json_name = "stakedByDelegates"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_staked_by_delegates();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Node.staked_by_delegates"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string staked_total = 7 [json_name = "stakedTotal"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_staked_total();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Node.staked_total"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max_intended_stake = 8 [json_name = "maxIntendedStake"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_max_intended_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Node.max_intended_stake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pending_stake = 9 [json_name = "pendingStake"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_pending_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Node.pending_stake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.EpochData epoch_data = 10 [json_name = "epochData", (.validator.field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.NodeStatus status = 11 [json_name = "status", (.validator.field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::NodeStatus>(val));
        } else goto handle_unusual;
        continue;
      // repeated .vega.Delegation delagations = 12 [json_name = "delagations"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delagations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Node.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pub_key = 2 [json_name = "pubKey", (.validator.field) = {
  if (this->pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Node.pub_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pub_key(), target);
  }

  // string info_url = 3 [json_name = "infoUrl"];
  if (this->info_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info_url().data(), static_cast<int>(this->_internal_info_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Node.info_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_info_url(), target);
  }

  // string location = 4 [json_name = "location"];
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Node.location");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_location(), target);
  }

  // string staked_by_operator = 5 [json_name = "stakedByOperator"];
  if (this->staked_by_operator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staked_by_operator().data(), static_cast<int>(this->_internal_staked_by_operator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Node.staked_by_operator");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_staked_by_operator(), target);
  }

  // string staked_by_delegates = 6 [json_name = "stakedByDelegates"];
  if (this->staked_by_delegates().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staked_by_delegates().data(), static_cast<int>(this->_internal_staked_by_delegates().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Node.staked_by_delegates");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_staked_by_delegates(), target);
  }

  // string staked_total = 7 [json_name = "stakedTotal"];
  if (this->staked_total().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staked_total().data(), static_cast<int>(this->_internal_staked_total().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Node.staked_total");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_staked_total(), target);
  }

  // string max_intended_stake = 8 [json_name = "maxIntendedStake"];
  if (this->max_intended_stake().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_intended_stake().data(), static_cast<int>(this->_internal_max_intended_stake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Node.max_intended_stake");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_max_intended_stake(), target);
  }

  // string pending_stake = 9 [json_name = "pendingStake"];
  if (this->pending_stake().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pending_stake().data(), static_cast<int>(this->_internal_pending_stake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Node.pending_stake");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_pending_stake(), target);
  }

  // .vega.EpochData epoch_data = 10 [json_name = "epochData", (.validator.field) = {
  if (this->has_epoch_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::epoch_data(this), target, stream);
  }

  // .vega.NodeStatus status = 11 [json_name = "status", (.validator.field) = {
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_status(), target);
  }

  // repeated .vega.Delegation delagations = 12 [json_name = "delagations"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delagations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_delagations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Delegation delagations = 12 [json_name = "delagations"];
  total_size += 1UL * this->_internal_delagations_size();
  for (const auto& msg : this->delagations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pub_key = 2 [json_name = "pubKey", (.validator.field) = {
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string info_url = 3 [json_name = "infoUrl"];
  if (this->info_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info_url());
  }

  // string location = 4 [json_name = "location"];
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string staked_by_operator = 5 [json_name = "stakedByOperator"];
  if (this->staked_by_operator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staked_by_operator());
  }

  // string staked_by_delegates = 6 [json_name = "stakedByDelegates"];
  if (this->staked_by_delegates().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staked_by_delegates());
  }

  // string staked_total = 7 [json_name = "stakedTotal"];
  if (this->staked_total().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staked_total());
  }

  // string max_intended_stake = 8 [json_name = "maxIntendedStake"];
  if (this->max_intended_stake().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_intended_stake());
  }

  // string pending_stake = 9 [json_name = "pendingStake"];
  if (this->pending_stake().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pending_stake());
  }

  // .vega.EpochData epoch_data = 10 [json_name = "epochData", (.validator.field) = {
  if (this->has_epoch_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_data_);
  }

  // .vega.NodeStatus status = 11 [json_name = "status", (.validator.field) = {
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delagations_.MergeFrom(from.delagations_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.pub_key().size() > 0) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (from.info_url().size() > 0) {
    _internal_set_info_url(from._internal_info_url());
  }
  if (from.location().size() > 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.staked_by_operator().size() > 0) {
    _internal_set_staked_by_operator(from._internal_staked_by_operator());
  }
  if (from.staked_by_delegates().size() > 0) {
    _internal_set_staked_by_delegates(from._internal_staked_by_delegates());
  }
  if (from.staked_total().size() > 0) {
    _internal_set_staked_total(from._internal_staked_total());
  }
  if (from.max_intended_stake().size() > 0) {
    _internal_set_max_intended_stake(from._internal_max_intended_stake());
  }
  if (from.pending_stake().size() > 0) {
    _internal_set_pending_stake(from._internal_pending_stake());
  }
  if (from.has_epoch_data()) {
    _internal_mutable_epoch_data()->::vega::EpochData::MergeFrom(from._internal_epoch_data());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delagations_.InternalSwap(&other->delagations_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  info_url_.Swap(&other->info_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staked_by_operator_.Swap(&other->staked_by_operator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staked_by_delegates_.Swap(&other->staked_by_delegates_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staked_total_.Swap(&other->staked_total_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_intended_stake_.Swap(&other->max_intended_stake_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pending_stake_.Swap(&other->pending_stake_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, status_)
      + sizeof(Node::status_)
      - PROTOBUF_FIELD_OFFSET(Node, epoch_data_)>(
          reinterpret_cast<char*>(&epoch_data_),
          reinterpret_cast<char*>(&other->epoch_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeData::_Internal {
 public:
};

NodeData::NodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.NodeData)
}
NodeData::NodeData(const NodeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  staked_total_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_staked_total().empty()) {
    staked_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staked_total(),
      GetArena());
  }
  ::memcpy(&total_nodes_, &from.total_nodes_,
    static_cast<size_t>(reinterpret_cast<char*>(&uptime_) -
    reinterpret_cast<char*>(&total_nodes_)) + sizeof(uptime_));
  // @@protoc_insertion_point(copy_constructor:vega.NodeData)
}

void NodeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeData_vega_2eproto.base);
  staked_total_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_nodes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&uptime_) -
      reinterpret_cast<char*>(&total_nodes_)) + sizeof(uptime_));
}

NodeData::~NodeData() {
  // @@protoc_insertion_point(destructor:vega.NodeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  staked_total_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeData::ArenaDtor(void* object) {
  NodeData* _this = reinterpret_cast< NodeData* >(object);
  (void)_this;
}
void NodeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeData& NodeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeData_vega_2eproto.base);
  return *internal_default_instance();
}


void NodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NodeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  staked_total_.ClearToEmpty();
  ::memset(&total_nodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uptime_) -
      reinterpret_cast<char*>(&total_nodes_)) + sizeof(uptime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string staked_total = 1 [json_name = "stakedTotal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_staked_total();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NodeData.staked_total"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_nodes = 2 [json_name = "totalNodes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 inactive_nodes = 3 [json_name = "inactiveNodes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          inactive_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 validating_nodes = 4 [json_name = "validatingNodes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          validating_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float uptime = 5 [json_name = "uptime"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NodeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string staked_total = 1 [json_name = "stakedTotal"];
  if (this->staked_total().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staked_total().data(), static_cast<int>(this->_internal_staked_total().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NodeData.staked_total");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_staked_total(), target);
  }

  // uint32 total_nodes = 2 [json_name = "totalNodes"];
  if (this->total_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_nodes(), target);
  }

  // uint32 inactive_nodes = 3 [json_name = "inactiveNodes"];
  if (this->inactive_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inactive_nodes(), target);
  }

  // uint32 validating_nodes = 4 [json_name = "validatingNodes"];
  if (this->validating_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_validating_nodes(), target);
  }

  // float uptime = 5 [json_name = "uptime"];
  if (!(this->uptime() <= 0 && this->uptime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_uptime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NodeData)
  return target;
}

size_t NodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NodeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string staked_total = 1 [json_name = "stakedTotal"];
  if (this->staked_total().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staked_total());
  }

  // uint32 total_nodes = 2 [json_name = "totalNodes"];
  if (this->total_nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_nodes());
  }

  // uint32 inactive_nodes = 3 [json_name = "inactiveNodes"];
  if (this->inactive_nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inactive_nodes());
  }

  // uint32 validating_nodes = 4 [json_name = "validatingNodes"];
  if (this->validating_nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_validating_nodes());
  }

  // float uptime = 5 [json_name = "uptime"];
  if (!(this->uptime() <= 0 && this->uptime() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NodeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NodeData)
    MergeFrom(*source);
  }
}

void NodeData::MergeFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.staked_total().size() > 0) {
    _internal_set_staked_total(from._internal_staked_total());
  }
  if (from.total_nodes() != 0) {
    _internal_set_total_nodes(from._internal_total_nodes());
  }
  if (from.inactive_nodes() != 0) {
    _internal_set_inactive_nodes(from._internal_inactive_nodes());
  }
  if (from.validating_nodes() != 0) {
    _internal_set_validating_nodes(from._internal_validating_nodes());
  }
  if (!(from.uptime() <= 0 && from.uptime() >= 0)) {
    _internal_set_uptime(from._internal_uptime());
  }
}

void NodeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeData::CopyFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeData::IsInitialized() const {
  return true;
}

void NodeData::InternalSwap(NodeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  staked_total_.Swap(&other->staked_total_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeData, uptime_)
      + sizeof(NodeData::uptime_)
      - PROTOBUF_FIELD_OFFSET(NodeData, total_nodes_)>(
          reinterpret_cast<char*>(&total_nodes_),
          reinterpret_cast<char*>(&other->total_nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Delegation::_Internal {
 public:
};

Delegation::Delegation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Delegation)
}
Delegation::Delegation(const Delegation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  epoch_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_epoch_seq().empty()) {
    epoch_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_epoch_seq(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.Delegation)
}

void Delegation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Delegation_vega_2eproto.base);
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epoch_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Delegation::~Delegation() {
  // @@protoc_insertion_point(destructor:vega.Delegation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Delegation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epoch_seq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Delegation::ArenaDtor(void* object) {
  Delegation* _this = reinterpret_cast< Delegation* >(object);
  (void)_this;
}
void Delegation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Delegation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Delegation& Delegation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Delegation_vega_2eproto.base);
  return *internal_default_instance();
}


void Delegation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Delegation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_.ClearToEmpty();
  node_id_.ClearToEmpty();
  amount_.ClearToEmpty();
  epoch_seq_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Delegation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Delegation.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2 [json_name = "nodeId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Delegation.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Delegation.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string epoch_seq = 4 [json_name = "epochSeq"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_epoch_seq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Delegation.epoch_seq"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Delegation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Delegation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Delegation.party");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party(), target);
  }

  // string node_id = 2 [json_name = "nodeId"];
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Delegation.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // string amount = 3 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Delegation.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  // string epoch_seq = 4 [json_name = "epochSeq"];
  if (this->epoch_seq().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_epoch_seq().data(), static_cast<int>(this->_internal_epoch_seq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Delegation.epoch_seq");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_epoch_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Delegation)
  return target;
}

size_t Delegation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Delegation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party = 1 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  // string node_id = 2 [json_name = "nodeId"];
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string amount = 3 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string epoch_seq = 4 [json_name = "epochSeq"];
  if (this->epoch_seq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_epoch_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Delegation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Delegation)
  GOOGLE_DCHECK_NE(&from, this);
  const Delegation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Delegation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Delegation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Delegation)
    MergeFrom(*source);
  }
}

void Delegation::MergeFrom(const Delegation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Delegation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.epoch_seq().size() > 0) {
    _internal_set_epoch_seq(from._internal_epoch_seq());
  }
}

void Delegation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Delegation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delegation::CopyFrom(const Delegation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Delegation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delegation::IsInitialized() const {
  return true;
}

void Delegation::InternalSwap(Delegation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  epoch_seq_.Swap(&other->epoch_seq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Delegation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RewardDetails::_Internal {
 public:
};

RewardDetails::RewardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.RewardDetails)
}
RewardDetails::RewardDetails(const RewardDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  percentage_of_total_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_percentage_of_total().empty()) {
    percentage_of_total_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_percentage_of_total(),
      GetArena());
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&received_at_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(received_at_));
  // @@protoc_insertion_point(copy_constructor:vega.RewardDetails)
}

void RewardDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardDetails_vega_2eproto.base);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  percentage_of_total_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&received_at_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(received_at_));
}

RewardDetails::~RewardDetails() {
  // @@protoc_insertion_point(destructor:vega.RewardDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewardDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  percentage_of_total_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewardDetails::ArenaDtor(void* object) {
  RewardDetails* _this = reinterpret_cast< RewardDetails* >(object);
  (void)_this;
}
void RewardDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardDetails& RewardDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardDetails_vega_2eproto.base);
  return *internal_default_instance();
}


void RewardDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RewardDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  amount_.ClearToEmpty();
  percentage_of_total_.ClearToEmpty();
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_at_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(received_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_id = 1 [json_name = "assetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.RewardDetails.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.RewardDetails.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 epoch = 3 [json_name = "epoch"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 4 [json_name = "amount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.RewardDetails.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string percentage_of_total = 5 [json_name = "percentageOfTotal"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_percentage_of_total();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.RewardDetails.percentage_of_total"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 received_at = 6 [json_name = "receivedAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          received_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RewardDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1 [json_name = "assetId"];
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.RewardDetails.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.RewardDetails.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // uint64 epoch = 3 [json_name = "epoch"];
  if (this->epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch(), target);
  }

  // string amount = 4 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.RewardDetails.amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_amount(), target);
  }

  // string percentage_of_total = 5 [json_name = "percentageOfTotal"];
  if (this->percentage_of_total().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_percentage_of_total().data(), static_cast<int>(this->_internal_percentage_of_total().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.RewardDetails.percentage_of_total");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_percentage_of_total(), target);
  }

  // int64 received_at = 6 [json_name = "receivedAt"];
  if (this->received_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_received_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RewardDetails)
  return target;
}

size_t RewardDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RewardDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1 [json_name = "assetId"];
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string amount = 4 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string percentage_of_total = 5 [json_name = "percentageOfTotal"];
  if (this->percentage_of_total().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_percentage_of_total());
  }

  // uint64 epoch = 3 [json_name = "epoch"];
  if (this->epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch());
  }

  // int64 received_at = 6 [json_name = "receivedAt"];
  if (this->received_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_received_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RewardDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RewardDetails)
    MergeFrom(*source);
  }
}

void RewardDetails::MergeFrom(const RewardDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.percentage_of_total().size() > 0) {
    _internal_set_percentage_of_total(from._internal_percentage_of_total());
  }
  if (from.epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from.received_at() != 0) {
    _internal_set_received_at(from._internal_received_at());
  }
}

void RewardDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardDetails::CopyFrom(const RewardDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardDetails::IsInitialized() const {
  return true;
}

void RewardDetails::InternalSwap(RewardDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  percentage_of_total_.Swap(&other->percentage_of_total_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewardDetails, received_at_)
      + sizeof(RewardDetails::received_at_)
      - PROTOBUF_FIELD_OFFSET(RewardDetails, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RewardPerAssetDetail::_Internal {
 public:
};

RewardPerAssetDetail::RewardPerAssetDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  details_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.RewardPerAssetDetail)
}
RewardPerAssetDetail::RewardPerAssetDetail(const RewardPerAssetDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      details_(from.details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  total_for_asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_for_asset().empty()) {
    total_for_asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_total_for_asset(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.RewardPerAssetDetail)
}

void RewardPerAssetDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardPerAssetDetail_vega_2eproto.base);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_for_asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RewardPerAssetDetail::~RewardPerAssetDetail() {
  // @@protoc_insertion_point(destructor:vega.RewardPerAssetDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewardPerAssetDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_for_asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewardPerAssetDetail::ArenaDtor(void* object) {
  RewardPerAssetDetail* _this = reinterpret_cast< RewardPerAssetDetail* >(object);
  (void)_this;
}
void RewardPerAssetDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardPerAssetDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardPerAssetDetail& RewardPerAssetDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardPerAssetDetail_vega_2eproto.base);
  return *internal_default_instance();
}


void RewardPerAssetDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RewardPerAssetDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  asset_.ClearToEmpty();
  total_for_asset_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardPerAssetDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset = 1 [json_name = "asset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.RewardPerAssetDetail.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.RewardDetails details = 2 [json_name = "details"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string total_for_asset = 3 [json_name = "totalForAsset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_total_for_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.RewardPerAssetDetail.total_for_asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardPerAssetDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RewardPerAssetDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset = 1 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.RewardPerAssetDetail.asset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset(), target);
  }

  // repeated .vega.RewardDetails details = 2 [json_name = "details"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_details(i), target, stream);
  }

  // string total_for_asset = 3 [json_name = "totalForAsset"];
  if (this->total_for_asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_total_for_asset().data(), static_cast<int>(this->_internal_total_for_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.RewardPerAssetDetail.total_for_asset");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_total_for_asset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RewardPerAssetDetail)
  return target;
}

size_t RewardPerAssetDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RewardPerAssetDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.RewardDetails details = 2 [json_name = "details"];
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string asset = 1 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string total_for_asset = 3 [json_name = "totalForAsset"];
  if (this->total_for_asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_total_for_asset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardPerAssetDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RewardPerAssetDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardPerAssetDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardPerAssetDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RewardPerAssetDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RewardPerAssetDetail)
    MergeFrom(*source);
  }
}

void RewardPerAssetDetail::MergeFrom(const RewardPerAssetDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RewardPerAssetDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.total_for_asset().size() > 0) {
    _internal_set_total_for_asset(from._internal_total_for_asset());
  }
}

void RewardPerAssetDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RewardPerAssetDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardPerAssetDetail::CopyFrom(const RewardPerAssetDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RewardPerAssetDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardPerAssetDetail::IsInitialized() const {
  return true;
}

void RewardPerAssetDetail::InternalSwap(RewardPerAssetDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  details_.InternalSwap(&other->details_);
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  total_for_asset_.Swap(&other->total_for_asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardPerAssetDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::Price* Arena::CreateMaybeMessage< ::vega::Price >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Price >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Timestamp* Arena::CreateMaybeMessage< ::vega::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Party* Arena::CreateMaybeMessage< ::vega::Party >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Party >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskFactor* Arena::CreateMaybeMessage< ::vega::RiskFactor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RiskFactor >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskResult_RiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vega::RiskResult_RiskFactorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RiskResult_RiskFactorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskResult* Arena::CreateMaybeMessage< ::vega::RiskResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RiskResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PeggedOrder* Arena::CreateMaybeMessage< ::vega::PeggedOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PeggedOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Order* Arena::CreateMaybeMessage< ::vega::Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderCancellationConfirmation* Arena::CreateMaybeMessage< ::vega::OrderCancellationConfirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::OrderCancellationConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderConfirmation* Arena::CreateMaybeMessage< ::vega::OrderConfirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::OrderConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::AuctionIndicativeState* Arena::CreateMaybeMessage< ::vega::AuctionIndicativeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::AuctionIndicativeState >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Trade* Arena::CreateMaybeMessage< ::vega::Trade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Fee* Arena::CreateMaybeMessage< ::vega::Fee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Fee >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TradeSet* Arena::CreateMaybeMessage< ::vega::TradeSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TradeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Candle* Arena::CreateMaybeMessage< ::vega::Candle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Candle >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PriceLevel* Arena::CreateMaybeMessage< ::vega::PriceLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PriceLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketDepth* Arena::CreateMaybeMessage< ::vega::MarketDepth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::MarketDepth >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketDepthUpdate* Arena::CreateMaybeMessage< ::vega::MarketDepthUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::MarketDepthUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Position* Arena::CreateMaybeMessage< ::vega::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PositionTrade* Arena::CreateMaybeMessage< ::vega::PositionTrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PositionTrade >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Deposit* Arena::CreateMaybeMessage< ::vega::Deposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Deposit >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Withdrawal* Arena::CreateMaybeMessage< ::vega::Withdrawal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Withdrawal >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::WithdrawExt* Arena::CreateMaybeMessage< ::vega::WithdrawExt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::WithdrawExt >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Erc20WithdrawExt* Arena::CreateMaybeMessage< ::vega::Erc20WithdrawExt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Erc20WithdrawExt >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Account* Arena::CreateMaybeMessage< ::vega::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::FinancialAmount* Arena::CreateMaybeMessage< ::vega::FinancialAmount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::FinancialAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Transfer* Arena::CreateMaybeMessage< ::vega::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TransferRequest* Arena::CreateMaybeMessage< ::vega::TransferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TransferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LedgerEntry* Arena::CreateMaybeMessage< ::vega::LedgerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LedgerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TransferBalance* Arena::CreateMaybeMessage< ::vega::TransferBalance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TransferBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TransferResponse* Arena::CreateMaybeMessage< ::vega::TransferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TransferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarginLevels* Arena::CreateMaybeMessage< ::vega::MarginLevels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::MarginLevels >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketData* Arena::CreateMaybeMessage< ::vega::MarketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::MarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityProviderFeeShare* Arena::CreateMaybeMessage< ::vega::LiquidityProviderFeeShare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LiquidityProviderFeeShare >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PriceMonitoringBounds* Arena::CreateMaybeMessage< ::vega::PriceMonitoringBounds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PriceMonitoringBounds >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ErrorDetail* Arena::CreateMaybeMessage< ::vega::ErrorDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ErrorDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NetworkParameter* Arena::CreateMaybeMessage< ::vega::NetworkParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::NetworkParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityOrder* Arena::CreateMaybeMessage< ::vega::LiquidityOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LiquidityOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityOrderReference* Arena::CreateMaybeMessage< ::vega::LiquidityOrderReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LiquidityOrderReference >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityProvision* Arena::CreateMaybeMessage< ::vega::LiquidityProvision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LiquidityProvision >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::EthereumConfig* Arena::CreateMaybeMessage< ::vega::EthereumConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::EthereumConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::EpochTimestamps* Arena::CreateMaybeMessage< ::vega::EpochTimestamps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::EpochTimestamps >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Epoch* Arena::CreateMaybeMessage< ::vega::Epoch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Epoch >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::EpochParticipation* Arena::CreateMaybeMessage< ::vega::EpochParticipation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::EpochParticipation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::EpochData* Arena::CreateMaybeMessage< ::vega::EpochData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::EpochData >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Node* Arena::CreateMaybeMessage< ::vega::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NodeData* Arena::CreateMaybeMessage< ::vega::NodeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::NodeData >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Delegation* Arena::CreateMaybeMessage< ::vega::Delegation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Delegation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RewardDetails* Arena::CreateMaybeMessage< ::vega::RewardDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RewardDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RewardPerAssetDetail* Arena::CreateMaybeMessage< ::vega::RewardPerAssetDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RewardPerAssetDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
