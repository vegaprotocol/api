// source: snapshot/v1/snapshot.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var vega_pb = require('../../vega_pb.js');
goog.object.extend(proto, vega_pb);
var assets_pb = require('../../assets_pb.js');
goog.object.extend(proto, assets_pb);
var governance_pb = require('../../governance_pb.js');
goog.object.extend(proto, governance_pb);
goog.exportSymbol('proto.vega.snapshot.v1.AssetBalance', null, global);
goog.exportSymbol('proto.vega.snapshot.v1.AssetEntry', null, global);
goog.exportSymbol('proto.vega.snapshot.v1.Assets', null, global);
goog.exportSymbol('proto.vega.snapshot.v1.Checkpoint', null, global);
goog.exportSymbol('proto.vega.snapshot.v1.Collateral', null, global);
goog.exportSymbol('proto.vega.snapshot.v1.NetParams', null, global);
goog.exportSymbol('proto.vega.snapshot.v1.Proposals', null, global);
goog.exportSymbol('proto.vega.snapshot.v1.Snapshot', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.snapshot.v1.Snapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.snapshot.v1.Snapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.snapshot.v1.Snapshot.displayName = 'proto.vega.snapshot.v1.Snapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.snapshot.v1.Checkpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.snapshot.v1.Checkpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.snapshot.v1.Checkpoint.displayName = 'proto.vega.snapshot.v1.Checkpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.snapshot.v1.AssetEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.snapshot.v1.AssetEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.snapshot.v1.AssetEntry.displayName = 'proto.vega.snapshot.v1.AssetEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.snapshot.v1.Assets = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.snapshot.v1.Assets.repeatedFields_, null);
};
goog.inherits(proto.vega.snapshot.v1.Assets, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.snapshot.v1.Assets.displayName = 'proto.vega.snapshot.v1.Assets';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.snapshot.v1.AssetBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.snapshot.v1.AssetBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.snapshot.v1.AssetBalance.displayName = 'proto.vega.snapshot.v1.AssetBalance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.snapshot.v1.Collateral = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.snapshot.v1.Collateral.repeatedFields_, null);
};
goog.inherits(proto.vega.snapshot.v1.Collateral, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.snapshot.v1.Collateral.displayName = 'proto.vega.snapshot.v1.Collateral';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.snapshot.v1.NetParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.snapshot.v1.NetParams.repeatedFields_, null);
};
goog.inherits(proto.vega.snapshot.v1.NetParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.snapshot.v1.NetParams.displayName = 'proto.vega.snapshot.v1.NetParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.snapshot.v1.Proposals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.snapshot.v1.Proposals.repeatedFields_, null);
};
goog.inherits(proto.vega.snapshot.v1.Proposals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.snapshot.v1.Proposals.displayName = 'proto.vega.snapshot.v1.Proposals';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.snapshot.v1.Snapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.snapshot.v1.Snapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.snapshot.v1.Snapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.Snapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    state: msg.getState_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.snapshot.v1.Snapshot}
 */
proto.vega.snapshot.v1.Snapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.snapshot.v1.Snapshot;
  return proto.vega.snapshot.v1.Snapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.snapshot.v1.Snapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.snapshot.v1.Snapshot}
 */
proto.vega.snapshot.v1.Snapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Snapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.snapshot.v1.Snapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.snapshot.v1.Snapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.Snapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getState_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.vega.snapshot.v1.Snapshot.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.vega.snapshot.v1.Snapshot.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Snapshot.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.snapshot.v1.Snapshot} returns this
 */
proto.vega.snapshot.v1.Snapshot.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes state = 2;
 * @return {!(string|Uint8Array)}
 */
proto.vega.snapshot.v1.Snapshot.prototype.getState = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes state = 2;
 * This is a type-conversion wrapper around `getState()`
 * @return {string}
 */
proto.vega.snapshot.v1.Snapshot.prototype.getState_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getState()));
};


/**
 * optional bytes state = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getState()`
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Snapshot.prototype.getState_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getState()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.snapshot.v1.Snapshot} returns this
 */
proto.vega.snapshot.v1.Snapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.snapshot.v1.Checkpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.snapshot.v1.Checkpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.Checkpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    governance: msg.getGovernance_asB64(),
    assets: msg.getAssets_asB64(),
    collateral: msg.getCollateral_asB64(),
    networkParameters: msg.getNetworkParameters_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.snapshot.v1.Checkpoint}
 */
proto.vega.snapshot.v1.Checkpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.snapshot.v1.Checkpoint;
  return proto.vega.snapshot.v1.Checkpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.snapshot.v1.Checkpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.snapshot.v1.Checkpoint}
 */
proto.vega.snapshot.v1.Checkpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGovernance(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssets(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCollateral(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNetworkParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.snapshot.v1.Checkpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.snapshot.v1.Checkpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.Checkpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGovernance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAssets_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCollateral_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getNetworkParameters_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes governance = 1;
 * @return {!(string|Uint8Array)}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getGovernance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes governance = 1;
 * This is a type-conversion wrapper around `getGovernance()`
 * @return {string}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getGovernance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGovernance()));
};


/**
 * optional bytes governance = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGovernance()`
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getGovernance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGovernance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.snapshot.v1.Checkpoint} returns this
 */
proto.vega.snapshot.v1.Checkpoint.prototype.setGovernance = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes assets = 2;
 * @return {!(string|Uint8Array)}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getAssets = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes assets = 2;
 * This is a type-conversion wrapper around `getAssets()`
 * @return {string}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getAssets_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssets()));
};


/**
 * optional bytes assets = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssets()`
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getAssets_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssets()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.snapshot.v1.Checkpoint} returns this
 */
proto.vega.snapshot.v1.Checkpoint.prototype.setAssets = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes collateral = 3;
 * @return {!(string|Uint8Array)}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getCollateral = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes collateral = 3;
 * This is a type-conversion wrapper around `getCollateral()`
 * @return {string}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getCollateral_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCollateral()));
};


/**
 * optional bytes collateral = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCollateral()`
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getCollateral_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCollateral()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.snapshot.v1.Checkpoint} returns this
 */
proto.vega.snapshot.v1.Checkpoint.prototype.setCollateral = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes network_parameters = 4;
 * @return {!(string|Uint8Array)}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getNetworkParameters = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes network_parameters = 4;
 * This is a type-conversion wrapper around `getNetworkParameters()`
 * @return {string}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getNetworkParameters_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNetworkParameters()));
};


/**
 * optional bytes network_parameters = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNetworkParameters()`
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Checkpoint.prototype.getNetworkParameters_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNetworkParameters()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.snapshot.v1.Checkpoint} returns this
 */
proto.vega.snapshot.v1.Checkpoint.prototype.setNetworkParameters = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.snapshot.v1.AssetEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.snapshot.v1.AssetEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.snapshot.v1.AssetEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.AssetEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetDetails: (f = msg.getAssetDetails()) && assets_pb.AssetDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.snapshot.v1.AssetEntry}
 */
proto.vega.snapshot.v1.AssetEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.snapshot.v1.AssetEntry;
  return proto.vega.snapshot.v1.AssetEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.snapshot.v1.AssetEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.snapshot.v1.AssetEntry}
 */
proto.vega.snapshot.v1.AssetEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new assets_pb.AssetDetails;
      reader.readMessage(value,assets_pb.AssetDetails.deserializeBinaryFromReader);
      msg.setAssetDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.AssetEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.snapshot.v1.AssetEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.snapshot.v1.AssetEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.AssetEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetDetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      assets_pb.AssetDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vega.snapshot.v1.AssetEntry.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.snapshot.v1.AssetEntry} returns this
 */
proto.vega.snapshot.v1.AssetEntry.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional vega.AssetDetails asset_details = 2;
 * @return {?proto.vega.AssetDetails}
 */
proto.vega.snapshot.v1.AssetEntry.prototype.getAssetDetails = function() {
  return /** @type{?proto.vega.AssetDetails} */ (
    jspb.Message.getWrapperField(this, assets_pb.AssetDetails, 2));
};


/**
 * @param {?proto.vega.AssetDetails|undefined} value
 * @return {!proto.vega.snapshot.v1.AssetEntry} returns this
*/
proto.vega.snapshot.v1.AssetEntry.prototype.setAssetDetails = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.snapshot.v1.AssetEntry} returns this
 */
proto.vega.snapshot.v1.AssetEntry.prototype.clearAssetDetails = function() {
  return this.setAssetDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.snapshot.v1.AssetEntry.prototype.hasAssetDetails = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.snapshot.v1.Assets.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.snapshot.v1.Assets.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.snapshot.v1.Assets.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.snapshot.v1.Assets} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.Assets.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.vega.snapshot.v1.AssetEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.snapshot.v1.Assets}
 */
proto.vega.snapshot.v1.Assets.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.snapshot.v1.Assets;
  return proto.vega.snapshot.v1.Assets.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.snapshot.v1.Assets} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.snapshot.v1.Assets}
 */
proto.vega.snapshot.v1.Assets.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.snapshot.v1.AssetEntry;
      reader.readMessage(value,proto.vega.snapshot.v1.AssetEntry.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Assets.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.snapshot.v1.Assets.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.snapshot.v1.Assets} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.Assets.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vega.snapshot.v1.AssetEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AssetEntry assets = 1;
 * @return {!Array<!proto.vega.snapshot.v1.AssetEntry>}
 */
proto.vega.snapshot.v1.Assets.prototype.getAssetsList = function() {
  return /** @type{!Array<!proto.vega.snapshot.v1.AssetEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.snapshot.v1.AssetEntry, 1));
};


/**
 * @param {!Array<!proto.vega.snapshot.v1.AssetEntry>} value
 * @return {!proto.vega.snapshot.v1.Assets} returns this
*/
proto.vega.snapshot.v1.Assets.prototype.setAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.snapshot.v1.AssetEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.snapshot.v1.AssetEntry}
 */
proto.vega.snapshot.v1.Assets.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.snapshot.v1.AssetEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.snapshot.v1.Assets} returns this
 */
proto.vega.snapshot.v1.Assets.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.snapshot.v1.AssetBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.snapshot.v1.AssetBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.snapshot.v1.AssetBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.AssetBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    party: jspb.Message.getFieldWithDefault(msg, 1, ""),
    asset: jspb.Message.getFieldWithDefault(msg, 2, ""),
    balance: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.snapshot.v1.AssetBalance}
 */
proto.vega.snapshot.v1.AssetBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.snapshot.v1.AssetBalance;
  return proto.vega.snapshot.v1.AssetBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.snapshot.v1.AssetBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.snapshot.v1.AssetBalance}
 */
proto.vega.snapshot.v1.AssetBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParty(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.AssetBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.snapshot.v1.AssetBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.snapshot.v1.AssetBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.AssetBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParty();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string party = 1;
 * @return {string}
 */
proto.vega.snapshot.v1.AssetBalance.prototype.getParty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.snapshot.v1.AssetBalance} returns this
 */
proto.vega.snapshot.v1.AssetBalance.prototype.setParty = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.vega.snapshot.v1.AssetBalance.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.snapshot.v1.AssetBalance} returns this
 */
proto.vega.snapshot.v1.AssetBalance.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string balance = 3;
 * @return {string}
 */
proto.vega.snapshot.v1.AssetBalance.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.snapshot.v1.AssetBalance} returns this
 */
proto.vega.snapshot.v1.AssetBalance.prototype.setBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.snapshot.v1.Collateral.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.snapshot.v1.Collateral.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.snapshot.v1.Collateral.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.snapshot.v1.Collateral} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.Collateral.toObject = function(includeInstance, msg) {
  var f, obj = {
    balancesList: jspb.Message.toObjectList(msg.getBalancesList(),
    proto.vega.snapshot.v1.AssetBalance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.snapshot.v1.Collateral}
 */
proto.vega.snapshot.v1.Collateral.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.snapshot.v1.Collateral;
  return proto.vega.snapshot.v1.Collateral.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.snapshot.v1.Collateral} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.snapshot.v1.Collateral}
 */
proto.vega.snapshot.v1.Collateral.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.snapshot.v1.AssetBalance;
      reader.readMessage(value,proto.vega.snapshot.v1.AssetBalance.deserializeBinaryFromReader);
      msg.addBalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Collateral.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.snapshot.v1.Collateral.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.snapshot.v1.Collateral} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.Collateral.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vega.snapshot.v1.AssetBalance.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AssetBalance balances = 1;
 * @return {!Array<!proto.vega.snapshot.v1.AssetBalance>}
 */
proto.vega.snapshot.v1.Collateral.prototype.getBalancesList = function() {
  return /** @type{!Array<!proto.vega.snapshot.v1.AssetBalance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.snapshot.v1.AssetBalance, 1));
};


/**
 * @param {!Array<!proto.vega.snapshot.v1.AssetBalance>} value
 * @return {!proto.vega.snapshot.v1.Collateral} returns this
*/
proto.vega.snapshot.v1.Collateral.prototype.setBalancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.snapshot.v1.AssetBalance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.snapshot.v1.AssetBalance}
 */
proto.vega.snapshot.v1.Collateral.prototype.addBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.snapshot.v1.AssetBalance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.snapshot.v1.Collateral} returns this
 */
proto.vega.snapshot.v1.Collateral.prototype.clearBalancesList = function() {
  return this.setBalancesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.snapshot.v1.NetParams.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.snapshot.v1.NetParams.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.snapshot.v1.NetParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.snapshot.v1.NetParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.NetParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    vega_pb.NetworkParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.snapshot.v1.NetParams}
 */
proto.vega.snapshot.v1.NetParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.snapshot.v1.NetParams;
  return proto.vega.snapshot.v1.NetParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.snapshot.v1.NetParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.snapshot.v1.NetParams}
 */
proto.vega.snapshot.v1.NetParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vega_pb.NetworkParameter;
      reader.readMessage(value,vega_pb.NetworkParameter.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.NetParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.snapshot.v1.NetParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.snapshot.v1.NetParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.NetParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      vega_pb.NetworkParameter.serializeBinaryToWriter
    );
  }
};


/**
 * repeated vega.NetworkParameter params = 1;
 * @return {!Array<!proto.vega.NetworkParameter>}
 */
proto.vega.snapshot.v1.NetParams.prototype.getParamsList = function() {
  return /** @type{!Array<!proto.vega.NetworkParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, vega_pb.NetworkParameter, 1));
};


/**
 * @param {!Array<!proto.vega.NetworkParameter>} value
 * @return {!proto.vega.snapshot.v1.NetParams} returns this
*/
proto.vega.snapshot.v1.NetParams.prototype.setParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.NetworkParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.NetworkParameter}
 */
proto.vega.snapshot.v1.NetParams.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.NetworkParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.snapshot.v1.NetParams} returns this
 */
proto.vega.snapshot.v1.NetParams.prototype.clearParamsList = function() {
  return this.setParamsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.snapshot.v1.Proposals.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.snapshot.v1.Proposals.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.snapshot.v1.Proposals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.snapshot.v1.Proposals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.Proposals.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposalsList: jspb.Message.toObjectList(msg.getProposalsList(),
    governance_pb.Proposal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.snapshot.v1.Proposals}
 */
proto.vega.snapshot.v1.Proposals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.snapshot.v1.Proposals;
  return proto.vega.snapshot.v1.Proposals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.snapshot.v1.Proposals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.snapshot.v1.Proposals}
 */
proto.vega.snapshot.v1.Proposals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new governance_pb.Proposal;
      reader.readMessage(value,governance_pb.Proposal.deserializeBinaryFromReader);
      msg.addProposals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.snapshot.v1.Proposals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.snapshot.v1.Proposals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.snapshot.v1.Proposals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.snapshot.v1.Proposals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      governance_pb.Proposal.serializeBinaryToWriter
    );
  }
};


/**
 * repeated vega.Proposal proposals = 1;
 * @return {!Array<!proto.vega.Proposal>}
 */
proto.vega.snapshot.v1.Proposals.prototype.getProposalsList = function() {
  return /** @type{!Array<!proto.vega.Proposal>} */ (
    jspb.Message.getRepeatedWrapperField(this, governance_pb.Proposal, 1));
};


/**
 * @param {!Array<!proto.vega.Proposal>} value
 * @return {!proto.vega.snapshot.v1.Proposals} returns this
*/
proto.vega.snapshot.v1.Proposals.prototype.setProposalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.Proposal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.Proposal}
 */
proto.vega.snapshot.v1.Proposals.prototype.addProposals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.Proposal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.snapshot.v1.Proposals} returns this
 */
proto.vega.snapshot.v1.Proposals.prototype.clearProposalsList = function() {
  return this.setProposalsList([]);
};


goog.object.extend(exports, proto.vega.snapshot.v1);
