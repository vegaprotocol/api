{
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "ConditionOperator": {
      "default": "OPERATOR_UNSPECIFIED",
      "description": "Comparator describes the type of comparison.\n\n - OPERATOR_UNSPECIFIED: The default value\n - OPERATOR_EQUALS: Verify if the property values are strictly equal or not.\n - OPERATOR_GREATER_THAN: Verify if the oracle data value is greater than the Condition value.\n - OPERATOR_GREATER_THAN_OR_EQUAL: Verify if the oracle data value is greater than or equal to the Condition\nvalue.\n - OPERATOR_LESS_THAN: Verify if the oracle data value is less than the Condition value.\n - OPERATOR_LESS_THAN_OR_EQUAL: Verify if the oracle data value is less or equal to than the Condition\nvalue.",
      "enum": [
        "OPERATOR_UNSPECIFIED",
        "OPERATOR_EQUALS",
        "OPERATOR_GREATER_THAN",
        "OPERATOR_GREATER_THAN_OR_EQUAL",
        "OPERATOR_LESS_THAN",
        "OPERATOR_LESS_THAN_OR_EQUAL"
      ],
      "type": "string"
    },
    "MarketTradingMode": {
      "default": "TRADING_MODE_UNSPECIFIED",
      "description": "- TRADING_MODE_UNSPECIFIED: Default value, this is invalid\n - TRADING_MODE_CONTINUOUS: Normal trading\n - TRADING_MODE_BATCH_AUCTION: Auction trading (FBA)\n - TRADING_MODE_OPENING_AUCTION: Opening auction\n - TRADING_MODE_MONITORING_AUCTION: Auction triggered by monitoring",
      "enum": [
        "TRADING_MODE_UNSPECIFIED",
        "TRADING_MODE_CONTINUOUS",
        "TRADING_MODE_BATCH_AUCTION",
        "TRADING_MODE_OPENING_AUCTION",
        "TRADING_MODE_MONITORING_AUCTION"
      ],
      "title": "The trading mode the market is currently running, also referred to as 'market state'",
      "type": "string"
    },
    "OrderTimeInForce": {
      "default": "TIME_IN_FORCE_UNSPECIFIED",
      "description": "- TIME_IN_FORCE_UNSPECIFIED: Default value for TimeInForce, can be valid for an amend\n - TIME_IN_FORCE_GTC: Good until cancelled\n - TIME_IN_FORCE_GTT: Good until specified time\n - TIME_IN_FORCE_IOC: Immediate or cancel\n - TIME_IN_FORCE_FOK: Fill or kill\n - TIME_IN_FORCE_GFA: Good for auction\n - TIME_IN_FORCE_GFN: Good for normal",
      "enum": [
        "TIME_IN_FORCE_UNSPECIFIED",
        "TIME_IN_FORCE_GTC",
        "TIME_IN_FORCE_GTT",
        "TIME_IN_FORCE_IOC",
        "TIME_IN_FORCE_FOK",
        "TIME_IN_FORCE_GFA",
        "TIME_IN_FORCE_GFN"
      ],
      "title": "Time In Force for an order\nSee [What order types are available to trade on Vega?](https://docs.testnet.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail",
      "type": "string"
    },
    "UndelegateSubmissionMethod": {
      "default": "METHOD_UNSPECIFIED",
      "enum": [
        "METHOD_UNSPECIFIED",
        "METHOD_NOW",
        "METHOD_AT_END_OF_EPOCH",
        "METHOD_IN_ANGER"
      ],
      "type": "string"
    },
    "VoteValue": {
      "default": "VALUE_UNSPECIFIED",
      "description": "- VALUE_UNSPECIFIED: Default value, always invalid\n - VALUE_NO: A vote against the proposal\n - VALUE_YES: A vote in favour of the proposal",
      "enum": [
        "VALUE_UNSPECIFIED",
        "VALUE_NO",
        "VALUE_YES"
      ],
      "title": "Vote value",
      "type": "string"
    },
    "protobufAny": {
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "runtimeStreamError": {
      "properties": {
        "details": {
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "type": "array"
        },
        "grpc_code": {
          "format": "int32",
          "type": "integer"
        },
        "http_code": {
          "format": "int32",
          "type": "integer"
        },
        "http_status": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AuctionEvent": {
      "properties": {
        "end": {
          "format": "int64",
          "title": "Timestamp containing the end time for an auction",
          "type": "string"
        },
        "extension_trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "If an auction was ongoing, but was extended for whatever reason, this field will\nbe set to the trigger type indicating which component extended the auction"
        },
        "leave": {
          "format": "boolean",
          "title": "True if the event indicates leaving auction mode and False otherwise",
          "type": "boolean"
        },
        "market_id": {
          "title": "Market identifier for the event",
          "type": "string"
        },
        "opening_auction": {
          "format": "boolean",
          "title": "True if the event indicates an auction opening and False otherwise",
          "type": "boolean"
        },
        "start": {
          "format": "int64",
          "title": "Timestamp containing the start time for an auction",
          "type": "string"
        },
        "trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "the reason this market is/was in auction"
        }
      },
      "title": "An auction event indicating a change in auction state, for example starting or ending an auction",
      "type": "object"
    },
    "v1BusEvent": {
      "properties": {
        "account": {
          "$ref": "#/definitions/vegaAccount",
          "title": "Account events"
        },
        "asset": {
          "$ref": "#/definitions/vegaAsset",
          "title": "Asset events"
        },
        "auction": {
          "$ref": "#/definitions/v1AuctionEvent",
          "title": "Auction events - See [AuctionEvent](#vega.AuctionEvent)"
        },
        "block": {
          "title": "The batch (or block) of transactions that the events relate to",
          "type": "string"
        },
        "checkpoint": {
          "$ref": "#/definitions/v1CheckpointEvent",
          "title": "Checkpoint was created"
        },
        "delegation_balance": {
          "$ref": "#/definitions/v1DelegationBalanceEvent",
          "title": "Delegation balance events"
        },
        "deposit": {
          "$ref": "#/definitions/vegaDeposit",
          "title": "Deposit events"
        },
        "epoch_event": {
          "$ref": "#/definitions/v1EpochEvent",
          "title": "Epoch update events - See [Epoch](#vega.Epoch)"
        },
        "id": {
          "title": "A unique event identifier for the message",
          "type": "string"
        },
        "liquidity_provision": {
          "$ref": "#/definitions/vegaLiquidityProvision",
          "title": "LiquidityProvision  events"
        },
        "loss_socialization": {
          "$ref": "#/definitions/v1LossSocialization",
          "title": "Loss socialization events - See [LossSocialization](#vega.LossSocialization)"
        },
        "margin_levels": {
          "$ref": "#/definitions/vegaMarginLevels",
          "title": "Margin level update events"
        },
        "market": {
          "$ref": "#/definitions/v1MarketEvent",
          "title": "Market tick events - See [MarketEvent](#vega.MarketEvent)"
        },
        "market_created": {
          "$ref": "#/definitions/vegaMarket",
          "title": "Market created events"
        },
        "market_data": {
          "$ref": "#/definitions/vegaMarketData",
          "title": "Market data events"
        },
        "market_tick": {
          "$ref": "#/definitions/v1MarketTick",
          "title": "Market tick events - See [MarketTick](#vega.MarketTick)"
        },
        "market_updated": {
          "$ref": "#/definitions/vegaMarket",
          "title": "Market created events"
        },
        "network_parameter": {
          "$ref": "#/definitions/vegaNetworkParameter",
          "title": "Network parameter events"
        },
        "node_signature": {
          "$ref": "#/definitions/v1NodeSignature",
          "title": "Node signature events"
        },
        "oracle_data": {
          "$ref": "#/definitions/v1OracleData",
          "title": "OracleData events"
        },
        "oracle_spec": {
          "$ref": "#/definitions/v1OracleSpec",
          "title": "OracleSpec events"
        },
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "title": "Order events"
        },
        "party": {
          "$ref": "#/definitions/vegaParty",
          "title": "Party events"
        },
        "position_resolution": {
          "$ref": "#/definitions/v1PositionResolution",
          "title": "Position resolution events - See [PositionResolution](#vega.PositionResolution)"
        },
        "proposal": {
          "$ref": "#/definitions/vegaProposal",
          "title": "Proposal events (for governance)"
        },
        "reward_payout": {
          "$ref": "#/definitions/v1RewardPayoutEvent",
          "title": "Reward payout event"
        },
        "risk_factor": {
          "$ref": "#/definitions/vegaRiskFactor",
          "title": "Risk factor events"
        },
        "settle_distressed": {
          "$ref": "#/definitions/v1SettleDistressed",
          "title": "Position distressed events - See [SettleDistressed](#vega.SettleDistressed)"
        },
        "settle_position": {
          "$ref": "#/definitions/v1SettlePosition",
          "title": "Position settlement events - See [SettlePosition](#vega.SettlePosition)"
        },
        "stake_linking": {
          "$ref": "#/definitions/v1StakeLinking",
          "title": "Staking event"
        },
        "time_update": {
          "$ref": "#/definitions/v1TimeUpdate",
          "title": "Time update events - See [TimeUpdate](#vega.TimeUpdate)"
        },
        "trade": {
          "$ref": "#/definitions/vegaTrade",
          "title": "Trade events"
        },
        "transfer_responses": {
          "$ref": "#/definitions/v1TransferResponses",
          "title": "Transfer responses update events - See [TransferResponses](#vega.TransferResponses)"
        },
        "tx_err_event": {
          "$ref": "#/definitions/v1TxErrorEvent",
          "title": "Transaction error events, not included in the ALL event type"
        },
        "type": {
          "$ref": "#/definitions/v1BusEventType",
          "title": "The type of bus event (one of the list below)"
        },
        "validator_score": {
          "$ref": "#/definitions/v1ValidatorScoreEvent",
          "title": "Validator score calcualted"
        },
        "validator_update": {
          "$ref": "#/definitions/v1ValidatorUpdate",
          "title": "Validator update events"
        },
        "vote": {
          "$ref": "#/definitions/vegaVote",
          "title": "Vote events (for governance)"
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaWithdrawal",
          "title": "Withdrawal events"
        }
      },
      "title": "A bus event is a container for event bus events emitted by Vega",
      "type": "object"
    },
    "v1BusEventType": {
      "default": "BUS_EVENT_TYPE_UNSPECIFIED",
      "description": "- BUS_EVENT_TYPE_UNSPECIFIED: Default value, always invalid\n - BUS_EVENT_TYPE_ALL: Events of ALL event types, used when filtering stream from event bus\n - BUS_EVENT_TYPE_TIME_UPDATE: Event for blockchain time updates\n - BUS_EVENT_TYPE_TRANSFER_RESPONSES: Event for when a transfer happens internally, contains the transfer information\n - BUS_EVENT_TYPE_POSITION_RESOLUTION: Event indicating position resolution has occurred\n - BUS_EVENT_TYPE_ORDER: Event for order updates, both new and existing orders\n - BUS_EVENT_TYPE_ACCOUNT: Event for account updates\n - BUS_EVENT_TYPE_PARTY: Event for party updates\n - BUS_EVENT_TYPE_TRADE: Event indicating a new trade has occurred\n - BUS_EVENT_TYPE_MARGIN_LEVELS: Event indicating margin levels have changed for a party\n - BUS_EVENT_TYPE_PROPOSAL: Event for proposal updates (for governance)\n - BUS_EVENT_TYPE_VOTE: Event indicating a new vote has occurred (for governance)\n - BUS_EVENT_TYPE_MARKET_DATA: Event for market data updates\n - BUS_EVENT_TYPE_NODE_SIGNATURE: Event for a new signature for a Vega node\n - BUS_EVENT_TYPE_LOSS_SOCIALIZATION: Event indicating loss socialisation occurred for a party\n - BUS_EVENT_TYPE_SETTLE_POSITION: Event for when a position is being settled\n - BUS_EVENT_TYPE_SETTLE_DISTRESSED: Event for when a position is distressed\n - BUS_EVENT_TYPE_MARKET_CREATED: Event indicating a new market was created\n - BUS_EVENT_TYPE_ASSET: Event for when an asset is added to Vega\n - BUS_EVENT_TYPE_MARKET_TICK: Event indicating a market tick event\n - BUS_EVENT_TYPE_WITHDRAWAL: Event for when a withdrawal occurs\n - BUS_EVENT_TYPE_DEPOSIT: Event for when a deposit occurs\n - BUS_EVENT_TYPE_AUCTION: Event indicating a change in auction state, for example starting or ending an auction\n - BUS_EVENT_TYPE_RISK_FACTOR: Event indicating a risk factor has been updated\n - BUS_EVENT_TYPE_NETWORK_PARAMETER: Event indicating a network parameter has been added or updated\n - BUS_EVENT_TYPE_LIQUIDITY_PROVISION: Event indicating a liquidity provision has been created or updated\n - BUS_EVENT_TYPE_MARKET_UPDATED: Event indicating a new market was created\n - BUS_EVENT_TYPE_ORACLE_SPEC: Event indicating an oracle spec has been created or updated\n - BUS_EVENT_TYPE_ORACLE_DATA: Event indicating that an oracle data has been broadcast\n - BUS_EVENT_TYPE_DELEGATION_BALANCE: Event indicating that an delegation balance of a party to a node for current epoch has changed\n - BUS_EVENT_TYPE_VALIDATOR_SCORE: Event indicating the validator score for the given epoch\n - BUS_EVENT_TYPE_EPOCH_UPDATE: Event indicating the start or end of an epoch\n - BUS_EVENT_TYPE_VALIDATOR_UPDATE: Event indicating that validator node has been updated\n - BUS_EVENT_TYPE_STAKE_LINKING: Event indicating a new staking event have been processed by the network\n - BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT: Event indicating the payout of a reward has been initiated\n - BUS_EVENT_TYPE_CHECKPOINT: Event indicating a new checkpoint was created\n - BUS_EVENT_TYPE_MARKET: Event indicating a market related event, for example when a market opens\n - BUS_EVENT_TYPE_TX_ERROR: Event used to report failed transactions back to a user, this is excluded from the ALL type",
      "enum": [
        "BUS_EVENT_TYPE_UNSPECIFIED",
        "BUS_EVENT_TYPE_ALL",
        "BUS_EVENT_TYPE_TIME_UPDATE",
        "BUS_EVENT_TYPE_TRANSFER_RESPONSES",
        "BUS_EVENT_TYPE_POSITION_RESOLUTION",
        "BUS_EVENT_TYPE_ORDER",
        "BUS_EVENT_TYPE_ACCOUNT",
        "BUS_EVENT_TYPE_PARTY",
        "BUS_EVENT_TYPE_TRADE",
        "BUS_EVENT_TYPE_MARGIN_LEVELS",
        "BUS_EVENT_TYPE_PROPOSAL",
        "BUS_EVENT_TYPE_VOTE",
        "BUS_EVENT_TYPE_MARKET_DATA",
        "BUS_EVENT_TYPE_NODE_SIGNATURE",
        "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
        "BUS_EVENT_TYPE_SETTLE_POSITION",
        "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
        "BUS_EVENT_TYPE_MARKET_CREATED",
        "BUS_EVENT_TYPE_ASSET",
        "BUS_EVENT_TYPE_MARKET_TICK",
        "BUS_EVENT_TYPE_WITHDRAWAL",
        "BUS_EVENT_TYPE_DEPOSIT",
        "BUS_EVENT_TYPE_AUCTION",
        "BUS_EVENT_TYPE_RISK_FACTOR",
        "BUS_EVENT_TYPE_NETWORK_PARAMETER",
        "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
        "BUS_EVENT_TYPE_MARKET_UPDATED",
        "BUS_EVENT_TYPE_ORACLE_SPEC",
        "BUS_EVENT_TYPE_ORACLE_DATA",
        "BUS_EVENT_TYPE_DELEGATION_BALANCE",
        "BUS_EVENT_TYPE_VALIDATOR_SCORE",
        "BUS_EVENT_TYPE_EPOCH_UPDATE",
        "BUS_EVENT_TYPE_VALIDATOR_UPDATE",
        "BUS_EVENT_TYPE_STAKE_LINKING",
        "BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT",
        "BUS_EVENT_TYPE_CHECKPOINT",
        "BUS_EVENT_TYPE_MARKET",
        "BUS_EVENT_TYPE_TX_ERROR"
      ],
      "title": "An (event) bus event type is used to specify a type of event\nIt has 2 styles of event:\nSingle values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item\nGroup values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items",
      "type": "string"
    },
    "v1CheckpointEvent": {
      "properties": {
        "block_hash": {
          "type": "string"
        },
        "block_height": {
          "format": "uint64",
          "type": "string"
        },
        "hash": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Condition": {
      "properties": {
        "operator": {
          "$ref": "#/definitions/ConditionOperator",
          "description": "comparator is the type of comparison to make on the value."
        },
        "value": {
          "description": "value is used by the comparator.",
          "type": "string"
        }
      },
      "title": "Condition describes the condition that must be validated by the",
      "type": "object"
    },
    "v1DelegateSubmission": {
      "properties": {
        "amount": {
          "title": "The amount of stake to delegate",
          "type": "string"
        },
        "node_id": {
          "title": "The ID for the node to delegate to",
          "type": "string"
        }
      },
      "title": "A command to submit an instruction to delegate some stake to a node",
      "type": "object"
    },
    "v1DelegationBalanceEvent": {
      "properties": {
        "amount": {
          "format": "uint64",
          "type": "string"
        },
        "epoch_seq": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "party": {
          "type": "string"
        }
      },
      "title": "DelegationBalanceEvent - updates on the delegation balance of a party to a node in the current epoch in effect",
      "type": "object"
    },
    "v1EpochEvent": {
      "properties": {
        "end_time": {
          "format": "int64",
          "title": "What time did it actually end",
          "type": "string"
        },
        "expire_time": {
          "format": "int64",
          "title": "What time should this epoch end",
          "type": "string"
        },
        "seq": {
          "format": "uint64",
          "title": "Sequence number that increases by one each epoch",
          "type": "string"
        },
        "start_time": {
          "format": "int64",
          "title": "What time did this epoch start",
          "type": "string"
        }
      },
      "title": "Epoch details",
      "type": "object"
    },
    "v1Filter": {
      "description": "Filter describes the conditions under which an oracle data is considered of\ninterest or not.",
      "properties": {
        "conditions": {
          "description": "conditions are the conditions that should be matched by the data to be\nconsidered of interest.",
          "items": {
            "$ref": "#/definitions/v1Condition"
          },
          "type": "array"
        },
        "key": {
          "$ref": "#/definitions/v1PropertyKey",
          "description": "key is the oracle data property key targeted by the filter."
        }
      },
      "type": "object"
    },
    "v1GetVegaTimeResponse": {
      "properties": {
        "timestamp": {
          "format": "int64",
          "title": "Timestamp representation of current VegaTime as represented in\nNanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`",
          "type": "string"
        }
      },
      "title": "Response for the current consensus coordinated time on the Vega network, referred to as \"VegaTime\"",
      "type": "object"
    },
    "v1LastBlockHeightResponse": {
      "properties": {
        "height": {
          "format": "uint64",
          "type": "string"
        }
      },
      "title": "A response with the height of the last block processed by\ntendermint",
      "type": "object"
    },
    "v1LiquidityProvisionSubmission": {
      "properties": {
        "buys": {
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity buy orders to meet the liquidity provision obligation",
          "type": "array"
        },
        "commitment_amount": {
          "title": "Specified as a unitless number that represents the amount of settlement asset of the market",
          "type": "string"
        },
        "fee": {
          "title": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
          "type": "string"
        },
        "market_id": {
          "title": "Market identifier for the order, required field",
          "type": "string"
        },
        "reference": {
          "title": "A reference to be added to every order created out of this liquidityProvisionSubmission",
          "type": "string"
        },
        "sells": {
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity sell orders to meet the liquidity provision obligation",
          "type": "array"
        }
      },
      "title": "A liquidity provision submitted for a given market",
      "type": "object"
    },
    "v1LossSocialization": {
      "properties": {
        "amount": {
          "format": "int64",
          "title": "Amount distributed",
          "type": "string"
        },
        "market_id": {
          "title": "Market identifier for the event",
          "type": "string"
        },
        "party_id": {
          "title": "Party identifier (public key) for the event",
          "type": "string"
        }
      },
      "title": "A loss socialization event contains details on the amount of wins unable to be distributed",
      "type": "object"
    },
    "v1MarketEvent": {
      "properties": {
        "market_id": {
          "title": "Market identifier for the event",
          "type": "string"
        },
        "payload": {
          "title": "Payload is a unique information string",
          "type": "string"
        }
      },
      "title": "MarketEvent - the common denominator for all market events\ninterface has a method to return a string for logging",
      "type": "object"
    },
    "v1MarketTick": {
      "properties": {
        "id": {
          "title": "Market identifier for the event",
          "type": "string"
        },
        "time": {
          "format": "int64",
          "title": "Timestamp containing latest update from Vega blockchain aka Vega-time",
          "type": "string"
        }
      },
      "title": "A market ticket event contains the time value for when a particular market was last processed on Vega",
      "type": "object"
    },
    "v1NodeSignature": {
      "properties": {
        "id": {
          "title": "The identifier of the resource being signed",
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/v1NodeSignatureKind",
          "title": "The kind of resource being signed"
        },
        "sig": {
          "format": "byte",
          "title": "The signature",
          "type": "string"
        }
      },
      "title": "Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network",
      "type": "object"
    },
    "v1NodeSignatureKind": {
      "default": "NODE_SIGNATURE_KIND_UNSPECIFIED",
      "description": "- NODE_SIGNATURE_KIND_UNSPECIFIED: Represents an unspecified or missing value from the input\n - NODE_SIGNATURE_KIND_ASSET_NEW: Represents a signature for a new asset allow-listing\n - NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL: Represents a signature for an asset withdrawal",
      "enum": [
        "NODE_SIGNATURE_KIND_UNSPECIFIED",
        "NODE_SIGNATURE_KIND_ASSET_NEW",
        "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL"
      ],
      "title": "The kind of the signature created by a node, for example, allow-listing a new asset, withdrawal etc",
      "type": "string"
    },
    "v1ObserveEventBusResponse": {
      "properties": {
        "events": {
          "items": {
            "$ref": "#/definitions/v1BusEvent"
          },
          "title": "One or more events",
          "type": "array"
        }
      },
      "title": "Response to a subscribed stream of events from the Vega event bus",
      "type": "object"
    },
    "v1OracleData": {
      "description": "OracleData describes an oracle data that has been broadcast.",
      "properties": {
        "broadcast_at": {
          "description": "broadcast_at is the time at which the data was broadcast for the first\ntime.",
          "format": "int64",
          "type": "string"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/v1Property"
          },
          "title": "data holds all the properties of the oracle data",
          "type": "array"
        },
        "matched_spec_ids": {
          "description": "matched_specs_ids lists all the oracle specs that matched this oracle data.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pub_keys": {
          "description": "pubKeys is the list of authorized public keys that signed the data for this\noracle. All the public keys in the oracle data should be contained in these\npublic keys.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1OracleSpec": {
      "description": "An oracle spec describe the oracle data that a product (or a risk model)\nwants to get from the oracle engine.\nThis message contains additional information used by the API.",
      "properties": {
        "created_at": {
          "format": "int64",
          "title": "Creation Date time",
          "type": "string"
        },
        "filters": {
          "description": "filters describes which oracle data are considered of interest or not for\nthe product (or the risk model).",
          "items": {
            "$ref": "#/definitions/v1Filter"
          },
          "type": "array"
        },
        "id": {
          "description": "id is a hash generated from the OracleSpec data.",
          "type": "string"
        },
        "pub_keys": {
          "description": "pubKeys is the list of authorized public keys that signed the data for this\noracle. All the public keys in the oracle data should be contained in these\npublic keys.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/definitions/v1OracleSpecStatus",
          "title": "status describes the status of the oracle spec"
        },
        "updated_at": {
          "format": "int64",
          "title": "Last Updated timestamp",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OracleSpecConfiguration": {
      "description": "An oracle spec describe the oracle data that a product (or a risk model)\nwants to get from the oracle engine.",
      "properties": {
        "filters": {
          "description": "filters describes which oracle data are considered of interest or not for\nthe product (or the risk model).",
          "items": {
            "$ref": "#/definitions/v1Filter"
          },
          "type": "array"
        },
        "pub_keys": {
          "description": "pubKeys is the list of authorized public keys that signed the data for this\noracle. All the public keys in the oracle data should be contained in these\npublic keys.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1OracleSpecStatus": {
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: The default value.\n - STATUS_ACTIVE: STATUS_ACTIVE describes an active oracle spec.\n - STATUS_DEACTIVATED: STATUS_DEACTIVATED describes an oracle spec that is not listening to data\nanymore.",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_ACTIVE",
        "STATUS_DEACTIVATED"
      ],
      "title": "Status describe the status of the oracle spec",
      "type": "string"
    },
    "v1OrderAmendment": {
      "properties": {
        "expires_at": {
          "$ref": "#/definitions/vegaTimestamp",
          "title": "Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "market_id": {
          "title": "Market identifier, this is required to find the order and will not be updated",
          "type": "string"
        },
        "order_id": {
          "title": "Order identifier, this is required to find the order and will not be updated, required field",
          "type": "string"
        },
        "pegged_offset": {
          "format": "int64",
          "title": "Amend the pegged order offset for the order",
          "type": "string"
        },
        "pegged_reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "Amend the pegged order reference for the order\n- See [`PeggedReference`](#vega.PeggedReference)"
        },
        "price": {
          "$ref": "#/definitions/vegaPrice",
          "title": "Amend the price for the order, if the Price value is set, otherwise price will remain unchanged - See [`Price`](#vega.Price)"
        },
        "size_delta": {
          "format": "int64",
          "title": "Amend the size for the order by the delta specified:\n- To reduce the size from the current value set a negative integer value\n- To increase the size from the current value, set a positive integer value\n- To leave the size unchanged set a value of zero",
          "type": "string"
        },
        "time_in_force": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Amend the time in force for the order, set to TIME_IN_FORCE_UNSPECIFIED to remain unchanged\n- See [`TimeInForce`](#api.VegaTimeResponse).`timestamp`"
        }
      },
      "title": "An order amendment is a request to amend or update an existing order on Vega",
      "type": "object"
    },
    "v1OrderCancellation": {
      "properties": {
        "market_id": {
          "title": "Market identifier for the order, required field",
          "type": "string"
        },
        "order_id": {
          "title": "Unique identifier for the order (set by the system after consensus), required field",
          "type": "string"
        }
      },
      "title": "An order cancellation is a request to cancel an existing order on Vega",
      "type": "object"
    },
    "v1OrderSubmission": {
      "properties": {
        "expires_at": {
          "format": "int64",
          "title": "Timestamp for when the order will expire, in nanoseconds since the epoch,\nrequired field only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
          "type": "string"
        },
        "market_id": {
          "title": "Market identifier for the order, required field",
          "type": "string"
        },
        "pegged_order": {
          "$ref": "#/definitions/vegaPeggedOrder",
          "title": "Used to specify the details for a pegged order\n- See [`PeggedOrder`](#vega.PeggedOrder)"
        },
        "price": {
          "title": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places,\n, required field for limit orders, however it is not required for market orders",
          "type": "string"
        },
        "reference": {
          "title": "Reference given for the order, this is typically used to retrieve an order submitted through consensus, currently\nset internally by the node to return a unique reference identifier for the order submission",
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/vegaSide",
          "title": "Side for the order, e.g. SIDE_BUY or SIDE_SELL, required field - See [`Side`](#vega.Side)"
        },
        "size": {
          "format": "uint64",
          "title": "Size for the order, for example, in a futures market the size equals the number of contracts, cannot be negative",
          "type": "string"
        },
        "time_in_force": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Time in force indicates how long an order will remain active before it is executed or expires, required field\n- See [`Order.TimeInForce`](#vega.Order.TimeInForce)"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType",
          "title": "Type for the order, required field - See [`Order.Type`](#vega.Order.Type)"
        }
      },
      "title": "An order submission is a request to submit or create a new order on Vega",
      "type": "object"
    },
    "v1PositionResolution": {
      "properties": {
        "closed": {
          "format": "int64",
          "title": "Number of close outs",
          "type": "string"
        },
        "distressed": {
          "format": "int64",
          "title": "Number of distressed traders",
          "type": "string"
        },
        "mark_price": {
          "format": "uint64",
          "title": "Mark price, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        },
        "market_id": {
          "title": "Market identifier for the event",
          "type": "string"
        }
      },
      "title": "A position resolution event contains information on distressed trades",
      "type": "object"
    },
    "v1PropagateChainEventResponse": {
      "properties": {
        "success": {
          "format": "boolean",
          "title": "Success will be true if the event was accepted by the node,\n**Important** - success does not mean that the event is confirmed by consensus",
          "type": "boolean"
        }
      },
      "title": "Response for a new event sent by the blockchain queue to be propagated on Vega",
      "type": "object"
    },
    "v1Property": {
      "description": "Property describes one property of an oracle spec with a key with its value.",
      "properties": {
        "name": {
          "description": "name is the name of the property.",
          "type": "string"
        },
        "value": {
          "description": "value is the value of the property.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PropertyKey": {
      "description": "PropertyKey describes the property key contained in an oracle data.",
      "properties": {
        "name": {
          "description": "name is the name of the property.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PropertyKeyType",
          "description": "type is the type of the property."
        }
      },
      "type": "object"
    },
    "v1PropertyKeyType": {
      "default": "TYPE_UNSPECIFIED",
      "description": "Type describes the type of properties that are supported by the oracle\nengine.\n\n - TYPE_UNSPECIFIED: The default value.\n - TYPE_EMPTY: Any type.\n - TYPE_INTEGER: Integer type.\n - TYPE_STRING: String type.\n - TYPE_BOOLEAN: Boolean type.\n - TYPE_DECIMAL: Any floating point decimal type.\n - TYPE_TIMESTAMP: Timestamp date type.",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_EMPTY",
        "TYPE_INTEGER",
        "TYPE_STRING",
        "TYPE_BOOLEAN",
        "TYPE_DECIMAL",
        "TYPE_TIMESTAMP"
      ],
      "type": "string"
    },
    "v1ProposalSubmission": {
      "properties": {
        "reference": {
          "title": "Proposal reference",
          "type": "string"
        },
        "terms": {
          "$ref": "#/definitions/vegaProposalTerms",
          "title": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted"
        }
      },
      "title": "A command to submit a new proposal for the\nvega network governance",
      "type": "object"
    },
    "v1RestoreSnapshot": {
      "properties": {
        "data": {
          "format": "byte",
          "type": "string"
        }
      },
      "title": "A command that loads the state from a given checkpoint",
      "type": "object"
    },
    "v1RewardPayoutEvent": {
      "properties": {
        "amount": {
          "type": "string"
        },
        "asset": {
          "type": "string"
        },
        "epoch_seq": {
          "type": "string"
        },
        "party": {
          "type": "string"
        },
        "percent_of_total_reward": {
          "type": "string"
        },
        "timestamp": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SettleDistressed": {
      "properties": {
        "margin": {
          "format": "uint64",
          "title": "Margin value as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        },
        "market_id": {
          "title": "Market identifier for the event",
          "type": "string"
        },
        "party_id": {
          "title": "Party identifier (public key) for the event",
          "type": "string"
        },
        "price": {
          "format": "uint64",
          "title": "Price as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        }
      },
      "title": "A settle distressed event contains information on distressed trading parties who are closed out",
      "type": "object"
    },
    "v1SettlePosition": {
      "properties": {
        "market_id": {
          "title": "Market identifier for the event",
          "type": "string"
        },
        "party_id": {
          "title": "Party identifier (public key) for the event",
          "type": "string"
        },
        "price": {
          "format": "uint64",
          "title": "Price of settlement as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        },
        "trade_settlements": {
          "items": {
            "$ref": "#/definitions/v1TradeSettlement"
          },
          "title": "A collection of 1 or more trade settlements",
          "type": "array"
        }
      },
      "title": "A settle position event contains position settlement information for a party",
      "type": "object"
    },
    "v1Signature": {
      "description": "A signature to be authenticate a transaction and to be verified by the vega\nnetwork.",
      "properties": {
        "algo": {
          "description": "The algorithm used to create the signature.",
          "type": "string"
        },
        "value": {
          "description": "The bytes of the signature (hex-encoded).",
          "type": "string"
        },
        "version": {
          "description": "The version of the signature used to create the signature.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1StakeLinking": {
      "properties": {
        "amount": {
          "title": "The amount of stake deposited or removed",
          "type": "string"
        },
        "finalized_at": {
          "format": "int64",
          "title": "The time at which the vega network finalized the state of the event",
          "type": "string"
        },
        "id": {
          "title": "The internal ID for this staking event",
          "type": "string"
        },
        "party": {
          "description": "The party to whom the event is directed at.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1StakeLinkingStatus",
          "title": "The status of the event"
        },
        "ts": {
          "format": "int64",
          "title": "The timestamps at which the event was emitted by ethereum",
          "type": "string"
        },
        "tx_hash": {
          "title": "The hash of the transaction from which the events happen",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1StakeLinkingType",
          "title": "The type of event"
        }
      },
      "title": "StakeLinking - an event notifying of stake being deposited or removed for a given party\nThese events are emitted for every Staking deposit or removed accepted by the network",
      "type": "object"
    },
    "v1StakeLinkingStatus": {
      "default": "STATUS_UNSPECIFIED",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_PENDING",
        "STATUS_ACCEPTED",
        "STATUS_REJECTED"
      ],
      "title": "- STATUS_UNSPECIFIED: Default value\n - STATUS_PENDING: Indicate an event waiting for confirmation from the vega network\n - STATUS_ACCEPTED: Indicate of an event accepted by the vega network\n - STATUS_REJECTED: Indaicate of an event rejected by the vega network",
      "type": "string"
    },
    "v1StakeLinkingType": {
      "default": "TYPE_UNSPECIFIED",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_LINK",
        "TYPE_UNLINK"
      ],
      "title": "- TYPE_UNSPECIFIED: Default value\n - TYPE_LINK: Indicate of a stake deposit instruction\n - TYPE_UNLINK: Indicate of a stake remove instruction",
      "type": "string"
    },
    "v1Statistics": {
      "properties": {
        "account_subscriptions": {
          "format": "int64",
          "title": "Current number of stream subscribers to account data",
          "type": "integer"
        },
        "app_version": {
          "title": "The version of the Vega node software",
          "type": "string"
        },
        "app_version_hash": {
          "title": "The version hash of the Vega node software",
          "type": "string"
        },
        "average_orders_per_block": {
          "format": "uint64",
          "title": "Average orders per block",
          "type": "string"
        },
        "average_tx_bytes": {
          "format": "uint64",
          "title": "Average transaction size in bytes",
          "type": "string"
        },
        "backlog_length": {
          "format": "uint64",
          "title": "Current backlog length (number of transactions) that are waiting to be included in a block",
          "type": "string"
        },
        "block_duration": {
          "format": "uint64",
          "title": "Current block duration, in nanoseconds",
          "type": "string"
        },
        "block_height": {
          "format": "uint64",
          "title": "Current block height as reported by the Vega blockchain",
          "type": "string"
        },
        "candle_subscriptions": {
          "format": "int64",
          "title": "Current number of stream subscribers to candle-stick data",
          "type": "integer"
        },
        "chain_id": {
          "title": "Unique identifier for the underlying Vega blockchain",
          "type": "string"
        },
        "chain_version": {
          "title": "The version of the underlying Vega blockchain",
          "type": "string"
        },
        "current_time": {
          "title": "Current system date and time formatted in ISO-8601 datetime format with nanosecond precision",
          "type": "string"
        },
        "genesis_time": {
          "title": "Genesis block date and time formatted in ISO-8601 datetime format with nanosecond precision",
          "type": "string"
        },
        "market_data_subscriptions": {
          "format": "int64",
          "title": "Current number of stream subscribers to market data",
          "type": "integer"
        },
        "market_depth_subscriptions": {
          "format": "int64",
          "title": "Current number of stream subscribers to market depth data",
          "type": "integer"
        },
        "market_depth_updates_subscriptions": {
          "format": "int64",
          "title": "Current number of stream subscribers to market depth update data",
          "type": "integer"
        },
        "order_subscriptions": {
          "format": "int64",
          "title": "Current number of stream subscribers to order data",
          "type": "integer"
        },
        "orders_per_second": {
          "format": "uint64",
          "title": "Orders processed per second",
          "type": "string"
        },
        "positions_subscriptions": {
          "format": "int64",
          "title": "Current number of stream subscribers to positions data",
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/vegaChainStatus",
          "title": "Status of the connection to the Vega blockchain\n- See [`ChainStatus`](#vega.ChainStatus)"
        },
        "total_amend_order": {
          "format": "uint64",
          "title": "Total number of order amendments since genesis (on all markets)",
          "type": "string"
        },
        "total_cancel_order": {
          "format": "uint64",
          "title": "Total number of order cancellations since genesis (on all markets)",
          "type": "string"
        },
        "total_create_order": {
          "format": "uint64",
          "title": "Total number of order submissions since genesis (on all markets)",
          "type": "string"
        },
        "total_markets": {
          "format": "uint64",
          "title": "Total markets on this Vega network",
          "type": "string"
        },
        "total_orders": {
          "format": "uint64",
          "title": "Total number of orders processed since genesis (on all markets)",
          "type": "string"
        },
        "total_peers": {
          "format": "uint64",
          "title": "Total number of connected peers to this node",
          "type": "string"
        },
        "total_trades": {
          "format": "uint64",
          "title": "Total number of trades emitted since genesis (on all markets)",
          "type": "string"
        },
        "trade_subscriptions": {
          "format": "int64",
          "title": "Current number of stream subscribers to trade data",
          "type": "integer"
        },
        "trades_per_second": {
          "format": "uint64",
          "title": "Trades emitted per second",
          "type": "string"
        },
        "tx_per_block": {
          "format": "uint64",
          "title": "Transactions per block",
          "type": "string"
        },
        "uptime": {
          "title": "Total uptime for this node formatted in ISO-8601 datetime format with nanosecond precision",
          "type": "string"
        },
        "vega_time": {
          "title": "Current Vega date and time formatted in ISO-8601 datetime format with nanosecond precision",
          "type": "string"
        }
      },
      "title": "Vega domain specific statistics as reported by the node the caller is connected to",
      "type": "object"
    },
    "v1StatisticsResponse": {
      "properties": {
        "statistics": {
          "$ref": "#/definitions/v1Statistics"
        }
      },
      "type": "object"
    },
    "v1SubmitTransactionV2Request": {
      "properties": {
        "tx": {
          "$ref": "#/definitions/v1Transaction",
          "title": "A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain"
        },
        "type": {
          "$ref": "#/definitions/v1SubmitTransactionV2RequestType",
          "title": "Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response"
        }
      },
      "title": "Request for submitting a transaction v2 on Vega",
      "type": "object"
    },
    "v1SubmitTransactionV2RequestType": {
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_ASYNC: The transaction will be submitted without waiting for response\n - TYPE_SYNC: The transaction will be submitted, and blocking until the\ntendermint mempool return a response\n - TYPE_COMMIT: The transaction will submitted, and blocking until the tendermint\nnetwork will have committed it into a block",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_ASYNC",
        "TYPE_SYNC",
        "TYPE_COMMIT"
      ],
      "title": "Blockchain transaction type",
      "type": "string"
    },
    "v1SubmitTransactionV2Response": {
      "properties": {
        "success": {
          "format": "boolean",
          "title": "Success will be true if the transaction was accepted by the node,\n**Important** - success does not mean that the event is confirmed by consensus",
          "type": "boolean"
        }
      },
      "title": "Response for submitting a transaction v2 on Vega",
      "type": "object"
    },
    "v1TimeUpdate": {
      "properties": {
        "timestamp": {
          "format": "int64",
          "title": "Timestamp containing latest update from Vega blockchain aka Vega-time",
          "type": "string"
        }
      },
      "title": "A time update event contains the latest time update from Vega blockchain",
      "type": "object"
    },
    "v1TradeSettlement": {
      "properties": {
        "price": {
          "format": "uint64",
          "title": "Price of settlement as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        },
        "size": {
          "format": "int64",
          "title": "Size of trade settlement",
          "type": "string"
        }
      },
      "title": "A trade settlement is part of the settle position event",
      "type": "object"
    },
    "v1Transaction": {
      "description": "Represents a transaction to be sent to Vega.",
      "properties": {
        "address": {
          "description": "The address of the sender (hex-encoded). Not supported yet.",
          "type": "string"
        },
        "input_data": {
          "description": "One of the set of Vega commands (proto marshalled).",
          "format": "byte",
          "type": "string"
        },
        "pub_key": {
          "description": "The public key of the sender (hex-encoded).",
          "type": "string"
        },
        "signature": {
          "$ref": "#/definitions/v1Signature",
          "description": "The signature of the inputData."
        },
        "version": {
          "description": "A version of the transaction, to be used in the future in case we want to\nimplement changes to the Transaction format.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1TransferResponses": {
      "properties": {
        "responses": {
          "items": {
            "$ref": "#/definitions/vegaTransferResponse"
          },
          "title": "One or more entries containing internal transfer information",
          "type": "array"
        }
      },
      "title": "A transfer responses event contains a collection of transfer information",
      "type": "object"
    },
    "v1TxErrorEvent": {
      "properties": {
        "delegate_submission": {
          "$ref": "#/definitions/v1DelegateSubmission"
        },
        "err_msg": {
          "title": "An error message describing what went wrong",
          "type": "string"
        },
        "liquidity_provision_submission": {
          "$ref": "#/definitions/v1LiquidityProvisionSubmission"
        },
        "order_amendment": {
          "$ref": "#/definitions/v1OrderAmendment"
        },
        "order_cancellation": {
          "$ref": "#/definitions/v1OrderCancellation"
        },
        "order_submission": {
          "$ref": "#/definitions/v1OrderSubmission"
        },
        "party_id": {
          "title": "Unique party identifier for the related party",
          "type": "string"
        },
        "proposal": {
          "$ref": "#/definitions/v1ProposalSubmission"
        },
        "restore_snapshot": {
          "$ref": "#/definitions/v1RestoreSnapshot"
        },
        "undelegate_submission": {
          "$ref": "#/definitions/v1UndelegateSubmission"
        },
        "vote_submission": {
          "$ref": "#/definitions/v1VoteSubmission"
        },
        "withdraw_submission": {
          "$ref": "#/definitions/v1WithdrawSubmission"
        }
      },
      "type": "object"
    },
    "v1UndelegateSubmission": {
      "properties": {
        "amount": {
          "title": "optional, if not specified = ALL",
          "type": "string"
        },
        "method": {
          "$ref": "#/definitions/UndelegateSubmissionMethod"
        },
        "node_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ValidatorScoreEvent": {
      "properties": {
        "epoch_seq": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "normalised_score": {
          "type": "string"
        },
        "validator_score": {
          "type": "string"
        }
      },
      "title": "ValidatorScoreEvent is the score a validator gets for a given epoch",
      "type": "object"
    },
    "v1ValidatorUpdate": {
      "properties": {
        "country": {
          "title": "Country code (ISO 3166-1 alpha-2) for the location of the node",
          "type": "string"
        },
        "ethereum_address": {
          "title": "Ethereum public key of validator node",
          "type": "string"
        },
        "info_url": {
          "title": "URL with more info on the node",
          "type": "string"
        },
        "tm_pub_key": {
          "title": "Public key of Tendermint",
          "type": "string"
        },
        "vega_pub_key": {
          "title": "Vega public key of validator node",
          "type": "string"
        }
      },
      "title": "A validator update event contains information about validator node",
      "type": "object"
    },
    "v1VoteSubmission": {
      "description": "A command to submit a new vote for a governance\nproposal.",
      "properties": {
        "proposal_id": {
          "description": "The ID of the proposal to vote for.",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/VoteValue",
          "title": "The actual value of the vote"
        }
      },
      "type": "object"
    },
    "v1WithdrawSubmission": {
      "properties": {
        "amount": {
          "title": "The amount to be withdrawn",
          "type": "string"
        },
        "asset": {
          "title": "The asset we want to withdraw",
          "type": "string"
        },
        "ext": {
          "$ref": "#/definitions/vegaWithdrawExt",
          "title": "Foreign chain specifics"
        }
      },
      "title": "Represents the submission request to withdraw funds for a party on Vega",
      "type": "object"
    },
    "vegaAccount": {
      "properties": {
        "asset": {
          "title": "Asset identifier for the account",
          "type": "string"
        },
        "balance": {
          "title": "Balance of the asset, the balance is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places\nand importantly balances cannot be negative",
          "type": "string"
        },
        "id": {
          "title": "Unique account identifier (used internally by Vega)",
          "type": "string"
        },
        "market_id": {
          "title": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
          "type": "string"
        },
        "owner": {
          "title": "The party that the account belongs to, special values include `network`, which represents the Vega network and is\nmost commonly seen during liquidation of distressed trading positions",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/vegaAccountType",
          "title": "The account type related to this account"
        }
      },
      "title": "Represents an account for an asset on Vega for a particular owner or party",
      "type": "object"
    },
    "vegaAccountType": {
      "default": "ACCOUNT_TYPE_UNSPECIFIED",
      "description": "- ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain margin funds for a party and each party will\nhave multiple margin accounts, one for each market they have traded in\n\nMargin account funds will alter as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contains general funds for a party. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_LOCK_WITHDRAW: This account is created to lock funds to be withdrawn by parties\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset",
      "enum": [
        "ACCOUNT_TYPE_UNSPECIFIED",
        "ACCOUNT_TYPE_INSURANCE",
        "ACCOUNT_TYPE_SETTLEMENT",
        "ACCOUNT_TYPE_MARGIN",
        "ACCOUNT_TYPE_GENERAL",
        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
        "ACCOUNT_TYPE_FEES_LIQUIDITY",
        "ACCOUNT_TYPE_FEES_MAKER",
        "ACCOUNT_TYPE_LOCK_WITHDRAW",
        "ACCOUNT_TYPE_BOND",
        "ACCOUNT_TYPE_EXTERNAL",
        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
        "ACCOUNT_TYPE_GLOBAL_REWARD"
      ],
      "title": "Various collateral/account types as used by Vega",
      "type": "string"
    },
    "vegaAsset": {
      "properties": {
        "details": {
          "$ref": "#/definitions/vegaAssetDetails",
          "title": "The definition of the external source for this asset"
        },
        "id": {
          "title": "Internal identifier of the asset",
          "type": "string"
        }
      },
      "title": "The Vega representation of an external asset",
      "type": "object"
    },
    "vegaAssetDetails": {
      "properties": {
        "builtin_asset": {
          "$ref": "#/definitions/vegaBuiltinAsset",
          "title": "A built-in asset"
        },
        "decimals": {
          "format": "uint64",
          "title": "Number of decimal / precision handled by this asset",
          "type": "string"
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20",
          "title": "An Ethereum ERC20 asset"
        },
        "min_lp_stake": {
          "title": "Min stake required for this asset from liquidity providers",
          "type": "string"
        },
        "name": {
          "title": "Name of the asset (e.g: Great British Pound)",
          "type": "string"
        },
        "symbol": {
          "title": "Symbol of the asset (e.g: GBP)",
          "type": "string"
        },
        "total_supply": {
          "title": "Total circulating supply for the asset",
          "type": "string"
        }
      },
      "title": "The Vega representation of an external asset",
      "type": "object"
    },
    "vegaAuctionDuration": {
      "properties": {
        "duration": {
          "format": "int64",
          "title": "Duration of the auction in seconds",
          "type": "string"
        },
        "volume": {
          "format": "uint64",
          "title": "Target uncrossing trading volume",
          "type": "string"
        }
      },
      "title": "An auction duration is used to configure 3 auction periods:\n1. `duration > 0`, `volume == 0`:\n  The auction will last for at least N seconds\n2. `duration == 0`, `volume > 0`:\n  The auction will end once we can close with given traded volume\n3. `duration > 0`, `volume > 0`:\n  The auction will take at least N seconds, but can end sooner if we can trade a certain volume",
      "type": "object"
    },
    "vegaAuctionTrigger": {
      "default": "AUCTION_TRIGGER_UNSPECIFIED",
      "description": "- AUCTION_TRIGGER_UNSPECIFIED: Default value for AuctionTrigger, no auction triggered\n - AUCTION_TRIGGER_BATCH: Batch auction\n - AUCTION_TRIGGER_OPENING: Opening auction\n - AUCTION_TRIGGER_PRICE: Price monitoring trigger\n - AUCTION_TRIGGER_LIQUIDITY: Liquidity monitoring trigger",
      "enum": [
        "AUCTION_TRIGGER_UNSPECIFIED",
        "AUCTION_TRIGGER_BATCH",
        "AUCTION_TRIGGER_OPENING",
        "AUCTION_TRIGGER_PRICE",
        "AUCTION_TRIGGER_LIQUIDITY"
      ],
      "title": "Auction triggers indicate what condition triggered an auction (if market is in auction mode)",
      "type": "string"
    },
    "vegaBuiltinAsset": {
      "properties": {
        "max_faucet_amount_mint": {
          "title": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
          "type": "string"
        }
      },
      "title": "A Vega internal asset",
      "type": "object"
    },
    "vegaChainStatus": {
      "default": "CHAIN_STATUS_UNSPECIFIED",
      "description": "- CHAIN_STATUS_UNSPECIFIED: Default value, always invalid\n - CHAIN_STATUS_DISCONNECTED: Blockchain is disconnected\n - CHAIN_STATUS_REPLAYING: Blockchain is replaying historic transactions\n - CHAIN_STATUS_CONNECTED: Blockchain is connected and receiving transactions",
      "enum": [
        "CHAIN_STATUS_UNSPECIFIED",
        "CHAIN_STATUS_DISCONNECTED",
        "CHAIN_STATUS_REPLAYING",
        "CHAIN_STATUS_CONNECTED"
      ],
      "title": "The Vega blockchain status as reported by the node the caller is connected to",
      "type": "string"
    },
    "vegaContinuousTrading": {
      "properties": {
        "tick_size": {
          "title": "Tick size",
          "type": "string"
        }
      },
      "title": "Continuous trading",
      "type": "object"
    },
    "vegaDelegation": {
      "properties": {
        "amount": {
          "title": "Amount delegated",
          "type": "string"
        },
        "epoch_seq": {
          "title": "Epoch of delegation",
          "type": "string"
        },
        "node_id": {
          "title": "Node ID",
          "type": "string"
        },
        "party": {
          "title": "Party which is delegating",
          "type": "string"
        }
      },
      "type": "object"
    },
    "vegaDeposit": {
      "properties": {
        "amount": {
          "title": "The amount to be deposited",
          "type": "string"
        },
        "asset": {
          "title": "The Vega asset targeted by this deposit",
          "type": "string"
        },
        "created_timestamp": {
          "format": "int64",
          "title": "Timestamp for when the deposit was created on the Vega network",
          "type": "string"
        },
        "credited_timestamp": {
          "format": "int64",
          "title": "Timestamp for when the Vega account was updated with the deposit",
          "type": "string"
        },
        "id": {
          "title": "Unique identifier for the deposit",
          "type": "string"
        },
        "party_id": {
          "title": "Party identifier of the user initiating the deposit",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/vegaDepositStatus",
          "title": "Status of the deposit"
        },
        "tx_hash": {
          "title": "The hash of the transaction from the foreign chain",
          "type": "string"
        }
      },
      "title": "A deposit on to the Vega network",
      "type": "object"
    },
    "vegaDepositStatus": {
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: Default value, always invalid\n - STATUS_OPEN: The deposit is being processed by the network\n - STATUS_CANCELLED: The deposit has been cancelled by the network\n - STATUS_FINALIZED: The deposit has been finalised and accounts have been updated",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_OPEN",
        "STATUS_CANCELLED",
        "STATUS_FINALIZED"
      ],
      "title": "The status of the deposit",
      "type": "string"
    },
    "vegaDiscreteTrading": {
      "properties": {
        "duration_ns": {
          "format": "int64",
          "title": "Duration in nanoseconds, maximum 1 month (2592000000000000 ns)",
          "type": "string"
        },
        "tick_size": {
          "title": "Tick size",
          "type": "string"
        }
      },
      "title": "Discrete trading",
      "type": "object"
    },
    "vegaERC20": {
      "properties": {
        "contract_address": {
          "title": "The address of the contract for the token, on the ethereum network",
          "type": "string"
        }
      },
      "title": "An ERC20 token based asset, living on the ethereum network",
      "type": "object"
    },
    "vegaErc20WithdrawExt": {
      "properties": {
        "receiver_address": {
          "title": "The address into which the bridge will release the funds",
          "type": "string"
        }
      },
      "title": "An extension of data required for the withdraw submissions",
      "type": "object"
    },
    "vegaFee": {
      "properties": {
        "infrastructure_fee": {
          "title": "Fee amount paid for maintaining the Vega infrastructure",
          "type": "string"
        },
        "liquidity_fee": {
          "title": "Fee amount paid to market makers",
          "type": "string"
        },
        "maker_fee": {
          "title": "Fee amount paid to the non-aggressive party of the trade",
          "type": "string"
        }
      },
      "title": "Represents any fees paid by a party, resulting from a trade",
      "type": "object"
    },
    "vegaFeeFactors": {
      "properties": {
        "infrastructure_fee": {
          "title": "Infrastructure fee",
          "type": "string"
        },
        "liquidity_fee": {
          "title": "Liquidity fee",
          "type": "string"
        },
        "maker_fee": {
          "title": "Maker fee",
          "type": "string"
        }
      },
      "title": "Fee factors definition",
      "type": "object"
    },
    "vegaFees": {
      "properties": {
        "factors": {
          "$ref": "#/definitions/vegaFeeFactors",
          "title": "Fee factors"
        }
      },
      "title": "Fees definition",
      "type": "object"
    },
    "vegaFuture": {
      "properties": {
        "maturity": {
          "title": "The maturity for the future",
          "type": "string"
        },
        "oracle_spec_binding": {
          "$ref": "#/definitions/vegaOracleSpecToFutureBinding",
          "title": "The binding between the oracle spec and the oracle data"
        },
        "oracle_spec_for_settlement_price": {
          "$ref": "#/definitions/v1OracleSpec",
          "title": "The oracle spec describing the settlement price oracle filter"
        },
        "oracle_spec_for_trading_termination": {
          "$ref": "#/definitions/v1OracleSpec",
          "title": "the oracle spec describing the trading termination oracle filter"
        },
        "quote_name": {
          "title": "Quote name of the instrument",
          "type": "string"
        },
        "settlement_asset": {
          "title": "The asset for the future",
          "type": "string"
        }
      },
      "title": "Future product definition",
      "type": "object"
    },
    "vegaFutureProduct": {
      "properties": {
        "maturity": {
          "title": "Future product maturity (ISO8601/RFC3339 timestamp)",
          "type": "string"
        },
        "oracle_spec_binding": {
          "$ref": "#/definitions/vegaOracleSpecToFutureBinding",
          "title": "The binding between the oracle spec and the settlement price"
        },
        "oracle_spec_for_settlement_price": {
          "$ref": "#/definitions/v1OracleSpecConfiguration",
          "title": "The oracle spec describing the oracle data of settlement price"
        },
        "oracle_spec_for_trading_termination": {
          "$ref": "#/definitions/v1OracleSpecConfiguration",
          "title": "The oracle spec describing the oracle data of trading termination"
        },
        "quote_name": {
          "title": "Product quote name",
          "type": "string"
        },
        "settlement_asset": {
          "title": "Product settlement asset identifier",
          "type": "string"
        }
      },
      "title": "Future product configuration",
      "type": "object"
    },
    "vegaInstrument": {
      "properties": {
        "code": {
          "title": "Code for the instrument",
          "type": "string"
        },
        "future": {
          "$ref": "#/definitions/vegaFuture",
          "title": "Future"
        },
        "id": {
          "title": "Instrument identifier",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/vegaInstrumentMetadata",
          "title": "A collection of instrument meta-data"
        },
        "name": {
          "title": "Name of the instrument",
          "type": "string"
        }
      },
      "title": "Instrument definition",
      "type": "object"
    },
    "vegaInstrumentConfiguration": {
      "properties": {
        "code": {
          "title": "Instrument code",
          "type": "string"
        },
        "future": {
          "$ref": "#/definitions/vegaFutureProduct",
          "title": "Future"
        },
        "name": {
          "title": "Instrument name",
          "type": "string"
        }
      },
      "title": "Instrument configuration",
      "type": "object"
    },
    "vegaInstrumentMetadata": {
      "properties": {
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "A list of 0 or more tags",
          "type": "array"
        }
      },
      "title": "Instrument metadata definition",
      "type": "object"
    },
    "vegaLedgerEntry": {
      "properties": {
        "amount": {
          "title": "An amount to transfer",
          "type": "string"
        },
        "from_account": {
          "title": "One or more accounts to transfer from",
          "type": "string"
        },
        "reference": {
          "title": "A reference for auditing purposes",
          "type": "string"
        },
        "timestamp": {
          "format": "int64",
          "title": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
          "type": "string"
        },
        "to_account": {
          "title": "One or more accounts to transfer to",
          "type": "string"
        },
        "type": {
          "title": "Type of ledger entry",
          "type": "string"
        }
      },
      "title": "Represents a ledger entry on Vega",
      "type": "object"
    },
    "vegaLiquidityMonitoringParameters": {
      "properties": {
        "auction_extension": {
          "format": "int64",
          "title": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
          "type": "string"
        },
        "target_stake_parameters": {
          "$ref": "#/definitions/vegaTargetStakeParameters",
          "title": "Specifies parameters related to target stake calculation"
        },
        "triggering_ratio": {
          "format": "double",
          "title": "Specifies the triggering ratio for entering liquidity auction",
          "type": "number"
        }
      },
      "title": "LiquidityMonitoringParameters contains settings used for liquidity monitoring",
      "type": "object"
    },
    "vegaLiquidityOrder": {
      "properties": {
        "offset": {
          "format": "int64",
          "title": "The offset/amount of units away for the order",
          "type": "string"
        },
        "proportion": {
          "format": "int64",
          "title": "The relative proportion of the commitment to be allocated at a price level",
          "type": "integer"
        },
        "reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "The pegged reference point for the order"
        }
      },
      "title": "Represents a liquidity order",
      "type": "object"
    },
    "vegaLiquidityOrderReference": {
      "properties": {
        "liquidity_order": {
          "$ref": "#/definitions/vegaLiquidityOrder",
          "title": "The liquidity order from the original submission"
        },
        "order_id": {
          "title": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order",
          "type": "string"
        }
      },
      "title": "A pair of a liquidity order and the id of the generated order by the core",
      "type": "object"
    },
    "vegaLiquidityProviderFeeShare": {
      "properties": {
        "average_entry_valuation": {
          "title": "The average entry valuation of the liquidity provider for the market",
          "type": "string"
        },
        "equity_like_share": {
          "title": "The share own by this liquidity provider (float)",
          "type": "string"
        },
        "party": {
          "title": "The liquidity provider party id",
          "type": "string"
        }
      },
      "title": "The equity like share of liquidity fee for each liquidity provider",
      "type": "object"
    },
    "vegaLiquidityProvision": {
      "properties": {
        "buys": {
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrderReference"
          },
          "title": "A set of liquidity buy orders to meet the liquidity provision obligation",
          "type": "array"
        },
        "commitment_amount": {
          "title": "Specified as a unitless number that represents the amount of settlement asset of the market",
          "type": "string"
        },
        "created_at": {
          "format": "int64",
          "title": "Timestamp for when the order was created at, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
          "type": "string"
        },
        "fee": {
          "title": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
          "type": "string"
        },
        "id": {
          "title": "Unique identifier",
          "type": "string"
        },
        "market_id": {
          "title": "Market identifier for the order, required field",
          "type": "string"
        },
        "party_id": {
          "title": "Unique party identifier for the creator of the provision",
          "type": "string"
        },
        "reference": {
          "title": "A reference shared between this liquidity provision and all it's orders",
          "type": "string"
        },
        "sells": {
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrderReference"
          },
          "title": "A set of liquidity sell orders to meet the liquidity provision obligation",
          "type": "array"
        },
        "status": {
          "$ref": "#/definitions/vegaLiquidityProvisionStatus",
          "title": "Status of this liquidity provision order"
        },
        "updated_at": {
          "format": "int64",
          "title": "Timestamp for when the order was updated at, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
          "type": "string"
        },
        "version": {
          "title": "Version of this liquidity provision order",
          "type": "string"
        }
      },
      "title": "An Liquidity provider commitment",
      "type": "object"
    },
    "vegaLiquidityProvisionStatus": {
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: The default value\n - STATUS_ACTIVE: The liquidity provision is active\n - STATUS_STOPPED: The liquidity provision was stopped by the network\n - STATUS_CANCELLED: The liquidity provision was cancelled by the liquidity provider\n - STATUS_REJECTED: The liquidity provision was invalid and got rejected\n - STATUS_UNDEPLOYED: The liquidity provision is valid and accepted by network, but orders aren't deployed\n - STATUS_PENDING: The liquidity provision is valid and accepted by network\nbut have never been deployed. I when it's possible to deploy them for the first time\nmargin check fails, then they will be cancelled without any penalties.",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_ACTIVE",
        "STATUS_STOPPED",
        "STATUS_CANCELLED",
        "STATUS_REJECTED",
        "STATUS_UNDEPLOYED",
        "STATUS_PENDING"
      ],
      "title": "Status of a liquidity provision order",
      "type": "string"
    },
    "vegaLogNormalModelParams": {
      "properties": {
        "mu": {
          "format": "double",
          "title": "Mu param",
          "type": "number"
        },
        "r": {
          "format": "double",
          "title": "R param",
          "type": "number"
        },
        "sigma": {
          "format": "double",
          "title": "Sigma param",
          "type": "number"
        }
      },
      "title": "Risk model parameters for log normal",
      "type": "object"
    },
    "vegaLogNormalRiskModel": {
      "properties": {
        "params": {
          "$ref": "#/definitions/vegaLogNormalModelParams",
          "title": "Risk model parameters for log normal"
        },
        "risk_aversion_parameter": {
          "format": "double",
          "title": "Risk Aversion Parameter",
          "type": "number"
        },
        "tau": {
          "format": "double",
          "title": "Tau",
          "type": "number"
        }
      },
      "title": "Risk model for log normal",
      "type": "object"
    },
    "vegaMarginCalculator": {
      "properties": {
        "scaling_factors": {
          "$ref": "#/definitions/vegaScalingFactors",
          "title": "Scaling factors for margin calculation"
        }
      },
      "title": "Margin Calculator definition",
      "type": "object"
    },
    "vegaMarginLevels": {
      "properties": {
        "asset": {
          "title": "Asset identifier",
          "type": "string"
        },
        "collateral_release_level": {
          "title": "Collateral release level value",
          "type": "string"
        },
        "initial_margin": {
          "title": "Initial margin value",
          "type": "string"
        },
        "maintenance_margin": {
          "title": "Maintenance margin value",
          "type": "string"
        },
        "market_id": {
          "title": "Market identifier",
          "type": "string"
        },
        "party_id": {
          "title": "Party identifier",
          "type": "string"
        },
        "search_level": {
          "title": "Search level value",
          "type": "string"
        },
        "timestamp": {
          "format": "int64",
          "title": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
          "type": "string"
        }
      },
      "title": "Represents the margin levels for a party on a market at a given time",
      "type": "object"
    },
    "vegaMarket": {
      "properties": {
        "continuous": {
          "$ref": "#/definitions/vegaContinuousTrading",
          "title": "Continuous"
        },
        "decimal_places": {
          "format": "uint64",
          "title": "Number of decimal places that a price must be shifted by in order to get a\ncorrect price denominated in the currency of the market, for example:\n`realPrice = price / 10^decimalPlaces`",
          "type": "string"
        },
        "discrete": {
          "$ref": "#/definitions/vegaDiscreteTrading",
          "title": "Discrete"
        },
        "fees": {
          "$ref": "#/definitions/vegaFees",
          "title": "Fees configuration"
        },
        "id": {
          "title": "Unique identifier",
          "type": "string"
        },
        "liquidity_monitoring_parameters": {
          "$ref": "#/definitions/vegaLiquidityMonitoringParameters",
          "title": "LiquidityMonitoringParameters for the market"
        },
        "market_timestamps": {
          "$ref": "#/definitions/vegaMarketTimestamps",
          "title": "Timestamps for when the market stay changes"
        },
        "opening_auction": {
          "$ref": "#/definitions/vegaAuctionDuration",
          "title": "Auction duration specifies how long the opening auction will run (minimum\nduration and optionally a minimum traded volume)"
        },
        "price_monitoring_settings": {
          "$ref": "#/definitions/vegaPriceMonitoringSettings",
          "title": "PriceMonitoringSettings for the market"
        },
        "state": {
          "$ref": "#/definitions/vegaMarketState",
          "title": "Current state of the market"
        },
        "tradable_instrument": {
          "$ref": "#/definitions/vegaTradableInstrument",
          "title": "Tradable instrument configuration"
        },
        "trading_mode": {
          "$ref": "#/definitions/MarketTradingMode",
          "title": "Current mode of execution of the market"
        }
      },
      "title": "Market definition",
      "type": "object"
    },
    "vegaMarketData": {
      "properties": {
        "auction_end": {
          "format": "int64",
          "title": "Time in seconds until the end of the auction (0 if currently not in auction period)",
          "type": "string"
        },
        "auction_start": {
          "format": "int64",
          "title": "Time until next auction (used in FBA's) - currently always 0",
          "type": "string"
        },
        "best_bid_price": {
          "title": "Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        },
        "best_bid_volume": {
          "format": "uint64",
          "title": "Aggregated volume being bid at the best bid price",
          "type": "string"
        },
        "best_offer_price": {
          "title": "Lowest price level on an order book for offer orders",
          "type": "string"
        },
        "best_offer_volume": {
          "format": "uint64",
          "title": "Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly\n // formatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        },
        "best_static_bid_price": {
          "title": "Highest price on the order book for buy orders not including pegged orders",
          "type": "string"
        },
        "best_static_bid_volume": {
          "format": "uint64",
          "title": "Total volume at the best static bid price excluding pegged orders",
          "type": "string"
        },
        "best_static_offer_price": {
          "title": "Lowest price on the order book for sell orders not including pegged orders",
          "type": "string"
        },
        "best_static_offer_volume": {
          "format": "uint64",
          "title": "Total volume at the best static offer price excluding pegged orders",
          "type": "string"
        },
        "extension_trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "When a market auction is extended, this field indicates what caused the extension"
        },
        "indicative_price": {
          "title": "Indicative price (zero if not in auction)",
          "type": "string"
        },
        "indicative_volume": {
          "format": "uint64",
          "title": "Indicative volume (zero if not in auction)",
          "type": "string"
        },
        "liquidity_provider_fee_share": {
          "items": {
            "$ref": "#/definitions/vegaLiquidityProviderFeeShare"
          },
          "title": "the equity like share of liquidity fee for each liquidity provider",
          "type": "array"
        },
        "mark_price": {
          "title": "Mark price, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        },
        "market": {
          "title": "Market identifier for the data",
          "type": "string"
        },
        "market_trading_mode": {
          "$ref": "#/definitions/MarketTradingMode",
          "title": "The current trading mode for the market"
        },
        "market_value_proxy": {
          "title": "the market value proxy",
          "type": "string"
        },
        "mid_price": {
          "title": "Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        },
        "open_interest": {
          "format": "uint64",
          "title": "The sum of the size of all positions greater than 0 on the market",
          "type": "string"
        },
        "price_monitoring_bounds": {
          "items": {
            "$ref": "#/definitions/vegaPriceMonitoringBounds"
          },
          "title": "One or more price monitoring bounds for the current timestamp",
          "type": "array"
        },
        "static_mid_price": {
          "title": "Arithmetic average of the best static bid price and best static offer price",
          "type": "string"
        },
        "supplied_stake": {
          "title": "Available stake for the given market",
          "type": "string"
        },
        "target_stake": {
          "title": "Targeted stake for the given market",
          "type": "string"
        },
        "timestamp": {
          "format": "int64",
          "title": "Timestamp at which this mark price was relevant, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
          "type": "string"
        },
        "trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "When a market is in an auction trading mode, this field indicates what triggered the auction"
        }
      },
      "title": "Represents data generated by a market when open",
      "type": "object"
    },
    "vegaMarketState": {
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: Default value, invalid\n - STATE_PROPOSED: The Governance proposal valid and accepted\n - STATE_REJECTED: Outcome of governance votes is to reject the market\n - STATE_PENDING: Governance vote passes/wins\n - STATE_CANCELLED: Market triggers cancellation condition or governance\nvotes to close before market becomes Active\n - STATE_ACTIVE: Enactment date reached and usual auction exit checks pass\n - STATE_SUSPENDED: Price monitoring or liquidity monitoring trigger\n - STATE_CLOSED: Governance vote (to close)\n - STATE_TRADING_TERMINATED: Defined by the product (i.e. from a product parameter,\nspecified in market definition, giving close date/time)\n - STATE_SETTLED: Settlement triggered and completed as defined by product",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_PROPOSED",
        "STATE_REJECTED",
        "STATE_PENDING",
        "STATE_CANCELLED",
        "STATE_ACTIVE",
        "STATE_SUSPENDED",
        "STATE_CLOSED",
        "STATE_TRADING_TERMINATED",
        "STATE_SETTLED"
      ],
      "title": "The current state of the Market",
      "type": "string"
    },
    "vegaMarketTimestamps": {
      "properties": {
        "close": {
          "format": "int64",
          "title": "Time when the market is closed",
          "type": "string"
        },
        "open": {
          "format": "int64",
          "title": "Time when the market has left the opening auction and is ready to accept trades",
          "type": "string"
        },
        "pending": {
          "format": "int64",
          "title": "Time when the market has been voted in and is created into an opening auction",
          "type": "string"
        },
        "proposed": {
          "format": "int64",
          "title": "Time when the market is first proposed",
          "type": "string"
        }
      },
      "title": "Time stamps for important times about creating, enacting etc the market",
      "type": "object"
    },
    "vegaNetworkParameter": {
      "properties": {
        "key": {
          "title": "The unique key",
          "type": "string"
        },
        "value": {
          "title": "The value for the network parameter",
          "type": "string"
        }
      },
      "title": "Represents a network parameter on Vega",
      "type": "object"
    },
    "vegaNewAsset": {
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaAssetDetails",
          "title": "The configuration of the new asset"
        }
      },
      "title": "New asset on Vega",
      "type": "object"
    },
    "vegaNewMarket": {
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNewMarketConfiguration",
          "title": "The configuration of the new market"
        },
        "liquidity_commitment": {
          "$ref": "#/definitions/vegaNewMarketCommitment",
          "title": "The commitment from the party creating the NewMarket proposal"
        }
      },
      "title": "New market on Vega",
      "type": "object"
    },
    "vegaNewMarketCommitment": {
      "properties": {
        "buys": {
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity buy orders to meet the liquidity provision obligation",
          "type": "array"
        },
        "commitment_amount": {
          "title": "Specified as a unitless number that represents the amount of settlement asset of the market",
          "type": "string"
        },
        "fee": {
          "title": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
          "type": "string"
        },
        "reference": {
          "title": "A reference to be associated to all orders created from this commitment",
          "type": "string"
        },
        "sells": {
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity sell orders to meet the liquidity provision obligation",
          "type": "array"
        }
      },
      "title": "A commitment of liquidity to be made by the party which proposes a market",
      "type": "object"
    },
    "vegaNewMarketConfiguration": {
      "properties": {
        "continuous": {
          "$ref": "#/definitions/vegaContinuousTrading",
          "title": "Continuous trading"
        },
        "decimal_places": {
          "format": "uint64",
          "title": "Decimal places used for the new market",
          "type": "string"
        },
        "discrete": {
          "$ref": "#/definitions/vegaDiscreteTrading",
          "title": "Discrete trading"
        },
        "instrument": {
          "$ref": "#/definitions/vegaInstrumentConfiguration",
          "title": "New market instrument configuration"
        },
        "liquidity_monitoring_parameters": {
          "$ref": "#/definitions/vegaLiquidityMonitoringParameters",
          "title": "Liquidity monitoring parameters"
        },
        "log_normal": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "title": "Optional new market meta data, tags",
          "type": "array"
        },
        "price_monitoring_parameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "Price monitoring parameters"
        },
        "simple": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected"
        }
      },
      "title": "Configuration for a new market on Vega",
      "type": "object"
    },
    "vegaOracleSpecToFutureBinding": {
      "properties": {
        "settlement_price_property": {
          "description": "settlement_price_property holds the name of the property in the oracle data\nthat should be used as settlement price.\nIf it is set to \"prices.BTC.value\", then the Future will use the value of\nthis property as settlement price.",
          "type": "string"
        },
        "trading_termination_property": {
          "title": "the name of the property in the oracle data that signals termination of trading",
          "type": "string"
        }
      },
      "title": "OracleSpecToFutureBinding tells on which property oracle data should be\nused as settlement price and which to use the trading terminated trigger",
      "type": "object"
    },
    "vegaOrder": {
      "properties": {
        "batch_id": {
          "format": "uint64",
          "title": "Batch identifier for the order, used internally for orders submitted during auctions\nto keep track of the auction batch this order falls under (required for fees calculation)",
          "type": "string"
        },
        "created_at": {
          "format": "int64",
          "title": "Timestamp for when the order was created at, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
          "type": "string"
        },
        "expires_at": {
          "format": "int64",
          "title": "Timestamp for when the order will expire, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
          "type": "string"
        },
        "id": {
          "title": "Unique identifier for the order (set by the system after consensus)",
          "type": "string"
        },
        "liquidity_provision_id": {
          "description": "Is this order created as part of a liquidity provision, will be empty if not.",
          "type": "string"
        },
        "market_id": {
          "title": "Market identifier for the order",
          "type": "string"
        },
        "party_id": {
          "title": "Party identifier for the order",
          "type": "string"
        },
        "pegged_order": {
          "$ref": "#/definitions/vegaPeggedOrder",
          "description": "Pegged order details, used only if the order represents a pegged order."
        },
        "price": {
          "title": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        },
        "reason": {
          "$ref": "#/definitions/vegaOrderError",
          "title": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified\n- The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors"
        },
        "reference": {
          "title": "Reference given for the order, this is typically used to retrieve an order submitted through consensus\n- Currently set internally by the node to return a unique reference identifier for the order submission",
          "type": "string"
        },
        "remaining": {
          "format": "uint64",
          "title": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/vegaSide",
          "title": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)"
        },
        "size": {
          "format": "uint64",
          "title": "Size for the order, for example, in a futures market the size equals the number of contracts",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/vegaOrderStatus",
          "title": "The current status for the order. See [`Order.Status`](#vega.Order.Status)\n- For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field"
        },
        "time_in_force": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Time in force indicates how long an order will remain active before it is executed or expires.\n- See [`Order.TimeInForce`](#vega.Order.TimeInForce)"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType",
          "title": "Type for the order - See [`Order.Type`](#vega.Order.Type)"
        },
        "updated_at": {
          "format": "int64",
          "title": "Timestamp for when the Order was last updated, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
          "type": "string"
        },
        "version": {
          "format": "uint64",
          "title": "The version for the order, initial value is version 1 and is incremented after each successful amend",
          "type": "string"
        }
      },
      "title": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties",
      "type": "object"
    },
    "vegaOrderError": {
      "default": "ORDER_ERROR_UNSPECIFIED",
      "description": "- ORDER_ERROR_UNSPECIFIED: Default value, no error reported\n - ORDER_ERROR_INVALID_MARKET_ID: Order was submitted for a market that does not exist\n - ORDER_ERROR_INVALID_ORDER_ID: Order was submitted with an invalid identifier\n - ORDER_ERROR_OUT_OF_SEQUENCE: Order was amended with a sequence number that was not previous version + 1\n - ORDER_ERROR_INVALID_REMAINING_SIZE: Order was amended with an invalid remaining size (e.g. remaining greater than total size)\n - ORDER_ERROR_TIME_FAILURE: Node was unable to get Vega (blockchain) time\n - ORDER_ERROR_REMOVAL_FAILURE: Failed to remove an order from the book\n - ORDER_ERROR_INVALID_EXPIRATION_DATETIME: An order with `TimeInForce.TIME_IN_FORCE_GTT` was submitted or amended\nwith an expiration that was badly formatted or otherwise invalid\n - ORDER_ERROR_INVALID_ORDER_REFERENCE: Order was submitted or amended with an invalid reference field\n - ORDER_ERROR_EDIT_NOT_ALLOWED: Order amend was submitted for an order field that cannot not be amended (e.g. order identifier)\n - ORDER_ERROR_AMEND_FAILURE: Amend failure because amend details do not match original order\n - ORDER_ERROR_NOT_FOUND: Order not found in an order book or store\n - ORDER_ERROR_INVALID_PARTY_ID: Order was submitted with an invalid or missing party identifier\n - ORDER_ERROR_MARKET_CLOSED: Order was submitted for a market that has closed\n - ORDER_ERROR_MARGIN_CHECK_FAILED: Order was submitted, but the party did not have enough collateral to cover the order\n - ORDER_ERROR_MISSING_GENERAL_ACCOUNT: Order was submitted, but the party did not have an account for this asset\n - ORDER_ERROR_INTERNAL_ERROR: Unspecified internal error\n - ORDER_ERROR_INVALID_SIZE: Order was submitted with an invalid or missing size (e.g. 0)\n - ORDER_ERROR_INVALID_PERSISTENCE: Order was submitted with an invalid persistence for its type\n - ORDER_ERROR_INVALID_TYPE: Order was submitted with an invalid type field\n - ORDER_ERROR_SELF_TRADING: Order was stopped as it would have traded with another order submitted from the same party\n - ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES: Order was submitted, but the party did not have enough collateral to cover the fees for the order\n - ORDER_ERROR_INCORRECT_MARKET_TYPE: Order was submitted with an incorrect or invalid market type\n - ORDER_ERROR_INVALID_TIME_IN_FORCE: Order was submitted with invalid time in force\n - ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION: A GFN order has got to the market when it is in auction mode\n - ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING: A GFA order has got to the market when it is in continuous trading mode\n - ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT: Attempt to amend order to GTT without ExpiryAt\n - ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT: Attempt to amend ExpiryAt to a value before CreatedAt\n - ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT: Attempt to amend to GTC without an ExpiryAt value\n - ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC: Amending to FOK or IOC is invalid\n - ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN: Amending to GFA or GFN is invalid\n - ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN: Amending from GFA or GFN is invalid\n - ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION: IOC orders are not allowed during auction\n - ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION: FOK orders are not allowed during auction\n - ORDER_ERROR_MUST_BE_LIMIT_ORDER: Pegged orders must be LIMIT orders\n - ORDER_ERROR_MUST_BE_GTT_OR_GTC: Pegged orders can only have TIF GTC or GTT\n - ORDER_ERROR_WITHOUT_REFERENCE_PRICE: Pegged order must have a reference price\n - ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE: Buy pegged order cannot reference best ask price\n - ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO: Pegged order offset must be <= 0\n - ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO: Pegged order offset must be < 0\n - ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO: Pegged order offset must be >= 0\n - ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE: Sell pegged order cannot reference best bid price\n - ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO: Pegged order offset must be > zero\n - ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE: The party has an insufficient balance, or does not have\na general account to submit the order (no deposits made\nfor the required asset)\n - ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER: Cannot amend a non pegged orders details\n - ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER: We are unable to re-price a pegged order because a market price is unavailable\n - ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER: It is not possible to amend the price of an existing pegged order\n - ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS: An FOK, IOC, or GFN order was rejected because it resulted in trades outside the price bounds",
      "enum": [
        "ORDER_ERROR_UNSPECIFIED",
        "ORDER_ERROR_INVALID_MARKET_ID",
        "ORDER_ERROR_INVALID_ORDER_ID",
        "ORDER_ERROR_OUT_OF_SEQUENCE",
        "ORDER_ERROR_INVALID_REMAINING_SIZE",
        "ORDER_ERROR_TIME_FAILURE",
        "ORDER_ERROR_REMOVAL_FAILURE",
        "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
        "ORDER_ERROR_INVALID_ORDER_REFERENCE",
        "ORDER_ERROR_EDIT_NOT_ALLOWED",
        "ORDER_ERROR_AMEND_FAILURE",
        "ORDER_ERROR_NOT_FOUND",
        "ORDER_ERROR_INVALID_PARTY_ID",
        "ORDER_ERROR_MARKET_CLOSED",
        "ORDER_ERROR_MARGIN_CHECK_FAILED",
        "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
        "ORDER_ERROR_INTERNAL_ERROR",
        "ORDER_ERROR_INVALID_SIZE",
        "ORDER_ERROR_INVALID_PERSISTENCE",
        "ORDER_ERROR_INVALID_TYPE",
        "ORDER_ERROR_SELF_TRADING",
        "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
        "ORDER_ERROR_INCORRECT_MARKET_TYPE",
        "ORDER_ERROR_INVALID_TIME_IN_FORCE",
        "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
        "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
        "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
        "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
        "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
        "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
        "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
        "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
        "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
        "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
        "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
        "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
        "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
        "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
        "ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO",
        "ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO",
        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
        "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
        "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
        "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
        "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
        "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
        "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
      ],
      "title": "OrderError codes are returned in the `[Order](#vega.Order).reason` field - If there is an issue\nwith an order during its life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`",
      "type": "string"
    },
    "vegaOrderStatus": {
      "default": "STATUS_UNSPECIFIED",
      "description": "Status values for an order\nSee resulting status in [What order types are available to trade on Vega?](https://docs.testnet.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail.\n\n - STATUS_UNSPECIFIED: Default value, always invalid\n - STATUS_ACTIVE: Used for active unfilled or partially filled orders\n - STATUS_EXPIRED: Used for expired GTT orders\n - STATUS_CANCELLED: Used for orders cancelled by the party that created the order\n - STATUS_STOPPED: Used for unfilled FOK or IOC orders, and for orders that were stopped by the network\n - STATUS_FILLED: Used for closed fully filled orders\n - STATUS_REJECTED: Used for orders when not enough collateral was available to fill the margin requirements\n - STATUS_PARTIALLY_FILLED: Used for closed partially filled IOC orders\n - STATUS_PARKED: Order has been removed from the order book and has been parked, this applies to pegged orders only",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_ACTIVE",
        "STATUS_EXPIRED",
        "STATUS_CANCELLED",
        "STATUS_STOPPED",
        "STATUS_FILLED",
        "STATUS_REJECTED",
        "STATUS_PARTIALLY_FILLED",
        "STATUS_PARKED"
      ],
      "type": "string"
    },
    "vegaOrderType": {
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: Default value, always invalid\n - TYPE_LIMIT: Used for Limit orders\n - TYPE_MARKET: Used for Market orders\n - TYPE_NETWORK: Used for orders where the initiating party is the network (with distressed parties)",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_LIMIT",
        "TYPE_MARKET",
        "TYPE_NETWORK"
      ],
      "title": "Type values for an order",
      "type": "string"
    },
    "vegaParty": {
      "properties": {
        "delegations": {
          "items": {
            "$ref": "#/definitions/vegaDelegation"
          },
          "type": "array"
        },
        "id": {
          "title": "A unique identifier for the party, typically represented by a public key",
          "type": "string"
        }
      },
      "title": "A party represents an entity who wishes to trade on or query a Vega network",
      "type": "object"
    },
    "vegaPeggedOrder": {
      "properties": {
        "offset": {
          "format": "int64",
          "title": "Offset from the price reference",
          "type": "string"
        },
        "reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "Which price point are we linked to"
        }
      },
      "title": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET\nThey can be used for any limit order that is valid during continuous trading",
      "type": "object"
    },
    "vegaPeggedReference": {
      "default": "PEGGED_REFERENCE_UNSPECIFIED",
      "description": "- PEGGED_REFERENCE_UNSPECIFIED: Default value for PeggedReference, no reference given\n - PEGGED_REFERENCE_MID: Mid price reference\n - PEGGED_REFERENCE_BEST_BID: Best bid price reference\n - PEGGED_REFERENCE_BEST_ASK: Best ask price reference",
      "enum": [
        "PEGGED_REFERENCE_UNSPECIFIED",
        "PEGGED_REFERENCE_MID",
        "PEGGED_REFERENCE_BEST_BID",
        "PEGGED_REFERENCE_BEST_ASK"
      ],
      "title": "A pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point",
      "type": "string"
    },
    "vegaPrice": {
      "properties": {
        "value": {
          "title": "Price value, given as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        }
      },
      "type": "object"
    },
    "vegaPriceMonitoringBounds": {
      "properties": {
        "max_valid_price": {
          "title": "Maximum price that isn't currently breaching the specified price monitoring trigger",
          "type": "string"
        },
        "min_valid_price": {
          "title": "Minimum price that isn't currently breaching the specified price monitoring trigger",
          "type": "string"
        },
        "reference_price": {
          "format": "double",
          "title": "Reference price used to calculate the valid price range",
          "type": "number"
        },
        "trigger": {
          "$ref": "#/definitions/vegaPriceMonitoringTrigger",
          "title": "Price monitoring trigger associated with the bounds"
        }
      },
      "title": "Represents a list of valid (at the current timestamp) price ranges per associated trigger",
      "type": "object"
    },
    "vegaPriceMonitoringParameters": {
      "properties": {
        "triggers": {
          "items": {
            "$ref": "#/definitions/vegaPriceMonitoringTrigger"
          },
          "type": "array"
        }
      },
      "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market",
      "type": "object"
    },
    "vegaPriceMonitoringSettings": {
      "properties": {
        "parameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "Specifies price monitoring parameters to be used for price monitoring purposes"
        },
        "update_frequency": {
          "format": "int64",
          "title": "Specifies how often (expressed in seconds) the price monitoring bounds should be updated",
          "type": "string"
        }
      },
      "title": "PriceMonitoringSettings contains the settings for price monitoring",
      "type": "object"
    },
    "vegaPriceMonitoringTrigger": {
      "properties": {
        "auction_extension": {
          "format": "int64",
          "title": "Price monitoring auction extension duration in seconds should the price\nbreach it's theoretical level over the specified horizon at the specified\nprobability level",
          "type": "string"
        },
        "horizon": {
          "format": "int64",
          "title": "Price monitoring projection horizon τ in seconds",
          "type": "string"
        },
        "probability": {
          "format": "double",
          "title": "Price monitoring probability level p",
          "type": "number"
        }
      },
      "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
      "type": "object"
    },
    "vegaProposal": {
      "properties": {
        "error_details": {
          "description": "The detailed error associated to the reason.",
          "type": "string"
        },
        "id": {
          "title": "Unique proposal identifier",
          "type": "string"
        },
        "party_id": {
          "title": "Party identifier of the author (the party submitting the proposal)",
          "type": "string"
        },
        "reason": {
          "$ref": "#/definitions/vegaProposalError",
          "title": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses"
        },
        "reference": {
          "title": "Proposal reference",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/vegaProposalState",
          "title": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition"
        },
        "terms": {
          "$ref": "#/definitions/vegaProposalTerms",
          "title": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted"
        },
        "timestamp": {
          "format": "int64",
          "title": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
          "type": "string"
        }
      },
      "title": "Governance proposal",
      "type": "object"
    },
    "vegaProposalError": {
      "default": "PROPOSAL_ERROR_UNSPECIFIED",
      "description": "- PROPOSAL_ERROR_UNSPECIFIED: Default value\n - PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON: The specified close time is too early base on network parameters\n - PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE: The specified close time is too late based on network parameters\n - PROPOSAL_ERROR_ENACT_TIME_TOO_SOON: The specified enact time is too early based on network parameters\n - PROPOSAL_ERROR_ENACT_TIME_TOO_LATE: The specified enact time is too late based on network parameters\n - PROPOSAL_ERROR_INSUFFICIENT_TOKENS: The proposer for this proposal as insufficient tokens\n - PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY: The instrument quote name and base name were the same\n - PROPOSAL_ERROR_NO_PRODUCT: The proposal has no product\n - PROPOSAL_ERROR_UNSUPPORTED_PRODUCT: The specified product is not supported\n - PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP: Invalid future maturity timestamp (expect RFC3339)\n - PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED: The product maturity is past\n - PROPOSAL_ERROR_NO_TRADING_MODE: The proposal has no trading mode\n - PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE: The proposal has an unsupported trading mode\n - PROPOSAL_ERROR_NODE_VALIDATION_FAILED: The proposal failed node validation\n - PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD: A field is missing in a builtin asset source\n - PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS: The contract address is missing in the ERC20 asset source\n - PROPOSAL_ERROR_INVALID_ASSET: The asset identifier is invalid or does not exist on the Vega network\n - PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS: Proposal terms timestamps are not compatible (Validation < Closing < Enactment)\n - PROPOSAL_ERROR_NO_RISK_PARAMETERS: No risk parameters were specified\n - PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY: Invalid key in update network parameter proposal\n - PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE: Invalid valid in update network parameter proposal\n - PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED: Validation failed for network parameter proposal\n - PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL: Opening auction duration is less than the network minimum opening auction time\n - PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE: Opening auction duration is more than the network minimum opening auction time\n - PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT: Market proposal is missing a liquidity commitment\n - PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET: Market proposal market could not be instantiate in execution\n - PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT: Market proposal market contained invalid product definition\n - PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT: Market proposal is missing commitment amount\n - PROPOSAL_ERROR_INVALID_FEE_AMOUNT: Market proposal have invalid fee\n - PROPOSAL_ERROR_INVALID_SHAPE: Market proposal have invalid shape\n - PROPOSAL_ERROR_INVALID_RISK_PARAMETER: Market proposal invalid risk parameter\n - PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED: Proposal was declined because vote didn't reach the majority thershold required\n - PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED: Proposal declined because the participation threshold was not reached\n - PROPOSAL_ERROR_INVALID_ASSET_DETAILS: Asset proposal invalid asset details",
      "enum": [
        "PROPOSAL_ERROR_UNSPECIFIED",
        "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
        "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
        "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
        "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
        "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
        "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
        "PROPOSAL_ERROR_NO_PRODUCT",
        "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP",
        "PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED",
        "PROPOSAL_ERROR_NO_TRADING_MODE",
        "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
        "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
        "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
        "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
        "PROPOSAL_ERROR_INVALID_ASSET",
        "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
        "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
        "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
        "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
        "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
        "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
        "PROPOSAL_ERROR_INVALID_SHAPE",
        "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
        "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
        "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
        "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
      ],
      "title": "A list of possible errors that can cause a proposal to be in state rejected or failed",
      "type": "string"
    },
    "vegaProposalState": {
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: Default value, always invalid\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execution could not be performed\n - STATE_OPEN: Proposal is open for voting\n - STATE_PASSED: Proposal has gained enough support to be executed\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements)\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level)\n - STATE_ENACTED: Proposal enacted\n - STATE_WAITING_FOR_NODE_VOTE: Waiting for node validation of the proposal",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_FAILED",
        "STATE_OPEN",
        "STATE_PASSED",
        "STATE_REJECTED",
        "STATE_DECLINED",
        "STATE_ENACTED",
        "STATE_WAITING_FOR_NODE_VOTE"
      ],
      "title": "Proposal state transition:\nOpen ->\n  - Passed -> Enacted.\n  - Passed -> Failed.\n  - Declined\nRejected\nProposal can enter Failed state from any other state",
      "type": "string"
    },
    "vegaProposalTerms": {
      "properties": {
        "closing_timestamp": {
          "format": "int64",
          "title": "Timestamp (Unix time in seconds) when voting closes for this proposal,\nconstrained by `minCloseInSeconds` and `maxCloseInSeconds` network parameters",
          "type": "string"
        },
        "enactment_timestamp": {
          "format": "int64",
          "title": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed),\nconstrained by `minEnactInSeconds` and `maxEnactInSeconds` network parameters",
          "type": "string"
        },
        "new_asset": {
          "$ref": "#/definitions/vegaNewAsset",
          "title": "Proposal change for creating new assets on Vega"
        },
        "new_market": {
          "$ref": "#/definitions/vegaNewMarket",
          "title": "Proposal change for creating new market on Vega"
        },
        "update_market": {
          "$ref": "#/definitions/vegaUpdateMarket",
          "title": "Proposal change for modifying an existing market on Vega"
        },
        "update_network_parameter": {
          "$ref": "#/definitions/vegaUpdateNetworkParameter",
          "title": "Proposal change for updating Vega network parameters"
        },
        "validation_timestamp": {
          "format": "int64",
          "title": "Validation timestamp (Unix time in seconds)",
          "type": "string"
        }
      },
      "title": "Terms for a governance proposal on Vega",
      "type": "object"
    },
    "vegaRiskFactor": {
      "properties": {
        "long": {
          "format": "double",
          "title": "Long Risk factor value",
          "type": "number"
        },
        "market": {
          "title": "Market ID that relates to this risk factor",
          "type": "string"
        },
        "short": {
          "format": "double",
          "title": "Short Risk factor value",
          "type": "number"
        }
      },
      "title": "Risk factors are used to calculate the current risk associated with orders trading on a given market",
      "type": "object"
    },
    "vegaScalingFactors": {
      "properties": {
        "collateral_release": {
          "format": "double",
          "title": "Collateral release level",
          "type": "number"
        },
        "initial_margin": {
          "format": "double",
          "title": "Initial margin level",
          "type": "number"
        },
        "search_level": {
          "format": "double",
          "title": "Search level",
          "type": "number"
        }
      },
      "title": "Scaling Factors (for use in margin calculation)",
      "type": "object"
    },
    "vegaSide": {
      "default": "SIDE_UNSPECIFIED",
      "description": "- SIDE_UNSPECIFIED: Default value, always invalid\n - SIDE_BUY: Buy order\n - SIDE_SELL: Sell order",
      "enum": [
        "SIDE_UNSPECIFIED",
        "SIDE_BUY",
        "SIDE_SELL"
      ],
      "title": "A side relates to the direction of an order, to Buy, or Sell",
      "type": "string"
    },
    "vegaSimpleModelParams": {
      "properties": {
        "factor_long": {
          "format": "double",
          "title": "Pre-defined risk factor value for long",
          "type": "number"
        },
        "factor_short": {
          "format": "double",
          "title": "Pre-defined risk factor value for short",
          "type": "number"
        },
        "max_move_up": {
          "format": "double",
          "title": "Pre-defined maximum price move up that the model considers as valid",
          "type": "number"
        },
        "min_move_down": {
          "format": "double",
          "title": "Pre-defined minimum price move down that the model considers as valid",
          "type": "number"
        },
        "probability_of_trading": {
          "format": "double",
          "title": "Pre-defined constant probability of trading",
          "type": "number"
        }
      },
      "title": "Risk model parameters for simple modelling",
      "type": "object"
    },
    "vegaSimpleRiskModel": {
      "properties": {
        "params": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Risk model params for simple modelling"
        }
      },
      "title": "Risk model for simple modelling",
      "type": "object"
    },
    "vegaTargetStakeParameters": {
      "properties": {
        "scaling_factor": {
          "format": "double",
          "title": "Specifies scaling factors used in target stake calculation",
          "type": "number"
        },
        "time_window": {
          "format": "int64",
          "title": "Specifies length of time window expressed in seconds for target stake calculation",
          "type": "string"
        }
      },
      "title": "TargetStakeParameters contains parameters used in target stake calculation",
      "type": "object"
    },
    "vegaTimestamp": {
      "properties": {
        "value": {
          "format": "int64",
          "title": "Timestamp value",
          "type": "string"
        }
      },
      "title": "A timestamp in nanoseconds since epoch\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
      "type": "object"
    },
    "vegaTradableInstrument": {
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrument",
          "title": "Instrument details"
        },
        "log_normal_risk_model": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal"
        },
        "margin_calculator": {
          "$ref": "#/definitions/vegaMarginCalculator",
          "title": "Margin calculator for the instrument"
        },
        "simple_risk_model": {
          "$ref": "#/definitions/vegaSimpleRiskModel",
          "title": "Simple"
        }
      },
      "title": "Tradable Instrument definition",
      "type": "object"
    },
    "vegaTrade": {
      "properties": {
        "aggressor": {
          "$ref": "#/definitions/vegaSide",
          "title": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)"
        },
        "buy_order": {
          "title": "Identifier of the order from the buy side",
          "type": "string"
        },
        "buyer": {
          "title": "Unique party identifier for the buyer",
          "type": "string"
        },
        "buyer_auction_batch": {
          "format": "uint64",
          "title": "Auction batch number that the buy side order was placed in",
          "type": "string"
        },
        "buyer_fee": {
          "$ref": "#/definitions/vegaFee",
          "title": "Fee amount charged to the buyer party for the trade"
        },
        "id": {
          "title": "Unique identifier for the trade (generated by Vega)",
          "type": "string"
        },
        "market_id": {
          "title": "Market identifier (the market that the trade occurred on)",
          "type": "string"
        },
        "price": {
          "title": "Price for the trade, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places",
          "type": "string"
        },
        "sell_order": {
          "title": "Identifier of the order from the sell side",
          "type": "string"
        },
        "seller": {
          "title": "Unique party identifier for the seller",
          "type": "string"
        },
        "seller_auction_batch": {
          "format": "uint64",
          "title": "Auction batch number that the sell side order was placed in",
          "type": "string"
        },
        "seller_fee": {
          "$ref": "#/definitions/vegaFee",
          "title": "Fee amount charged to the seller party for the trade"
        },
        "size": {
          "format": "uint64",
          "title": "Size filled for the trade",
          "type": "string"
        },
        "timestamp": {
          "format": "int64",
          "title": "Timestamp for when the trade occurred, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/vegaTradeType",
          "title": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)"
        }
      },
      "title": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega",
      "type": "object"
    },
    "vegaTradeType": {
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: Default value, always invalid\n - TYPE_DEFAULT: Normal trading between two parties\n - TYPE_NETWORK_CLOSE_OUT_GOOD: Trading initiated by the network with another party on the book,\nwhich helps to zero-out the positions of one or more distressed parties\n - TYPE_NETWORK_CLOSE_OUT_BAD: Trading initiated by the network with another party off the book,\nwith a distressed party in order to zero-out the position of the party",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_DEFAULT",
        "TYPE_NETWORK_CLOSE_OUT_GOOD",
        "TYPE_NETWORK_CLOSE_OUT_BAD"
      ],
      "title": "Type values for a trade",
      "type": "string"
    },
    "vegaTransferBalance": {
      "properties": {
        "account": {
          "$ref": "#/definitions/vegaAccount",
          "title": "The account relating to the transfer"
        },
        "balance": {
          "title": "The balance relating to the transfer",
          "type": "string"
        }
      },
      "title": "Represents the balance for an account during a transfer",
      "type": "object"
    },
    "vegaTransferResponse": {
      "properties": {
        "balances": {
          "items": {
            "$ref": "#/definitions/vegaTransferBalance"
          },
          "title": "One or more account balances",
          "type": "array"
        },
        "transfers": {
          "items": {
            "$ref": "#/definitions/vegaLedgerEntry"
          },
          "title": "One or more ledger entries representing the transfers",
          "type": "array"
        }
      },
      "title": "Represents the response from a transfer",
      "type": "object"
    },
    "vegaUpdateMarket": {
      "title": "Update an existing market on Vega",
      "type": "object"
    },
    "vegaUpdateNetworkParameter": {
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNetworkParameter",
          "title": "The network parameter to update"
        }
      },
      "title": "Update network configuration on Vega",
      "type": "object"
    },
    "vegaVote": {
      "properties": {
        "party_id": {
          "title": "Voter's party identifier",
          "type": "string"
        },
        "proposal_id": {
          "title": "Identifier of the proposal being voted on",
          "type": "string"
        },
        "timestamp": {
          "format": "int64",
          "title": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
          "type": "string"
        },
        "total_governance_token_balance": {
          "title": "Total number of governance token for the party that casted the vote",
          "type": "string"
        },
        "total_governance_token_weight": {
          "title": "The weight of this vote based on the total of governance token",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/VoteValue",
          "title": "Actual vote"
        }
      },
      "title": "Governance vote",
      "type": "object"
    },
    "vegaWithdrawExt": {
      "properties": {
        "erc20": {
          "$ref": "#/definitions/vegaErc20WithdrawExt",
          "title": "ERC20 withdrawal details"
        }
      },
      "title": "Withdrawal external details",
      "type": "object"
    },
    "vegaWithdrawal": {
      "properties": {
        "amount": {
          "title": "The amount to be withdrawn",
          "type": "string"
        },
        "asset": {
          "title": "The asset we want to withdraw funds from",
          "type": "string"
        },
        "created_timestamp": {
          "format": "int64",
          "title": "Timestamp for when the network started to process this withdrawal",
          "type": "string"
        },
        "expiry": {
          "format": "int64",
          "title": "The time until when the withdrawal is valid",
          "type": "string"
        },
        "ext": {
          "$ref": "#/definitions/vegaWithdrawExt",
          "title": "Foreign chain specifics"
        },
        "id": {
          "title": "Unique identifier for the withdrawal",
          "type": "string"
        },
        "party_id": {
          "title": "Unique party identifier of the user initiating the withdrawal",
          "type": "string"
        },
        "ref": {
          "title": "The reference which is used by the foreign chain\nto refer to this withdrawal",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/vegaWithdrawalStatus",
          "title": "The status of the withdrawal"
        },
        "tx_hash": {
          "title": "The hash of the foreign chain for this transaction",
          "type": "string"
        },
        "withdrawn_timestamp": {
          "format": "int64",
          "title": "Timestamp for when the withdrawal was finalised by the network",
          "type": "string"
        }
      },
      "title": "A withdrawal from the Vega network",
      "type": "object"
    },
    "vegaWithdrawalStatus": {
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: Default value, always invalid\n - STATUS_OPEN: The withdrawal is open and being processed by the network\n - STATUS_CANCELLED: The withdrawal have been cancelled\n - STATUS_FINALIZED: The withdrawal went through and is fully finalised, the funds are removed from the\nVega network and are unlocked on the foreign chain bridge, for example, on the Ethereum network",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_OPEN",
        "STATUS_CANCELLED",
        "STATUS_FINALIZED"
      ],
      "title": "The status of the withdrawal",
      "type": "string"
    }
  },
  "info": {
    "title": "api/trading.proto",
    "version": "version not set"
  },
  "paths": {
    "/blockchain/height": {
      "get": {
        "operationId": "LastBlockHeight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LastBlockHeightResponse"
            }
          }
        },
        "summary": "Get the height of the last tendermint block",
        "tags": [
          "TradingService"
        ]
      }
    },
    "/statistics": {
      "get": {
        "operationId": "Statistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StatisticsResponse"
            }
          }
        },
        "summary": "Get Statistics on Vega",
        "tags": [
          "TradingService"
        ]
      }
    },
    "/time": {
      "get": {
        "operationId": "GetVegaTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVegaTimeResponse"
            }
          }
        },
        "summary": "Get Time",
        "tags": [
          "TradingService"
        ]
      }
    },
    "/transaction": {
      "post": {
        "operationId": "SubmitTransactionV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SubmitTransactionV2Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SubmitTransactionV2Response"
            }
          }
        },
        "summary": "Submit a signed transaction (v2)",
        "tags": [
          "TradingService"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "servers": [
    {
      "description": "Testnet",
      "url": "https://lb.testnet.vega.xyz"
    }
  ],
  "swagger": "2.0",
  "x-stream-definitions": {
    "v1ObserveEventBusResponse": {
      "properties": {
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        },
        "result": {
          "$ref": "#/definitions/v1ObserveEventBusResponse"
        }
      },
      "title": "Stream result of v1ObserveEventBusResponse",
      "type": "object"
    }
  }
}
