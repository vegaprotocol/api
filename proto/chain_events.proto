syntax = "proto3";

package vega;
option java_package = "io.vegaprotocol.vega";
option go_package = "code.vegaprotocol.io/vega/proto";

// A deposit for a Vega built-in asset
message BuiltinAssetDeposit {
  // A Vega network internal asset identifier
  string vega_asset_id = 1;
  // A Vega party identifier (pub-key)
  string party_id = 2;
  // The amount to be deposited
  uint64 amount = 3;
}

// A withdrawal for a Vega built-in asset
message BuiltinAssetWithdrawal {
  // A Vega network internal asset identifier
  string vega_asset_id = 1;
  // A Vega network party identifier (pub-key)
  string party_id = 2;
  // The amount to be withdrawn
  string amount = 3;
}

// An event related to a Vega built-in asset
message BuiltinAssetEvent {
  oneof action {
    // Built-in asset deposit
    BuiltinAssetDeposit deposit = 1001;
    // Built-in asset withdrawal
    BuiltinAssetWithdrawal withdrawal = 1002;
  }
}

// An asset allow-listing for an ERC20 token
message ERC20AssetList {
  // The Vega network internal identifier of the asset
  string vega_asset_id = 1;
}

// An asset deny-listing for an ERC20 token
message ERC20AssetDelist {
  // The Vega network internal identifier of the asset
  string vega_asset_id = 1;
}

// An asset deposit for an ERC20 token
message ERC20Deposit {
  // The vega network internal identifier of the asset
  string vega_asset_id = 1;
  // The Ethereum wallet that initiated the deposit
  string source_ethereum_address = 2;
  // The Vega party identifier (pub-key) which is the target of the deposit
  string target_party_id = 3;
  // The amount to be deposited
  string amount = 4;
}

// An asset withdrawal for an ERC20 token
message ERC20Withdrawal {
  // The Vega network internal identifier of the asset
  string vega_asset_id = 1;
  // The target Ethereum wallet address
  string target_ethereum_address = 2;
  // The reference nonce used for the transaction
  string reference_nonce = 3;
}

// An event related to an ERC20 token
message ERC20Event {
  // Index of the transaction
  uint64 index = 1;
  // The block in which the transaction was added
  uint64 block = 2;
  // The action
  oneof action {
    // List an ERC20 asset
    ERC20AssetList asset_list = 1001;
    // De-list an ERC20 asset
    ERC20AssetDelist asset_delist = 1002;
    // Deposit ERC20 asset
    ERC20Deposit deposit = 1003;
    // Withdraw ERC20 asset
    ERC20Withdrawal withdrawal = 1004;
  }
}

// A Bitcoin deposit into Vega
message BTCDeposit {
  // The Vega network internal identifier of the asset
  string vega_asset_id = 1;
  // The BTC wallet initiating the deposit
  string source_btc_address = 2;
  // The Vega party identifier (pub-key) which is the target of the deposit
  string target_party_id = 3;
}

// A Bitcoin withdrawal from Vega
message BTCWithdrawal {
  // The vega network internal identifier of the asset
  string vega_asset_id = 1;
  // The party identifier (pub-key) initiating the withdrawal
  string source_party_id = 2;
  // Target Bitcoin wallet address
  string target_btc_address = 3;
  // The nonce reference of the transaction
  string reference_nonce = 4;
}

// An event from the Bitcoin network
message BTCEvent {
  // The index of the transaction
  uint64 index = 1;
  // The block in which the transaction happened
  uint64 block = 2;
  // The action
  oneof action {
    // Deposit BTC asset
    BTCDeposit deposit = 1001;
    // Withdraw BTC asset
    BTCWithdrawal withdrawal = 1002;
  }
}

// Used as a wrapper for an Ethereum address (wallet/contract)
message EthereumAddress {
  // An Ethereum address
  string address = 1;
}

// Used as a wrapper for a Bitcoin address (wallet)
message BitcoinAddress {
  // A Bitcoin address
  string address = 1;
}

// Used as a wrapper type on any possible network address supported by Vega
message Identifier {
  // The identifier
  oneof identifier {
    // Ethereum network
    EthereumAddress ethereum_address = 1;
    // Bitcoin network
    BitcoinAddress bitcoin_address = 2;
  }
}

// A message to notify when a new validator is being added to the Vega network
message AddValidator {
  // The identifier of the validator
  Identifier id = 1;
}

// A message to notify when a validator is being removed from the Vega network
message RemoveValidator {
  // The identifier of the validator
  Identifier id = 1;
}

// An event related to validator management with foreign networks
message ValidatorEvent {
  // The source identifier of the event
  string source_id = 1;
  // The action
  oneof action {
    // Add a new validator
    AddValidator add = 1001;
    // Remove an existing validator
    RemoveValidator rm = 1002;
  }
}

message StakingEvent {
  // Index of the transaction
  uint64 index = 1;
  // The block in which the transaction was added
  uint64 block = 2;

  oneof action {
    StakeDeposited stake_deposited = 1001;
    StakeRemoved stake_removed = 1002;
  }
}

message StakeDeposited {
  // Ethereum Address of the user depositing stake (hex encode with 0x prefix)
  string ethereum_address = 1;
  // The public of the party receiving the stake deposit (hex encode)
  string vega_public_key = 2;
  // The amount deposited (base 10)
  string amount = 3;
  // The time at which the block was produced
  // will be used to inform the core at what time
  // the stake started to be available.
  int64 block_time = 4;
}

message StakeRemoved {
  // Ethereum address of the user removing stake (hex encode with 0x prefix)
  string ethereum_address = 1;
  // The public key of the party from which to remove stake (hex encode)
  string vega_public_key = 2;
  // The amount removed (base 10)
  string amount = 3;
  // The time at which the block was produced
  // will be used to inform the core at what time
  // the stake was made unavailable.
  int64 block_time = 4;
}