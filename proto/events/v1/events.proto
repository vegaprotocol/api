syntax = "proto3";

package vega.events.v1;
option java_package = "io.vegaprotocol.vega.events.v1";
option go_package = "code.vegaprotocol.io/vega/proto/events/v1";

import "markets.proto";
import "assets.proto";
import "governance.proto";
import "vega.proto";
import "oracles/v1/spec.proto";
import "oracles/v1/data.proto";
import "commands/v1/commands.proto";
import "commands/v1/validator_commands.proto";

// StakeLinking - an event notifying of stake being deposited or removed for a given party
// These events are emitted for every Staking deposit or removed accepted by the network
message StakeLinking {
  enum Type {
    // Default value
    TYPE_UNSPECIFIED = 0;
    // Indicate of a stake deposit instruction
    TYPE_LINK = 1;
    // Indicate of a stake remove instruction
    TYPE_UNLINK = 2;
  }

  enum Status {
    // Default value
    STATUS_UNSPECIFIED = 0;
    // Indicate an event waiting for confirmation from the vega network
    STATUS_PENDING = 1;
    // Indicate of an event accepted by the vega network
    STATUS_ACCEPTED = 2;
    // Indaicate of an event rejected by the vega network
    STATUS_REJECTED = 3;
  }

  // The internal ID for this staking event
  string id = 1;
  // The type of event
  Type type = 2;
  // The timestamps at which the event was emitted by ethereum
  int64 ts = 3;
  // The party to whom the event is directed at.
  string party = 4;
  // The amount of stake deposited or removed
  string amount = 5;
  // The status of the event
  Status status = 6;
  // The time at which the vega network finalized the state of the event
  int64 finalized_at = 7;
  // The hash of the transaction from which the events happen
  string tx_hash = 8;
}

message CheckpointEvent {
  string hash = 1;
  string block_hash = 2;
  uint64 block_height = 3;
}

message RewardPayoutEvent {
  string party = 1;
  string epoch_seq = 2;
  string asset = 3;
  string amount = 4;
  string percent_of_total_reward = 5;
  int64  timestamp = 6;
}

//DelegationBalanceEvent - updates on the delegation balance of a party to a node in the current epoch in effect
message DelegationBalanceEvent {
  string party = 1;
  string node_id = 2;
  uint64 amount = 3;
  string epoch_seq = 4;
}

//PendingDelegationBalanceEvent - updates on the delegation/undelegation balance of a party to a node for the next epoch
message PendingDelegationBalanceEvent {
  string party = 1;
  string node_id = 2;
  uint64 delegation_amount = 3;
  uint64 undelegation_amount = 4;
  string epoch_seq = 5;
}

// MarketEvent - the common denominator for all market events
// interface has a method to return a string for logging
message MarketEvent {
  // Market identifier for the event
  string market_id = 1;
  // Payload is a unique information string
  string payload = 2;
}

message TxErrorEvent {
  // Unique party identifier for the related party
  string party_id = 1;
  // An error message describing what went wrong
  string err_msg = 2;
  // The transaction that failed
  oneof transaction {
    commands.v1.OrderSubmission order_submission = 101;
    commands.v1.OrderAmendment order_amendment = 102;
    commands.v1.OrderCancellation order_cancellation = 103;
    commands.v1.ProposalSubmission proposal = 104;
    commands.v1.VoteSubmission vote_submission = 105;
    commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 106;
    commands.v1.WithdrawSubmission withdraw_submission = 107;
  }
}

// A time update event contains the latest time update from Vega blockchain
message TimeUpdate {
  // Timestamp containing latest update from Vega blockchain aka Vega-time
  int64 timestamp = 1;
}

// Epoch details
message EpochEvent {
  // Sequence number that increases by one each epoch
  uint64 seq = 1;
  // What time did this epoch start
  int64  start_time = 2;
  // What time should this epoch end
  int64  expire_time = 3;
  // What time did it actually end
  int64  end_time = 4;
}

// A transfer responses event contains a collection of transfer information
message TransferResponses {
  // One or more entries containing internal transfer information
  repeated TransferResponse responses = 1;
}

// A position resolution event contains information on distressed trades
message PositionResolution {
  // Market identifier for the event
  string market_id = 1;
  // Number of distressed traders
  int64 distressed = 2;
  // Number of close outs
  int64 closed = 3;
  // Mark price, as an integer, for example `123456` is a correctly
  // formatted price of `1.23456` assuming market configured to 5 decimal places
  uint64 mark_price = 4;
}

// A loss socialization event contains details on the amount of wins unable to be distributed
message LossSocialization {
  // Market identifier for the event
  string market_id = 1;
  // Party identifier (public key) for the event
  string party_id = 2;
  // Amount distributed
  int64 amount = 3;
}

// A trade settlement is part of the settle position event
message TradeSettlement {
  // Size of trade settlement
  int64 size = 1;
  // Price of settlement as an integer, for example `123456` is a correctly
  // formatted price of `1.23456` assuming market configured to 5 decimal places
  uint64 price = 2;
}

// A settle position event contains position settlement information for a party
message SettlePosition {
  // Market identifier for the event
  string market_id = 1;
  // Party identifier (public key) for the event
  string party_id = 2;
  // Price of settlement as an integer, for example `123456` is a correctly
  // formatted price of `1.23456` assuming market configured to 5 decimal places
  uint64 price = 3;
  // A collection of 1 or more trade settlements
  repeated TradeSettlement trade_settlements = 4;
}

// A settle distressed event contains information on distressed trading parties who are closed out
message SettleDistressed {
  // Note: Any PositionResolution event (market level) will most likely be followed by a number of these events

  // Market identifier for the event
  string market_id = 1;
  // Party identifier (public key) for the event
  string party_id = 2;
  // Margin value as an integer, for example `123456` is a correctly
  // formatted price of `1.23456` assuming market configured to 5 decimal places
  uint64 margin = 3;
  // Price as an integer, for example `123456` is a correctly
  // formatted price of `1.23456` assuming market configured to 5 decimal places
  uint64 price = 4;
}

// A market ticket event contains the time value for when a particular market was last processed on Vega
message MarketTick {
  // Market identifier for the event
  string id = 1;
  // Timestamp containing latest update from Vega blockchain aka Vega-time
  int64 time = 2;
}

// An auction event indicating a change in auction state, for example starting or ending an auction
message AuctionEvent {
  // Market identifier for the event
  string market_id = 1;
  // True if the event indicates an auction opening and False otherwise
  bool opening_auction = 2;
  // True if the event indicates leaving auction mode and False otherwise
  bool leave = 3;
  // Timestamp containing the start time for an auction
  int64 start = 4;
  // Timestamp containing the end time for an auction
  int64 end = 5;
  // the reason this market is/was in auction
  AuctionTrigger trigger = 6;
  // If an auction was ongoing, but was extended for whatever reason, this field will
  // be set to the trigger type indicating which component extended the auction
  AuctionTrigger extension_trigger = 7;
}

// A validator update event contains information about validator node
message ValidatorUpdate {
  // Vega public key of validator node
  string vega_pub_key = 1;
  // Ethereum public key of validator node
  string ethereum_address = 2;
  // Public key of Tendermint
  string tm_pub_key = 3;
  // URL with more info on the node
  string info_url = 4;
  // Country code (ISO 3166-1 alpha-2) for the location of the node
  string country = 5;
}

// An (event) bus event type is used to specify a type of event
// It has 2 styles of event:
// Single values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item
// Group values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items
enum BusEventType {
  // Default value, always invalid
  BUS_EVENT_TYPE_UNSPECIFIED = 0;
  // Events of ALL event types, used when filtering stream from event bus
  BUS_EVENT_TYPE_ALL = 1;
  // Event for blockchain time updates
  BUS_EVENT_TYPE_TIME_UPDATE = 2;
  // Event for when a transfer happens internally, contains the transfer information
  BUS_EVENT_TYPE_TRANSFER_RESPONSES = 3;
  // Event indicating position resolution has occurred
  BUS_EVENT_TYPE_POSITION_RESOLUTION = 4;
  // Event for order updates, both new and existing orders
  BUS_EVENT_TYPE_ORDER = 5;
  // Event for account updates
  BUS_EVENT_TYPE_ACCOUNT = 6;
  // Event for party updates
  BUS_EVENT_TYPE_PARTY = 7;
  // Event indicating a new trade has occurred
  BUS_EVENT_TYPE_TRADE = 8;
  // Event indicating margin levels have changed for a party
  BUS_EVENT_TYPE_MARGIN_LEVELS = 9;
  // Event for proposal updates (for governance)
  BUS_EVENT_TYPE_PROPOSAL = 10;
  // Event indicating a new vote has occurred (for governance)
  BUS_EVENT_TYPE_VOTE = 11;
  // Event for market data updates
  BUS_EVENT_TYPE_MARKET_DATA = 12;
  // Event for a new signature for a Vega node
  BUS_EVENT_TYPE_NODE_SIGNATURE = 13;
  // Event indicating loss socialisation occurred for a party
  BUS_EVENT_TYPE_LOSS_SOCIALIZATION = 14;
  // Event for when a position is being settled
  BUS_EVENT_TYPE_SETTLE_POSITION = 15;
  // Event for when a position is distressed
  BUS_EVENT_TYPE_SETTLE_DISTRESSED = 16;
  // Event indicating a new market was created
  BUS_EVENT_TYPE_MARKET_CREATED = 17;
  // Event for when an asset is added to Vega
  BUS_EVENT_TYPE_ASSET = 18;
  // Event indicating a market tick event
  BUS_EVENT_TYPE_MARKET_TICK = 19;
  // Event for when a withdrawal occurs
  BUS_EVENT_TYPE_WITHDRAWAL = 20;
  // Event for when a deposit occurs
  BUS_EVENT_TYPE_DEPOSIT = 21;
  // Event indicating a change in auction state, for example starting or ending an auction
  BUS_EVENT_TYPE_AUCTION = 22;
  // Event indicating a risk factor has been updated
  BUS_EVENT_TYPE_RISK_FACTOR = 23;
  // Event indicating a network parameter has been added or updated
  BUS_EVENT_TYPE_NETWORK_PARAMETER = 24;
  // Event indicating a liquidity provision has been created or updated
  BUS_EVENT_TYPE_LIQUIDITY_PROVISION = 25;
  // Event indicating a new market was created
  BUS_EVENT_TYPE_MARKET_UPDATED = 26;
  // Event indicating an oracle spec has been created or updated
  BUS_EVENT_TYPE_ORACLE_SPEC = 27;
  // Event indicating that an oracle data has been broadcast
  BUS_EVENT_TYPE_ORACLE_DATA = 28;
  // Event indicating that an delegation balance of a party to a node for current epoch has changed
  BUS_EVENT_TYPE_DELEGATION_BALANCE = 29;
  // Event indicating that an delegation balance of a party to a node for next epoch has changed
  BUS_EVENT_TYPE_PENDING_DELEGATION_BALANCE = 30;
  // Event indicating the start or end of an epoch
  BUS_EVENT_TYPE_EPOCH_UPDATE = 31;
  // Event indicating that validator node has been updated
  BUS_EVENT_TYPE_VALIDATOR_UPDATE = 32;
  // Event indicating a new staking event have been processed by the network
  BUS_EVENT_TYPE_STAKE_LINKING = 33;
  // Event indicating the payout of a reward has been initiated
  BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT = 34;
  // Event indicating a new checkpoint was created
  BUS_EVENT_TYPE_CHECKPOINT = 35;
  // Event indicating a market related event, for example when a market opens
  BUS_EVENT_TYPE_MARKET = 101;
  // Event used to report failed transactions back to a user, this is excluded from the ALL type
  BUS_EVENT_TYPE_TX_ERROR = 201;
}

// A bus event is a container for event bus events emitted by Vega
message BusEvent {
  // A unique event identifier for the message
  string id = 1;
  // The batch (or block) of transactions that the events relate to
  string block = 2;
  // The type of bus event (one of the list below)
  BusEventType type = 3;
  oneof event {
    // Time update events - See [TimeUpdate](#vega.TimeUpdate)
    TimeUpdate time_update = 101;
    // Transfer responses update events - See [TransferResponses](#vega.TransferResponses)
    TransferResponses transfer_responses = 102;
    // Position resolution events - See [PositionResolution](#vega.PositionResolution)
    PositionResolution position_resolution = 103;
    // Order events
    Order order = 104;
    // Account events
    Account account = 105;
    // Party events
    Party party = 106;
    // Trade events
    Trade trade = 107;
    // Margin level update events
    MarginLevels margin_levels = 108;
    // Proposal events (for governance)
    Proposal proposal = 109;
    // Vote events (for governance)
    Vote vote = 110;
    // Market data events
    MarketData market_data = 111;
    // Node signature events
    vega.commands.v1.NodeSignature node_signature = 112;
    // Loss socialization events - See [LossSocialization](#vega.LossSocialization)
    LossSocialization loss_socialization = 113;
    // Position settlement events - See [SettlePosition](#vega.SettlePosition)
    SettlePosition settle_position = 114;
    // Position distressed events - See [SettleDistressed](#vega.SettleDistressed)
    SettleDistressed settle_distressed = 115;
    // Market created events
    Market market_created = 116;
    // Asset events
    Asset asset = 117;
    // Market tick events - See [MarketTick](#vega.MarketTick)
    MarketTick market_tick = 118;
    // Withdrawal events
    Withdrawal withdrawal = 119;
    // Deposit events
    Deposit deposit = 120;
    // Auction events - See [AuctionEvent](#vega.AuctionEvent)
    AuctionEvent auction = 121;
    // Risk factor events
    RiskFactor risk_factor = 122;
    // Network parameter events
    NetworkParameter network_parameter = 123;
    // LiquidityProvision  events
    LiquidityProvision liquidity_provision = 124;
    // Market created events
    Market market_updated = 125;
    // OracleSpec events
    oracles.v1.OracleSpec oracle_spec = 126;
    // OracleData events
    oracles.v1.OracleData oracle_data = 127;
    // Delegation balance events
    DelegationBalanceEvent delegation_balance = 129;
    // Pending delegation balance events
    PendingDelegationBalanceEvent pending_delegation_balance = 130;
    // Epoch update events - See [Epoch](#vega.Epoch)
    EpochEvent epoch_event = 131;
    // Validator update events
    ValidatorUpdate validator_update = 132;
    // Staking event
    StakeLinking stake_linking = 133;
    // Reward payout event
    RewardPayoutEvent reward_payout = 134;
    // Checkpoint was created
    CheckpointEvent checkpoint = 135;
    // Market tick events - See [MarketEvent](#vega.MarketEvent)
    MarketEvent market = 1001;
    // Transaction error events, not included in the ALL event type
    TxErrorEvent tx_err_event = 2001;
  }
}
