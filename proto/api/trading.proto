syntax = "proto3";

option go_package = "code.vegaprotocol.io/vega/proto/api";

import "vega.proto";
import "markets.proto";
import "governance.proto";
import "assets.proto";
import "events/v1/events.proto";
import "oracles/v1/spec.proto";
import "oracles/v1/data.proto";
import "commands/v1/commands.proto";
import "commands/v1/transaction.proto";
import "commands/v1/validator_commands.proto";

package api.v1;
option java_package = "io.vegaprotocol.vega.api";

import "github.com/mwitkow/go-proto-validators/validator.proto";

service TradingService {
  // Submit a signed transaction (v2)
  rpc SubmitTransactionV2(SubmitTransactionV2Request) returns (SubmitTransactionV2Response);
  // Propagate a chain event
  rpc PropagateChainEvent(PropagateChainEventRequest) returns (PropagateChainEventResponse);
  // Get Statistics on Vega
  rpc Statistics(StatisticsRequest) returns (StatisticsResponse);
  // Get the height of the last tendermint block
  rpc LastBlockHeight(LastBlockHeightRequest) returns (LastBlockHeightResponse);
  // Get Time
  rpc GetVegaTime(GetVegaTimeRequest) returns (GetVegaTimeResponse);
  // Subscribe to a stream of events from the core
  rpc ObserveEventBus(stream ObserveEventBusRequest) returns (stream ObserveEventBusResponse);
}

// Request for a new event sent by the blockchain queue to be propagated on Vega
message PropagateChainEventRequest {
  // Chain event
  bytes event = 1;
  // Public key
  string pub_key = 2;
  // Signature
  bytes signature = 3;
}

// Response for a new event sent by the blockchain queue to be propagated on Vega
message PropagateChainEventResponse {
  // Success will be true if the event was accepted by the node,
  // **Important** - success does not mean that the event is confirmed by consensus
  bool success = 1;
}

// Request for submitting a transaction v2 on Vega
message SubmitTransactionV2Request {
  // Blockchain transaction type
  enum Type {
    TYPE_UNSPECIFIED = 0;
    // The transaction will be submitted without waiting for response
    TYPE_ASYNC = 1;
    // The transaction will be submitted, and blocking until the
    // tendermint mempool return a response
    TYPE_SYNC = 2;
    // The transaction will submitted, and blocking until the tendermint
    // network will have committed it into a block
    TYPE_COMMIT = 3;
  }

  // A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain
  vega.commands.v1.Transaction tx = 1;
  // Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
  Type type = 2;
}

// Response for submitting a transaction v2 on Vega
message SubmitTransactionV2Response {
  // Success will be true if the transaction was accepted by the node,
  // **Important** - success does not mean that the event is confirmed by consensus
  bool success = 1;
}


// Request for the current time of the vega network
message GetVegaTimeRequest {}

// Response for the current consensus coordinated time on the Vega network, referred to as "VegaTime"
message GetVegaTimeResponse {
  // Timestamp representation of current VegaTime as represented in
  // Nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`
  int64 timestamp = 1;
}

// Request to subscribe to a stream of one or more event types from the Vega event bus
message ObserveEventBusRequest {
  // One or more types of event, required field
  repeated vega.events.v1.BusEventType type = 1;
  // Market identifier, optional field
  string market_id = 2;
  // Party identifier, optional field
  string party_id = 3;
  // Batch size, optional field -
  // If not specified, any events received will be sent immediately. If the client is not ready
  // for the next data-set, data may be dropped a number of times, and eventually the stream is closed.
  // if specified, the first batch will be sent when ready. To receive the next set of events, the client
  // must write an `ObserveEventBatch` message on the stream to flush the buffer.
  // If no message is received in 5 seconds, the stream is closed.
  // Default: 0, send any and all events when they are available.
  int64 batch_size = 4;
}

// Response to a subscribed stream of events from the Vega event bus
message ObserveEventBusResponse {
  // One or more events
  repeated vega.events.v1.BusEvent events = 1;
}

// A a request for statistics about the Vega network
message StatisticsRequest {}

message StatisticsResponse {
  Statistics statistics = 1;
}

// Vega domain specific statistics as reported by the node the caller is connected to
message Statistics {
  // Current block height as reported by the Vega blockchain
  uint64 block_height = 1;
  // Current backlog length (number of transactions) that are waiting to be included in a block
  uint64 backlog_length = 2;
  // Total number of connected peers to this node
  uint64 total_peers = 3;
  // Genesis block date and time formatted in ISO-8601 datetime format with nanosecond precision
  string genesis_time = 4;
  // Current system date and time formatted in ISO-8601 datetime format with nanosecond precision
  string current_time = 5;
  // Current Vega date and time formatted in ISO-8601 datetime format with nanosecond precision
  string vega_time = 6;
  // Status of the connection to the Vega blockchain
  // - See [`ChainStatus`](#vega.ChainStatus)
  vega.ChainStatus status = 7;
  // Transactions per block
  uint64 tx_per_block = 8;
  // Average transaction size in bytes
  uint64 average_tx_bytes = 9;
  // Average orders per block
  uint64 average_orders_per_block = 10;
  // Trades emitted per second
  uint64 trades_per_second = 11;
  // Orders processed per second
  uint64 orders_per_second = 12;
  // Total markets on this Vega network
  uint64 total_markets = 13;
  // Total number of order amendments since genesis (on all markets)
  uint64 total_amend_order = 16;
  // Total number of order cancellations since genesis (on all markets)
  uint64 total_cancel_order = 17;
  // Total number of order submissions since genesis (on all markets)
  uint64 total_create_order = 18;
  // Total number of orders processed since genesis (on all markets)
  uint64 total_orders = 19;
  // Total number of trades emitted since genesis (on all markets)
  uint64 total_trades = 20;
  // Current number of stream subscribers to order data
  uint32 order_subscriptions = 21;
  // Current number of stream subscribers to trade data
  uint32 trade_subscriptions = 22;
  // Current number of stream subscribers to candle-stick data
  uint32 candle_subscriptions = 23;
  // Current number of stream subscribers to market depth data
  uint32 market_depth_subscriptions = 24;
  // Current number of stream subscribers to positions data
  uint32 positions_subscriptions = 25;
  // Current number of stream subscribers to account data
  uint32 account_subscriptions = 26;
  // Current number of stream subscribers to market data
  uint32 market_data_subscriptions = 27;
  // The version hash of the Vega node software
  string app_version_hash = 28;
  // The version of the Vega node software
  string app_version = 29;
  // The version of the underlying Vega blockchain
  string chain_version = 30;
  // Current block duration, in nanoseconds
  uint64 block_duration = 31;
  // Total uptime for this node formatted in ISO-8601 datetime format with nanosecond precision
  string uptime = 32;
  // Unique identifier for the underlying Vega blockchain
  string chain_id = 33;
  // Current number of stream subscribers to market depth update data
  uint32 market_depth_updates_subscriptions = 34;
}

// A request to get the height of the very last block processed
// by tendermint
message LastBlockHeightRequest {}

// A response with the height of the last block processed by
// tendermint
message LastBlockHeightResponse {
  uint64 height = 1;
}
